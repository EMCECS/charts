---
suite: test ecs-cluster resource
templates:
  - ecs-cluster.yaml
  - svc_common_vars.yaml
tests:
  - it: should create a custom resource
    set:
      global.monitoring.enabled: false
    asserts:
      - isKind:
          of: ECSCluster
  - it: should have a default log agent image
    set:
      global.monitoring.enabled: false
    asserts:
    - equal:
        path: spec.syslogAgent.image.repository
        value: emccorp/rsyslog
    - equal:
        path: spec.syslogAgent.image.pullPolicy
        value: IfNotPresent
  - it: should customize the log agent
    set:
      global.monitoring.enabled: false
      global.registry: my-registry
      syslogAgent.image.repository: my-log-agent
      syslogAgent.image.tag: latest
      syslogAgent.image.pullPolicy: IfNotPresent
    asserts:
      - equal:
          path: spec.syslogAgent.image.repository
          value: my-registry/my-log-agent
      - equal:
          path: spec.syslogAgent.image.tag
          value: latest
      - equal:
          path: spec.syslogAgent.image.pullPolicy
          value: IfNotPresent
  - it: should customize the storage storage
    set:
      global.monitoring.enabled: false
      global.registry: my-registry
      storageServer.image.repository: my-ss
      storageServer.image.tag: latest
      storageServer.image.pullPolicy: IfNotPresent
    asserts:
    - equal:
        path: spec.storageServer.image.repository
        value: my-registry/my-ss
    - equal:
        path: spec.storageServer.image.tag
        value: latest
    - equal:
        path: spec.storageServer.image.pullPolicy
        value: IfNotPresent
  - it: should customize SC for all persistance fields
    set:
      global.monitoring.enabled: false
      storageClassName: my-sc
    asserts:
    - equal:
        path: spec.storageServer.volumes.storageClassName
        value: my-sc
    - equal:
        path: spec.atlas.persistence.spec.storageClassName
        value: my-sc
    - equal:
        path: spec.zookeeper.persistence.spec.storageClassName
        value: my-sc
  # when we have separate SC for a service
  - it: should customize SC for SS persistance field
    set:
      global.monitoring.enabled: false
      storageServer.persistence.storageClassName: my-sc
    asserts:
    - equal:
        path: spec.storageServer.volumes.storageClassName
        value: my-sc
  - it: should customize SC for Atlas persistance field
    set:
      global.monitoring.enabled: false
      atlas.persistence.storageClassName: my-sc
    asserts:
    - equal:
        path: spec.atlas.persistence.spec.storageClassName
        value: my-sc
  - it: should customize SC for Zookeeper persistance field
    set:
      global.monitoring.enabled: false
      zookeeper.persistence.storageClassName: my-sc
    asserts:
    - equal:
        path: spec.zookeeper.persistence.spec.storageClassName
        value: my-sc

  # when we have global SC and separate for a service
  - it: should customize separate SC for SS with global SC
    set:
      global.monitoring.enabled: false
      storageClassName: my-sc
      storageServer.persistence.storageClassName: my-ss-sc
    asserts:
    - equal:
        path: spec.storageServer.volumes.storageClassName
        value: my-ss-sc
    - equal:
        path: spec.atlas.persistence.spec.storageClassName
        value: my-sc
    - equal:
        path: spec.zookeeper.persistence.spec.storageClassName
        value: my-sc
  - it: should customize separate SC for Atlas with global SC
    set:
      global.monitoring.enabled: false
      storageClassName: my-sc
      atlas.persistence.storageClassName: my-atlas-sc
    asserts:
    - equal:
        path: spec.storageServer.volumes.storageClassName
        value: my-sc
    - equal:
        path: spec.atlas.persistence.spec.storageClassName
        value: my-atlas-sc
    - equal:
        path: spec.zookeeper.persistence.spec.storageClassName
        value: my-sc
  - it: should customize separate SC for Zookeeper with global SC
    set:
      global.monitoring.enabled: false
      storageClassName: my-sc
      zookeeper.persistence.storageClassName: my-zookeeper-sc
    asserts:
    - equal:
        path: spec.storageServer.volumes.storageClassName
        value: my-sc
    - equal:
        path: spec.atlas.persistence.spec.storageClassName
        value: my-sc
    - equal:
        path: spec.zookeeper.persistence.spec.storageClassName
        value: my-zookeeper-sc
  - it: should have a default deos-events image
    set:
      global.monitoring.enabled: false
    asserts:
    - equal:
        path: spec.deosEvents.image.repository
        value: emccorp/deos-events
    - equal:
        path: spec.deosEvents.image.pullPolicy
        value: IfNotPresent
    - equal:
        path: spec.deosEvents.pullFreq
        value: 30
  - it: should have deos-events pullFreq changes
    set:
      global.monitoring.enabled: false
      deosEvents.pullFreq: 1
    asserts:
    - equal:
        path: spec.deosEvents.pullFreq
        value: 1
  - it: should have default deos-events pullFreq
    set:
      global.monitoring.enabled: false
      deosEvents.pullFreq: null
    asserts:
    - equal:
        path: spec.deosEvents.pullFreq
        value: 30
  - it: should create a single node atlas cluster
    set:
      global.monitoring.enabled: false
      performanceProfile: small
    asserts:
    - equal:
        path: spec.atlas.replicas
        value: 1
  - it: should create a three node atlas cluster
    set:
      global.monitoring.enabled: false
      performanceProfile: large
    asserts:
    - equal:
        path: spec.atlas.replicas
        value: 3
  - it: should create a custom sized atlas cluster
    set:
      global.monitoring.enabled: false
      performanceProfile: large
      atlas:
        replicas: 5
    asserts:
    - equal:
        path: spec.atlas.replicas
        value: 5
  - it: s3 should have a default SelfSigned certifcate
    set:
      global.monitoring.enabled: false
    asserts:
    - equal:
        path: spec.s3.tls.certificateType
        value: SelfSigned
    - equal:
        path: spec.s3.tls.certificate
        value: {}
  - it: s3 should have a KubernetesSigned certifcate
    set:
      global.monitoring.enabled: false
      s3.tls.certificateType: KubernetesSigned
      s3.tls.signingRequest.commonName: commonName
      s3.tls.signingRequest.email: email
      s3.tls.signingRequest.keyAlgorithm: RSA
      s3.tls.signingRequest.keySize: 2048
      s3.tls.signingRequest.names.country: country
      s3.tls.signingRequest.names.locality: locality
      s3.tls.signingRequest.names.organization: organization
      s3.tls.signingRequest.names.organizationalUnit: organizationalUnit
      s3.tls.signingRequest.names.state: state
    asserts:
    - equal:
        path: spec.s3.tls.certificateType
        value: KubernetesSigned
    - equal:
        path: spec.s3.tls.signingRequest.commonName
        value: "commonName"
    - equal:
        path: spec.s3.tls.signingRequest.email
        value: "email"
    - equal:
        path: spec.s3.tls.signingRequest.keyAlgorithm
        value: "RSA"
    - equal:
        path: spec.s3.tls.signingRequest.keySize
        value: 2048
    - equal:
        path: spec.s3.tls.signingRequest.names.country
        value: "country"
    - equal:
        path: spec.s3.tls.signingRequest.names.locality
        value: "locality"
    - equal:
        path: spec.s3.tls.signingRequest.names.organization
        value: "organization"
    - equal:
        path: spec.s3.tls.signingRequest.names.organizationalUnit
        value: "organizationalUnit"
    - equal:
        path: spec.s3.tls.signingRequest.names.state
        value: "state"
  - it: s3 should have a ExternallySigned certifcate
    set:
      global.monitoring.enabled: false
      s3.tls.certificateType: ExternallySigned
      s3.tls.certificate.publicKey: publicKey
      s3.tls.certificate.privateKey: privateKey
      s3.tls.certificate.password: password
      s3.tls.certificate.authority: authority
    asserts:
    - equal:
        path: spec.s3.tls.certificateType
        value: ExternallySigned
    - equal:
        path: spec.s3.tls.certificate.publicKey
        value: "publicKey"
    - equal:
        path: spec.s3.tls.certificate.privateKey
        value: "privateKey"
    - equal:
        path: spec.s3.tls.certificate.password
        value: "password"
    - equal:
        path: spec.s3.tls.certificate.authority
        value: "authority"
  - it: management-gateway should have a default SelfSigned certifcate
    set:
      global.monitoring.enabled: false
    asserts:
    - equal:
        path: spec.s3.tls.certificateType
        value: SelfSigned
    - equal:
        path: spec.s3.tls.certificate
        value: {}

  - it: managementGateway should have a KubernetesSigned certifcate
    set:
      global.monitoring.enabled: false
      managementGateway.tls.certificateType: KubernetesSigned
      managementGateway.tls.signingRequest.commonName: commonName
      managementGateway.tls.signingRequest.email: email
      managementGateway.tls.signingRequest.keyAlgorithm: RSA
      managementGateway.tls.signingRequest.keySize: 2048
      managementGateway.tls.signingRequest.names.country: country
      managementGateway.tls.signingRequest.names.locality: locality
      managementGateway.tls.signingRequest.names.organization: organization
      managementGateway.tls.signingRequest.names.organizationalUnit: organizationalUnit
      managementGateway.tls.signingRequest.names.state: state
    asserts:
    - equal:
        path: spec.managementGateway.tls.certificateType
        value: KubernetesSigned
    - equal:
        path: spec.managementGateway.tls.signingRequest.commonName
        value: "commonName"
    - equal:
        path: spec.managementGateway.tls.signingRequest.email
        value: "email"
    - equal:
        path: spec.managementGateway.tls.signingRequest.keyAlgorithm
        value: "RSA"
    - equal:
        path: spec.managementGateway.tls.signingRequest.keySize
        value: 2048
    - equal:
        path: spec.managementGateway.tls.signingRequest.names.country
        value: "country"
    - equal:
        path: spec.managementGateway.tls.signingRequest.names.locality
        value: "locality"
    - equal:
        path: spec.managementGateway.tls.signingRequest.names.organization
        value: "organization"
    - equal:
        path: spec.managementGateway.tls.signingRequest.names.organizationalUnit
        value: "organizationalUnit"
    - equal:
        path: spec.managementGateway.tls.signingRequest.names.state
        value: "state"
  - it: managementGateway should have a ExternallySigned certifcate
    set:
      global.monitoring.enabled: false
      managementGateway.tls.certificateType: ExternallySigned
      managementGateway.tls.certificate.publicKey: publicKey
      managementGateway.tls.certificate.privateKey: privateKey
      managementGateway.tls.certificate.password: password
      managementGateway.tls.certificate.authority: authority
    asserts:
    - equal:
        path: spec.managementGateway.tls.certificateType
        value: ExternallySigned
    - equal:
        path: spec.managementGateway.tls.certificate.publicKey
        value: "publicKey"
    - equal:
        path: spec.managementGateway.tls.certificate.privateKey
        value: "privateKey"
    - equal:
        path: spec.managementGateway.tls.certificate.password
        value: "password"
    - equal:
        path: spec.managementGateway.tls.certificate.authority
        value: "authority"
  - it: management-gateway should have a default SelfSigned certifcate
    set:
      global.monitoring.enabled: false
    asserts:
    - equal:
        path: spec.managementGateway.tls.certificateType
        value: SelfSigned
    - equal:
        path: spec.managementGateway.tls.certificate
        value: {}
  - it: eventsvc should have EVENTSVC_APP_NAME env variable
    set:
      global.monitoring.enabled: false
    asserts:
    - equal:
        path: spec.event.pod.env[0].name
        value: EVENTSVC_APP_NAME
    - equal:
        path: spec.event.pod.env[0].value
        value: RELEASE-NAME
    - equal:
        path: spec.event.pod.env[1].name
        value: NAMESPACE
    - equal:
        path: spec.event.pod.env[1].value
        value: NAMESPACE
  - it: labels and env for logging
    set:
      global.monitoring.enabled: false
    asserts:
      - equal:
          path: spec.event.labels
          value:
            app.kubernetes.io/namespace: NAMESPACE
            objectscale.dellemc.com/logging-inject: "true"
            objectscale.dellemc.com/logging-release-name: RELEASE-NAME

      - equal:
          path: spec.blob.labels
          value:
            app.kubernetes.io/namespace: NAMESPACE
            objectscale.dellemc.com/logging-inject: "true"
            objectscale.dellemc.com/logging-release-name: RELEASE-NAME

      - equal:
          path: spec.chunkManager.labels
          value:
            app.kubernetes.io/namespace: NAMESPACE
            objectscale.dellemc.com/logging-inject: "true"
            objectscale.dellemc.com/logging-release-name: RELEASE-NAME

      - equal:
          path: spec.control.labels
          value:
            app.kubernetes.io/namespace: NAMESPACE
            objectscale.dellemc.com/logging-inject: "true"
            objectscale.dellemc.com/logging-release-name: RELEASE-NAME

      - equal:
          path: spec.controlPlane.labels
          value:
            app.kubernetes.io/namespace: NAMESPACE
            objectscale.dellemc.com/logging-inject: "true"
            objectscale.dellemc.com/logging-release-name: RELEASE-NAME

      - equal:
          path: spec.diagnostic.labels
          value:
            app.kubernetes.io/namespace: NAMESPACE
            objectscale.dellemc.com/logging-inject: "true"
            objectscale.dellemc.com/logging-release-name: RELEASE-NAME

      - equal:
          path: spec.geoReceiver.labels
          value:
            app.kubernetes.io/namespace: NAMESPACE
            objectscale.dellemc.com/logging-inject: "true"
            objectscale.dellemc.com/logging-release-name: RELEASE-NAME

      - equal:
          path: spec.metering.labels
          value:
            app.kubernetes.io/namespace: NAMESPACE
            objectscale.dellemc.com/logging-inject: "true"
            objectscale.dellemc.com/logging-release-name: RELEASE-NAME

      - equal:
          path: spec.objectsvc.labels
          value:
            app.kubernetes.io/namespace: NAMESPACE
            objectscale.dellemc.com/logging-inject: "true"
            objectscale.dellemc.com/logging-release-name: RELEASE-NAME

      - equal:
          path: spec.resource.labels
          value:
            app.kubernetes.io/namespace: NAMESPACE
            objectscale.dellemc.com/logging-inject: "true"
            objectscale.dellemc.com/logging-release-name: RELEASE-NAME

      - equal:
          path: spec.recordManager.labels
          value:
            app.kubernetes.io/namespace: NAMESPACE
            objectscale.dellemc.com/logging-inject: "true"
            objectscale.dellemc.com/logging-release-name: RELEASE-NAME

      - equal:
          path: spec.s3.labels
          value:
            app.kubernetes.io/namespace: NAMESPACE
            objectscale.dellemc.com/logging-inject: "true"
            objectscale.dellemc.com/logging-release-name: RELEASE-NAME

      - equal:
          path: spec.storageManagement.labels
          value:
            app.kubernetes.io/namespace: NAMESPACE
            objectscale.dellemc.com/logging-inject: "true"
            objectscale.dellemc.com/logging-release-name: RELEASE-NAME

      - equal:
          path: spec.spaceReclaimer.labels
          value:
            app.kubernetes.io/namespace: NAMESPACE
            objectscale.dellemc.com/logging-inject: "true"
            objectscale.dellemc.com/logging-release-name: RELEASE-NAME

      - equal:
          path: spec.storageServerManager.labels
          value:
            app.kubernetes.io/namespace: NAMESPACE
            objectscale.dellemc.com/logging-inject: "true"
            objectscale.dellemc.com/logging-release-name: RELEASE-NAME
      - equal:
          path: spec.storageServer.labels
          value:
            app.kubernetes.io/namespace: NAMESPACE
            objectscale.dellemc.com/logging-inject: "true"
            objectscale.dellemc.com/logging-release-name: RELEASE-NAME
