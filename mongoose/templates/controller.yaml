{{- define "mdrivers" -}}
{{- $dr := dict "drivers" (list) -}}
{{- $name := .Release.Name -}}
{{- range int .Values.replicas | until -}}
{{- $noop := printf "%s-driver-%d.%s-driver" $name . $name | append $dr.drivers | set $dr "drivers" -}}
{{- end -}}
{{- join "," $dr.drivers -}}
{{- end -}}
apiVersion: v1
kind: Pod
metadata:
  name: {{ .Release.Name }}-controller
  namespace: {{ .Release.Namespace }}
spec:
  restartPolicy: OnFailure
  containers:
  - name: controller
    image: {{ .Values.controller.image.name }}:{{ .Values.controller.image.tag }}
    imagePullPolicy: {{ .Values.controller.image.pullPolicy }}
    command:
    - "/bin/sh"
    - "-c"
    args:
    - >
      mkdir -p /conf
      && echo 'var createConfig = {}; var readConfig = {"load": {"op": {"type": "read"}}}; PipelineLoad.append(createConfig).append(readConfig).run();' > /conf/mongoose-chain.js
      && /opt/mongoose/entrypoint.sh
      --run-scenario=/conf/mongoose-chain.js
      --load-step-limit-time=3m
      --load-op-limit-fail-count={{ .Values.stepLimitFailCount }}
      --load-step-node-addrs="{{ template "mdrivers" . }}"
      --item-data-size={{ .Values.load.itemDataSize }}
      --storage-driver-limit-concurrency={{ .Values.load.concurrencyLimit }}
      --storage-net-timeoutMilliSec={{ required "load.netTimeout is required" .Values.load.netTimeout }}
      --storage-auth-uid={{ required "target.accessKey is required" .Values.target.accessKey }}
      --storage-auth-secret={{ required ".target.secretKey is required" .Values.target.secretKey }}
      --storage-net-node-addrs={{ required "target.addresses is required" .Values.target.addresses }}
      --storage-net-node-port={{ required "target.port is required" .Values.target.port }}

