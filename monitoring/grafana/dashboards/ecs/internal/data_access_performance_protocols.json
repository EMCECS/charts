{
  "__inputs": [
    {
      "name": "DS_FLUX",
      "label": "Flux",
      "description": "",
      "type": "datasource",
      "pluginId": "grafana-influxdb-flux-datasource",
      "pluginName": "Flux (InfluxDB) [BETA]"
    }
  ],
  "__requires": [
    {
      "type": "grafana",
      "id": "grafana",
      "name": "Grafana",
      "version": "6.2.5"
    },
    {
      "type": "datasource",
      "id": "grafana-influxdb-flux-datasource",
      "name": "Flux (InfluxDB) [BETA]",
      "version": "5.2.11"
    },
    {
      "type": "panel",
      "id": "graph",
      "name": "Graph",
      "version": ""
    },
    {
      "type": "panel",
      "id": "table",
      "name": "Table",
      "version": ""
    }
  ],
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": "-- Grafana --",
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "gnetId": null,
  "graphTooltip": 0,
  "id": null,
  "iteration": 1575567178557,
  "links": [
    {
      "asDropdown": true,
      "icon": "external link",
      "keepTime": true,
      "tags": [
        "Data Access Performance"
      ],
      "title": "Related dashboards",
      "type": "dashboards"
    }
  ],
  "panels": [
    {
      "columns": [],
      "datasource": "${DS_FLUX}",
      "fontSize": "110%",
      "gridPos": {
        "h": 3,
        "w": 24,
        "x": 0,
        "y": 0
      },
      "id": 157,
      "links": [],
      "options": {},
      "pageSize": null,
      "scroll": false,
      "showHeader": true,
      "sort": {
        "col": 3,
        "desc": true
      },
      "styles": [
        {
          "alias": "Time",
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "pattern": "Time",
          "type": "hidden"
        },
        {
          "alias": "",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "mappingType": 1,
          "pattern": "Measurement",
          "thresholds": [],
          "type": "hidden",
          "unit": "short"
        },
        {
          "alias": "",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "mappingType": 1,
          "pattern": "Field",
          "thresholds": [],
          "type": "hidden",
          "unit": "short"
        },
        {
          "alias": "System Failures",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": null,
          "mappingType": 1,
          "pattern": "b_system_errors",
          "thresholds": [],
          "type": "number",
          "unit": "locale"
        },
        {
          "alias": "Successful requests",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": null,
          "mappingType": 1,
          "pattern": "a_succeed_request_counter",
          "thresholds": [],
          "type": "number",
          "unit": "locale"
        },
        {
          "alias": "",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "mappingType": 1,
          "pattern": "Value",
          "thresholds": [],
          "type": "hidden",
          "unit": "short"
        },
        {
          "alias": "User Failures",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": null,
          "mappingType": 1,
          "pattern": "c_user_errors",
          "thresholds": [],
          "type": "number",
          "unit": "locale"
        },
        {
          "alias": "Failures % Rate",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 3,
          "mappingType": 1,
          "pattern": "d_error_rate",
          "thresholds": [],
          "type": "number",
          "unit": "percentunit"
        },
        {
          "alias": "",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "decimals": 2,
          "pattern": "/.*/",
          "thresholds": [],
          "type": "number",
          "unit": "short"
        }
      ],
      "targets": [
        {
          "query": "// need this 'default' table to substitute possibly missing sys_errors table if errors were not registered by ECS service\nimport \"csv\"\nimport \"ecs\"\ndefault_sys_errors = csv.from(csv:\"#datatype,string,long,string,long\n#group,false,false,true,false\n#default,_result,,,\n,result,table,_field,_value\n,,100,succeed_request_counter_i,0\n,,101,system_errors_i,0\n,,102,user_errors_i,0\")\n\nwi = ecs.get_dyn_downsample_info(start: $__range_from_s, stop: $__range_to_s, max: 200, start_offset: 0, stop_offset: 0, measurement: \"cq_performance_transaction_head_delta\")\ntr_head_mn = wi.measurement\ner_head_mn = if wi.in_downsample == 1 then \"cq_performance_error_head_delta_downsampled\" else \"cq_performance_error_head_delta\"\n\ntotals = from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == tr_head_mn and r.head =~ /^${head:pipe}$/)\n|> range(start: wi.start, stop: wi.stop)\n// following 2 lines are to fix MONITORING-568\n|> rename(columns: {_value: \"_value\"})\n|> range(start: wi.start, stop: wi.stop)\n|> keep(columns:[\"_time\", \"_field\", \"_value\"])\n|> sum()\n|> fill(column: \"_value\", value: 0)\n\nsys_errors = from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == er_head_mn and r.head =~ /^${head:pipe}$/)\n|> range(start: wi.start, stop: wi.stop)\n// following 2 lines are to fix MONITORING-568\n|> rename(columns: {_value: \"_value\"})\n|> range(start: wi.start, stop: wi.stop)\n|> keep(columns:[\"_time\", \"_field\", \"_value\"])\n|> sum()\n|> fill(column: \"_value\", value: 0)\n\nunion(tables: [default_sys_errors, totals, sys_errors])\n|> pivot(rowKey:[], columnKey: [\"_field\"], valueColumn: \"_value\")\n// map does not save non-group columns\n|> map(fn:(r) => ({\na_succeed_request_counter: r.succeed_request_counter_i,\nb_system_errors: r.system_errors_i,\nc_user_errors: r.user_errors_i,\nd_error_rate: float(v:r.system_errors_i+r.user_errors_i)/\nfloat(v:r.system_errors_i+r.user_errors_i+r.succeed_request_counter_i\n// this trick is needed because failed+succeed can be 0, avoid printing NaN in this case\n+int(v:bool(v:(r.system_errors_i+r.user_errors_i+r.succeed_request_counter_i)==0)))}))\n\n",
          "refId": "A",
          "resultFormat": "table"
        }
      ],
      "title": "Transaction Summary for $head",
      "transform": "table",
      "type": "table"
    },
    {
      "aliasColors": {},
      "bars": false,
      "dashLength": 10,
      "dashes": false,
      "datasource": "${DS_FLUX}",
      "decimals": null,
      "description": "Rate of successful requests and failures per second",
      "fill": 1,
      "gridPos": {
        "h": 9,
        "w": 12,
        "x": 0,
        "y": 3
      },
      "id": 147,
      "legend": {
        "alignAsTable": false,
        "avg": true,
        "current": false,
        "max": true,
        "min": true,
        "rightSide": false,
        "show": true,
        "sortDesc": true,
        "total": false,
        "values": true
      },
      "lines": true,
      "linewidth": 2,
      "links": [],
      "nullPointMode": "null",
      "options": {},
      "percentage": false,
      "pointradius": 2,
      "points": true,
      "renderer": "flot",
      "seriesOverrides": [],
      "spaceLength": 10,
      "stack": false,
      "steppedLine": false,
      "targets": [
        {
          "query": "import \"ecs\"\n\nwi = ecs.get_dyn_downsample_info(start: $__range_from_s, stop: $__range_to_s, max: 200\n                                 measurement: \"cq_performance_transaction_head\")\nmn = wi.measurement\n\nfrom(bucket: \"monitoring_vdc\") |> filter(fn: (r) => r._measurement == mn and r.head =~ /^${head:pipe}$/)\n  |> range(start: wi.start, stop: wi.stop)  \n  |> keep(columns:[\"_time\", \"_field\", \"_value\"])  \n  |> window(every: wi.duration)\n  |> mean()\n  |> group(columns:[\"_field\"]) \n  |> rename(columns: {_start: \"_time\"})\n",
          "refId": "A"
        }
      ],
      "thresholds": [],
      "timeFrom": null,
      "timeRegions": [],
      "timeShift": null,
      "title": "TPS (success/failure)",
      "tooltip": {
        "shared": true,
        "sort": 0,
        "value_type": "individual"
      },
      "type": "graph",
      "xaxis": {
        "buckets": null,
        "mode": "time",
        "name": null,
        "show": true,
        "values": []
      },
      "yaxes": [
        {
          "decimals": null,
          "format": "short",
          "label": "",
          "logBase": 1,
          "max": null,
          "min": "0",
          "show": true
        },
        {
          "format": "short",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        }
      ],
      "yaxis": {
        "align": false,
        "alignLevel": null
      }
    },
    {
      "aliasColors": {
        " total_read_requests_size": "#6ed0e0",
        " total_write_requests_size": "#e24d42"
      },
      "bars": false,
      "dashLength": 10,
      "dashes": false,
      "datasource": "${DS_FLUX}",
      "decimals": null,
      "description": "Data access bandwidth of successful requests per second",
      "fill": 4,
      "gridPos": {
        "h": 9,
        "w": 12,
        "x": 12,
        "y": 3
      },
      "id": 155,
      "legend": {
        "alignAsTable": false,
        "avg": true,
        "current": true,
        "max": true,
        "min": true,
        "rightSide": false,
        "show": true,
        "sortDesc": true,
        "total": false,
        "values": true
      },
      "lines": true,
      "linewidth": 2,
      "links": [],
      "nullPointMode": "null",
      "options": {},
      "percentage": false,
      "pointradius": 2,
      "points": false,
      "renderer": "flot",
      "seriesOverrides": [],
      "spaceLength": 10,
      "stack": true,
      "steppedLine": false,
      "targets": [
        {
          "query": "import \"ecs\"\n\nwi = ecs.get_dyn_downsample_info(start: $__range_from_s, stop: $__range_to_s, max: 200\n                                 measurement: \"cq_performance_throughput_head\")\nmn = wi.measurement\n\nfrom(bucket: \"monitoring_vdc\") |> filter(fn: (r) => r._measurement == mn and r.head =~ /^${head:pipe}$/)\n|> range(start: wi.start, stop: wi.stop) \n|> keep(columns:[\"_time\", \"_field\", \"_value\"]) \n|> window(every: wi.duration)\n|> mean()\n|> group(columns:[\"_field\"])\n|> rename(columns: {_start: \"_time\"})\n\n",
          "refId": "A"
        }
      ],
      "thresholds": [],
      "timeFrom": null,
      "timeRegions": [],
      "timeShift": null,
      "title": "Bandwidth (read/write)",
      "tooltip": {
        "shared": true,
        "sort": 0,
        "value_type": "individual"
      },
      "type": "graph",
      "xaxis": {
        "buckets": null,
        "mode": "time",
        "name": null,
        "show": true,
        "values": []
      },
      "yaxes": [
        {
          "decimals": null,
          "format": "Bps",
          "label": "",
          "logBase": 1,
          "max": null,
          "min": "0",
          "show": true
        },
        {
          "format": "short",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        }
      ],
      "yaxis": {
        "align": false,
        "alignLevel": null
      }
    },
    {
      "aliasColors": {},
      "bars": false,
      "dashLength": 10,
      "dashes": false,
      "datasource": "${DS_FLUX}",
      "decimals": null,
      "description": "Rate of failed requests per second, split by error type (user/system)",
      "fill": 9,
      "gridPos": {
        "h": 9,
        "w": 12,
        "x": 0,
        "y": 12
      },
      "id": 144,
      "legend": {
        "alignAsTable": false,
        "avg": true,
        "current": false,
        "hideEmpty": true,
        "hideZero": true,
        "max": true,
        "min": true,
        "rightSide": false,
        "show": true,
        "sortDesc": true,
        "total": false,
        "values": true
      },
      "lines": true,
      "linewidth": 0,
      "links": [],
      "nullPointMode": "null",
      "options": {},
      "percentage": false,
      "pointradius": 2,
      "points": false,
      "renderer": "flot",
      "seriesOverrides": [],
      "spaceLength": 10,
      "stack": true,
      "steppedLine": true,
      "targets": [
        {
          "query": "import \"ecs\"\n\nwi = ecs.get_dyn_downsample_info(start: $__range_from_s, stop: $__range_to_s, max: 200\n                                 measurement: \"cq_performance_error_head\")\nmn = wi.measurement\n\nfrom(bucket: \"monitoring_vdc\") |> filter(fn: (r) => r._measurement == mn and r.head =~ /^${head:pipe}$/)\n|> range(start: wi.start, stop: wi.stop) \n|> keep(columns:[\"_time\", \"_field\", \"_value\"]) \n|> window(every: wi.duration)\n|> mean()\n|> group(columns:[\"_field\"]) \n|> rename(columns: {_start: \"_time\"})\n",
          "refId": "A"
        }
      ],
      "thresholds": [],
      "timeFrom": null,
      "timeRegions": [],
      "timeShift": null,
      "title": "Failed Requests/s by error type (user/system)",
      "tooltip": {
        "shared": true,
        "sort": 0,
        "value_type": "individual"
      },
      "type": "graph",
      "xaxis": {
        "buckets": null,
        "mode": "time",
        "name": null,
        "show": true,
        "values": []
      },
      "yaxes": [
        {
          "format": "short",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": "0",
          "show": true
        },
        {
          "format": "short",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        }
      ],
      "yaxis": {
        "align": false,
        "alignLevel": null
      }
    },
    {
      "aliasColors": {},
      "bars": false,
      "dashLength": 10,
      "dashes": false,
      "datasource": "${DS_FLUX}",
      "decimals": null,
      "description": "Latency of read/write requests\nNote that if multiple protocols are selected, mean value is displayed",
      "fill": 1,
      "gridPos": {
        "h": 9,
        "w": 12,
        "x": 12,
        "y": 12
      },
      "id": 152,
      "legend": {
        "alignAsTable": false,
        "avg": true,
        "current": true,
        "max": true,
        "min": true,
        "rightSide": false,
        "show": true,
        "sortDesc": true,
        "total": false,
        "values": true
      },
      "lines": true,
      "linewidth": 2,
      "links": [],
      "nullPointMode": "null",
      "options": {},
      "percentage": false,
      "pointradius": 0.5,
      "points": true,
      "renderer": "flot",
      "seriesOverrides": [],
      "spaceLength": 10,
      "stack": false,
      "steppedLine": false,
      "targets": [
        {
          "query": "import \"ecs\"\n\nwi = ecs.get_dyn_downsample_info(start: $__range_from_s, stop: $__range_to_s, max: 200\n                                 measurement: \"^cq_performance_latency_head_*\")\nmr = if wi.in_downsample == 1 then /^cq_performance_latency_head_downsampled$/ else /^cq_performance_latency_head_[A-Z]/\n\nall = from(bucket: \"monitoring_vdc\") \n    |> filter(fn: (r) => r._measurement =~ mr and r.head =~ /^${head:pipe}$/)  \n    |> range(start: wi.start, stop: wi.stop)\n    |> window(every: wi.duration)\n    |> mean()\n    |> drop(columns:[\"head\"])    \n// TODO this is not exactly correct way of handling percentiles\n// However if only one protocol is selected, this \"mean\" won't change anything\n// In a better option, value should be recalculated from raw data if multiple protocols are selected\n    |> mean()\n    |> group(columns:[\"_field\",\"id\"])\n\n// can't simple rename ttfb_read to Read, ti... and similarly for ttlb_write\n// when they are in same stream\n// TODO think about possible optimizations:\n// 1. use function? didn't work at first approach, flux can't see it\n// 2. use join with another table created from CSV\n\nreads = all |> filter(fn: (r) => r.id == \"ttfb_read\" )\n    |> set(key: \"id\", value: \"Read, time to first byte\")\n\nwrites = all |> filter(fn: (r) => r.id == \"ttlb_write\" )\n    |> set(key: \"id\", value: \"Write, time to last byte\")\n\nunion(tables: [reads, writes])|> map(fn:(r) => ({_time: r._start, _value: r._value, _field: r.id + \", \" + r._field })) |>drop(columns:[\"id\"])\n\n\n    \n\n\n",
          "refId": "A"
        }
      ],
      "thresholds": [],
      "timeFrom": null,
      "timeRegions": [],
      "timeShift": null,
      "title": "Latency",
      "tooltip": {
        "shared": true,
        "sort": 0,
        "value_type": "individual"
      },
      "type": "graph",
      "xaxis": {
        "buckets": null,
        "mode": "time",
        "name": null,
        "show": true,
        "values": []
      },
      "yaxes": [
        {
          "decimals": null,
          "format": "ms",
          "label": "",
          "logBase": 1,
          "max": null,
          "min": "0",
          "show": true
        },
        {
          "format": "short",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        }
      ],
      "yaxis": {
        "align": false,
        "alignLevel": null
      }
    },
    {
      "collapsed": true,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 21
      },
      "id": 149,
      "panels": [
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": "${DS_FLUX}",
          "decimals": null,
          "description": "Rate of successful requests per second, by node",
          "fill": 9,
          "gridPos": {
            "h": 9,
            "w": 12,
            "x": 0,
            "y": 22
          },
          "id": 141,
          "legend": {
            "alignAsTable": true,
            "avg": true,
            "current": false,
            "max": true,
            "min": true,
            "rightSide": true,
            "show": true,
            "sortDesc": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "null",
          "options": {},
          "percentage": false,
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": true,
          "steppedLine": false,
          "targets": [
            {
              "query": "import \"ecs\"\n\nwi = ecs.get_dynamic_window_info(int_start: $__range_from_s, int_stop: $__range_to_s, max: 200)\n\nfrom(bucket: \"monitoring_main\") |> filter(fn: (r) => r._measurement == \"statDataHead_performance_internal_transactions_head\" and r._field == \"succeed_request_counter\" and r.head =~ /^${head:pipe}$/ )\n\n|> range(start: wi.start, stop: wi.stop) \n|> keep(columns:[\"_time\", \"_value\", \"host\", \"head\"]) \n|> derivative(nonNegative: true)\n// see MONITORING-194 for details about next 2 lines\n|> window(every: wi.duration)\n|> mean()\n|> drop(columns:[\"head\"])\n|> sum()\n|> group(columns:[\"_field\", \"host\"]) \n|> rename(columns: {_start: \"_time\", host: \"node\"})\n\n",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Successful Requests/s by Node",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": "${DS_FLUX}",
          "decimals": null,
          "description": "Rate of failed requests per second, split by node",
          "fill": 9,
          "gridPos": {
            "h": 9,
            "w": 12,
            "x": 12,
            "y": 22
          },
          "id": 142,
          "legend": {
            "alignAsTable": true,
            "avg": true,
            "current": false,
            "hideEmpty": true,
            "hideZero": true,
            "max": true,
            "min": true,
            "rightSide": true,
            "show": true,
            "sortDesc": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 0,
          "links": [],
          "nullPointMode": "null",
          "options": {},
          "percentage": false,
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": true,
          "steppedLine": true,
          "targets": [
            {
              "query": "import \"ecs\"\n\nwi = ecs.get_dynamic_window_info(int_start: $__range_from_s, int_stop: $__range_to_s, max: 200)\n\nfrom(bucket: \"monitoring_main\") |> filter(fn: (r) => r._measurement == \"statDataHead_performance_internal_transactions_head\" and r._field == \"failed_request_counter\" and r.head =~ /^${head:pipe}$/ )\n\n|> range(start: wi.start, stop: wi.stop) \n|> keep(columns:[\"_time\", \"_value\", \"host\", \"head\"]) \n|> derivative(nonNegative: true)\n// see MONITORING-194 for details about next 2 lines\n|> window(every: wi.duration)\n|> mean()\n|> drop(columns:[\"head\"])\n|> sum()\n|> group(columns:[\"_field\", \"host\"]) \n|> rename(columns: {_start: \"_time\", host: \"node\"})",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Failed Requests/s by Node",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": "0",
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        }
      ],
      "title": "Requests drill down by nodes",
      "type": "row"
    },
    {
      "collapsed": true,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 22
      },
      "id": 161,
      "panels": [
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": "${DS_FLUX}",
          "decimals": null,
          "description": "Select different protocols and compare rates of successful requests per second",
          "fill": 1,
          "gridPos": {
            "h": 9,
            "w": 12,
            "x": 0,
            "y": 23
          },
          "id": 162,
          "legend": {
            "alignAsTable": false,
            "avg": true,
            "current": false,
            "max": true,
            "min": true,
            "rightSide": false,
            "show": true,
            "sortDesc": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 2,
          "links": [],
          "nullPointMode": "null",
          "options": {},
          "percentage": false,
          "pointradius": 2,
          "points": true,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "import \"ecs\"\n\nwi = ecs.get_dyn_downsample_info(start: $__range_from_s, stop: $__range_to_s, max: 200\n                                 measurement: \"cq_performance_transaction_head\")\nmn = wi.measurement\n\n \n  \n  from(bucket: \"monitoring_vdc\") |> filter(fn: (r) => r._measurement == mn and r._field == \"succeed_request_counter\" and (r.head == \"$head\" or r.head == \"$ct_head\"))\n  |> range(start: wi.start, stop: wi.stop)  \n  |> keep(columns:[\"_time\", \"_value\", \"head\"])  \n  |> window(every: wi.duration)\n  |> mean()\n  |> group(columns:[\"_field\",\"head\"]) \n  |> rename(columns: {_start: \"_time\", head: \"protocol\"})\n",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Compare TPS of successful requests",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "decimals": null,
              "format": "short",
              "label": "",
              "logBase": 1,
              "max": null,
              "min": "0",
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": "${DS_FLUX}",
          "decimals": null,
          "description": "Select different protocols and compare rates of failed requests per second, split by error type (user/system)",
          "fill": 1,
          "gridPos": {
            "h": 9,
            "w": 12,
            "x": 12,
            "y": 23
          },
          "id": 164,
          "legend": {
            "alignAsTable": false,
            "avg": true,
            "current": false,
            "hideEmpty": true,
            "hideZero": true,
            "max": true,
            "min": true,
            "rightSide": false,
            "show": true,
            "sortDesc": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 2,
          "links": [],
          "nullPointMode": "null",
          "options": {},
          "percentage": false,
          "pointradius": 0.5,
          "points": true,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "import \"ecs\"\n\nwi = ecs.get_dyn_downsample_info(start: $__range_from_s, stop: $__range_to_s, max: 200\n                                 measurement: \"cq_performance_error_head\")\nmn = wi.measurement\n\n  \nfrom(bucket: \"monitoring_vdc\") |> filter(fn: (r) => r._measurement == mn and (r.head == \"$head\" or r.head == \"$ct_head\"))\n  |> range(start: wi.start, stop: wi.stop)  \n  |> keep(columns:[\"_time\", \"_field\", \"_value\", \"head\"])  \n  |> window(every: wi.duration)\n  |> mean()\n  |> group(columns:[\"_field\",\"head\"]) \n  |> rename(columns: {_start: \"_time\", head: \"protocol\"})",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Compare rate of failed requests/s",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": "0",
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": "${DS_FLUX}",
          "decimals": null,
          "description": "Select different protocols and compare data access bandwidth of successful requests per second",
          "fill": 1,
          "gridPos": {
            "h": 9,
            "w": 12,
            "x": 0,
            "y": 32
          },
          "id": 163,
          "legend": {
            "alignAsTable": false,
            "avg": true,
            "current": true,
            "max": true,
            "min": true,
            "rightSide": false,
            "show": true,
            "sortDesc": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 2,
          "links": [],
          "nullPointMode": "null",
          "options": {},
          "percentage": false,
          "pointradius": 2,
          "points": true,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "import \"ecs\"\n\nwi = ecs.get_dyn_downsample_info(start: $__range_from_s, stop: $__range_to_s, max: 200\n                                 measurement: \"cq_performance_throughput_head\")\nmn = wi.measurement\n\n  \n  from(bucket: \"monitoring_vdc\") |> filter(fn: (r) => r._measurement == mn and r._field == \"total_read_requests_size\" and (r.head == \"$head\" or r.head == \"$ct_head\"))\n  |> range(start: wi.start, stop: wi.stop)  \n  |> keep(columns:[\"_time\", \"_field\", \"_value\", \"head\"])  \n  |> window(every: wi.duration)\n  |> mean()\n  |> group(columns:[\"_field\",\"head\"]) \n  |> rename(columns: {_start: \"_time\", head: \"protocol\"})",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Compare read bandwidth",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "decimals": null,
              "format": "Bps",
              "label": "",
              "logBase": 1,
              "max": null,
              "min": "0",
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": "${DS_FLUX}",
          "decimals": null,
          "description": "Select different protocols and compare data access bandwidth of successful requests per second",
          "fill": 1,
          "gridPos": {
            "h": 9,
            "w": 12,
            "x": 12,
            "y": 32
          },
          "id": 168,
          "legend": {
            "alignAsTable": false,
            "avg": true,
            "current": true,
            "max": true,
            "min": true,
            "rightSide": false,
            "show": true,
            "sortDesc": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 2,
          "links": [],
          "nullPointMode": "null",
          "options": {},
          "percentage": false,
          "pointradius": 2,
          "points": true,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "import \"ecs\"\n\nwi = ecs.get_dyn_downsample_info(start: $__range_from_s, stop: $__range_to_s, max: 200\n                                 measurement: \"cq_performance_throughput_head\")\nmn = wi.measurement\n\n  \n  from(bucket: \"monitoring_vdc\") |> filter(fn: (r) => r._measurement == mn and r._field == \"total_write_requests_size\" and (r.head == \"$head\" or r.head == \"$ct_head\"))\n  |> range(start: wi.start, stop: wi.stop)  \n  |> keep(columns:[\"_time\", \"_field\", \"_value\", \"head\"])  \n  |> window(every: wi.duration)\n  |> mean()\n  |> group(columns:[\"_field\",\"head\"]) \n  |> rename(columns: {_start: \"_time\", head: \"protocol\"})",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Compare write bandwidth",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "decimals": null,
              "format": "Bps",
              "label": "",
              "logBase": 1,
              "max": null,
              "min": "0",
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": "${DS_FLUX}",
          "decimals": null,
          "description": "Select different protocols and compare latency of read requests",
          "fill": 1,
          "gridPos": {
            "h": 9,
            "w": 12,
            "x": 0,
            "y": 41
          },
          "id": 165,
          "legend": {
            "alignAsTable": false,
            "avg": true,
            "current": false,
            "max": true,
            "min": true,
            "rightSide": false,
            "show": true,
            "sortDesc": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 2,
          "links": [],
          "nullPointMode": "null",
          "options": {},
          "percentage": false,
          "pointradius": 0.5,
          "points": true,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "import \"ecs\"\n\nwi = ecs.get_dyn_downsample_info(start: $__range_from_s, stop: $__range_to_s, max: 200\n                                 measurement: \"^cq_performance_latency_head_*\")\nmr = if wi.in_downsample == 1 then /^cq_performance_latency_head_downsampled$/ else /^cq_performance_latency_head_[A-Z]/\n\nall = from(bucket: \"monitoring_vdc\") \n    |> filter(fn: (r) => r._measurement =~ mr and r.id == \"ttfb_read\" and (r.head == \"$head\" or r.head == \"$ct_head\"))  \n    |> range(start: wi.start, stop: wi.stop)\n    |> window(every: wi.duration)\n    |> mean()\n    |> group(columns:[\"_field\",\"id\",\"head\"])\n\n// can't simple rename ttfb_read to Read, ti... and similarly for ttlb_write\n// when they are in same stream\n// TODO think about possible optimizations:\n// 1. use function? didn't work at first approach, flux can't see it\n// 2. use join with another table created from CSV\n\nreads = all |> filter(fn: (r) => r.id == \"ttfb_read\" )\n    |> set(key: \"id\", value: \"Read, time to first byte\")\n\nwrites = all |> filter(fn: (r) => r.id == \"ttlb_write\" )\n    |> set(key: \"id\", value: \"Write, time to last byte\")\n\nunion(tables: [reads, writes])|> map(fn:(r) => ({_time: r._start, _value: r._value, _field: r.id + \", \" + r._field })) |>drop(columns:[\"id\"])\n",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Compare read latency",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "decimals": null,
              "format": "ms",
              "label": "",
              "logBase": 1,
              "max": null,
              "min": "0",
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": "${DS_FLUX}",
          "decimals": null,
          "description": "Select different protocols and compare latency of write requests",
          "fill": 1,
          "gridPos": {
            "h": 9,
            "w": 12,
            "x": 12,
            "y": 41
          },
          "id": 167,
          "legend": {
            "alignAsTable": false,
            "avg": true,
            "current": false,
            "max": true,
            "min": true,
            "rightSide": false,
            "show": true,
            "sortDesc": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 2,
          "links": [],
          "nullPointMode": "null",
          "options": {},
          "percentage": false,
          "pointradius": 0.5,
          "points": true,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "import \"ecs\"\n\nwi = ecs.get_dyn_downsample_info(start: $__range_from_s, stop: $__range_to_s, max: 200\n                                 measurement: \"^cq_performance_latency_head_*\")\nmr = if wi.in_downsample == 1 then /^cq_performance_latency_head_downsampled$/ else /^cq_performance_latency_head_[A-Z]/\n\nall = from(bucket: \"monitoring_vdc\") \n    |> filter(fn: (r) => r._measurement =~ mr and r.id == \"ttlb_write\" and (r.head == \"$head\" or r.head == \"$ct_head\"))  \n    |> range(start: wi.start, stop: wi.stop)\n    |> window(every: wi.duration)\n    |> mean()\n    |> group(columns:[\"_field\",\"id\",\"head\"])\n\n// can't simple rename ttfb_read to Read, ti... and similarly for ttlb_write\n// when they are in same stream\n// TODO think about possible optimizations:\n// 1. use function? didn't work at first approach, flux can't see it\n// 2. use join with another table created from CSV\n\nreads = all |> filter(fn: (r) => r.id == \"ttfb_read\" )\n    |> set(key: \"id\", value: \"Read, time to first byte\")\n\nwrites = all |> filter(fn: (r) => r.id == \"ttlb_write\" )\n    |> set(key: \"id\", value: \"Write, time to last byte\")\n\nunion(tables: [reads, writes])|> map(fn:(r) => ({_time: r._start, _value: r._value, _field: r.id + \", \" + r._field })) |>drop(columns:[\"id\"])\n",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Compare write latency",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "decimals": null,
              "format": "ms",
              "label": "",
              "logBase": 1,
              "max": null,
              "min": "0",
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        }
      ],
      "title": "Compare to another protocol",
      "type": "row"
    }
  ],
  "refresh": false,
  "schemaVersion": 18,
  "style": "dark",
  "tags": [
    "Data Access Performance"
  ],
  "templating": {
    "list": [
      {
        "allValue": null,
        "current": {
          "tags": [],
          "text": "S3",
          "value": "S3"
        },
        "hide": 0,
        "includeAll": false,
        "label": "Protocol",
        "multi": false,
        "name": "head",
        "options": [
          {
            "selected": false,
            "text": "ATMOS",
            "value": "ATMOS"
          },
          {
            "selected": false,
            "text": "CAS",
            "value": "CAS"
          },
          {
            "selected": false,
            "text": "HDFS",
            "value": "HDFS"
          },
          {
            "selected": false,
            "text": "NFS",
            "value": "NFS"
          },
          {
            "selected": true,
            "text": "S3",
            "value": "S3"
          },
          {
            "selected": false,
            "text": "SWIFT",
            "value": "SWIFT"
          }
        ],
        "query": "ATMOS,CAS,HDFS,NFS,S3,SWIFT",
        "skipUrlSync": false,
        "type": "custom"
      },
      {
        "allValue": null,
        "current": {
          "tags": [],
          "text": "ATMOS",
          "value": "ATMOS"
        },
        "hide": 0,
        "includeAll": false,
        "label": "Compare to",
        "multi": false,
        "name": "ct_head",
        "options": [
          {
            "selected": true,
            "text": "ATMOS",
            "value": "ATMOS"
          },
          {
            "selected": false,
            "text": "CAS",
            "value": "CAS"
          },
          {
            "selected": false,
            "text": "HDFS",
            "value": "HDFS"
          },
          {
            "selected": false,
            "text": "NFS",
            "value": "NFS"
          },
          {
            "selected": false,
            "text": "S3",
            "value": "S3"
          },
          {
            "selected": false,
            "text": "SWIFT",
            "value": "SWIFT"
          }
        ],
        "query": "ATMOS,CAS,HDFS,NFS,S3,SWIFT",
        "skipUrlSync": false,
        "type": "custom"
      }
    ]
  },
  "time": {
    "from": "now-24h",
    "to": "now"
  },
  "timepicker": {
    "refresh_intervals": [
      "15m",
      "30m",
      "1h",
      "2h",
      "1d"
    ],
    "time_options": [
      "15m",
      "1h",
      "6h",
      "12h",
      "24h",
      "2d",
      "7d",
      "30d"
    ]
  },
  "timezone": "",
  "title": "Data Access Performance - by Protocols",
  "uid": "IN0CmT6iz",
  "version": 7
}