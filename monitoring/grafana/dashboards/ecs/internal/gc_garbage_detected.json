{
  "__inputs": [],
  "__requires": [
    {
      "type": "grafana",
      "id": "grafana",
      "name": "Grafana",
      "version": "6.2.5"
    },
    {
      "type": "panel",
      "id": "table",
      "name": "Table",
      "version": ""
    }
  ],
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": "-- Grafana --",
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "gnetId": null,
  "graphTooltip": 0,
  "id": null,
  "links": [
    {
      "asDropdown": true,
      "icon": "external link",
      "keepTime": true,
      "tags": [
        "Garbage Collection"
      ],
      "title": "Related dashboards",
      "type": "dashboards"
    }
  ],
  "panels": [
    {
      "columns": [],
      "fontSize": "100%",
      "gridPos": {
        "h": 4,
        "w": 24,
        "x": 0,
        "y": 0
      },
      "id": 95,
      "links": [],
      "options": {},
      "pageSize": null,
      "scroll": true,
      "showHeader": true,
      "sort": {
        "col": null,
        "desc": false
      },
      "styles": [
        {
          "alias": "",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "mappingType": 1,
          "pattern": "Total Garbage Detected",
          "thresholds": [],
          "type": "number",
          "unit": "bytes"
        },
        {
          "alias": "",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "mappingType": 1,
          "pattern": "Capacity Reclaimed",
          "thresholds": [],
          "type": "number",
          "unit": "bytes"
        },
        {
          "alias": "",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "mappingType": 1,
          "pattern": "Capacity Pending Reclamation",
          "thresholds": [],
          "type": "number",
          "unit": "bytes"
        },
        {
          "alias": "",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "mappingType": 1,
          "pattern": "Un-Reclaimable Garbage",
          "thresholds": [],
          "type": "number",
          "unit": "bytes"
        },
        {
          "alias": "",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "mappingType": 1,
          "pattern": "/.*/",
          "thresholds": [],
          "type": "hidden",
          "unit": "short"
        }
      ],
      "targets": [
        {
          "query": "userReclaimed = from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_gc_data\" and r._field == \"user_gc_reclaimed\")\n|> range($range\r)\n|> last()\n|> keep(columns: [\"_time\", \"_value\"]) \n\nsystemReclaimed = from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_gc_data\" and r._field == \"system_gc_reclaimed\")\n|> range($range\r)\n|> last()\n|> keep(columns: [\"_time\", \"_value\"])\n\nuserPending = from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_gc_data\" and r._field == \"user_gc_pending\")\n|> range($range\r)\n|> last()\n|> keep(columns: [\"_time\", \"_value\"]) \n\nsystemPending = from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_gc_data\" and r._field == \"system_gc_pending\")\n|> range($range\r)\n|> last()\n|> keep(columns: [\"_time\", \"_value\"])\n\nuserUnReclaimed = from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_gc_data\" and r._field == \"user_gc_unreclaim\")\n|> range($range\r)\n|> last()\n|> keep(columns: [\"_time\", \"_value\"]) \n\nsystemUnReclaimed = from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_gc_data\" and r._field == \"system_gc_unreclaim\")\n|> range($range\r)\n|> last()\n|> keep(columns: [\"_time\", \"_value\"]) \n\n\nunion(tables: [userPending,systemPending,userUnReclaimed,systemUnReclaimed,userReclaimed,systemReclaimed ])\n|>sum()\n|> rename(columns:{_value: \"Total Garbage Detected\"})\n\n",
          "refId": "A",
          "resultFormat": "table"
        },
        {
          "query": "userReclaimed = from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_gc_data\" and r._field == \"user_gc_reclaimed\")\n|> range($range\r)\n|> last()\n|> keep(columns: [\"_time\", \"_value\"]) \n\nsystemReclaimed = from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_gc_data\" and r._field == \"system_gc_reclaimed\")\n|> range($range\r)\n|> last()\n|> keep(columns: [\"_time\", \"_value\"]) \n\nunion(tables: [userReclaimed,systemReclaimed])\n|>sum()\n|> rename(columns:{_value: \"Capacity Reclaimed\"})",
          "refId": "B",
          "resultFormat": "table"
        },
        {
          "query": "userPending = from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_gc_data\" and r._field == \"user_gc_pending\")\n|> range($range\r)\n|> last()\n|> keep(columns: [\"_time\", \"_value\"]) \n\nsystemPending = from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_gc_data\" and r._field == \"system_gc_pending\")\n|> range($range\r)\n|> last()\n|> keep(columns: [\"_time\", \"_value\"]) \n  \nunion(tables: [userPending,systemPending])\n|>sum()\n|> rename(columns:{_value: \"Capacity Pending Reclamation\"})",
          "refId": "C",
          "resultFormat": "table"
        },
        {
          "query": "userUnReclaimed = from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_gc_data\" and r._field == \"user_gc_unreclaim\")\n|> range($range\r)\n|> last()\n|> keep(columns: [\"_time\", \"_value\"]) \n\nsystemUnReclaimed = from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_gc_data\" and r._field == \"system_gc_unreclaim\")\n|> range($range\r)\n|> last()\n|> keep(columns: [\"_time\", \"_value\"]) \n\nunion(tables: [userUnReclaimed,systemUnReclaimed])\n|>sum()\n|> rename(columns:{_value: \"Un-Reclaimable Garbage\"})",
          "refId": "D",
          "resultFormat": "table"
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "Garbage Detected",
      "transform": "table",
      "type": "table"
    }
  ],
  "refresh": false,
  "schemaVersion": 18,
  "style": "dark",
  "tags": [
    "Garbage Collection"
  ],
  "templating": {
    "list": []
  },
  "time": {
    "from": "now-24h",
    "to": "now"
  },
  "timepicker": {
    "hidden": false,
    "refresh_intervals": [
      "5s",
      "10s",
      "30s",
      "1m",
      "5m",
      "15m",
      "30m",
      "1h",
      "2h",
      "1d"
    ],
    "time_options": [
      "5m",
      "15m",
      "1h",
      "6h",
      "12h",
      "24h",
      "2d",
      "7d",
      "30d"
    ]
  },
  "timezone": "utc",
  "title": "Garbage Collection: Garbage Detected",
  "uid": "GCRPA51QMZzc",
  "version": 1
}