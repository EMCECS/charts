{
  "__inputs": [],
  "__requires": [
    {
      "type": "grafana",
      "id": "grafana",
      "name": "Grafana",
      "version": "6.2.5ecs"
    },
    {
      "type": "datasource",
      "id": "grafana-influxdb-flux-datasource",
      "name": "Flux (InfluxDB) [BETA]",
      "version": "5.2.12"
    },
    {
      "type": "panel",
      "id": "graph",
      "name": "Graph",
      "version": ""
    },
    {
      "type": "panel",
      "id": "singlestat",
      "name": "Singlestat",
      "version": ""
    },
    {
      "type": "panel",
      "id": "table",
      "name": "Table",
      "version": ""
    }
  ],
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": "-- Grafana --",
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "gnetId": null,
  "graphTooltip": 0,
  "id": null,
  "links": [],
  "panels": [
    {
      "cacheTimeout": null,
      "columns": [],
      "fontSize": "110%",
      "gridPos": {
        "h": 3,
        "w": 24,
        "x": 0,
        "y": 0
      },
      "id": 34,
      "links": [],
      "options": {},
      "pageSize": null,
      "pluginVersion": "6.2.5ecs",
      "scroll": false,
      "showHeader": true,
      "sort": {
        "col": 3,
        "desc": true
      },
      "styles": [
        {
          "alias": "Time",
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "link": false,
          "pattern": "Time",
          "type": "hidden"
        },
        {
          "alias": "",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "mappingType": 1,
          "pattern": "Measurement",
          "thresholds": [],
          "type": "hidden",
          "unit": "short"
        },
        {
          "alias": "",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "mappingType": 1,
          "pattern": "Field",
          "thresholds": [],
          "type": "hidden",
          "unit": "short"
        },
        {
          "alias": "System Failures",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": null,
          "mappingType": 1,
          "pattern": "b_system_errors",
          "thresholds": [],
          "type": "number",
          "unit": "locale"
        },
        {
          "alias": "Successful requests",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": null,
          "mappingType": 1,
          "pattern": "a_succeed_request_counter",
          "thresholds": [],
          "type": "number",
          "unit": "locale"
        },
        {
          "alias": "",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "mappingType": 1,
          "pattern": "Value",
          "thresholds": [],
          "type": "hidden",
          "unit": "short"
        },
        {
          "alias": "User Failures",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": null,
          "mappingType": 1,
          "pattern": "c_user_errors",
          "thresholds": [],
          "type": "number",
          "unit": "locale"
        },
        {
          "alias": "Failures % Rate",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 3,
          "mappingType": 1,
          "pattern": "d_error_rate",
          "thresholds": [],
          "type": "number",
          "unit": "percentunit"
        },
        {
          "alias": "",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "decimals": 2,
          "pattern": "/.*/",
          "thresholds": [],
          "type": "number",
          "unit": "short"
        }
      ],
      "targets": [
        {
          "query": "// need this 'default' table to substitute possibly missing sys_errors table if errors were not registered by ECS service\nimport \"csv\"\ndefault_sys_errors = csv.from(csv:\"#datatype,string,long,string,long\n#group,false,false,true,false\n#default,_result,,,\n,result,table,_field,_value\n,,100,succeed_request_counter_i,0\n,,101,system_errors_i,0\n,,102,user_errors_i,0\")\n\ntotals = from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_performance_transaction_delta\")\n|> range($range)\n|> keep(columns:[\"_time\", \"_field\", \"_value\"])\n|> sum()\n|> fill(column: \"_value\", value: 0)\n\nsys_errors = from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_performance_error_delta\")\n|> range($range)\n|> keep(columns:[\"_time\", \"_field\", \"_value\"])\n|> sum()\n|> fill(column: \"_value\", value: 0)\n\nunion(tables: [default_sys_errors, totals, sys_errors])\n|> pivot(rowKey:[], columnKey: [\"_field\"], valueColumn: \"_value\")\n// map does not save non-group columns\n|> map(fn:(r) => ({\n\"Successful Requests\": r.succeed_request_counter_i,\nb_system_errors: r.system_errors_i,\nc_user_errors: r.user_errors_i,\nd_error_rate: float(v:r.system_errors_i+r.user_errors_i)/\nfloat(v:r.system_errors_i+r.user_errors_i+r.succeed_request_counter_i\n// this trick is needed because failed+succeed can be 0, avoid printing NaN in this case\n+int(v:bool(v:(r.system_errors_i+r.user_errors_i+r.succeed_request_counter_i)==0)))}))\n\n",
          "refId": "A",
          "resultFormat": "table"
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "Requests",
      "transform": "table",
      "type": "table"
    },
    {
      "aliasColors": {},
      "bars": false,
      "dashLength": 10,
      "dashes": false,
      "datasource": "${DS_FLUX}",
      "decimals": null,
      "description": "Latency of read/write requests",
      "fill": 1,
      "gridPos": {
        "h": 7,
        "w": 12,
        "x": 0,
        "y": 3
      },
      "id": 15,
      "legend": {
        "alignAsTable": false,
        "avg": true,
        "current": true,
        "max": false,
        "min": false,
        "rightSide": false,
        "show": true,
        "sortDesc": true,
        "total": false,
        "values": true
      },
      "lines": true,
      "linewidth": 2,
      "links": [],
      "nullPointMode": "null",
      "options": {},
      "percentage": false,
      "pointradius": 0.5,
      "points": true,
      "renderer": "flot",
      "seriesOverrides": [],
      "spaceLength": 10,
      "stack": false,
      "steppedLine": false,
      "targets": [
        {
          "query": "import \"ecs\"\n\nwi = ecs.get_dyn_downsample_info(start: $__range_from_s, stop: $__range_to_s, max: 200\n                                 measurement: \"cq_performance_latency\")\nmn = wi.measurement\n\nall = from(bucket: \"monitoring_vdc\") \n    |> filter(fn: (r) => r._measurement == mn )  \n    |> range(start: wi.start, stop: wi.stop)  \n    |> window(every: wi.duration)\n    |> mean()\n    |> group(columns:[\"_field\",\"id\"])\n\n// can't simple rename ttfb_read to Read, ti... and similarly for ttlb_write\n// when they are in same stream\n// TODO think about possible optimizations:\n// 1. use function? didn't work at first approach, flux can't see it\n// 2. use join with another table created from CSV\n\nreads = all |> filter(fn: (r) => r.id == \"ttfb_read\" )\n    |> set(key: \"id\", value: \"Read, time to first byte\")\n\nwrites = all |> filter(fn: (r) => r.id == \"ttlb_write\" )\n    |> set(key: \"id\", value: \"Write, time to last byte\")\n\nunion(tables: [reads, writes])|> map(fn:(r) => ({_time: r._start, _value: r._value, _field: r.id + \", \" + r._field })) |>drop(columns:[\"id\"])\n\n\n    \n\n\n",
          "refId": "A"
        }
      ],
      "thresholds": [],
      "timeFrom": null,
      "timeRegions": [],
      "timeShift": null,
      "title": "Latency",
      "tooltip": {
        "shared": true,
        "sort": 0,
        "value_type": "individual"
      },
      "type": "graph",
      "xaxis": {
        "buckets": null,
        "mode": "time",
        "name": null,
        "show": true,
        "values": []
      },
      "yaxes": [
        {
          "decimals": null,
          "format": "ms",
          "label": "",
          "logBase": 1,
          "max": null,
          "min": "0",
          "show": true
        },
        {
          "format": "short",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        }
      ],
      "yaxis": {
        "align": false,
        "alignLevel": null
      }
    },
    {
      "aliasColors": {
        " total_read_requests_size": "#6ed0e0",
        " total_write_requests_size": "#e24d42"
      },
      "bars": false,
      "cacheTimeout": null,
      "dashLength": 10,
      "dashes": false,
      "datasource": "${DS_FLUX}",
      "decimals": null,
      "description": "Data access bandwidth of successful requests per second",
      "fill": 4,
      "gridPos": {
        "h": 7,
        "w": 12,
        "x": 12,
        "y": 3
      },
      "id": 17,
      "legend": {
        "alignAsTable": false,
        "avg": true,
        "current": true,
        "max": false,
        "min": false,
        "rightSide": false,
        "show": true,
        "sortDesc": true,
        "total": false,
        "values": true
      },
      "lines": true,
      "linewidth": 2,
      "links": [],
      "nullPointMode": "null",
      "options": {},
      "percentage": false,
      "pluginVersion": "6.2.5ecs",
      "pointradius": 2,
      "points": false,
      "renderer": "flot",
      "seriesOverrides": [],
      "spaceLength": 10,
      "stack": true,
      "steppedLine": false,
      "targets": [
        {
          "query": "import \"ecs\"\n\nwi = ecs.get_dyn_downsample_info(start: $__range_from_s, stop: $__range_to_s, max: 200\n                                 measurement: \"cq_performance_throughput\")\nmn = wi.measurement\n\nfrom(bucket: \"monitoring_vdc\") |> filter(fn: (r) => r._measurement == mn and r._field == \"total_read_requests_size\" )\n|> range(start: wi.start, stop: wi.stop) \n|> keep(columns:[\"_time\", \"_field\", \"_value\"]) \n|> window(every: wi.duration)\n|> mean()\n|> group(columns:[\"_field\"]) \n|> rename(columns: {_start: \"_time\"})\n|> set(key: \"_field\", value: \"Read Bandwidth\")\n\n",
          "refId": "A"
        },
        {
          "query": "import \"ecs\"\n\nwi = ecs.get_dyn_downsample_info(start: $__range_from_s, stop: $__range_to_s, max: 200\n                                 measurement: \"cq_performance_throughput\")\nmn = wi.measurement\n\nfrom(bucket: \"monitoring_vdc\") |> filter(fn: (r) => r._measurement == mn and r._field == \"total_write_requests_size\" )\n|> range(start: wi.start, stop: wi.stop) \n|> keep(columns:[\"_time\", \"_field\", \"_value\"]) \n|> window(every: wi.duration)\n|> mean()\n|> group(columns:[\"_field\"]) \n|> rename(columns: {_start: \"_time\"})\n|> set(key: \"_field\", value: \"Write Bandwidth\")",
          "refId": "B"
        }
      ],
      "thresholds": [],
      "timeFrom": null,
      "timeRegions": [],
      "timeShift": null,
      "title": "Bandwidth (read/write)",
      "tooltip": {
        "shared": true,
        "sort": 0,
        "value_type": "individual"
      },
      "type": "graph",
      "xaxis": {
        "buckets": null,
        "mode": "time",
        "name": null,
        "show": true,
        "values": []
      },
      "yaxes": [
        {
          "decimals": null,
          "format": "Bps",
          "label": "",
          "logBase": 1,
          "max": null,
          "min": "0",
          "show": true
        },
        {
          "format": "short",
          "label": null,
          "logBase": 1,
          "max": null,
          "min": null,
          "show": true
        }
      ],
      "yaxis": {
        "align": false,
        "alignLevel": null
      }
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorPostfix": false,
      "colorPrefix": false,
      "colorValue": false,
      "colors": [
        "#299c46",
        "rgba(237, 129, 40, 0.89)",
        "#d44a3a"
      ],
      "decimals": 2,
      "format": "bytes",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 12,
        "x": 0,
        "y": 10
      },
      "id": 21,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "",
      "postfixFontSize": "80%",
      "prefix": "",
      "prefixFontSize": "50%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": true
      },
      "tableColumn": "",
      "targets": [
        {
          "query": "from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_vdc\" and r._field == \"total_i\")\n|> range($range)\r\n|> last()\r",
          "refId": "B"
        }
      ],
      "thresholds": "",
      "title": "Total Capacity",
      "type": "singlestat",
      "valueFontSize": "80%",
      "valueMaps": [
        {
          "op": "=",
          "text": "N/A",
          "value": "null"
        }
      ],
      "valueName": "current"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorPostfix": false,
      "colorPrefix": false,
      "colorValue": false,
      "colors": [
        "#299c46",
        "rgba(237, 129, 40, 0.89)",
        "#d44a3a"
      ],
      "decimals": 2,
      "format": "bytes",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 12,
        "x": 12,
        "y": 10
      },
      "id": 23,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "",
      "postfixFontSize": "80%",
      "prefix": "",
      "prefixFontSize": "50%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": true
      },
      "tableColumn": "",
      "targets": [
        {
          "query": "from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_vdc\" and r._field == \"used\")\n|> range($range)\r\n|> last()\r",
          "refId": "B"
        }
      ],
      "thresholds": "",
      "title": "Used Capacity",
      "type": "singlestat",
      "valueFontSize": "80%",
      "valueMaps": [
        {
          "op": "=",
          "text": "N/A",
          "value": "null"
        }
      ],
      "valueName": "current"
    },
    {
      "columns": [],
      "fontSize": "100%",
      "gridPos": {
        "h": 3,
        "w": 24,
        "x": 0,
        "y": 12
      },
      "id": 25,
      "links": [],
      "options": {},
      "pageSize": null,
      "scroll": true,
      "showHeader": true,
      "sort": {
        "col": 2,
        "desc": false
      },
      "styles": [
        {
          "alias": " ",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "mappingType": 1,
          "pattern": "/vl[0-5]_/",
          "thresholds": [],
          "type": "number",
          "unit": "bytes"
        },
        {
          "alias": "",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "mappingType": 1,
          "pattern": "Measurement",
          "thresholds": [],
          "type": "hidden",
          "unit": "short"
        },
        {
          "alias": "",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "mappingType": 1,
          "pattern": "Time",
          "thresholds": [],
          "type": "hidden",
          "unit": "short"
        },
        {
          "alias": "",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "mappingType": 1,
          "pattern": "Field",
          "thresholds": [],
          "type": "hidden",
          "unit": "short"
        },
        {
          "alias": "",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "mappingType": 1,
          "pattern": "Value",
          "thresholds": [],
          "type": "hidden",
          "unit": "short"
        },
        {
          "alias": "",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "mappingType": 1,
          "pattern": "//",
          "thresholds": [],
          "type": "number",
          "unit": "bytes"
        }
      ],
      "targets": [
        {
          "query": "// see MONITORING-410 for more details\n\n// COLLECT DATA FROM PRECALCULATED VDC VALUES\nfrom(bucket: \"monitoring_vdc\")\n  |> filter(fn: (r) => r._measurement == \"cq_gc_data\"\n                       or r._measurement == \"cq_capacity_used_elements\"\n  )\n  |> range($range)\n  |> last()\n  // remove difference with measurement name\n  |> set(key: \"_measurement\", value: \"1\")\n  // group will make all tag columns removed in map()\n  |> group()\n  |> pivot(rowKey:[\"_measurement\"],columnKey: [\"_field\"],valueColumn: \"_value\")\n \n  |> map(fn: (r) => ({\n \"vl0_User Data\": r.user_data - r.user_gc_pending - r.user_gc_unreclaim,\n \"vl1_System Metadata\": r.meta_data - r.system_gc_pending - r.system_gc_unreclaim,\n \"vl2_Protection Overhead\": r.protection_overhead_wo_geo,\n \"vl5_Garbage\":  r.user_gc_pending + r.user_gc_unreclaim\n               + r.system_gc_pending + r.system_gc_unreclaim\n }))\n",
          "refId": "A",
          "resultFormat": "table"
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "Used Capacity",
      "transform": "table",
      "type": "table"
    },
    {
      "columns": [],
      "fontSize": "100%",
      "gridPos": {
        "h": 3,
        "w": 24,
        "x": 0,
        "y": 15
      },
      "id": 27,
      "links": [],
      "options": {},
      "pageSize": null,
      "scroll": true,
      "showHeader": true,
      "sort": {
        "col": 0,
        "desc": true
      },
      "styles": [
        {
          "alias": "Time",
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "pattern": "Time",
          "type": "hidden"
        },
        {
          "alias": "",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "decimals": 2,
          "pattern": "Field",
          "thresholds": [],
          "type": "hidden",
          "unit": "short"
        },
        {
          "alias": "",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "mappingType": 1,
          "pattern": "Measurement",
          "thresholds": [],
          "type": "hidden",
          "unit": "short"
        },
        {
          "alias": "",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "mappingType": 1,
          "pattern": "Value",
          "thresholds": [],
          "type": "hidden",
          "unit": "short"
        },
        {
          "alias": "Coding Rate",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "mappingType": 1,
          "pattern": "coding_rate",
          "thresholds": [],
          "type": "number",
          "unit": "Bps"
        },
        {
          "alias": "Coded (%)",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "mappingType": 1,
          "pattern": "coded_ratio",
          "thresholds": [],
          "type": "number",
          "unit": "percentunit"
        },
        {
          "alias": "Total Coded Data",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "mappingType": 1,
          "pattern": "total_coded_data",
          "thresholds": [],
          "type": "number",
          "unit": "bytes"
        },
        {
          "alias": "Total Coding Data",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "mappingType": 1,
          "pattern": "total_coding_data",
          "thresholds": [],
          "type": "number",
          "unit": "bytes"
        },
        {
          "alias": "Est. Time to Complete",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 1,
          "mappingType": 1,
          "pattern": "est_time",
          "thresholds": [],
          "type": "number",
          "unit": "s"
        }
      ],
      "targets": [
        {
          "query": "from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_ec\"\r and r._field == \"total_coding_data\")\r\n|> range($range)\r\n|> last()\r\n|> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n|> keep(columns: [\"total_coding_data\"])\n",
          "refId": "B",
          "resultFormat": "table"
        },
        {
          "query": "from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_ec\"\r and r._field == \"total_coded_data\")\r\n|> range($range)\r\n|> last()\r\n|> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n|> keep(columns: [\"total_coded_data\"])",
          "refId": "A",
          "resultFormat": "table"
        },
        {
          "query": "from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_ec\"\r and (r._field == \"total_coding_data\" or r._field == \"total_coded_data\"))\r\n|> range($range)\r\n|> last()\r\n|> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n|> map(fn: (r) => ({coded_ratio: r.total_coded_data / r.total_coding_data}))\n|> keep(columns: [\"coded_ratio\"])\n",
          "refId": "D",
          "resultFormat": "table"
        },
        {
          "query": "from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_ec_rate\"\r and r._field == \"coding_rate\")\r\n|> range($range)\r\n|> last()\r\n|> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n|> keep(columns: [\"coding_rate\"])\n",
          "refId": "C",
          "resultFormat": "table"
        },
        {
          "query": "cap = from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_capacity_ec\" and (r._field == \"total_coding_data\" or r._field == \"total_coded_data\"))\n|> range($range)\n|> last()\n|> drop(columns: [\"_start\", \"_stop\"])\n|> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n\n\nrate = from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_capacity_ec_rate\" and r._field == \"coding_rate\")\n|> range($range)\n|> last()\n|> drop(columns: [\"_start\", \"_stop\"])\n|> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n\njoin(tables: {cap: cap, rate: rate}, on:[\"\"])\n|> drop(columns: [\"_measurement_cap\",\"_measurement_rate\"])\n|> map(fn: (r) => ({est_time: \n                    if r._time_cap == r._time_rate \n                    then string(v: ((r.total_coding_data - r.total_coded_data) / (r.coding_rate)))\n                    else \"N/A\" }))\n|> keep(columns: [\"est_time\"])",
          "refId": "E",
          "resultFormat": "table"
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "Storage Efficiency",
      "transform": "table",
      "type": "table"
    },
    {
      "columns": [],
      "fontSize": "100%",
      "gridPos": {
        "h": 3,
        "w": 12,
        "x": 0,
        "y": 18
      },
      "id": 35,
      "links": [],
      "options": {},
      "pageSize": null,
      "scroll": true,
      "showHeader": true,
      "sort": {
        "col": 6,
        "desc": true
      },
      "styles": [
        {
          "alias": "",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "mappingType": 1,
          "pattern": "Time",
          "thresholds": [],
          "type": "hidden",
          "unit": "short"
        },
        {
          "alias": "",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "mappingType": 1,
          "pattern": "Measurement",
          "thresholds": [],
          "type": "hidden",
          "unit": "short"
        },
        {
          "alias": "",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "mappingType": 1,
          "pattern": "Value",
          "thresholds": [],
          "type": "hidden",
          "unit": "short"
        },
        {
          "alias": "",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "mappingType": 1,
          "pattern": "Field",
          "thresholds": [],
          "type": "hidden",
          "unit": "short"
        }
      ],
      "targets": [
        {
          "query": "nodeStatus = from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_ss_state\" and r._field == \"SSState\")\r\n|> range($range)\r\n|> last()\r\n|> keep(columns: [\"SS\", \"_value\"])\r\n\r\nnodeStatusGood = nodeStatus |> filter(fn: (r) => r._value == 1) |> keep(columns: [\"_value\"])\r\n|> count()\r\n|> set(key: \"_field\", value: \"Good Nodes\")\r\n\nnodeStatusBad = nodeStatus |> filter(fn: (r) => r._value != 1) |> keep(columns: [\"_value\"])\n|> count()\r\n|> set(key: \"_field\", value: \"Bad Nodes\")\r\n\nunion(tables: [nodeStatusGood , nodeStatusBad ])\n|> pivot(rowKey:[], columnKey: [\"_field\"], valueColumn: \"_value\")",
          "refId": "A",
          "resultFormat": "table"
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "Nodes",
      "transform": "table",
      "type": "table"
    },
    {
      "columns": [],
      "fontSize": "100%",
      "gridPos": {
        "h": 3,
        "w": 12,
        "x": 12,
        "y": 18
      },
      "id": 29,
      "links": [],
      "options": {},
      "pageSize": null,
      "scroll": true,
      "showHeader": true,
      "sort": {
        "col": 6,
        "desc": true
      },
      "styles": [
        {
          "alias": "",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "mappingType": 1,
          "pattern": "Time",
          "thresholds": [],
          "type": "hidden",
          "unit": "short"
        },
        {
          "alias": "",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "mappingType": 1,
          "pattern": "Measurement",
          "thresholds": [],
          "type": "hidden",
          "unit": "short"
        },
        {
          "alias": "",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "mappingType": 1,
          "pattern": "Value",
          "thresholds": [],
          "type": "hidden",
          "unit": "short"
        },
        {
          "alias": "",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "mappingType": 1,
          "pattern": "Field",
          "thresholds": [],
          "type": "hidden",
          "unit": "short"
        }
      ],
      "targets": [
        {
          "query": "\r\ndisks = from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_disk_state\" and r._field == \"hwState\")\r\n|> range($range)\r\n|> last()\r\n|> keep(columns: [\"_value\"])\n\r\n//filter out different statuses\r\ngood_d = disks\r\n|> filter(fn: (r) => r._value == \"GOOD\")\n|> count()\r\n|> set(key: \"_field\", value: \"Good Disks\")\r\n\r\nbad_d = disks\r\n|> filter(fn: (r) => r._value == \"BAD\" or r._value == \"SUSPECT\")\n|> count()\r\n|> set(key: \"_field\", value: \"Bad Disks\")\r\n\r\nmaintenance_d = disks\r\n|> filter(fn: (r) => r._value == \"MAINTENANCE\")\n|> count()\r\n|> set(key: \"_field\", value: \"Maintenance Disks\")\r\n\r\nunion(tables: [good_d , bad_d , maintenance_d ])\n|> pivot(rowKey:[], columnKey: [\"_field\"], valueColumn: \"_value\")\n",
          "refId": "A",
          "resultFormat": "table"
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "Data Disks",
      "transform": "table",
      "type": "table"
    }
  ],
  "schemaVersion": 18,
  "style": "dark",
  "tags": [],
  "templating": {
    "list": []
  },
  "time": {
    "from": "now-24h",
    "to": "now"
  },
  "timepicker": {
    "refresh_intervals": [
      "15m",
      "30m",
      "1h",
      "2h",
      "1d"
    ],
    "time_options": [
      "15m",
      "1h",
      "6h",
      "12h",
      "24h",
      "2d",
      "7d",
      "30d"
    ]
  },
  "timezone": "",
  "title": "ObjectStore Overview",
  "uid": "hW7vSacGk",
  "version": 11
}