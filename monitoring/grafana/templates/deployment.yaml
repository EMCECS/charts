#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
{{- $scheme := ternary "HTTPS" "HTTP" .Values.global.tls_enabled }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "grafana.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ include "grafana.fullname" . }}
    helm.sh/chart: {{ include "grafana.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
spec:
  replicas: {{ include "common-lib.replicaCount" (dict "top" . "micro" 1 "small" 1 "medium" 1 "large" 1)}}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "grafana.fullname" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "grafana.fullname" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
      annotations:
        {{- if .Values.global.use_vault_for_ssl }}
        vault.hashicorp.com/agent-inject: "true"
        vault.hashicorp.com/agent-inject-status: "update"
        vault.hashicorp.com/agent-requests-cpu: ""
        vault.hashicorp.com/agent-limits-cpu: ""
        vault.hashicorp.com/agent-inject-secret-server.crt: "intermediate_pki/issue/intermediate_pki_issuer"
        vault.hashicorp.com/agent-inject-template-server.crt: |
          {{`{{`}}- with secret "intermediate_pki/issue/intermediate_pki_issuer" "common_name={{ include "grafana.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local" {{`}}`}}
          {{`{{`}} .Data.certificate {{`}}`}}
          {{`{{`}}- end {{`}}`}}
        vault.hashicorp.com/agent-inject-secret-server.key: "intermediate_pki/issue/intermediate_pki_issuer"
        vault.hashicorp.com/agent-inject-template-server.key: |
          {{`{{`}}- with secret "intermediate_pki/issue/intermediate_pki_issuer" "common_name={{ include "grafana.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local" {{`}}`}}
          {{`{{`}} .Data.private_key {{`}}`}}
          {{`{{`}}- end {{`}}`}}
        vault.hashicorp.com/agent-inject-secret-fluxd_client.crt: "intermediate_pki/issue/intermediate_pki_issuer"
        vault.hashicorp.com/agent-inject-template-fluxd_client.crt: |
          {{`{{`}}- with secret "intermediate_pki/issue/intermediate_pki_issuer" "common_name={{ include "grafana.fullname" . }}-fluxd-client.{{ .Release.Namespace }}.svc.cluster.local" {{`}}`}}
          {{`{{`}} .Data.certificate {{`}}`}}
          {{`{{`}}- end {{`}}`}}
        vault.hashicorp.com/agent-inject-secret-fluxd_client.key: "intermediate_pki/issue/intermediate_pki_issuer"
        vault.hashicorp.com/agent-inject-template-fluxd_client.key: |
          {{`{{`}}- with secret "intermediate_pki/issue/intermediate_pki_issuer" "common_name={{ include "grafana.fullname" . }}-fluxd-client.{{ .Release.Namespace }}.svc.cluster.local" {{`}}`}}
          {{`{{`}} .Data.private_key {{`}}`}}
          {{`{{`}}- end {{`}}`}}
        vault.hashicorp.com/agent-inject-secret-trusted_fluxd_server_ca.crt: "intermediate_pki/issue/intermediate_pki_issuer"
        vault.hashicorp.com/agent-inject-template-trusted_fluxd_server_ca.crt: |
          {{`{{`}}- with secret "intermediate_pki/issue/intermediate_pki_issuer" "common_name={{ include "grafana.fullname" . }}-fluxd-client.{{ .Release.Namespace }}.svc.cluster.local" {{`}}`}}
          {{`{{`}}- range $cert := .Data.ca_chain {{`}}`}}
          {{`{{`}} $cert {{`}}`}}
          {{`{{`}}- end {{`}}`}}
          {{`{{`}}- end {{`}}`}}
        vault.hashicorp.com/role: "vault_requester"
        vault.hashicorp.com/tls-skip-verify: "true"
        {{- end }}
    spec:
      containers:
      - name: {{ .Chart.Name }}
        image: "{{ include "common-lib.monitoring_registry" . }}/{{ .Values.image.repository }}:{{ .Values.image.tag | default .Values.global.monitoring_tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        resources:
{{ include "common-lib.resources" (dict "top" . "micro" "260Mi" "small" "310Mi" "medium" "410Mi" "large" "410Mi") | indent 10}}
        ports:
        - name: api
          containerPort: {{ .Values.config.http.bind_address }}
        env:
        - name: K8S_FLUXD
          {{- if .Values.global.tls_enabled }}
          value: "127.0.0.10"
          {{- else }}
          value: "{{ .Release.Name }}-fluxd.{{ .Release.Namespace }}.svc.cluster.local"
          {{- end }}
        {{- if .Values.config.oauth.enabled }}
        envFrom:
          - secretRef:
              name: {{ include "grafana.fullname" . }}-oauth
        {{- end }}
        volumeMounts:
        - mountPath: /dashboards_flex/internal
          name: dashboards-internal
        - mountPath: /dashboards_flex/internal_oe
          name: dashboards-internal-oe
        - mountPath: /etc/grafana/profile.conf
          name: provision-profile
          subPath: profile.conf
        - mountPath: /etc/grafana/grafana_flex.ini
          name: config-grafana-ini
          subPath: grafana.ini
        - name: varlog
          mountPath: /var/log
      {{- if .Values.global.tls_enabled }}
      - name: nginx
        image: "{{ include "common-lib.monitoring_registry" . }}/nginx:{{ .Values.global.monitoring_tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        ports:
        - name: api
          containerPort: {{ .Values.service.bind_address }}
        volumeMounts:
        - mountPath: /etc/nginx/conf.d
          name: nginx-config
        {{- if not .Values.global.use_vault_for_ssl }}
        - mountPath: /etc/nginx/cert
          name: cert
        {{- end }}
      # In case tls is disabled - liveness & readiness probes will go to main container
      {{- end }}
        # nginx logs to stdout, no need to mount varlog
        livenessProbe:
          httpGet:
            path: {{ .Values.livenessProbe.probePath }}
            port: api
            scheme: {{ $scheme }}
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds | default 30 }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds | default 30 }}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds | default 60 }}
          failureThreshold: {{ .Values.livenessProbe.failureThreshold | default 3 }}
        readinessProbe:
          httpGet:
            path: {{ .Values.readinessProbe.probePath }}
            port: api
            scheme: {{ $scheme }}
          initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds | default 5 }}
          timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds | default 30 }}
          periodSeconds: {{ .Values.readinessProbe.periodSeconds | default 60 }}
          failureThreshold: {{ .Values.readinessProbe.failureThreshold | default 3 }}
      {{- if .Values.global.rsyslog_enabled }}
      - name: rsyslog
        image: "{{ include "common-lib.monitoring_registry" . }}/rsyslog:{{ .Values.global.monitoring_tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        volumeMounts:
        - mountPath: /etc/rsyslog.conf
          name: rsyslog-config
          subPath: rsyslog.conf
        - name: rsyslog-socket
          mountPath: {{ .Values.global.rsyslog_uds_dir }}
        - name: varlog
          mountPath: /var/log
      {{- end }}
      - name: logrotate
        image: "{{ include "common-lib.monitoring_registry" . }}/rsyslog:{{ .Values.global.monitoring_tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        command: ["cron"]
        args: ["-n"]
        volumeMounts:
        - name: varlog
          mountPath: /var/log
        - mountPath: /etc/cron.d
          name: cron-config
        - mountPath: /etc/logrotate.d/svc
          name: logrotate-config
          subPath: svc
        - mountPath: /etc/logrotate.conf
          name: logrotate-config
          subPath: logrotate.conf
        - mountPath: /etc/cleanup_logs
          name: cleanup-script
          subPath: cleanup_logs
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml .Values.imagePullSecrets | indent 8 }}
      {{- end }}
      volumes:
      {{- if .Values.global.tls_enabled }}
      - name: nginx-config
        configMap:
          name: {{ template "grafana.fullname" . }}-nginx
      {{- if not .Values.global.use_vault_for_ssl }}
      - name: cert
        configMap:
          name: {{ .Release.Name }}-cert
      {{- end }}
      {{- end }}
      - name: dashboards-internal
        configMap:
          name: {{ template "grafana.fullname" . }}-dashboards-internal
      - name: dashboards-internal-oe
        configMap:
          name: {{ template "grafana.fullname" . }}-dashboards-internal-oe
      - name: provision-profile
        configMap:
          name: {{ template "grafana.fullname" . }}-profile
      - name: config-grafana-ini
        configMap:
          name: {{ include "grafana.fullname" . }}-grafana-ini
      {{- if .Values.global.rsyslog_enabled }}
      - name: rsyslog-config
        configMap:
          name: {{ .Release.Name }}-rsyslog-client-config
      - name: rsyslog-socket
        hostPath:
          path: {{ .Values.global.rsyslog_uds_dir }}
      {{- end }}
      - name: varlog
        emptyDir: {}
      - name: logrotate-config
        configMap:
          name: {{ .Release.Name }}-rsyslog-client-logrotate-config
      - name: cron-config
        configMap:
          name: {{ .Release.Name }}-rsyslog-client-cron-config
      - name: cleanup-script
        configMap:
          name: {{ .Release.Name }}-rsyslog-client-cleanup-logs-script
          defaultMode: 0755
