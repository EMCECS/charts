#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
{{- $scheme := ternary "HTTPS" "HTTP" .Values.global.tls_enabled }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "{{ template "influxdb.fullname" . }}"
  labels:
    app.kubernetes.io/name: "{{ template "influxdb.fullname" . }}"
    chart: "{{ template "influxdb.chart" . }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
spec:
  podManagementPolicy: Parallel
  replicas: {{ template "common-lib.influxdb_replicas" . }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ template "influxdb.fullname" . }}
  serviceName: "{{ template "influxdb.fullname" . }}"
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ template "influxdb.fullname" . }}
        release: "{{ .Release.Name }}"
      annotations:
      {{- if .Values.global.tls_enabled }}
        {{- if .Values.global.use_vault_for_ssl }}
        vault.hashicorp.com/agent-inject: "true"
        vault.hashicorp.com/agent-inject-status: "update"
        vault.hashicorp.com/agent-requests-cpu: ""
        vault.hashicorp.com/agent-limits-cpu: ""
        vault.hashicorp.com/agent-inject-secret-server.crt: "intermediate_pki/issue/intermediate_pki_issuer"
        vault.hashicorp.com/agent-inject-template-server.crt: |
          {{`{{`}}- with secret "intermediate_pki/issue/intermediate_pki_issuer" "common_name={{ include "influxdb.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local" {{`}}`}}
          {{`{{`}} .Data.certificate {{`}}`}}
          {{`{{`}} .Data.issuing_ca {{`}}`}}
          {{`{{`}}- end {{`}}`}}
        vault.hashicorp.com/agent-inject-secret-server.key: "intermediate_pki/issue/intermediate_pki_issuer"
        vault.hashicorp.com/agent-inject-template-server.key: |
          {{`{{`}}- with secret "intermediate_pki/issue/intermediate_pki_issuer" "common_name={{ include "influxdb.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local" {{`}}`}}
          {{`{{`}} .Data.private_key {{`}}`}}
          {{`{{`}}- end {{`}}`}}
        vault.hashicorp.com/agent-inject-secret-trusted_client_ca.crt: "intermediate_pki/issue/intermediate_pki_issuer"
        vault.hashicorp.com/agent-inject-template-trusted_client_ca.crt: |
          {{`{{`}}- with secret "intermediate_pki/issue/intermediate_pki_issuer" "common_name={{ include "influxdb.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local" {{`}}`}}
          {{`{{`}}- range $cert := .Data.ca_chain {{`}}`}}
          {{`{{`}} $cert {{`}}`}}
          {{`{{`}}- end {{`}}`}}
          {{`{{`}}- end {{`}}`}}
        vault.hashicorp.com/agent-inject-secret-influxdb_client.crt: "intermediate_pki/issue/intermediate_pki_issuer"
        vault.hashicorp.com/agent-inject-template-influxdb_client.crt: |
          {{`{{`}}- with secret "intermediate_pki/issue/intermediate_pki_issuer" "common_name={{ include "fluxd.fullname" . }}-influxdb-client.{{ .Release.Namespace }}.svc.cluster.local" {{`}}`}}
          {{`{{`}} .Data.certificate {{`}}`}}
          {{`{{`}}- end {{`}}`}}
        vault.hashicorp.com/agent-inject-secret-influxdb_client.key: "intermediate_pki/issue/intermediate_pki_issuer"
        vault.hashicorp.com/agent-inject-template-influxdb_client.key: |
          {{`{{`}}- with secret "intermediate_pki/issue/intermediate_pki_issuer" "common_name={{ include "fluxd.fullname" . }}-influxdb-client.{{ .Release.Namespace }}.svc.cluster.local" {{`}}`}}
          {{`{{`}} .Data.private_key {{`}}`}}
          {{`{{`}}- end {{`}}`}}
        vault.hashicorp.com/agent-inject-secret-trusted_influxdb_server_ca.crt: "intermediate_pki/issue/intermediate_pki_issuer"
        vault.hashicorp.com/agent-inject-template-trusted_influxdb_server_ca.crt: |
          {{`{{`}}- with secret "intermediate_pki/issue/intermediate_pki_issuer" "common_name={{ include "fluxd.fullname" . }}-influxdb-client.{{ .Release.Namespace }}.svc.cluster.local" {{`}}`}}
          {{`{{`}}- range $cert := .Data.ca_chain {{`}}`}}
          {{`{{`}} $cert {{`}}`}}
          {{`{{`}}- end {{`}}`}}
          {{`{{`}}- end {{`}}`}}
        vault.hashicorp.com/role: "vault_requester"
        vault.hashicorp.com/tls-skip-verify: "true"
        {{- end }}
        {{- if .Values.podAnnotations }}
{{ toYaml .Values.podAnnotations | indent 8 }}
        {{- end }}
      {{- end }}
    spec:
      {{- if .Values.image.pullSecrets }}
      imagePullSecrets:
      {{- range .Values.image.pullSecrets }}
        - name: {{ . }}
      {{- end}}
      {{- end }}
      initContainers:
      - name: {{ .Chart.Name }}-init
        image: "{{ include "common-lib.monitoring_registry" . }}/{{ .Values.image.repository }}:{{ .Values.image.tag | default .Values.global.monitoring_tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        resources:
{{ include "common-lib.resources" (dict "top" . "micro" "300Mi" "small" "300Mi" "medium" "1Gi" "large" "2Gi") | indent 10}}
        ports:
        - name: api
          containerPort: {{ .Values.config.http.bind_address }}
        env:
        {{- if .Values.env }}
        {{- range .Values.env }}
        - name: {{ .name | quote }}
          value: {{ .value | quote }}
        {{- end }}
        {{- end }}
        - name: INIT_CTNR
          value: "1"
        volumeMounts:
        - name: {{ template "influxdb.fullname" . }}-data
          mountPath: {{ .Values.config.storage_directory }}
        - name: config
          mountPath: /data/influxdb/conf/
          {{- if .Values.initScripts.enabled }}
        - name: init
          mountPath: /docker-entrypoint-initdb.d
        {{- end }}
        - name: varlog
          mountPath: /var/log
      containers:
      - name: {{ .Chart.Name }}
        image: "{{ include "common-lib.monitoring_registry" . }}/{{ .Values.image.repository }}:{{ .Values.image.tag | default .Values.global.monitoring_tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        resources:
{{ include "common-lib.resources" (dict "top" . "micro" "410Mi" "small" "410Mi" "medium" "1134Mi" "large" "2154Mi") | indent 10}}
        ports:
        - name: api
          containerPort: {{ .Values.config.http.bind_address }}
        {{- if .Values.config.admin.enabled }}
        - name: admin
          containerPort: {{ .Values.config.admin.bind_address }}
        {{- end }}
        env:
        {{ if .Values.disable_recovery }}
        - name: "FLEX_DISABLE_RECOVERY"
          value: "1"
        {{- end }}
        {{- if .Values.env }}
        {{- range .Values.env }}
        - name: {{ .name | quote }}
          value: {{ .value | quote }}
        {{- end }}
        {{- end }}
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        volumeMounts:
        - name: {{ template "influxdb.fullname" . }}-data
          mountPath: {{ .Values.config.storage_directory }}
        - name: config
          mountPath: /data/influxdb/conf/
        - name: varlog
          mountPath: /var/log
      {{- if .Values.global.tls_enabled }}
      - name: nginx
        image: "{{ include "common-lib.monitoring_registry" . }}/nginx:{{ .Values.global.monitoring_tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        ports:
        - name: api
          containerPort: {{ .Values.service.bind_address }}
        - name: rpc
          containerPort: {{ .Values.service.rpc.bind_address }}
        volumeMounts:
        - mountPath: /etc/nginx/nginx.conf
          name: nginx-config
          subPath: nginx.conf
        - mountPath: /etc/nginx/conf.d
          name: nginx-config-context
        {{- if not .Values.global.use_vault_for_ssl }}
        - mountPath: /etc/nginx/cert
          name: cert
        {{- end }}
      # In case tls is disabled - liveness & readiness probes will go to main container
      {{- end }}
        livenessProbe:
          httpGet:
            path: {{ .Values.livenessProbe.probePath }}
            port: api
            scheme: {{ $scheme }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds | default 30 }}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds | default 60 }}
          {{- if .Values.disable_recovery }}
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds | default 30 }}
          failureThreshold: {{ .Values.livenessProbe.failureThreshold | default 60 }}
          {{- else }}
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds | default 180 }}
          failureThreshold: {{ .Values.livenessProbe.failureThreshold | default 360 }}
        {{- end }}
        readinessProbe:
          httpGet:
            path: {{ .Values.readinessProbe.probePath }}
            port: api
            scheme: {{ $scheme }}
          periodSeconds: {{ .Values.readinessProbe.periodSeconds | default 60 }}
          timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds | default 30 }}
          {{- if .Values.disable_recovery }}
          initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds | default 5 }}
          failureThreshold: {{ .Values.readinessProbe.failureThreshold | default 60 }}
          {{- else }}
          initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds | default 120 }}
          failureThreshold: {{ .Values.readinessProbe.failureThreshold | default 360 }}
          {{- end }}
        {{- if .Values.startupProbe.enabled }}
        startupProbe:
          httpGet:
            path: {{ .Values.startupProbe.probePath }}
            port: api
            scheme: {{ $scheme }}   
          initialDelaySeconds: {{ .Values.startupProbe.initialDelaySeconds | default 30 }}
          failureThreshold: {{ .Values.startupProbe.failureThreshold | default 6 }}
          periodSeconds: {{ .Values.startupProbe.periodSeconds | default 5 }}
        {{- end }}
{{ include "common-lib.rsyslog_client_sidecar" . | indent 6 }}
      {{ if not .Values.disable_recovery }}
      - name: cron
        image: "{{ include "common-lib.monitoring_registry" . }}/{{ .Values.image.repository }}:{{ .Values.image.tag | default .Values.global.monitoring_tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        command: ["/bin/bash"]
        args:
          - -c
          - env >> /etc/environment; cron -n
        env:
        {{- if .Values.env }}
        {{- range .Values.env }}
        - name: {{ .name | quote }}
          value: {{ .value | quote }}
        {{- end }}
        {{- end }}
        volumeMounts:
        - name: {{ template "influxdb.fullname" . }}-data
          mountPath: {{ .Values.config.storage_directory }}
        - name: config
          mountPath: /data/influxdb/conf/
        - name: varlog
          mountPath: /var/log
        - name: restore-ranges-cron-config
          mountPath: /etc/cron.d
      {{- end }}
      - name: logrotate
        image: "{{ include "common-lib.monitoring_registry" . }}/rsyslog:{{ .Values.global.monitoring_tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        command: ["cron"]
        args: ["-n"]
        volumeMounts:
        - name: varlog
          mountPath: /var/log
        - mountPath: /etc/cron.d
          name: cron-config
        - mountPath: /etc/logrotate.d/svc
          name: logrotate-config
          subPath: svc
        - mountPath: /etc/logrotate.conf
          name: logrotate-config
          subPath: logrotate.conf
        - mountPath: /etc/cleanup_logs
          name: cleanup-script
          subPath: cleanup_logs
      volumes:
      {{- if .Values.global.tls_enabled }}
      - name: nginx-config
        configMap:
          name: {{ template "influxdb.fullname" . }}-nginx
      - name: nginx-config-context
        configMap:
          name: {{ template "influxdb.fullname" . }}-nginx-context
      {{- if not .Values.global.use_vault_for_ssl }}
      - name: cert
        configMap:
          name: {{ .Release.Name }}-cert
      {{- end }}
      {{- end }}
      - name: config
        configMap:
          name: {{ template "influxdb.fullname" . }}
      {{- if .Values.initScripts.enabled }}
      - name: init
        configMap:
          name: {{ template "influxdb.fullname" . }}-init
      {{- end }}
      {{- if (not .Values.persistence.enabled ) }}
      - name: {{ template "influxdb.fullname" . }}-data
        emptyDir: {}
      {{- end }}
{{ include "common-lib.rsyslog_client_volumes" . | indent 6 }}
      - name: varlog
        emptyDir: {}
      - name: restore-ranges-cron-config
        configMap:
          name: {{ template "influxdb.fullname" . }}-cron-config
      - name: logrotate-config
        configMap:
          name: {{ .Release.Name }}-rsyslog-client-logrotate-config
      - name: cron-config
        configMap:
          name: {{ .Release.Name }}-rsyslog-client-cron-config
      - name: cleanup-script
        configMap:
          name: {{ .Release.Name }}-rsyslog-client-cleanup-logs-script
          defaultMode: 0755
    {{- if .Values.schedulerName }}
      schedulerName: "{{ .Values.schedulerName }}"
    {{- end }}
    {{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
      {{- end -}}
      {{- if .Values.affinity }}
      affinity:
{{ toYaml .Values.affinity | indent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
      {{- end }}
{{- if .Values.persistence.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: {{ template "influxdb.fullname" . }}-data
        annotations:
        {{- range $key, $value := .Values.persistence.annotations }}
          {{ $key }}: "{{ $value }}"
        {{- end }}
        labels:
          release: {{ .Release.Name }}
      spec:
        accessModes:
          - {{ .Values.persistence.accessMode | quote}}
        resources:
          requests:
            storage: {{ .Values.persistence.size | quote }}
        storageClassName: "{{ .Values.persistence.storageClassName }}"
{{- end }}
