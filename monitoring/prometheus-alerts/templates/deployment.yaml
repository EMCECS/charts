#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
{{- $scheme := ternary "HTTPS" "HTTP" .Values.global.tls_enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "prometheus-alerts.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ include "prometheus-alerts.fullname" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    helm.sh/chart: {{ include "prometheus-alerts.chart" . }}
spec:
  replicas: {{ include "common-lib.replicaCount" (dict "top" . "micro" 1 "small" 1 "medium" 1 "large" 1)}}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "prometheus-alerts.fullname" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "prometheus-alerts.fullname" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        release: {{ .Release.Name }}
      annotations:
        {{- if .Values.global.use_vault_for_ssl }}
        vault.hashicorp.com/agent-inject: "true"
        vault.hashicorp.com/agent-inject-status: "update"
        vault.hashicorp.com/agent-requests-cpu: ""
        vault.hashicorp.com/agent-limits-cpu: ""
        vault.hashicorp.com/agent-inject-secret-fluxd_client.crt: "intermediate_pki/issue/intermediate_pki_issuer"
        vault.hashicorp.com/agent-inject-template-fluxd_client.crt: |
          {{`{{`}}- with secret "intermediate_pki/issue/intermediate_pki_issuer" "common_name={{ include "prometheus-alerts.fullname" . }}-fluxd-client.{{ .Release.Namespace }}.svc.cluster.local" {{`}}`}}
          {{`{{`}} .Data.certificate {{`}}`}}
          {{`{{`}}- end {{`}}`}}
        vault.hashicorp.com/agent-inject-secret-fluxd_client.key: "intermediate_pki/issue/intermediate_pki_issuer"
        vault.hashicorp.com/agent-inject-template-fluxd_client.key: |
          {{`{{`}}- with secret "intermediate_pki/issue/intermediate_pki_issuer" "common_name={{ include "prometheus-alerts.fullname" . }}-fluxd-client.{{ .Release.Namespace }}.svc.cluster.local" {{`}}`}}
          {{`{{`}} .Data.private_key {{`}}`}}
          {{`{{`}}- end {{`}}`}}
        vault.hashicorp.com/agent-inject-secret-trusted_fluxd_server_ca.crt: "intermediate_pki/issue/intermediate_pki_issuer"
        vault.hashicorp.com/agent-inject-template-trusted_fluxd_server_ca.crt: |
          {{`{{`}}- with secret "intermediate_pki/issue/intermediate_pki_issuer" "common_name={{ include "prometheus-alerts.fullname" . }}-fluxd-client.{{ .Release.Namespace }}.svc.cluster.local" {{`}}`}}
          {{`{{`}}- range $cert := .Data.ca_chain {{`}}`}}
          {{`{{`}} $cert {{`}}`}}
          {{`{{`}}- end {{`}}`}}
          {{`{{`}}- end {{`}}`}}
        vault.hashicorp.com/role: "vault_requester"
        vault.hashicorp.com/tls-skip-verify: "true"
        {{- end }}
    spec:
      serviceAccountName: {{ template "prometheus.serviceAccountName" . }}
      containers:
      - name: prometheus
        image: "{{ include "common-lib.monitoring_registry" . }}/{{ .Values.prometheus.image.repository }}:{{ .Values.prometheus.image.tag | default .Values.global.monitoring_tag }}"
        imagePullPolicy: {{ .Values.prometheus.image.pullPolicy | quote }}
        args:
          - --storage.tsdb.path=/data
          - --storage.tsdb.retention.time={{ .Values.config.tsdb_retention }}
          - --config.file=/etc/prometheus/prometheus.yaml
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: {{ .Values.prometheus.readinessProbeInitialDelay }}
          timeoutSeconds: {{ .Values.prometheus.readinessProbeTimeout }}
          failureThreshold: {{ .Values.prometheus.readinessProbeFailureThreshold }}
          successThreshold: {{ .Values.prometheus.readinessProbeSuccessThreshold }}
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: {{ .Values.prometheus.livenessProbeInitialDelay }}
          timeoutSeconds: {{ .Values.prometheus.livenessProbeTimeout }}
          failureThreshold: {{ .Values.prometheus.livenessProbeFailureThreshold }}
          successThreshold: {{ .Values.prometheus.livenessProbeSuccessThreshold }}
        resources:
{{ toYaml .Values.prometheus.resources | indent 10 }}
        volumeMounts:
        - mountPath: /etc/prometheus
          name: prometheus-config
        - mountPath: /etc/alerts
          name: prometheus-alerts-config
        - mountPath: /data
          name: prometheus-storage-volume
      - name: alertmanager
        image: "{{ include "common-lib.monitoring_registry" . }}/{{ .Values.alertmanager.image.repository }}:{{ .Values.alertmanager.image.tag | default .Values.global.monitoring_tag }}"
        imagePullPolicy: {{ .Values.alertmanager.image.pullPolicy | quote }}
        args:
          - --storage.path=/data
          - --config.file=/etc/alertmanager/alertmanager.yaml
          - --data.retention={{ .Values.config.alertmanager_retention }}
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9093
          initialDelaySeconds: {{ .Values.alertmanager.readinessProbeInitialDelay }}
          timeoutSeconds: {{ .Values.alertmanager.readinessProbeTimeout }}
        volumeMounts:
        - mountPath: /etc/alertmanager
          name: prometheus-alertmanager-config
        - mountPath: /data
          name: alertmanager-storage-volume
      {{- if .Values.global.tls_enabled }}
      - name: nginx
        image: "{{ include "common-lib.monitoring_registry" . }}/nginx:{{ .Values.global.monitoring_tag }}"
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - mountPath: /etc/nginx/conf.d
          name: nginx-config
        {{- if not .Values.global.use_vault_for_ssl }}
        - mountPath: /etc/nginx/cert
          name: cert
        {{- end }}
      {{- end }}
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml .Values.imagePullSecrets | indent 8 }}
      {{- end }}
      volumes:
      {{- if .Values.global.tls_enabled }}
      - name: nginx-config
        configMap:
          name: {{ template "prometheus-alerts.fullname" . }}-nginx
      {{- if not .Values.global.use_vault_for_ssl }}
      - name: cert
        configMap:
          name: {{ .Release.Name }}-cert
      {{- end }}
      {{- end }}
      - name: prometheus-config
        configMap:
          name: {{ include "prometheus-alerts.fullname" . }}-config
      - name: prometheus-alerts-config
        configMap:
          name: {{ include "prometheus-alerts.fullname" . }}-alerts-config
      - name: prometheus-alertmanager-config
        configMap:
          name: {{ include "prometheus-alerts.fullname" . }}-alertmanager-config
      - name: prometheus-storage-volume
        emptyDir: {}
      - name: alertmanager-storage-volume
        emptyDir: {}
