---
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "rsyslog-client.fullname" . }}-cleanup-logs-script
  labels:
{{ include "rsyslog-client.labels" . | indent 4}}
data:
  cleanup_logs.sh: |+
    #!/bin/bash

    source {{ include "common-lib.rsyslog_env_file" . }}

    _log(){
        msg="$*"
        if [[ -n "$msg" ]] ; then
            echo "$(date "+%m%d%Y %T")":  "$msg"
        fi
    }

    MONITORING_LOGS="/var/log"
    _log "Started cleanup script. Logs folder: ${MONITORING_LOGS}"

    test -d "${MONITORING_LOGS}"            || exit 3

    # check if another instance is running (slowly) already
    SELF=$(basename "$0")
    if pidof -o %PPID -x "$SELF" > /dev/null; then
        exit 4
    fi

    # only remove compressed log files for now
    LOG_FILE_PATTERN="*.log*.gz" # the index/timestamp could be before or after the .log infix

    CHECK_INTERVAL=10

    du_high_watermark="${LOGS_SIZE_HIGH_WATERMARK:-{{ .Values.config.logs_size_high_watermark | replace "_" "" }}}"
    du_low_watermark="${LOGS_SIZE_LOW_WATERMARK:-{{ .Values.config.logs_size_low_watermark | replace "_" "" }}}"

    # some log files might not get compressed in error conditions,
    # compress them if not modified for a day.
    # assume the file name will be like
    #     messages-20140825-1409004745
    #     rm.log.20140826-165818
    NOT_COMPRESSED_PATTERN=".*20[0-9]{6}-[0-9]{6,10}$"
    find -L "${MONITORING_LOGS}" -regextype posix-egrep -regex "${NOT_COMPRESSED_PATTERN}" \
        -mmin +60 -exec gzip -f {} +

    LOGS_DISK_USAGE=$(du -skL "${MONITORING_LOGS}" | cut -f1)
    _log "Disk usage: $LOGS_DISK_USAGE. High watermark: ${du_high_watermark}."

    if [[ "$LOGS_DISK_USAGE" -gt ${du_high_watermark} ]]; then
        _log "Perform cleanup"

        LOG_LIST_FILE=/tmp/log_list

        # list files in time order
        find -L "${MONITORING_LOGS}" \( -name "${LOG_FILE_PATTERN}" \) \
            -exec stat -c "%Y %n" {} + | sort -n | awk '{print $2}' > ${LOG_LIST_FILE}

        # remove one by one
        i=0
        while read -r file; do
            rm -f "$file"
            _log "Removed $file"

            # check du less frequently to speed up removal
            i=$(( i + 1 ))
            if [[ $(( i % CHECK_INTERVAL)) -eq 0 ]]; then
              usage="$(du -skL ${MONITORING_LOGS} | cut -f1)"
              _log "Disk usage: ${usage}"
              if [[ "${usage}" -le "${du_low_watermark}" ]]; then
                _log "Disk usage ${usage} is below low watermark ${du_low_watermark}"
                break
              fi
            fi
        done < ${LOG_LIST_FILE}

        rm -f ${LOG_LIST_FILE}
    fi
    _log "Finished cleanup script"


