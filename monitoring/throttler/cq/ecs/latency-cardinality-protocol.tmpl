import "http"
raw = from(bucket: "monitoring_main")
|> filter(fn: (r) => r._measurement == "{{ .Params.measurement }}" and r.head == "{{ .Params.head }}")
|> range(start:{{ .Start }},stop:{{ .Stop }})
|> keep(columns:["_time", "_field", "_value", "host", "head", "id"])
|> difference(nonNegative: true)
|> group(columns: ["_field", "head", "id"])
|> window(every:5m)
|> sum()
|> rename(columns: {_start: "_time"})
|> range(start:{{ .KeepStart }},stop:{{ .Stop }})
|> map(fn:(r) => ({le_float: float(v:r._field), cnt_float: float(v:r._value)}))
|> drop(columns:["_field", "_stop"])

p50 = raw |> histogramQuantile(quantile:0.50, upperBoundColumn: "le_float", countColumn: "cnt_float")
|> set(key: "_field", value: "p50")
p99 = raw |> histogramQuantile(quantile:0.99, upperBoundColumn: "le_float", countColumn: "cnt_float")
|> set(key: "_field", value: "p99")

union(tables: [p50, p99])|> group(columns:["_field"])
|> group(columns: ["head", "id"])
|> pivot(rowKey:["_time"], columnKey: ["_field"], valueColumn: "_value")
|> group()
