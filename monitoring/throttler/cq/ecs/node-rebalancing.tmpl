import "http"
import "csv"

padding = csv.from(csv:"#datatype,string,long,dateTime:RFC3339,dateTime:RFC3339,dateTime:RFC3339,long,long,long,long
#group,false,false,false,false,false,false,false,false,false
#default,_result,,,,,,,,
,result,table,_stop,_start,_time,bytes_rebalanced,segments_for_rebalancing,segments_rebalanced,segments_rebalancing_failed
,,0,1970-01-01T00:00:00Z,1970-01-01T00:00:00Z,1970-01-01T00:00:00Z,0,0,0,0")

real = from(bucket: "monitoring_vdc")
|> filter(fn: (r) => r._measurement == "cq_total_cm_Rebalance_Statistics" and (r._field =~ /^(bytes_rebalanced|segments_for_rebalancing|segments_rebalanced|segments_rebalancing_failed)$/))
|> range(start: {{ .Start }}, stop: {{ .Stop }})
|> fillMissing(period: 5m)
|> range(start: {{ .KeepStart }}, stop: {{ .Stop }})
|> keep(columns:["_value", "_time", "_start", "_stop",  "_field"])
|> pivot(rowKey:["_time"], columnKey: ["_field"], valueColumn: "_value")

union(tables: [real, padding])
|> group()
|> fill(column: "segments_rebalancing_failed", usePrevious:true)
|> fill(column: "segments_for_rebalancing", usePrevious:true)
|> fill(column: "segments_rebalanced", usePrevious:true)
|> fill(column: "bytes_rebalanced", usePrevious:true)
|> range(start: {{ .KeepStart }}, stop: {{ .Stop }})
|> map(fn: (r) => ({data_rebalanced: r.bytes_rebalanced, pending_rebalance: (r.segments_for_rebalancing - r.segments_rebalanced - r.segments_rebalancing_failed) * 11184800, _time:r._time}))
|> map(fn: (r) => ({data_rebalanced: r.data_rebalanced, pending_rebalance: int(v: (r.pending_rebalance >= 0)) * r.pending_rebalance, _time:r._time}))