import "http"
all=from(bucket: "monitoring_op")
|> filter(fn: (r) => (r._measurement =~ /^cpu$|^mem$|^net$/) and (r._field =~ /^usage_user$|^used$|^used_percent$|^bytes_sum$|^utilization$/))
|> range(start: {{ .Start }}, stop: {{ .Stop }})
|> keep(columns: ["_time", "_value", "host", "_field"])
|> window(every: 5m)
|> drop(columns: ["host"])
|> mean(columns: ["_value"])
|> map(fn: (r) => float(v:uint(v:(r._value * 100.0))) / 100.0)
|> rename(columns: {_start:"_time"})
|> group(columns: ["_field"]) 
|> pivot(rowKey:["_time"], columnKey: ["_field"], valueColumn: "_value")
|> rename(columns: {used:"mem_used", used_percent:"mem_used_percent", usage_user:"cpu_used"})
|> range(start:{{ .KeepStart }}, stop:{{ .Stop }})

nic=from(bucket: "monitoring_op")
|> filter(fn: (r) => r._measurement == "kubernetes_node" and (r._field == "network_rx_bytes" or r._field == "network_tx_bytes"))
|> range(start: {{ .Start }}, stop: {{ .Stop }})
|> keep(columns:["_time", "_value", "_field", "node_name"])
|> derivative(nonNegative: true, unit:1s)
|> pivot(rowKey:["_time"],columnKey: ["_field"],valueColumn: "_value")
|> map(fn: (r) => ({_time: r._time, _value: r.network_rx_bytes + r.network_tx_bytes}))
|> window(every: 5m)
|> drop(columns: ["node_name"])
|> sum(columns: ["_value"])
|> group(columns: ["_field"])
|> rename(columns: {_start:"_time"})
|> keep(columns:["_time", "_value"])
|> rename(columns:{_value:"nic_bytes"})
|> range(start:{{ .KeepStart }}, stop:{{ .Stop }})

join(tables: {all:all, nic:nic}, on: ["_time"])
