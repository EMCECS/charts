---
# Source: ecs-cluster/charts/ecs-monitoring/charts/fluxd/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ecs-cluster-fluxd
  labels:
    app.kubernetes.io/name: ecs-cluster-fluxd
    app.kubernetes.io/instance: ecs-cluster
    app.kubernetes.io/managed-by: Helm
---
# Source: ecs-cluster/charts/ecs-monitoring/charts/telegraf-prom/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ecs-cluster-telegraf-prom
  labels:
    app.kubernetes.io/name: ecs-cluster-telegraf-prom
    app.kubernetes.io/instance: ecs-cluster
    app.kubernetes.io/managed-by: Helm
---
# Source: ecs-cluster/charts/ecs-monitoring/charts/throttler/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ecs-cluster-throttler
  labels:
    app.kubernetes.io/name: ecs-cluster-throttler
    app.kubernetes.io/instance: ecs-cluster
    app.kubernetes.io/managed-by: Helm
---
# Source: ecs-cluster/templates/healthcheck-rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ecs-cluster-healthchecks
  namespace: default
---
# Source: ecs-cluster/templates/objectstore-rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ecs-cluster
  namespace: default
  labels:
    app.kubernetes.io/name: ecs-cluster
    app.kubernetes.io/instance: ecs-cluster
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.69.0
    helm.sh/chart: ecs-cluster-0.69.0
    release: ecs-cluster
    operator: objectscale-operator
    product: objectscale
---
# Source: ecs-cluster/charts/ecs-monitoring/charts/grafana/templates/grafana-user-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: ecs-cluster-grafana-view-all-user0
  namespace: default
  labels:
    app.kubernetes.io/name: ecs-cluster
    app.kubernetes.io/instance: ecs-cluster
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.54.0
    app.kubernetes.io/part-of: ecs-cluster
    helm.sh/chart: grafana-0.54.0
    product: objectscale
    release: ecs-cluster
type: Opaque
stringData:
  username: "emcmonitor"
  password: "ChangeMe"
---
# Source: ecs-cluster/charts/ecs-monitoring/charts/grafana/templates/grafana-user-secret.yaml
---
apiVersion: v1
kind: Secret
metadata:
  name: ecs-cluster-grafana-view-all-user1
  namespace: default
  labels:
    app.kubernetes.io/name: ecs-cluster
    app.kubernetes.io/instance: ecs-cluster
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.54.0
    app.kubernetes.io/part-of: ecs-cluster
    helm.sh/chart: grafana-0.54.0
    product: objectscale
    release: ecs-cluster
type: Opaque
stringData:
  username: "emcservice"
  password: "ChangeMe"
---
# Source: ecs-cluster/charts/ecs-monitoring/charts/grafana/templates/grafana-user-secret.yaml
---
apiVersion: v1
kind: Secret
metadata:
  name: ecs-cluster-grafana-view-user0
  namespace: default
  labels:
    app.kubernetes.io/name: ecs-cluster
    app.kubernetes.io/instance: ecs-cluster
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.54.0
    app.kubernetes.io/part-of: ecs-cluster
    helm.sh/chart: grafana-0.54.0
    product: objectscale
    release: ecs-cluster
type: Opaque
stringData:
  username: "root"
  password: "ChangeMe"
---
# Source: ecs-cluster/charts/ecs-monitoring/charts/fluxd/templates/configs-confd-template.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#

apiVersion: v1
kind: ConfigMap
metadata:
  name: ecs-cluster-fluxd-confd-template
  labels:
    app.kubernetes.io/name: ecs-cluster-fluxd
    app.kubernetes.io/instance: ecs-cluster
    app.kubernetes.io/managed-by: Helm
data:
  fluxd_flex.hl.json.toml: |+
    [template]
    src = "fluxd_flex.hl.json.tmpl"
    dest = "/etc/fluxd/hl.json"
    keys = [
        "/replicas",
    ]
    reload_cmd = "pkill fluxd"
  fluxd_flex.env.toml: |+
    [template]
    src = "fluxd_flex.env.tmpl"
    dest = "/etc/fluxd/fluxd.env"
    keys = [
        "/replicas",
    ]
    reload_cmd = "pkill fluxd"
---
# Source: ecs-cluster/charts/ecs-monitoring/charts/fluxd/templates/configs-template.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ecs-cluster-fluxd-configs-templates
  labels:
    app: "ecs-cluster-fluxd"
    chart: "fluxd-0.54.0"
    release: ecs-cluster
data:
  fluxd_flex.hl.json.tmpl: |-
    {
      "range-selection-enabled": true,
      "store-sync-enabled": true,
      "store-type": "k8s",
      "root-store-location": "fluxd-hostlookup-influxdb",
      "start-sleep-max": "30s",
      "update-interval": "5m",
      "check-interval": "5m",
      "writer-check-interval": "200s",
      "history-duration": "120h",
      "init-retry-interval": "20s",
      "request-timeout": "30s",
      "startup-ranges-fill-timeout": "3m",
      "startup-ping-timeout": "20s",
      "online-ping-interval": "30s",
      "online-ping-retries": 3,{{- $replicas := atoi (getv "/replicas" "1") }}
    {{- $replicas_per_partition := atoi (getenv "INFLUXDB_REPLICAS_PER_PARTITION" "3") }}
      {{- $partitions_count := div $replicas $replicas_per_partition }}
      "scale-partitions-count": {{ $partitions_count }},
      "scale-replicas-per-partition": {{ $replicas_per_partition }}
    }
  fluxd_flex.env.tmpl: |-
    {{- $release_name := getenv "RELEASE_NAME" "" -}}
    {{- $release_namespace := getenv "RELEASE_NAMESPACE" "" -}}
    {{- $tls_enabled := getenv "TLS_ENABLED" "" -}}
    {{- $replicas := atoi (getv "/replicas" "1") -}}STORAGE_HOSTS=
    {{- range $i, $e := seq 1 ($replicas) -}}
    {{- if $i}},{{end -}}
    {{- if eq $tls_enabled "true" -}}127.0.0.1{{$i}}:8{{$i}}86
    {{- else -}}{{- $release_name }}-influxdb-{{$i}}.{{ $release_name }}-influxdb.{{ $release_namespace }}.svc.cluster.local:8086
    {{- end -}}
    {{- end }}
---
# Source: ecs-cluster/charts/ecs-monitoring/charts/fluxd/templates/logger-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ecs-cluster-fluxd-logger-config
  labels:
    app: "ecs-cluster-fluxd"
    chart: "fluxd-0.54.0"
    release: ecs-cluster
data:
  logger.json: |-
    {
      "maxsize": 50,
      "maxbackups": 1,
      "maxage": 60,
      "compress": false
    }
---
# Source: ecs-cluster/charts/ecs-monitoring/charts/grafana/templates/dashboards.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "ecs-cluster-grafana-dashboards-internal"
  labels:
    release: ecs-cluster
data:
  capacity_ec.json: |-
    {
      "__inputs": [],
      "__requires": [
        {
          "type": "grafana",
          "id": "grafana",
          "name": "Grafana",
          "version": "6.2.5ecs"
        },
        {
          "type": "panel",
          "id": "graph",
          "name": "Graph",
          "version": ""
        },
        {
          "type": "panel",
          "id": "table",
          "name": "Table",
          "version": ""
        }
      ],
      "annotations": {
        "list": [
          {
            "builtIn": 1,
            "datasource": "-- Grafana --",
            "enable": true,
            "hide": true,
            "iconColor": "rgba(0, 211, 255, 1)",
            "name": "Annotations & Alerts",
            "type": "dashboard"
          }
        ]
      },
      "editable": true,
      "gnetId": null,
      "graphTooltip": 0,
      "id": null,
      "links": [],
      "panels": [
        {
          "columns": [],
          "fontSize": "100%",
          "gridPos": {
            "h": 3,
            "w": 24,
            "x": 0,
            "y": 0
          },
          "id": 2,
          "links": [],
          "options": {},
          "pageSize": null,
          "scroll": true,
          "showHeader": true,
          "sort": {
            "col": 0,
            "desc": true
          },
          "styles": [
            {
              "alias": "Time",
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "pattern": "Time",
              "type": "hidden"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "decimals": 2,
              "pattern": "Field",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Measurement",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Value",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "Coding Rate",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "coding_rate",
              "thresholds": [],
              "type": "number",
              "unit": "Bps"
            },
            {
              "alias": "Coded (%)",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "coded_ratio",
              "thresholds": [],
              "type": "number",
              "unit": "percentunit"
            },
            {
              "alias": "Total Coded Data",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "total_coded_data",
              "thresholds": [],
              "type": "number",
              "unit": "bytes"
            },
            {
              "alias": "Total Coding Data",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "total_coding_data",
              "thresholds": [],
              "type": "number",
              "unit": "bytes"
            },
            {
              "alias": "Est. Time to Complete",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 1,
              "mappingType": 1,
              "pattern": "est_time",
              "thresholds": [],
              "type": "number",
              "unit": "s"
            }
          ],
          "targets": [
            {
              "query": "import \"csv\"\ndefault = csv.from(csv:\"#datatype,string,long,string,double\n#group,false,false,true,false\n#default,_result,,,\n,result,table,_field,_value\n,,100,total_coding_data,0\")\n\ndata = from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_ec\"\r and r._field == \"total_coding_data\")\r\n|> range($range)\r\n|> last()\n|> keep(columns: [\"_field\", \"_value\"])\n\nunion(tables: [default, data])\n\r\n\r\r\r\n|> pivot(rowKey:[], columnKey: [\"_field\"], valueColumn: \"_value\")\n|> map(fn: (r) => ({total_coding_data: if r.total_coding_data < 0 then 0.0 else r.total_coding_data}))\n",
              "refId": "B",
              "resultFormat": "table"
            },
            {
              "query": "import \"csv\"\ndefault = csv.from(csv:\"#datatype,string,long,string,double\n#group,false,false,true,false\n#default,_result,,,\n,result,table,_field,_value\n,,100,total_coded_data,0\")\n\ndata = from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_ec\"\r and r._field == \"total_coded_data\")\r\n|> range($range)\r\n|> last()\n|> keep(columns: [\"_field\", \"_value\"])\n\nunion(tables: [default, data])\n\r\n\r\r\r\n\r\n|> pivot(rowKey:[], columnKey: [\"_field\"], valueColumn: \"_value\")",
              "refId": "A",
              "resultFormat": "table"
            },
            {
              "query": "import \"csv\"\ndefault = csv.from(csv:\"#datatype,string,long,string,double\n#group,false,false,true,false\n#default,_result,,,\n,result,table,_field,_value\n,,100,total_coding_data,0\n,,101,total_coded_data,0\")\n\ndata = from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_ec\"\r and (r._field == \"total_coding_data\" or r._field == \"total_coded_data\"))\r\n|> range($range)\r\n|> last()\n|> keep(columns: [\"_field\", \"_value\"])\n\nunion(tables: [default, data])\n\r\n\r\r\r\n\r\n|> pivot(rowKey:[], columnKey: [\"_field\"], valueColumn: \"_value\")\n|> map(fn: (r) => ({\n    coded_ratio:if r.total_coding_data <= 0 then 0.0\n                else if r.total_coded_data > r.total_coding_data then 1.0\n                else r.total_coded_data / r.total_coding_data\n   }))\n",
              "refId": "D",
              "resultFormat": "table"
            },
            {
              "query": "import \"csv\"\ndefault = csv.from(csv:\"#datatype,string,long,string,double\n#group,false,false,true,false\n#default,_result,,,\n,result,table,_field,_value\n,,100,coding_rate,0\")\n\ndata = from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_ec_rate\"\r and r._field == \"coding_rate\")\r\n|> range($range)\r\n|> last()\n|> keep(columns: [\"_field\", \"_value\"])\n\nunion(tables: [default, data])\n\r\n\r\r\r\n\r\n|> pivot(rowKey:[], columnKey: [\"_field\"], valueColumn: \"_value\")\n",
              "refId": "C",
              "resultFormat": "table"
            },
            {
              "query": "import \"csv\"\ndefault = csv.from(csv:\"#datatype,string,long,string,double\n#group,false,false,true,false\n#default,_result,,,\n,result,table,_field,_value\n,,100,total_coding_data,0\n,,101,total_coded_data,0\n,,102,coding_rate,0\")\n\ndata = from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) =>\n   (r._measurement == \"cq_capacity_ec\"\r and (r._field == \"total_coding_data\" or r._field == \"total_coded_data\"))\n   or (r._measurement == \"cq_capacity_ec_rate\"\r and r._field == \"coding_rate\"))\n|> range($range)\r\n|> last()\n|> keep(columns: [\"_field\", \"_value\"])\n\nunion(tables: [default, data])\n\r\n|> pivot(rowKey:[], columnKey: [\"_field\"], valueColumn: \"_value\")\n|> map(fn: (r) => ({\n       pending_data: r.total_coding_data - r.total_coded_data,\n       coding_rate: r.coding_rate\n       }))\n|> map(fn: (r) => ({\n       est_time: if r.pending_data > 0 then r.pending_data / (r.coding_rate) else 0.0\n       }))",
              "refId": "E",
              "resultFormat": "table"
            }
          ],
          "timeFrom": null,
          "timeShift": null,
          "title": "Erasure Encoding",
          "transform": "table",
          "type": "table"
        },
        {
          "collapsed": true,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 3
          },
          "id": 4,
          "panels": [
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "fill": 1,
              "gridPos": {
                "h": 8,
                "w": 12,
                "x": 0,
                "y": 4
              },
              "id": 6,
              "legend": {
                "avg": false,
                "current": true,
                "max": false,
                "min": false,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_ec\"\r and r._field == \"total_coding_data\")\r\n|> range($range)\r\n|> keep(columns: [\"_value\", \"_time\"])\n|> map(fn: (r) => ({_value: if r._value < 0 then 0.0 else r._value, _time: r._time}))\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Total Coding Data",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "bytes",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "fill": 1,
              "gridPos": {
                "h": 8,
                "w": 12,
                "x": 12,
                "y": 4
              },
              "id": 7,
              "legend": {
                "avg": false,
                "current": true,
                "max": false,
                "min": false,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_ec\"\r and r._field == \"total_coded_data\")\r\n|> range($range)\r\n|> keep(columns: [\"_value\", \"_time\"])\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Total Coded Data",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "bytes",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "fill": 1,
              "gridPos": {
                "h": 8,
                "w": 12,
                "x": 0,
                "y": 12
              },
              "id": 9,
              "legend": {
                "avg": false,
                "current": true,
                "max": false,
                "min": false,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_ec\"\r and (r._field == \"total_coding_data\" or r._field == \"total_coded_data\"))\r\n|> range($range)\r\n|> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n|> map(fn: (r) => ({_value:\n   if r.total_coding_data <= 0 then 0.0\n   else if r.total_coded_data > r.total_coding_data then 1.0\n   else r.total_coded_data / r.total_coding_data,\n   _time: r._time}))\n|> keep(columns: [\"_value\", \"_time\"])\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Coded (%)",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 2,
                  "format": "percentunit",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "fill": 1,
              "gridPos": {
                "h": 8,
                "w": 12,
                "x": 12,
                "y": 12
              },
              "id": 8,
              "legend": {
                "avg": false,
                "current": true,
                "max": false,
                "min": false,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_ec_rate\"\r and r._field == \"coding_rate\")\r\n|> range($range)\r\n|> keep(columns: [\"_value\", \"_time\"])\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Coding Rate (per second)",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "Bps",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            }
          ],
          "title": "History",
          "type": "row"
        }
      ],
      "schemaVersion": 18,
      "style": "dark",
      "tags": [
        "Overview"
      ],
      "templating": {
        "list": []
      },
      "time": {
        "from": "now-24h",
        "to": "now"
      },
      "timepicker": {
        "refresh_intervals": [
          "5s",
          "10s",
          "30s",
          "1m",
          "5m",
          "15m",
          "30m",
          "1h",
          "2h",
          "1d"
        ],
        "time_options": [
          "5m",
          "15m",
          "1h",
          "6h",
          "12h",
          "24h",
          "2d",
          "7d",
          "30d"
        ]
      },
      "timezone": "",
      "title": "Erasure Encoding",
      "uid": "V1uHcOKWf",
      "version": 1
    }
  capacity_overview.json: |-
    {
      "__inputs": [],
      "__requires": [
        {
          "type": "grafana",
          "id": "grafana",
          "name": "Grafana",
          "version": "6.2.5ecs"
        },
        {
          "type": "panel",
          "id": "graph",
          "name": "Graph",
          "version": ""
        },
        {
          "type": "panel",
          "id": "table",
          "name": "Table",
          "version": ""
        }
      ],
      "annotations": {
        "list": [
          {
            "builtIn": 1,
            "datasource": "-- Grafana --",
            "enable": true,
            "hide": true,
            "iconColor": "rgba(0, 211, 255, 1)",
            "name": "Annotations & Alerts",
            "type": "dashboard"
          }
        ]
      },
      "editable": true,
      "gnetId": null,
      "graphTooltip": 0,
      "id": null,
      "links": [
        {
          "asDropdown": true,
          "icon": "external link",
          "tags": [
            "Capacity"
          ],
          "title": "Related dashboards",
          "type": "dashboards"
        }
      ],
      "panels": [
        {
          "columns": [],
          "description": "The forecast table provides an estimated number of days when the capacity is expected to reach 50% and 80% based on the last 1, 7, and 30 days trend.",
          "fontSize": "100%",
          "gridPos": {
            "h": 3,
            "w": 24,
            "x": 0,
            "y": 0
          },
          "id": 23,
          "links": [],
          "options": {},
          "pageSize": null,
          "scroll": true,
          "showHeader": true,
          "sort": {
            "col": 0,
            "desc": true
          },
          "styles": [
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Time",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Measurement",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Value",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Field",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "Per 1 Day Trend 50%",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss.SSS",
              "decimals": 1,
              "mappingType": 1,
              "pattern": "T1_D1T50",
              "thresholds": [],
              "type": "number",
              "unit": "dtdurations"
            },
            {
              "alias": "Per 7 Day Trend 50%",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 1,
              "mappingType": 1,
              "pattern": "T2_D7T50",
              "thresholds": [],
              "type": "number",
              "unit": "dtdurations"
            },
            {
              "alias": "Per 30 Day Trend 50%",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 1,
              "mappingType": 1,
              "pattern": "T3_D30T50",
              "thresholds": [],
              "type": "number",
              "unit": "dtdurations"
            },
            {
              "alias": "Per 1 Day Trend 80%",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 1,
              "mappingType": 1,
              "pattern": "T4_D1T80",
              "thresholds": [],
              "type": "number",
              "unit": "dtdurations"
            },
            {
              "alias": "Per 7 Day Trend 80%",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 1,
              "mappingType": 1,
              "pattern": "T5_D7T80",
              "thresholds": [],
              "type": "number",
              "unit": "dtdurations"
            },
            {
              "alias": "Per 30 Day Trend 80%",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 1,
              "mappingType": 1,
              "pattern": "T6_D30T80",
              "thresholds": [],
              "type": "number",
              "unit": "dtdurations"
            }
          ],
          "targets": [
            {
              "query": "sec_in_ns = 1000000000\nalign_time = 15 * 60\nstop_time_aligned = $__range_to_s / align_time * align_time\nstop_dt = time(v:stop_time_aligned * sec_in_ns)\n\ntotal = from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_capacity_vdc\" and r._field == \"total_i\")\n|> range(start: -24h)\n|> last()\n|> toFloat()\n|> keep(columns: [\"_value\"])\n\ntarget50 = total\n|> map(fn: (r) => ({_value: int(v: r._value * 0.5) }))\n\ntarget80 = total\n|> map(fn: (r) => ({_value: int(v: r._value * 0.8) }))\n\nused30Days = from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_capacity_vdc\" and r._field == \"used\")\n|> range(start: -30d)\n|> keep(columns: [\"_time\", \"_value\"]) \n\nused7Days = used30Days \n|> range(start: -7d) \n\nused1Day = used7Days \n|> range(start: -1d) \n\ndays30Target50 = join(tables: {t: target50, u: used30Days}, on: [\"\"])\n|> map(fn: (r) => ({_time: r._time, _value: r._value_u - r._value_t}))\n|> predictLinear(wantedValue: 0.0)\n|> map(fn: (r) => ({T3_D30T50: if r._time > now() then string(v: (int(v: r._time) - int(v:stop_dt)) / sec_in_ns) else \"N/A\"}))\n|> yield(name: \"T3_D30T50\")\n\ndays30Target80 = join(tables: {t: target80, u: used30Days}, on: [\"\"])\n|> map(fn: (r) => ({_time: r._time, _value: r._value_u - r._value_t}))\n|> predictLinear(wantedValue: 0.0)\n|> map(fn: (r) => ({T6_D30T80: if r._time > now() then string(v: (int(v: r._time) - int(v:stop_dt)) / sec_in_ns) else \"N/A\"}))\n|> yield(name: \"T6_D30T80\")\n\ndays7Target50 = join(tables: {t: target50, u: used7Days}, on: [\"\"])\n|> map(fn: (r) => ({_time: r._time, _value: r._value_u - r._value_t}))\n|> predictLinear(wantedValue: 0.0)\n|> map(fn: (r) => ({T2_D7T50: if r._time > now() then string(v: (int(v: r._time) - int(v:stop_dt)) / sec_in_ns) else \"N/A\"}))\n|> yield(name: \"T2_D7T50\")\n\ndays7Target80 = join(tables: {t: target80, u: used7Days}, on: [\"\"])\n|> map(fn: (r) => ({_time: r._time, _value: r._value_u - r._value_t}))\n|> predictLinear(wantedValue: 0.0)\n|> map(fn: (r) => ({T5_D7T80: if r._time > now() then string(v: (int(v: r._time) - int(v:stop_dt)) / sec_in_ns) else \"N/A\"}))\n|> yield(name: \"T5_D7T80\")\n\ndays1Target50 = join(tables: {t: target50, u: used1Day}, on: [\"\"])\n|> map(fn: (r) => ({_time: r._time, _value: r._value_u - r._value_t}))\n|> predictLinear(wantedValue: 0.0)\n|> map(fn: (r) => ({T1_D1T50: if r._time > now() then string(v: (int(v: r._time) - int(v:stop_dt)) / sec_in_ns) else \"N/A\"}))\n|> yield(name: \"T1_D1T50\")\n\ndays1Target80 = join(tables: {t: target80, u: used1Day}, on: [\"\"])\n|> map(fn: (r) => ({_time: r._time, _value: r._value_u - r._value_t}))\n|> predictLinear(wantedValue: 0.0)\n|> map(fn: (r) => ({T4_D1T80: if r._time > now() then string(v: (int(v: r._time) - int(v:stop_dt)) / sec_in_ns) else \"N/A\"}))\n|> yield(name: \"T4_D1T80\")\n",
              "refId": "A",
              "resultFormat": "table"
            }
          ],
          "timeFrom": null,
          "timeShift": null,
          "title": "Trends",
          "transform": "table",
          "type": "table"
        },
        {
          "columns": [],
          "description": "Monitor the total, used, and available capacity at the ObjectStore level.\nReserved capacity is the 10 percent of the total capacity that is reserved for failure handling and performing erasure encoding/XOR operations.",
          "fontSize": "100%",
          "gridPos": {
            "h": 3,
            "w": 24,
            "x": 0,
            "y": 3
          },
          "id": 17,
          "links": [],
          "options": {},
          "pageSize": null,
          "scroll": true,
          "showHeader": true,
          "sort": {
            "col": 0,
            "desc": true
          },
          "styles": [
            {
              "alias": "Time",
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "pattern": "Time",
              "type": "hidden"
            },
            {
              "alias": "$1",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "/vl[0-9]_(.*)/",
              "thresholds": [],
              "type": "number",
              "unit": "bytes"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Measurement",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Field",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Value",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "decimals": 2,
              "pattern": "/.*/",
              "thresholds": [],
              "type": "number",
              "unit": "short"
            }
          ],
          "targets": [
            {
              "query": "import \"http\"\n\n// Capacity for VDC: total, used, available, reserved\n\n// TODO: get reserved threshold from stats\nreservedThreshold = 0.1\n\ncapacity_total = from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_capacity_nodes_total\")\n|> range($range)\n// Get last result\n|> last()\n// Drop _host and _host_id tags\n|> keep(columns: [\"_stop\", \"_value\", \"_field\"])\n|> rename(columns: {_stop: \"_time\"})\n// Sum values per _field\n|> sum()\n\ncapacity_used = from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_capacity_nodes_used\")\n|> range($range)\n// Get last result\n|> last()\n// Drop _host and _host_id tags\n|> keep(columns: [\"_stop\", \"_value\", \"_field\"])\n|> rename(columns: {_stop: \"_time\"})\n// Sum values per _field\n|> sum()\n\ncapacity_offline = from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_capacity_nodes_offline\")\n|> range($range)\n// Get last result\n|> last()\n// Drop _host and _host_id tags\n|> keep(columns: [\"_stop\", \"_value\", \"_field\"])\n|> rename(columns: {_stop: \"_time\"})\n// Sum values per _field\n|> sum()\n\n\nunion(tables: [capacity_total, capacity_used, capacity_offline])\n|> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n|> map(fn: (r) => ({\n    _time: r._time,\n    total_i: r.total_i,\n    used: r.used,\n    offline: r.offline,\n    offline_recovered: r.offline_recovered,\n    offline_unrecovered: r.offline_unrecovered,\n    _reserved: int(v: math.mMax(\n        x: float(v: r.total_i - r.offline) * reservedThreshold,\n        y: float(v: 0)))\n}))\n|> map(fn: (r) => ({\n    _time: r._time,\n    vl1_Total: r.total_i,\n    vl2_Used: r.used,\n    vl3_Available: int(v: math.mMax(\n        x: float(v: r.total_i) - float(v: r.used) - float(v: r.offline) - float(v: r._reserved),\n        y: float(v: 0))),\n    vl4_Reserved: r._reserved,\n    vl5_Offline: r.offline,\n    \"vl6_Offline Recovered\": r.offline_recovered,\n    \"vl7_Offline Unrecovered\": r.offline_unrecovered\n}))\n",
              "refId": "A",
              "resultFormat": "table"
            }
          ],
          "timeFrom": null,
          "timeShift": null,
          "title": "Capacity",
          "transform": "table",
          "type": "table"
        },
        {
          "collapsed": true,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 6
          },
          "id": 19,
          "panels": [
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "History of the total ObjectStore capacity.",
              "fill": 1,
              "gridPos": {
                "h": 8,
                "w": 8,
                "x": 0,
                "y": 7
              },
              "id": 11,
              "legend": {
                "avg": false,
                "current": false,
                "max": false,
                "min": false,
                "show": true,
                "total": false,
                "values": false
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_capacity_vdc\" and r._field == \"total_i\")\n|> range($range)\n|> group()\n|> keep(columns: [\"_time\", \"_value\", \"_field\"])\n|> set(key: \"_field\", value: \"Total\")",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Total",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 2,
                  "format": "bytes",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "History of the used ObjectStore capacity.",
              "fill": 1,
              "gridPos": {
                "h": 8,
                "w": 8,
                "x": 8,
                "y": 7
              },
              "id": 12,
              "legend": {
                "avg": false,
                "current": false,
                "max": false,
                "min": false,
                "show": true,
                "total": false,
                "values": false
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_capacity_vdc\"and r._field == \"used\")\n|> range($range)\n|> group()\n|> keep(columns: [\"_time\", \"_value\", \"_field\"])\n|> set(key: \"_field\", value: \"Used\")\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Used",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 2,
                  "format": "bytes",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "History of the available ObjectStore capacity.",
              "fill": 1,
              "gridPos": {
                "h": 8,
                "w": 8,
                "x": 16,
                "y": 7
              },
              "id": 13,
              "legend": {
                "avg": false,
                "current": false,
                "max": false,
                "min": false,
                "show": true,
                "total": false,
                "values": false
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_capacity_vdc\"and r._field == \"available\")\n|> range($range)\n|> group()\n|> keep(columns: [\"_time\", \"_value\", \"_field\"])\n|> set(key: \"_field\", value: \"Available\")\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Available",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 2,
                  "format": "bytes",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            }
          ],
          "title": "Capacity History",
          "type": "row"
        }
      ],
      "refresh": false,
      "schemaVersion": 18,
      "style": "dark",
      "tags": [
        "Capacity",
        "Overview"
      ],
      "templating": {
        "list": []
      },
      "time": {
        "from": "now-24h",
        "to": "now"
      },
      "timepicker": {
        "refresh_intervals": [
          "5s",
          "10s",
          "30s",
          "1m",
          "5m",
          "15m",
          "30m",
          "1h",
          "2h",
          "1d"
        ],
        "time_options": [
          "5m",
          "15m",
          "1h",
          "6h",
          "12h",
          "24h",
          "2d",
          "7d",
          "30d"
        ]
      },
      "timezone": "",
      "title": "Capacity - Overview",
      "uid": "6e2ZkHtWk",
      "version": 2
    }
  capacity_overview_by_disks.json: |-
    {
      "__inputs": [
        {
          "name": "DS_FLUX",
          "label": "Flux",
          "description": "",
          "type": "datasource",
          "pluginId": "grafana-influxdb-flux-datasource",
          "pluginName": "Flux (InfluxDB) [BETA]"
        }
      ],
      "__requires": [
        {
          "type": "grafana",
          "id": "grafana",
          "name": "Grafana",
          "version": "6.2.5ecs"
        },
        {
          "type": "datasource",
          "id": "grafana-influxdb-flux-datasource",
          "name": "Flux (InfluxDB) [BETA]",
          "version": "5.2.12"
        },
        {
          "type": "panel",
          "id": "graph",
          "name": "Graph",
          "version": ""
        },
        {
          "type": "panel",
          "id": "table",
          "name": "Table",
          "version": ""
        }
      ],
      "annotations": {
        "list": [
          {
            "builtIn": 1,
            "datasource": "-- Grafana --",
            "enable": true,
            "hide": true,
            "iconColor": "rgba(0, 211, 255, 1)",
            "name": "Annotations & Alerts",
            "type": "dashboard"
          }
        ]
      },
      "editable": true,
      "gnetId": null,
      "graphTooltip": 0,
      "id": null,
      "iteration": 1613829561544,
      "links": [
        {
          "asDropdown": true,
          "icon": "external link",
          "tags": [
            "Capacity"
          ],
          "title": "Related dashboards",
          "type": "dashboards"
        }
      ],
      "panels": [
        {
          "columns": [],
          "fontSize": "100%",
          "gridPos": {
            "h": 4,
            "w": 24,
            "x": 0,
            "y": 0
          },
          "id": 15,
          "links": [],
          "options": {},
          "pageSize": 10,
          "scroll": true,
          "showHeader": true,
          "sort": {
            "col": 0,
            "desc": true
          },
          "styles": [
            {
              "alias": "Time",
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "pattern": "Time",
              "type": "hidden"
            },
            {
              "alias": " ",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "/vl[0-3]_/",
              "thresholds": [],
              "type": "number",
              "unit": "bytes"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Measurement",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Field",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Value",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "decimals": 2,
              "pattern": "/.*/",
              "thresholds": [],
              "type": "number",
              "unit": "short"
            }
          ],
          "targets": [
            {
              "query": "from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_capacity_disks\" and r.SS == \"$node_id\" and r.SSTableLevel == \"Sum\")\n|> range($range)\n|> last()\n\n|> pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n|> keep(columns: [\"PD\", \"usedSpace\", \"freeSpace\", \"totalSpace\"])\n|> group()\n|> map(fn: (r) => ({\n\"vl0_Partition\": r.PD,\n\"vl1_Total\": r.totalSpace,\n\"vl2_Used\": r.usedSpace,\n\"vl3_Available\": r.freeSpace,\n})",
              "refId": "A",
              "resultFormat": "table"
            }
          ],
          "timeFrom": null,
          "timeShift": null,
          "title": "Disks",
          "transform": "table",
          "type": "table"
        },
        {
          "collapsed": true,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 4
          },
          "id": 8,
          "panels": [
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "fill": 1,
              "gridPos": {
                "h": 9,
                "w": 8,
                "x": 0,
                "y": 5
              },
              "id": 11,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "max": false,
                "min": false,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_capacity_disks\" and r._field == \"totalSpace\" and r.PD == \"$pd\" and r.SSTableLevel == \"Sum\")\n|> range($range)\n|> keep(columns: [\"_time\", \"_value\"])\n|> set(key: \"_field\", value: \"Total\")\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Total",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 2,
                  "format": "bytes",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "fill": 1,
              "gridPos": {
                "h": 9,
                "w": 8,
                "x": 8,
                "y": 5
              },
              "id": 13,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "max": false,
                "min": false,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_capacity_disks\" and r._field == \"usedSpace\" and r.PD == \"$pd\" and r.SSTableLevel == \"Sum\")\n|> range($range)\n|> keep(columns: [\"_time\", \"_value\"])\n|> set(key: \"_field\", value: \"Used\")",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Used",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 2,
                  "format": "bytes",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "fill": 1,
              "gridPos": {
                "h": 9,
                "w": 8,
                "x": 16,
                "y": 5
              },
              "id": 12,
              "legend": {
                "avg": false,
                "current": false,
                "max": false,
                "min": false,
                "show": true,
                "total": false,
                "values": false
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_capacity_disks\" and r._field == \"freeSpace\" and r.PD == \"$pd\" and r.SSTableLevel == \"Sum\")\n|> range($range)\n|> keep(columns: [\"_time\", \"_value\"])\n|> set(key: \"_field\", value: \"Available\")",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Available",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 2,
                  "format": "bytes",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            }
          ],
          "title": "Capacity History by Disk ($pd)",
          "type": "row"
        }
      ],
      "refresh": false,
      "schemaVersion": 18,
      "style": "dark",
      "tags": [
        "Capacity"
      ],
      "templating": {
        "list": [
          {
            "allValue": null,
            "current": {},
            "datasource": "${DS_FLUX}",
            "definition": "from(bucket:\"monitoring_vdc\")|> range(start: -12h)|> filter(fn:(r) => r._measurement == \"cq_capacity_disks\" )|> group(columns:[\"SS\"])|> distinct(column:\"SS\")",
            "hide": 0,
            "includeAll": false,
            "label": "Node",
            "multi": false,
            "name": "node_id",
            "options": [],
            "query": "from(bucket:\"monitoring_vdc\")|> range(start: -12h)|> filter(fn:(r) => r._measurement == \"cq_capacity_disks\" )|> group(columns:[\"SS\"])|> distinct(column:\"SS\")",
            "refresh": 1,
            "regex": "",
            "skipUrlSync": false,
            "sort": 0,
            "tagValuesQuery": "",
            "tags": [],
            "tagsQuery": "",
            "type": "query",
            "useTags": false
          },
          {
            "allValue": null,
            "current": {},
            "datasource": "${DS_FLUX}",
            "definition": "from(bucket:\"monitoring_vdc\")|> range(start: -12h)|> filter(fn:(r) => r._measurement == \"cq_capacity_disks\"  and r.SS == \"$node_id\")|> group(columns:[\"PD\"])|> distinct(column:\"PD\")",
            "hide": 0,
            "includeAll": false,
            "label": "Partition Uid",
            "multi": false,
            "name": "pd",
            "options": [],
            "query": "from(bucket:\"monitoring_vdc\")|> range(start: -12h)|> filter(fn:(r) => r._measurement == \"cq_capacity_disks\"  and r.SS == \"$node_id\")|> group(columns:[\"PD\"])|> distinct(column:\"PD\")",
            "refresh": 1,
            "regex": "",
            "skipUrlSync": false,
            "sort": 0,
            "tagValuesQuery": "",
            "tags": [],
            "tagsQuery": "",
            "type": "query",
            "useTags": false
          }
        ]
      },
      "time": {
        "from": "now-24h",
        "to": "now"
      },
      "timepicker": {
        "refresh_intervals": [
          "5s",
          "10s",
          "30s",
          "1m",
          "5m",
          "15m",
          "30m",
          "1h",
          "2h",
          "1d"
        ],
        "time_options": [
          "5m",
          "15m",
          "1h",
          "6h",
          "12h",
          "24h",
          "2d",
          "7d",
          "30d"
        ]
      },
      "timezone": "",
      "title": "Capacity - Overview by Disks",
      "uid": "VF6cjStWk",
      "version": 4
    }
  capacity_overview_by_nodes.json: |-
    {
      "__inputs": [
        {
          "name": "DS_FLUX",
          "label": "Flux",
          "description": "",
          "type": "datasource",
          "pluginId": "grafana-influxdb-flux-datasource",
          "pluginName": "Flux (InfluxDB) [BETA]"
        }
      ],
      "__requires": [
        {
          "type": "grafana",
          "id": "grafana",
          "name": "Grafana",
          "version": "6.2.5ecs"
        },
        {
          "type": "datasource",
          "id": "grafana-influxdb-flux-datasource",
          "name": "Flux (InfluxDB) [BETA]",
          "version": "5.2.12"
        },
        {
          "type": "panel",
          "id": "graph",
          "name": "Graph",
          "version": ""
        },
        {
          "type": "panel",
          "id": "table",
          "name": "Table",
          "version": ""
        }
      ],
      "annotations": {
        "list": [
          {
            "builtIn": 1,
            "datasource": "-- Grafana --",
            "enable": true,
            "hide": true,
            "iconColor": "rgba(0, 211, 255, 1)",
            "name": "Annotations & Alerts",
            "type": "dashboard"
          }
        ]
      },
      "editable": true,
      "gnetId": null,
      "graphTooltip": 0,
      "id": null,
      "iteration": 1613849440629,
      "links": [
        {
          "asDropdown": true,
          "icon": "external link",
          "tags": [
            "Capacity"
          ],
          "title": "Related dashboards",
          "type": "dashboards"
        }
      ],
      "panels": [
        {
          "columns": [],
          "description": "The forecast table provides an estimated number of days when the node capacity is expected to reach 50% and 80% based on the last 1, 7, and 30 days trend.",
          "fontSize": "100%",
          "gridPos": {
            "h": 8,
            "w": 24,
            "x": 0,
            "y": 0
          },
          "id": 2,
          "links": [],
          "options": {},
          "pageSize": null,
          "scroll": true,
          "showHeader": true,
          "sort": {
            "col": 3,
            "desc": false
          },
          "styles": [
            {
              "alias": "Time",
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "pattern": "Time",
              "type": "hidden"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Measurement",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Field",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Value",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "Per 1 Day Trend 50%",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 1,
              "mappingType": 1,
              "pattern": "t1_D1T50",
              "thresholds": [],
              "type": "number",
              "unit": "dtdurations"
            },
            {
              "alias": "Per 7 Day Trend 50%",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 1,
              "mappingType": 1,
              "pattern": "t2_D7T50",
              "thresholds": [],
              "type": "number",
              "unit": "dtdurations"
            },
            {
              "alias": "Per 30 Day Trend 50%",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 1,
              "mappingType": 1,
              "pattern": "t3_D30T50",
              "thresholds": [],
              "type": "number",
              "unit": "dtdurations"
            },
            {
              "alias": "Per 1 Day Trend 80%",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 1,
              "mappingType": 1,
              "pattern": "t4_D1T80",
              "thresholds": [],
              "type": "number",
              "unit": "dtdurations"
            },
            {
              "alias": "Per 7 Day Trend 80%",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 1,
              "mappingType": 1,
              "pattern": "t5_D7T80",
              "thresholds": [],
              "type": "number",
              "unit": "dtdurations"
            },
            {
              "alias": "Per 30 Day Trend 80%",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 1,
              "mappingType": 1,
              "pattern": "t6_D30T80",
              "thresholds": [],
              "type": "number",
              "unit": "dtdurations"
            },
            {
              "alias": "Node",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "host_id",
              "thresholds": [],
              "type": "string",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "decimals": 2,
              "pattern": "/.*/",
              "thresholds": [],
              "type": "number",
              "unit": "short"
            }
          ],
          "targets": [
            {
              "query": "sec_in_ns = 1000000000\nalign_time = 15 * 60\nstop_time_aligned = $__range_to_s / align_time * align_time\nstop_dt = time(v:stop_time_aligned * sec_in_ns)\n\ntotal = from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_capacity_nodes_total\" and r._field == \"total_i\")\n|> range(start: -24h)\n|> last()\n|> keep(columns: [\"_time\", \"_field\", \"_value\", \"_host_id\"])\n|> rename(columns: {_host_id: \"host_id\"})\n|> pivot(rowKey:[\"_time\"],columnKey: [\"_field\"],valueColumn: \"_value\")\n|> drop(columns: [\"_time\"])\n//|> yield(name: \"nodes\")\n\ntarget50 = total\n|> map(fn: (r) => ({ total: int(v: float(v: r.total_i) * 0.5) }))\n\ntarget80 = total\n|> map(fn: (r) => ({ total: int(v: float(v: r.total_i) * 0.8) }))\n//|> yield(name: \"target80\")\n\nused30Days = from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_capacity_nodes_used\" and r._field == \"used\")\n|> range(start: -30d)\n|> keep(columns: [\"_time\", \"_value\", \"_host_id\", \"_field\"])\n|> rename(columns: {_host_id: \"host_id\"})\n|> pivot(rowKey:[\"_time\"],columnKey: [\"_field\"],valueColumn: \"_value\")\n//|> yield(name: \"used30\")\n\nused7Days = used30Days\n|> range(start: -7d)\n\nused1Day = used7Days\n|> range(start: -1d)\n//|> yield(name: \"used1d\")\n\ndays1Target50 = join(tables: {t: target50, u: used1Day}, on: [\"host_id\"])\n|> map(fn: (r) => ({_time: r._time, _value: r.used - r.total}))\n|> predictLinear(wantedValue: 0.0)\n|> map(fn: (r) => ({t1_D1T50: if r._time > now() then string(v: (int(v: r._time) - int(v:stop_dt)) / sec_in_ns) else (if r._value > 0.0 then string(v: 0.0) else \"N/A\")}))\n|> yield(name: \"t1_D1T50\")\n\ndays7Target50 = join(tables: {t: target50, u: used7Days}, on: [\"host_id\"])\n|> map(fn: (r) => ({_time: r._time, _value: r.used - r.total}))\n|> predictLinear(wantedValue: 0.0)\n|> map(fn: (r) => ({t2_D7T50: if r._time > now() then string(v: (int(v: r._time) - int(v:stop_dt)) / sec_in_ns) else (if r._value > 0.0 then string(v: 0.0) else \"N/A\")}))\n|> yield(name: \"t2_D7T50\")\n\ndays30Target50 = join(tables: {t: target50, u: used30Days}, on: [\"host_id\"])\n|> map(fn: (r) => ({_time: r._time, _value: r.used - r.total}))\n|> predictLinear(wantedValue: 0.0)\n|> map(fn: (r) => ({t3_D30T50: if r._time > now() then string(v: (int(v: r._time) - int(v:stop_dt)) / sec_in_ns) else (if r._value > 0.0 then string(v: 0.0) else \"N/A\")}))\n|> yield(name: \"t3_D30T50\")\n\ndays1Target80 = join(tables: {t: target80, u: used1Day}, on: [\"host_id\"])\n|> map(fn: (r) => ({_time: r._time, _value: r.used - r.total}))\n|> predictLinear(wantedValue: 0.0)\n|> map(fn: (r) => ({t4_D1T80: if r._time > now() then string(v: (int(v: r._time) - int(v:stop_dt)) / sec_in_ns) else (if r._value > 0.0 then string(v: 0.0) else \"N/A\")}))\n|> yield(name: \"t4_D1T80\")\n\ndays7Target80 = join(tables: {t: target80, u: used7Days}, on: [\"host_id\"])\n|> map(fn: (r) => ({_time: r._time, _value: r.used - r.total}))\n|> predictLinear(wantedValue: 0.0)\n|> map(fn: (r) => ({t5_D7T80: if r._time > now() then string(v: (int(v: r._time) - int(v:stop_dt)) / sec_in_ns) else (if r._value > 0.0 then string(v: 0.0) else \"N/A\")}))\n|> yield(name: \"t5_D7T80\")\n\ndays30Target80 = join(tables: {t: target80, u: used30Days}, on: [\"host_id\"])\n|> map(fn: (r) => ({_time: r._time, _value: r.used - r.total}))\n|> predictLinear(wantedValue: 0.0)\n|> map(fn: (r) => ({t6_D30T80: if r._time > now() then string(v: (int(v: r._time) - int(v:stop_dt)) / sec_in_ns) else (if r._value > 0.0 then string(v: 0.0) else \"N/A\")}))\n|> yield(name: \"t6_D30T80\")\n",
              "refId": "A",
              "resultFormat": "table"
            }
          ],
          "timeFrom": null,
          "timeShift": null,
          "title": "Nodes Trend",
          "transform": "table",
          "type": "table"
        },
        {
          "columns": [],
          "description": "Monitor the total, used, and available capacity by ObjectStore nodes.\nReserved capacity is the 10 percent of the total capacity that is reserved for failure handling and performing erasure encoding/XOR operations.",
          "fontSize": "100%",
          "gridPos": {
            "h": 7,
            "w": 24,
            "x": 0,
            "y": 8
          },
          "id": 4,
          "links": [],
          "options": {},
          "pageSize": 8,
          "scroll": true,
          "showHeader": true,
          "sort": {
            "col": 3,
            "desc": false
          },
          "styles": [
            {
              "alias": "Time",
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "pattern": "Time",
              "type": "hidden"
            },
            {
              "alias": "$1",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "/vl[1-9]_(.*)/",
              "thresholds": [],
              "type": "number",
              "unit": "bytes"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Time",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Measurement",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Field",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "Node",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "vl0_Node",
              "thresholds": [],
              "type": "string",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Value",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "decimals": 2,
              "pattern": "/.*/",
              "thresholds": [],
              "type": "number",
              "unit": "short"
            }
          ],
          "targets": [
            {
              "query": "from(bucket: \"monitoring_vdc\")\n  |> filter(fn: (r) => r._measurement == \"cq_capacity_nodes_total\"\n                       and (r._field == \"total_i\"))\n  |> range(start: -1h)\n  |> last()\n  |> keep(columns: [\"_field\", \"_value\", \"_host_id\"])\n  |> pivot(rowKey:[], columnKey: [\"_field\"], valueColumn: \"_value\")\n  |> map(fn: (r) => ({\"vl0_Node\": r._host_id, \"vl1_Total\": r.total_i}))\n",
              "refId": "A",
              "resultFormat": "table"
            },
            {
              "query": "from(bucket: \"monitoring_vdc\")\n  |> filter(fn: (r) => r._measurement == \"cq_capacity_nodes_used\")\n  |> range(start: -1h)\n  |> last()\n  |> keep(columns: [\"_field\", \"_value\", \"_host_id\"])\n  |> pivot(rowKey:[], columnKey: [\"_field\"], valueColumn: \"_value\")\n  |> map(fn: (r) => ({\"vl0_Node\": r._host_id, \"vl2_Used\":  r.used}))\n",
              "refId": "B",
              "resultFormat": "table"
            },
            {
              "query": "from(bucket: \"monitoring_vdc\")\n  |> filter(fn: (r) => r._measurement == \"cq_capacity_nodes_offline\")\n  |> range(start: -1h)\n  |> last()\n  |> keep(columns: [\"_field\", \"_value\", \"_host_id\"])\n  |> pivot(rowKey:[], columnKey: [\"_field\"], valueColumn: \"_value\")\n  |> map(fn: (r) => ({\"vl0_Node\": r._host_id, \"vl3_Offline\":  r.offline, \"vl4_Offline Recovered\":  r.offline_recovered, \"vl5_Offline Unrecovered\":  r.offline_unrecovered}))\n",
              "refId": "C",
              "resultFormat": "table"
            }
          ],
          "timeFrom": null,
          "timeShift": null,
          "title": "",
          "transform": "table",
          "type": "table"
        },
        {
          "collapsed": true,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 15
          },
          "id": 14,
          "panels": [
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "fill": 1,
              "gridPos": {
                "h": 8,
                "w": 8,
                "x": 0,
                "y": 16
              },
              "id": 6,
              "legend": {
                "avg": false,
                "current": false,
                "max": false,
                "min": false,
                "show": true,
                "total": false,
                "values": false
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_capacity_nodes_total\"\nand r._host_id == \"$node_id\"\nand r._field == \"total_i\")\n|> range($range)\n|> keep(columns: [\"_time\", \"_value\", \"_field\", \"_host_id\"])\n|> set(key: \"_field\", value: \"Total\")",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Total",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 2,
                  "format": "bytes",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "fill": 1,
              "gridPos": {
                "h": 8,
                "w": 8,
                "x": 8,
                "y": 16
              },
              "id": 8,
              "legend": {
                "avg": false,
                "current": false,
                "max": false,
                "min": false,
                "show": true,
                "total": false,
                "values": false
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_capacity_nodes_used\"\nand r._host_id == \"$node_id\"\nand r._field == \"used\")\n|> range($range)\n|> keep(columns: [\"_time\", \"_value\", \"_field\", \"_host_id\"])\n|> set(key: \"_field\", value: \"Used\")\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Used",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 2,
                  "format": "bytes",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "fill": 1,
              "gridPos": {
                "h": 8,
                "w": 8,
                "x": 16,
                "y": 16
              },
              "id": 15,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "max": false,
                "min": false,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_capacity_nodes_offline\" and r._field == \"offline\"\nand r._host_id == \"$node_id\")\n|> range($range)\n|> keep(columns: [\"_time\", \"_value\", \"_field\", \"_host_id\"])\n|> set(key: \"_field\", value: \"Offline\")\n",
                  "refId": "A"
                },
                {
                  "query": "from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_capacity_nodes_offline\" and r._field == \"offline_recovered\"\nand r._host_id == \"$node_id\")\n|> range($range)\n|> keep(columns: [\"_time\", \"_value\", \"_field\", \"_host_id\"])\n|> set(key: \"_field\", value: \"Offline Recovered\")\n",
                  "refId": "B"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Offline",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 2,
                  "format": "bytes",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            }
          ],
          "title": "Capacity History by Node ($node_id)",
          "type": "row"
        }
      ],
      "schemaVersion": 18,
      "style": "dark",
      "tags": [
        "Capacity"
      ],
      "templating": {
        "list": [
          {
            "allValue": null,
            "current": {},
            "datasource": "${DS_FLUX}",
            "definition": "from(bucket:\"monitoring_main\")|> range(start: -12h)|> filter(fn:(r) => r._measurement == \"ssm_sstable_SSTable_SS\" and r._field != \"state\")|> drop(columns: [\"_value\"])|> group(columns:[\"SS\"])|> distinct(column:\"SS\")",
            "hide": 0,
            "includeAll": false,
            "label": "Node",
            "multi": false,
            "name": "node_id",
            "options": [],
            "query": "from(bucket:\"monitoring_main\")|> range(start: -12h)|> filter(fn:(r) => r._measurement == \"ssm_sstable_SSTable_SS\" and r._field != \"state\")|> drop(columns: [\"_value\"])|> group(columns:[\"SS\"])|> distinct(column:\"SS\")",
            "refresh": 1,
            "regex": "",
            "skipUrlSync": false,
            "sort": 0,
            "tagValuesQuery": "",
            "tags": [],
            "tagsQuery": "",
            "type": "query",
            "useTags": false
          }
        ]
      },
      "time": {
        "from": "now-24h",
        "to": "now"
      },
      "timepicker": {
        "refresh_intervals": [
          "15m",
          "30m",
          "1h",
          "2h",
          "1d"
        ],
        "time_options": [
          "15m",
          "1h",
          "6h",
          "12h",
          "24h",
          "2d",
          "7d",
          "30d"
        ]
      },
      "timezone": "",
      "title": "Capacity - Overview by Nodes",
      "uid": "Us03i5tGz",
      "version": 1
    }
  capacity_used.json: |-
    {
      "__inputs": [],
      "__requires": [
        {
          "type": "grafana",
          "id": "grafana",
          "name": "Grafana",
          "version": "6.2.5ecs"
        },
        {
          "type": "panel",
          "id": "singlestat",
          "name": "Singlestat",
          "version": ""
        }
      ],
      "annotations": {
        "list": [
          {
            "builtIn": 1,
            "datasource": "-- Grafana --",
            "enable": true,
            "hide": true,
            "iconColor": "rgba(0, 211, 255, 1)",
            "name": "Annotations & Alerts",
            "type": "dashboard"
          }
        ]
      },
      "description": "",
      "editable": true,
      "gnetId": 1375,
      "graphTooltip": 0,
      "id": null,
      "links": [
        {
          "asDropdown": true,
          "icon": "external link",
          "keepTime": true,
          "tags": [
            "Capacity",
            "Overview"
          ],
          "title": "Related dashboards",
          "type": "dashboards"
        }
      ],
      "panels": [
        {
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 0
          },
          "id": 96,
          "title": "Total",
          "type": "row"
        },
        {
          "cacheTimeout": null,
          "colorBackground": false,
          "colorPostfix": false,
          "colorPrefix": false,
          "colorValue": false,
          "colors": [
            "#299c46",
            "rgba(237, 129, 40, 0.89)",
            "#d44a3a"
          ],
          "decimals": 2,
          "description": "Total physical capacity assigned for this Object Store",
          "format": "bytes",
          "gauge": {
            "maxValue": 100,
            "minValue": 0,
            "show": false,
            "thresholdLabels": false,
            "thresholdMarkers": true
          },
          "gridPos": {
            "h": 4,
            "w": 24,
            "x": 0,
            "y": 1
          },
          "id": 83,
          "interval": null,
          "links": [],
          "mappingType": 1,
          "mappingTypes": [
            {
              "name": "value to text",
              "value": 1
            },
            {
              "name": "range to text",
              "value": 2
            }
          ],
          "maxDataPoints": 100,
          "nullPointMode": "connected",
          "nullText": null,
          "options": {},
          "postfix": "",
          "postfixFontSize": "80%",
          "prefix": "",
          "prefixFontSize": "50%",
          "rangeMaps": [
            {
              "from": "null",
              "text": "N/A",
              "to": "null"
            }
          ],
          "sparkline": {
            "fillColor": "rgba(31, 118, 189, 0.18)",
            "full": false,
            "lineColor": "rgb(31, 120, 193)",
            "show": true
          },
          "tableColumn": "",
          "targets": [
            {
              "query": "from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_vdc\" and r._field == \"total_i\")\n|> range($range)\r\n\r",
              "refId": "B"
            }
          ],
          "thresholds": "",
          "title": "Total Capacity",
          "type": "singlestat",
          "valueFontSize": "80%",
          "valueMaps": [
            {
              "op": "=",
              "text": "N/A",
              "value": "null"
            }
          ],
          "valueName": "current"
        },
        {
          "cacheTimeout": null,
          "colorBackground": false,
          "colorPostfix": false,
          "colorPrefix": false,
          "colorValue": false,
          "colors": [
            "#299c46",
            "rgba(237, 129, 40, 0.89)",
            "#d44a3a"
          ],
          "decimals": 2,
          "description": "Physical disk space used",
          "format": "bytes",
          "gauge": {
            "maxValue": 100,
            "minValue": 0,
            "show": false,
            "thresholdLabels": false,
            "thresholdMarkers": true
          },
          "gridPos": {
            "h": 4,
            "w": 6,
            "x": 0,
            "y": 5
          },
          "id": 84,
          "interval": null,
          "links": [],
          "mappingType": 1,
          "mappingTypes": [
            {
              "name": "value to text",
              "value": 1
            },
            {
              "name": "range to text",
              "value": 2
            }
          ],
          "maxDataPoints": 100,
          "nullPointMode": "connected",
          "nullText": null,
          "options": {},
          "postfix": "",
          "postfixFontSize": "80%",
          "prefix": "",
          "prefixFontSize": "50%",
          "rangeMaps": [
            {
              "from": "null",
              "text": "N/A",
              "to": "null"
            }
          ],
          "sparkline": {
            "fillColor": "rgba(31, 118, 189, 0.18)",
            "full": false,
            "lineColor": "rgb(31, 120, 193)",
            "show": true
          },
          "tableColumn": "",
          "targets": [
            {
              "query": "from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_vdc\" and r._field == \"used\")\n|> range($range)\r\r",
              "refId": "B"
            }
          ],
          "thresholds": "",
          "title": "Used",
          "type": "singlestat",
          "valueFontSize": "80%",
          "valueMaps": [
            {
              "op": "=",
              "text": "N/A",
              "value": "null"
            }
          ],
          "valueName": "current"
        },
        {
          "cacheTimeout": null,
          "colorBackground": false,
          "colorPostfix": false,
          "colorPrefix": false,
          "colorValue": false,
          "colors": [
            "#299c46",
            "rgba(237, 129, 40, 0.89)",
            "#d44a3a"
          ],
          "decimals": 2,
          "description": "Free physical capacity ",
          "format": "bytes",
          "gauge": {
            "maxValue": 100,
            "minValue": 0,
            "show": false,
            "thresholdLabels": false,
            "thresholdMarkers": true
          },
          "gridPos": {
            "h": 4,
            "w": 6,
            "x": 6,
            "y": 5
          },
          "id": 89,
          "interval": null,
          "links": [],
          "mappingType": 1,
          "mappingTypes": [
            {
              "name": "value to text",
              "value": 1
            },
            {
              "name": "range to text",
              "value": 2
            }
          ],
          "maxDataPoints": 100,
          "nullPointMode": "connected",
          "nullText": null,
          "options": {},
          "postfix": "",
          "postfixFontSize": "80%",
          "prefix": "",
          "prefixFontSize": "50%",
          "rangeMaps": [
            {
              "from": "null",
              "text": "N/A",
              "to": "null"
            }
          ],
          "sparkline": {
            "fillColor": "rgba(31, 118, 189, 0.18)",
            "full": false,
            "lineColor": "rgb(31, 120, 193)",
            "show": true
          },
          "tableColumn": "",
          "targets": [
            {
              "query": "from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_vdc\" and r._field == \"available\")\n|> range($range)\r\n\r",
              "refId": "B"
            }
          ],
          "thresholds": "",
          "title": "Free",
          "type": "singlestat",
          "valueFontSize": "80%",
          "valueMaps": [
            {
              "op": "=",
              "text": "N/A",
              "value": "null"
            }
          ],
          "valueName": "current"
        },
        {
          "cacheTimeout": null,
          "colorBackground": false,
          "colorPostfix": false,
          "colorPrefix": false,
          "colorValue": false,
          "colors": [
            "#299c46",
            "rgba(237, 129, 40, 0.89)",
            "#d44a3a"
          ],
          "decimals": 2,
          "description": "Reserved physical capacity in case user used-up all capacity",
          "format": "bytes",
          "gauge": {
            "maxValue": 100,
            "minValue": 0,
            "show": false,
            "thresholdLabels": false,
            "thresholdMarkers": true
          },
          "gridPos": {
            "h": 4,
            "w": 6,
            "x": 12,
            "y": 5
          },
          "id": 85,
          "interval": null,
          "links": [],
          "mappingType": 1,
          "mappingTypes": [
            {
              "name": "value to text",
              "value": 1
            },
            {
              "name": "range to text",
              "value": 2
            }
          ],
          "maxDataPoints": 100,
          "nullPointMode": "connected",
          "nullText": null,
          "options": {},
          "postfix": "",
          "postfixFontSize": "80%",
          "prefix": "",
          "prefixFontSize": "50%",
          "rangeMaps": [
            {
              "from": "null",
              "text": "N/A",
              "to": "null"
            }
          ],
          "sparkline": {
            "fillColor": "rgba(31, 118, 189, 0.18)",
            "full": false,
            "lineColor": "rgb(31, 120, 193)",
            "show": true
          },
          "tableColumn": "",
          "targets": [
            {
              "query": "from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_vdc\" and r._field == \"reserved\")\n|> range($range)\r\r",
              "refId": "B"
            }
          ],
          "thresholds": "",
          "title": "Reserved",
          "type": "singlestat",
          "valueFontSize": "80%",
          "valueMaps": [
            {
              "op": "=",
              "text": "N/A",
              "value": "null"
            }
          ],
          "valueName": "current"
        },
        {
          "cacheTimeout": null,
          "colorBackground": false,
          "colorPostfix": false,
          "colorPrefix": false,
          "colorValue": false,
          "colors": [
            "#299c46",
            "rgba(237, 129, 40, 0.89)",
            "#d44a3a"
          ],
          "decimals": 2,
          "description": "Offline capacity in Object Store",
          "format": "bytes",
          "gauge": {
            "maxValue": 100,
            "minValue": 0,
            "show": false,
            "thresholdLabels": false,
            "thresholdMarkers": true
          },
          "gridPos": {
            "h": 4,
            "w": 6,
            "x": 18,
            "y": 5
          },
          "id": 88,
          "interval": null,
          "links": [],
          "mappingType": 1,
          "mappingTypes": [
            {
              "name": "value to text",
              "value": 1
            },
            {
              "name": "range to text",
              "value": 2
            }
          ],
          "maxDataPoints": 100,
          "nullPointMode": "connected",
          "nullText": null,
          "options": {},
          "postfix": "",
          "postfixFontSize": "80%",
          "prefix": "",
          "prefixFontSize": "50%",
          "rangeMaps": [
            {
              "from": "null",
              "text": "N/A",
              "to": "null"
            }
          ],
          "sparkline": {
            "fillColor": "rgba(31, 118, 189, 0.18)",
            "full": false,
            "lineColor": "rgb(31, 120, 193)",
            "show": true
          },
          "tableColumn": "",
          "targets": [
            {
              "query": "from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_vdc\" and r._field == \"offline\")\n|> range($range)\r\r",
              "refId": "B"
            }
          ],
          "thresholds": "",
          "title": "Offline",
          "type": "singlestat",
          "valueFontSize": "80%",
          "valueMaps": [
            {
              "op": "=",
              "text": "N/A",
              "value": "null"
            }
          ],
          "valueName": "current"
        },
        {
          "collapsed": true,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 9
          },
          "id": 93,
          "panels": [
            {
              "cacheTimeout": null,
              "colorBackground": false,
              "colorPostfix": false,
              "colorPrefix": false,
              "colorValue": false,
              "colors": [
                "#299c46",
                "rgba(237, 129, 40, 0.89)",
                "#d44a3a"
              ],
              "decimals": 2,
              "description": "Physical disk space used",
              "format": "bytes",
              "gauge": {
                "maxValue": 100,
                "minValue": 0,
                "show": false,
                "thresholdLabels": false,
                "thresholdMarkers": true
              },
              "gridPos": {
                "h": 4,
                "w": 24,
                "x": 0,
                "y": 10
              },
              "id": 94,
              "interval": null,
              "links": [],
              "mappingType": 1,
              "mappingTypes": [
                {
                  "name": "value to text",
                  "value": 1
                },
                {
                  "name": "range to text",
                  "value": 2
                }
              ],
              "maxDataPoints": 100,
              "nullPointMode": "connected",
              "nullText": null,
              "options": {},
              "postfix": "",
              "postfixFontSize": "80%",
              "prefix": "",
              "prefixFontSize": "50%",
              "rangeMaps": [
                {
                  "from": "null",
                  "text": "N/A",
                  "to": "null"
                }
              ],
              "sparkline": {
                "fillColor": "rgba(31, 118, 189, 0.18)",
                "full": false,
                "lineColor": "rgb(31, 120, 193)",
                "show": true
              },
              "tableColumn": "",
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_vdc\" and r._field == \"used\")\n|> range($range)\r\r",
                  "refId": "B"
                }
              ],
              "thresholds": "",
              "title": "Used",
              "type": "singlestat",
              "valueFontSize": "80%",
              "valueMaps": [
                {
                  "op": "=",
                  "text": "N/A",
                  "value": "null"
                }
              ],
              "valueName": "current"
            },
            {
              "cacheTimeout": null,
              "colorBackground": false,
              "colorPostfix": false,
              "colorPrefix": false,
              "colorValue": false,
              "colors": [
                "#299c46",
                "rgba(237, 129, 40, 0.89)",
                "#d44a3a"
              ],
              "decimals": 2,
              "description": "Physical space used for user injected data",
              "format": "bytes",
              "gauge": {
                "maxValue": 100,
                "minValue": 0,
                "show": false,
                "thresholdLabels": false,
                "thresholdMarkers": true
              },
              "gridPos": {
                "h": 4,
                "w": 4,
                "x": 0,
                "y": 14
              },
              "id": 90,
              "interval": null,
              "links": [],
              "mappingType": 1,
              "mappingTypes": [
                {
                  "name": "value to text",
                  "value": 1
                },
                {
                  "name": "range to text",
                  "value": 2
                }
              ],
              "maxDataPoints": 100,
              "nullPointMode": "connected",
              "nullText": null,
              "options": {},
              "postfix": "",
              "postfixFontSize": "80%",
              "prefix": "",
              "prefixFontSize": "50%",
              "rangeMaps": [
                {
                  "from": "null",
                  "text": "N/A",
                  "to": "null"
                }
              ],
              "sparkline": {
                "fillColor": "rgba(31, 118, 189, 0.18)",
                "full": false,
                "lineColor": "rgb(31, 120, 193)",
                "show": true
              },
              "tableColumn": "",
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_used_elements\" and r._field == \"user_data\")\n|> range($range)\r\r",
                  "refId": "B"
                }
              ],
              "thresholds": "",
              "title": "User Data",
              "type": "singlestat",
              "valueFontSize": "80%",
              "valueMaps": [
                {
                  "op": "=",
                  "text": "N/A",
                  "value": "null"
                }
              ],
              "valueName": "current"
            },
            {
              "cacheTimeout": null,
              "colorBackground": false,
              "colorPostfix": false,
              "colorPrefix": false,
              "colorValue": false,
              "colors": [
                "#299c46",
                "rgba(237, 129, 40, 0.89)",
                "#d44a3a"
              ],
              "decimals": 2,
              "description": "Metadata size (without overhead)",
              "format": "bytes",
              "gauge": {
                "maxValue": 100,
                "minValue": 0,
                "show": false,
                "thresholdLabels": false,
                "thresholdMarkers": true
              },
              "gridPos": {
                "h": 4,
                "w": 4,
                "x": 4,
                "y": 14
              },
              "id": 91,
              "interval": null,
              "links": [],
              "mappingType": 1,
              "mappingTypes": [
                {
                  "name": "value to text",
                  "value": 1
                },
                {
                  "name": "range to text",
                  "value": 2
                }
              ],
              "maxDataPoints": 100,
              "nullPointMode": "connected",
              "nullText": null,
              "options": {},
              "postfix": "",
              "postfixFontSize": "80%",
              "prefix": "",
              "prefixFontSize": "50%",
              "rangeMaps": [
                {
                  "from": "null",
                  "text": "N/A",
                  "to": "null"
                }
              ],
              "sparkline": {
                "fillColor": "rgba(31, 118, 189, 0.18)",
                "full": false,
                "lineColor": "rgb(31, 120, 193)",
                "show": true
              },
              "tableColumn": "",
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_used_elements\" and r._field == \"meta_data\")\n|> range($range)\r\r",
                  "refId": "B"
                }
              ],
              "thresholds": "",
              "title": "Metadata",
              "type": "singlestat",
              "valueFontSize": "80%",
              "valueMaps": [
                {
                  "op": "=",
                  "text": "N/A",
                  "value": "null"
                }
              ],
              "valueName": "current"
            },
            {
              "cacheTimeout": null,
              "colorBackground": false,
              "colorPostfix": false,
              "colorPrefix": false,
              "colorValue": false,
              "colors": [
                "#299c46",
                "rgba(237, 129, 40, 0.89)",
                "#d44a3a"
              ],
              "decimals": 2,
              "description": "User data protection overhead",
              "format": "bytes",
              "gauge": {
                "maxValue": 100,
                "minValue": 0,
                "show": false,
                "thresholdLabels": false,
                "thresholdMarkers": true
              },
              "gridPos": {
                "h": 4,
                "w": 4,
                "x": 8,
                "y": 14
              },
              "id": 100,
              "interval": null,
              "links": [],
              "mappingType": 1,
              "mappingTypes": [
                {
                  "name": "value to text",
                  "value": 1
                },
                {
                  "name": "range to text",
                  "value": 2
                }
              ],
              "maxDataPoints": 100,
              "nullPointMode": "connected",
              "nullText": null,
              "options": {},
              "postfix": "",
              "postfixFontSize": "80%",
              "prefix": "",
              "prefixFontSize": "50%",
              "rangeMaps": [
                {
                  "from": "null",
                  "text": "N/A",
                  "to": "null"
                }
              ],
              "sparkline": {
                "fillColor": "rgba(31, 118, 189, 0.18)",
                "full": false,
                "lineColor": "rgb(31, 120, 193)",
                "show": true
              },
              "tableColumn": "",
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_used_elements\" and r._field == \"protection_overhead_user\")\n|> range($range)\r\r",
                  "refId": "B"
                }
              ],
              "thresholds": "",
              "title": "Protection Overhead User Data",
              "type": "singlestat",
              "valueFontSize": "80%",
              "valueMaps": [
                {
                  "op": "=",
                  "text": "N/A",
                  "value": "null"
                }
              ],
              "valueName": "current"
            },
            {
              "cacheTimeout": null,
              "colorBackground": false,
              "colorPostfix": false,
              "colorPrefix": false,
              "colorValue": false,
              "colors": [
                "#299c46",
                "rgba(237, 129, 40, 0.89)",
                "#d44a3a"
              ],
              "decimals": 2,
              "description": "Metadata protection overhead",
              "format": "bytes",
              "gauge": {
                "maxValue": 100,
                "minValue": 0,
                "show": false,
                "thresholdLabels": false,
                "thresholdMarkers": true
              },
              "gridPos": {
                "h": 4,
                "w": 4,
                "x": 12,
                "y": 14
              },
              "id": 101,
              "interval": null,
              "links": [],
              "mappingType": 1,
              "mappingTypes": [
                {
                  "name": "value to text",
                  "value": 1
                },
                {
                  "name": "range to text",
                  "value": 2
                }
              ],
              "maxDataPoints": 100,
              "nullPointMode": "connected",
              "nullText": null,
              "options": {},
              "postfix": "",
              "postfixFontSize": "80%",
              "prefix": "",
              "prefixFontSize": "50%",
              "rangeMaps": [
                {
                  "from": "null",
                  "text": "N/A",
                  "to": "null"
                }
              ],
              "sparkline": {
                "fillColor": "rgba(31, 118, 189, 0.18)",
                "full": false,
                "lineColor": "rgb(31, 120, 193)",
                "show": true
              },
              "tableColumn": "",
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_used_elements\" and r._field == \"protection_overhead_metadata\")\n|> range($range)\r\r",
                  "refId": "B"
                }
              ],
              "thresholds": "",
              "title": "Protection Overhead Metadata",
              "type": "singlestat",
              "valueFontSize": "80%",
              "valueMaps": [
                {
                  "op": "=",
                  "text": "N/A",
                  "value": "null"
                }
              ],
              "valueName": "current"
            },
            {
              "cacheTimeout": null,
              "colorBackground": false,
              "colorPostfix": false,
              "colorPrefix": false,
              "colorValue": false,
              "colors": [
                "#299c46",
                "rgba(237, 129, 40, 0.89)",
                "#d44a3a"
              ],
              "decimals": 2,
              "description": "Garbage data, includes user data and metadata reclaimable and unreclaimable garbage",
              "format": "bytes",
              "gauge": {
                "maxValue": 100,
                "minValue": 0,
                "show": false,
                "thresholdLabels": false,
                "thresholdMarkers": true
              },
              "gridPos": {
                "h": 4,
                "w": 4,
                "x": 16,
                "y": 14
              },
              "id": 102,
              "interval": null,
              "links": [],
              "mappingType": 1,
              "mappingTypes": [
                {
                  "name": "value to text",
                  "value": 1
                },
                {
                  "name": "range to text",
                  "value": 2
                }
              ],
              "maxDataPoints": 100,
              "nullPointMode": "connected",
              "nullText": null,
              "options": {},
              "postfix": "",
              "postfixFontSize": "80%",
              "prefix": "",
              "prefixFontSize": "50%",
              "rangeMaps": [
                {
                  "from": "null",
                  "text": "N/A",
                  "to": "null"
                }
              ],
              "sparkline": {
                "fillColor": "rgba(31, 118, 189, 0.18)",
                "full": false,
                "lineColor": "rgb(31, 120, 193)",
                "show": true
              },
              "tableColumn": "",
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_gc_data\")\n|> range($range)\r\n|> last()\n|> pivot(rowKey:[\"_measurement\"],columnKey: [\"_field\"],valueColumn: \"_value\")\n  |> map(fn: (r) => ({\n _value:  r.user_gc_pending + r.user_gc_unreclaim\n               + r.system_gc_pending + r.system_gc_unreclaim\n }))\r",
                  "refId": "B"
                }
              ],
              "thresholds": "",
              "title": "Garbage Data",
              "type": "singlestat",
              "valueFontSize": "80%",
              "valueMaps": [
                {
                  "op": "=",
                  "text": "N/A",
                  "value": "null"
                }
              ],
              "valueName": "current"
            },
            {
              "cacheTimeout": null,
              "colorBackground": false,
              "colorPostfix": false,
              "colorPrefix": false,
              "colorValue": false,
              "colors": [
                "#299c46",
                "rgba(237, 129, 40, 0.89)",
                "#d44a3a"
              ],
              "decimals": 2,
              "description": "Garbage data, includes user data and metadata reclaimable and unreclaimable garbage",
              "format": "bytes",
              "gauge": {
                "maxValue": 100,
                "minValue": 0,
                "show": false,
                "thresholdLabels": false,
                "thresholdMarkers": true
              },
              "gridPos": {
                "h": 4,
                "w": 4,
                "x": 20,
                "y": 14
              },
              "id": 103,
              "interval": null,
              "links": [],
              "mappingType": 1,
              "mappingTypes": [
                {
                  "name": "value to text",
                  "value": 1
                },
                {
                  "name": "range to text",
                  "value": 2
                }
              ],
              "maxDataPoints": 100,
              "nullPointMode": "connected",
              "nullText": null,
              "options": {},
              "postfix": "",
              "postfixFontSize": "80%",
              "prefix": "",
              "prefixFontSize": "50%",
              "rangeMaps": [
                {
                  "from": "null",
                  "text": "N/A",
                  "to": "null"
                }
              ],
              "sparkline": {
                "fillColor": "rgba(31, 118, 189, 0.18)",
                "full": false,
                "lineColor": "rgb(31, 120, 193)",
                "show": true
              },
              "tableColumn": "",
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_data_being_processed\" and r._field == \"data_being_processed\")\n|> range($range)\r\r",
                  "refId": "B"
                }
              ],
              "thresholds": "",
              "title": "Data Being Processed",
              "type": "singlestat",
              "valueFontSize": "80%",
              "valueMaps": [
                {
                  "op": "=",
                  "text": "N/A",
                  "value": "null"
                }
              ],
              "valueName": "current"
            }
          ],
          "title": "Used",
          "type": "row"
        },
        {
          "collapsed": true,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 10
          },
          "id": 98,
          "panels": [
            {
              "cacheTimeout": null,
              "colorBackground": false,
              "colorPostfix": false,
              "colorPrefix": false,
              "colorValue": false,
              "colors": [
                "#299c46",
                "rgba(237, 129, 40, 0.89)",
                "#d44a3a"
              ],
              "decimals": 2,
              "description": "Offline capacity in Object Store",
              "format": "bytes",
              "gauge": {
                "maxValue": 100,
                "minValue": 0,
                "show": false,
                "thresholdLabels": false,
                "thresholdMarkers": true
              },
              "gridPos": {
                "h": 4,
                "w": 24,
                "x": 0,
                "y": 19
              },
              "id": 99,
              "interval": null,
              "links": [],
              "mappingType": 1,
              "mappingTypes": [
                {
                  "name": "value to text",
                  "value": 1
                },
                {
                  "name": "range to text",
                  "value": 2
                }
              ],
              "maxDataPoints": 100,
              "nullPointMode": "connected",
              "nullText": null,
              "options": {},
              "postfix": "",
              "postfixFontSize": "80%",
              "prefix": "",
              "prefixFontSize": "50%",
              "rangeMaps": [
                {
                  "from": "null",
                  "text": "N/A",
                  "to": "null"
                }
              ],
              "sparkline": {
                "fillColor": "rgba(31, 118, 189, 0.18)",
                "full": false,
                "lineColor": "rgb(31, 120, 193)",
                "show": true
              },
              "tableColumn": "",
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_vdc\" and r._field == \"offline\")\n|> range($range)\r\r",
                  "refId": "B"
                }
              ],
              "thresholds": "",
              "title": "Offline",
              "type": "singlestat",
              "valueFontSize": "80%",
              "valueMaps": [
                {
                  "op": "=",
                  "text": "N/A",
                  "value": "null"
                }
              ],
              "valueName": "current"
            },
            {
              "cacheTimeout": null,
              "colorBackground": false,
              "colorPostfix": false,
              "colorPrefix": false,
              "colorValue": false,
              "colors": [
                "#299c46",
                "rgba(237, 129, 40, 0.89)",
                "#d44a3a"
              ],
              "decimals": 2,
              "description": "Recovered or not used capacity for offline node/disk",
              "format": "bytes",
              "gauge": {
                "maxValue": 100,
                "minValue": 0,
                "show": false,
                "thresholdLabels": false,
                "thresholdMarkers": true
              },
              "gridPos": {
                "h": 4,
                "w": 12,
                "x": 0,
                "y": 23
              },
              "id": 87,
              "interval": null,
              "links": [],
              "mappingType": 1,
              "mappingTypes": [
                {
                  "name": "value to text",
                  "value": 1
                },
                {
                  "name": "range to text",
                  "value": 2
                }
              ],
              "maxDataPoints": 100,
              "nullPointMode": "connected",
              "nullText": null,
              "options": {},
              "postfix": "",
              "postfixFontSize": "80%",
              "prefix": "",
              "prefixFontSize": "50%",
              "rangeMaps": [
                {
                  "from": "null",
                  "text": "N/A",
                  "to": "null"
                }
              ],
              "sparkline": {
                "fillColor": "rgba(31, 118, 189, 0.18)",
                "full": false,
                "lineColor": "rgb(31, 120, 193)",
                "show": true
              },
              "tableColumn": "",
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_vdc\" and r._field == \"offline_recovered\")\n|> range($range)\r\r",
                  "refId": "B"
                }
              ],
              "thresholds": "",
              "title": "Recovered",
              "type": "singlestat",
              "valueFontSize": "80%",
              "valueMaps": [
                {
                  "op": "=",
                  "text": "N/A",
                  "value": "null"
                }
              ],
              "valueName": "current"
            },
            {
              "cacheTimeout": null,
              "colorBackground": false,
              "colorPostfix": false,
              "colorPrefix": false,
              "colorValue": false,
              "colors": [
                "#299c46",
                "rgba(237, 129, 40, 0.89)",
                "#d44a3a"
              ],
              "decimals": 2,
              "description": "Unrecovered capacity for offline node/disk (which is not removed from system yet)",
              "format": "bytes",
              "gauge": {
                "maxValue": 100,
                "minValue": 0,
                "show": false,
                "thresholdLabels": false,
                "thresholdMarkers": true
              },
              "gridPos": {
                "h": 4,
                "w": 12,
                "x": 12,
                "y": 23
              },
              "id": 86,
              "interval": null,
              "links": [],
              "mappingType": 1,
              "mappingTypes": [
                {
                  "name": "value to text",
                  "value": 1
                },
                {
                  "name": "range to text",
                  "value": 2
                }
              ],
              "maxDataPoints": 100,
              "nullPointMode": "connected",
              "nullText": null,
              "options": {},
              "postfix": "",
              "postfixFontSize": "80%",
              "prefix": "",
              "prefixFontSize": "50%",
              "rangeMaps": [
                {
                  "from": "null",
                  "text": "N/A",
                  "to": "null"
                }
              ],
              "sparkline": {
                "fillColor": "rgba(31, 118, 189, 0.18)",
                "full": false,
                "lineColor": "rgb(31, 120, 193)",
                "show": true
              },
              "tableColumn": "",
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_vdc\" and r._field == \"offline_unrecovered\")\n|> range($range)\r\r",
                  "refId": "B"
                }
              ],
              "thresholds": "",
              "title": "Unrecovered",
              "type": "singlestat",
              "valueFontSize": "80%",
              "valueMaps": [
                {
                  "op": "=",
                  "text": "N/A",
                  "value": "null"
                }
              ],
              "valueName": "current"
            }
          ],
          "title": "Offline",
          "type": "row"
        }
      ],
      "refresh": false,
      "schemaVersion": 18,
      "style": "dark",
      "tags": [
        "Capacity"
      ],
      "templating": {
        "list": []
      },
      "time": {
        "from": "now-24h",
        "to": "now"
      },
      "timepicker": {
        "refresh_intervals": [
          "5s",
          "10s",
          "30s",
          "1m",
          "5m",
          "15m",
          "30m",
          "1h",
          "2h",
          "1d"
        ],
        "time_options": [
          "5m",
          "15m",
          "1h",
          "6h",
          "12h",
          "24h",
          "2d",
          "7d",
          "30d"
        ]
      },
      "timezone": "",
      "title": "Capacity Utilization: Used Capacity",
      "uid": "cuuci-cUEkca5Wk",
      "version": 3
    }
  data_access_performance_nodes.json: |-
    {
      "__inputs": [
        {
          "name": "DS_FLUX",
          "label": "Flux",
          "description": "",
          "type": "datasource",
          "pluginId": "grafana-influxdb-flux-datasource",
          "pluginName": "Flux (InfluxDB) [BETA]"
        }
      ],
      "__requires": [
        {
          "type": "grafana",
          "id": "grafana",
          "name": "Grafana",
          "version": "6.2.5ecs"
        },
        {
          "type": "datasource",
          "id": "grafana-influxdb-flux-datasource",
          "name": "Flux (InfluxDB) [BETA]",
          "version": "5.2.12"
        },
        {
          "type": "panel",
          "id": "graph",
          "name": "Graph",
          "version": ""
        },
        {
          "type": "panel",
          "id": "table",
          "name": "Table",
          "version": ""
        }
      ],
      "annotations": {
        "list": [
          {
            "builtIn": 1,
            "datasource": "-- Grafana --",
            "enable": true,
            "hide": true,
            "iconColor": "rgba(0, 211, 255, 1)",
            "name": "Annotations & Alerts",
            "type": "dashboard"
          }
        ]
      },
      "editable": true,
      "gnetId": null,
      "graphTooltip": 0,
      "id": null,
      "iteration": 1614349968748,
      "links": [
        {
          "asDropdown": true,
          "icon": "external link",
          "keepTime": true,
          "tags": [
            "Data Access Performance"
          ],
          "title": "Related dashboards",
          "type": "dashboards"
        }
      ],
      "panels": [
        {
          "columns": [],
          "datasource": "${DS_FLUX}",
          "description": "Successful and failed requests summary for selected range",
          "fontSize": "110%",
          "gridPos": {
            "h": 3,
            "w": 24,
            "x": 0,
            "y": 0
          },
          "id": 157,
          "links": [],
          "options": {},
          "pageSize": null,
          "scroll": false,
          "showHeader": true,
          "sort": {
            "col": 3,
            "desc": true
          },
          "styles": [
            {
              "alias": "Time",
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "pattern": "Time",
              "type": "hidden"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Measurement",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Field",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "System Failures",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": null,
              "mappingType": 1,
              "pattern": "b_system_errors",
              "thresholds": [],
              "type": "number",
              "unit": "locale"
            },
            {
              "alias": "Successful requests",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": null,
              "mappingType": 1,
              "pattern": "a_succeed_request_counter",
              "thresholds": [],
              "type": "number",
              "unit": "locale"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Value",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "User Failures",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": null,
              "mappingType": 1,
              "pattern": "c_user_errors",
              "thresholds": [],
              "type": "number",
              "unit": "locale"
            },
            {
              "alias": "Failures % Rate",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 3,
              "mappingType": 1,
              "pattern": "d_error_rate",
              "thresholds": [],
              "type": "number",
              "unit": "percentunit"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "decimals": 2,
              "pattern": "/.*/",
              "thresholds": [],
              "type": "number",
              "unit": "short"
            }
          ],
          "targets": [
            {
              "query": "// need this 'default' table to substitute possibly missing sys_errors table if errors were not registered by ECS service\nimport \"csv\"\ndefault_sys_errors = csv.from(csv:\"#datatype,string,long,string,long\n#group,false,false,true,false\n#default,_result,,,\n,result,table,_field,_value\n,,100,succeed_request_counter,0\n,,101,system_errors,0\n,,102,user_errors,0\")\n\ntotals = from(bucket: \"monitoring_main\")\n|> filter(fn: (r) => r._measurement == \"statDataHead_performance_internal_transactions\" and (\"${all_hosts}\" == \"yes\" or r.host =~ /^${host:pipe}$/ ))\n|> range($range)\n|> keep(columns:[\"_time\", \"_field\", \"_value\", \"host\"])\n|> difference(nonNegative: true)\n|> fill(column: \"_value\", value: 0)\n|> drop(columns:[\"host\"])\n|> sum()\n\nsys_errors = from(bucket: \"monitoring_main\")\n|> filter(fn: (r) => r._measurement == \"statDataHead_performance_internal_error\" and (\"${all_hosts}\" == \"yes\" or r.host =~ /^${host:pipe}$/ ))\n|> range($range)\n|> keep(columns:[\"_time\", \"_field\", \"_value\", \"host\"])\n|> difference(nonNegative: true)\n|> drop(columns:[\"host\"])\n|> sum()\n|> fill(column: \"_value\", value: 0)\n\nunion(tables: [default_sys_errors, totals, sys_errors])\n|> pivot(rowKey:[], columnKey: [\"_field\"], valueColumn: \"_value\")\n// map does not save non-group columns\n|> map(fn:(r) => ({\na_succeed_request_counter: r.succeed_request_counter,\nb_system_errors: r.system_errors,\nc_user_errors: r.user_errors,\nd_error_rate: float(v:r.system_errors+r.user_errors)/\nfloat(v:r.system_errors+r.user_errors+r.succeed_request_counter\n// this trick is needed because failed+succeed can be 0, avoid printing NaN in this case\n+int(v:bool(v:(r.system_errors+r.user_errors+r.succeed_request_counter)==0)))}))\n\n",
              "refId": "A",
              "resultFormat": "table"
            }
          ],
          "title": "Transaction Summary",
          "transform": "table",
          "type": "table"
        },
        {
          "columns": [],
          "description": "Latest values of data access bandwidth and latency of read/write requests for selected range",
          "fontSize": "100%",
          "gridPos": {
            "h": 3,
            "w": 24,
            "x": 0,
            "y": 3
          },
          "id": 169,
          "links": [],
          "options": {},
          "pageSize": null,
          "scroll": true,
          "showHeader": true,
          "sort": {
            "col": 0,
            "desc": true
          },
          "styles": [
            {
              "alias": "Time",
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "pattern": "Time",
              "type": "hidden"
            },
            {
              "alias": "Read, time to first byte, p50",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "a_read_lat_p50",
              "thresholds": [],
              "type": "number",
              "unit": "ms"
            },
            {
              "alias": " Read, time to first byte, p99",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "b_read_lat_p99",
              "thresholds": [],
              "type": "number",
              "unit": "ms"
            },
            {
              "alias": " Write, time to last byte, p50",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "c_write_lat_p50",
              "thresholds": [],
              "type": "number",
              "unit": "ms"
            },
            {
              "alias": " Write, time to last byte, p99",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 1,
              "mappingType": 1,
              "pattern": "d_write_lat_p99",
              "thresholds": [],
              "type": "number",
              "unit": "ms"
            },
            {
              "alias": "Read Bandwidth",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "e_read_bandwidth",
              "thresholds": [],
              "type": "number",
              "unit": "Bps"
            },
            {
              "alias": "Write Bandwidth",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "f_write_bandwidth",
              "thresholds": [],
              "type": "number",
              "unit": "Bps"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Measurement",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Field",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Value",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "decimals": 0,
              "pattern": "/.*/",
              "thresholds": [],
              "type": "number",
              "unit": "short"
            }
          ],
          "targets": [
            {
              "query": "import \"csv\"\nbw_padding = csv.from(csv:\"\n#datatype,string,long,double,string\n#group,false,false,false,true\n#default,_result,,,\n,result,table,_value,_field\n,,100,-1,read_p50\n,,101,-1,read_p99\n,,102,-1,write_p50\n,,103,-1,write_p99\n,,104,-1,total_read_requests_size\n,,105,-1,total_write_requests_size\n\")\n\nbandwidth = from(bucket: \"monitoring_main\")\n    |> filter(fn: (r) => r._measurement == \"statDataHead_performance_internal_throughput\" and (r.host =~ /^${host:pipe}$/ ) )\n    |> range($range)\n    |> keep(columns:[\"_time\", \"_field\", \"_value\", \"host\"])\n    |> derivative(nonNegative: true)\n    |> last()\n    |> keep(columns: [\"_field\", \"_value\"])\n\nlatency_read_all = from(bucket: \"monitoring_main\") \n    |> filter(fn: (r) => r._measurement == \"statDataHead_performance_internal_latency\" and r._field =~ /.*/ and r.id == \"ttfb_read\" and (r.host =~ /^${host:pipe}$/ ) )  \n    |> range($range)     \n    |> drop(columns:[\"_measurement\", \"process\", \"tag\"])\n    |> difference(nonNegative: true)\n    |> fill(column: \"_value\", value: 0)\n    |> last()\n    |> group(columns: [\"_field\"]) \n    |> map(fn:(r) => ({_time:r._time, le_float: float(v:r._field), cnt_float: float(v:r._value)}))\n    |> drop(columns:[\"_field\", \"_stop\"]) \n    \nlatency_read_p50 = latency_read_all |> histogramQuantile(quantile:0.50, upperBoundColumn: \"le_float\", countColumn: \"cnt_float\")\n|> set(key: \"_field\", value: \"read_p50\")\nlatency_read_p99 = latency_read_all |> histogramQuantile(quantile:0.99, upperBoundColumn: \"le_float\", countColumn: \"cnt_float\")\n|> set(key: \"_field\", value: \"read_p99\")\n\nlatency_write_all = from(bucket: \"monitoring_main\") \n    |> filter(fn: (r) => r._measurement == \"statDataHead_performance_internal_latency\" and r._field =~ /.*/ and r.id == \"ttlb_write\" and (r.host =~ /^${host:pipe}$/ ) )  \n    |> range($range)     \n    |> drop(columns:[\"_measurement\", \"process\", \"tag\"])\n    |> difference(nonNegative: true)\n    |> fill(column: \"_value\", value: 0)\n    |> last()\n    |> group(columns: [\"_field\"]) \n    |> map(fn:(r) => ({_time:r._time, le_float: float(v:r._field), cnt_float: float(v:r._value)}))\n    |> drop(columns:[\"_field\", \"_stop\"])\n    \nlatency_write_p50 = latency_write_all |> histogramQuantile(quantile:0.50, upperBoundColumn: \"le_float\", countColumn: \"cnt_float\")\n|> set(key: \"_field\", value: \"write_p50\")\nlatency_write_p99 = latency_write_all |> histogramQuantile(quantile:0.99, upperBoundColumn: \"le_float\", countColumn: \"cnt_float\")\n|> set(key: \"_field\", value: \"write_p99\")\n   \n\nunion(tables: [bw_padding, bandwidth, latency_read_p50, latency_read_p99, latency_write_p50, latency_write_p99])\n// these two functions are required to exclude values from bw_padding if actual values exist\n|> group(columns:[\"_field\"])\n|> sort()\n|> pivot(rowKey:[], columnKey: [\"_field\"], valueColumn: \"_value\")\n|> map(fn:(r) => ({\n   a_read_lat_p50: if r.read_p50 >= 0 then string(v:r.read_p50) else \"-\",\n   b_read_lat_p99: if r.read_p99 >= 0 then string(v:r.read_p99) else \"-\",\n   c_write_lat_p50: if r.write_p50 >= 0 then string(v:r.write_p50) else \"-\",\n   d_write_lat_p99: if r.write_p99 >= 0 then string(v:r.write_p99) else \"-\",\n   e_read_bandwidth: if r.total_read_requests_size >= 0 then string(v:r.total_read_requests_size) else \"-\",\n   f_write_bandwidth: if r.total_write_requests_size >= 0 then string(v:r.total_write_requests_size) else \"-\",\n}))",
              "refId": "A",
              "resultFormat": "table"
            }
          ],
          "timeFrom": null,
          "timeShift": null,
          "title": "Performance Summary",
          "transform": "table",
          "type": "table"
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": "${DS_FLUX}",
          "decimals": null,
          "description": "Rate of successful requests and failures per second",
          "fill": 1,
          "gridPos": {
            "h": 9,
            "w": 12,
            "x": 0,
            "y": 6
          },
          "id": 147,
          "legend": {
            "alignAsTable": false,
            "avg": true,
            "current": false,
            "max": true,
            "min": true,
            "rightSide": false,
            "show": true,
            "sortDesc": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 2,
          "links": [],
          "nullPointMode": "null",
          "options": {},
          "percentage": false,
          "pointradius": 2,
          "points": true,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "import \"ecs\"\n\nwi = ecs.get_dynamic_window_info(int_start: $__range_from_s, int_stop: $__range_to_s, max: 200)\n\nfrom(bucket: \"monitoring_main\") |> filter(fn: (r) => r._measurement == \"statDataHead_performance_internal_transactions\" and r._field =~ /_request_counter$/ and (\"${all_hosts}\" == \"yes\" or r.host =~ /^${host:pipe}$/ ) )\n  |> range(start: wi.start, stop: wi.stop)  \n  |> keep(columns:[\"_time\", \"_field\", \"_value\", \"host\"])  \n  |> derivative(nonNegative: true)\n  // see MONITORING-194 for details about next 2 lines\n  |> window(every: wi.duration)\n  |> mean()\n  |> drop(columns:[\"host\"]) \n  |> sum() \n  |> group(columns:[\"_field\"]) \n  |> rename(columns: {_start: \"_time\"})\n",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "TPS (success/failure)",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "decimals": null,
              "format": "short",
              "label": "",
              "logBase": 1,
              "max": null,
              "min": "0",
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {
            " total_read_requests_size": "#6ed0e0",
            " total_write_requests_size": "#e24d42"
          },
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": "${DS_FLUX}",
          "decimals": null,
          "description": "Data access bandwidth of successful requests per second",
          "fill": 4,
          "gridPos": {
            "h": 9,
            "w": 12,
            "x": 12,
            "y": 6
          },
          "id": 155,
          "legend": {
            "alignAsTable": false,
            "avg": true,
            "current": true,
            "max": true,
            "min": true,
            "rightSide": false,
            "show": true,
            "sortDesc": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 2,
          "links": [],
          "nullPointMode": "null",
          "options": {},
          "percentage": false,
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": true,
          "steppedLine": false,
          "targets": [
            {
              "query": "import \"ecs\"\n\nwi = ecs.get_dynamic_window_info(int_start: $__range_from_s, int_stop: $__range_to_s, max: 200)\n\nfrom(bucket: \"monitoring_main\") |> filter(fn: (r) => r._measurement == \"statDataHead_performance_internal_throughput\" and (\"${all_hosts}\" == \"yes\" or r.host =~ /^${host:pipe}$/ ) )\n  |> range(start: wi.start, stop: wi.stop)  \n  |> keep(columns:[\"_time\", \"_field\", \"_value\", \"host\"])  \n  |> derivative(nonNegative: true)\n  // see MONITORING-194 for details about next 2 lines\n  |> window(every: wi.duration)\n  |> mean()\n  |> drop(columns:[\"host\"]) \n  |> sum() \n  |> group(columns:[\"_field\"]) \n  |> rename(columns: {_start: \"_time\"})\n",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Bandwidth (read/write)",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "decimals": null,
              "format": "Bps",
              "label": "",
              "logBase": 1,
              "max": null,
              "min": "0",
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": "${DS_FLUX}",
          "decimals": null,
          "description": "Rate of failed requests per second, split by error type (user/system)",
          "fill": 9,
          "gridPos": {
            "h": 9,
            "w": 12,
            "x": 0,
            "y": 15
          },
          "id": 144,
          "legend": {
            "alignAsTable": false,
            "avg": true,
            "current": false,
            "hideEmpty": true,
            "hideZero": true,
            "max": true,
            "min": true,
            "rightSide": false,
            "show": true,
            "sortDesc": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 0,
          "links": [],
          "nullPointMode": "null",
          "options": {},
          "percentage": false,
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": true,
          "steppedLine": true,
          "targets": [
            {
              "query": "import \"ecs\"\n\nwi = ecs.get_dynamic_window_info(int_start: $__range_from_s, int_stop: $__range_to_s, max: 200)\n\nfrom(bucket: \"monitoring_main\") |> filter(fn: (r) => r._measurement == \"statDataHead_performance_internal_error\" and r._field =~ /_errors$/ and (\"${all_hosts}\" == \"yes\" or r.host =~ /^${host:pipe}$/ ))\n  |> range(start: wi.start, stop: wi.stop)  \n  |> keep(columns:[\"_time\", \"_field\", \"_value\", \"host\"])  \n  |> derivative(nonNegative: true)\n  // see MONITORING-194 for details about next 2 lines\n  |> window(every: wi.duration)\n  |> mean()\n  |> drop(columns:[\"host\"]) \n  |> sum() \n  |> group(columns:[\"_field\"]) \n  |> rename(columns: {_start: \"_time\"})",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Failed Requests/s by error type (user/system)",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": "0",
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": "${DS_FLUX}",
          "decimals": null,
          "description": "Latency of read/write requests",
          "fill": 1,
          "gridPos": {
            "h": 9,
            "w": 12,
            "x": 12,
            "y": 15
          },
          "id": 152,
          "legend": {
            "alignAsTable": false,
            "avg": true,
            "current": true,
            "max": true,
            "min": true,
            "rightSide": false,
            "show": true,
            "sortDesc": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 2,
          "links": [],
          "nullPointMode": "null",
          "options": {},
          "percentage": false,
          "pointradius": 0.5,
          "points": true,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "import \"ecs\"\n\nwi = ecs.get_dynamic_window_info(int_start: $__range_from_s, int_stop: $__range_to_s, max: 200)\n\na = from(bucket: \"monitoring_main\") \n    |> filter(fn: (r) => r._measurement == \"statDataHead_performance_internal_latency\" and r._field =~ /.*/ and r.id == \"ttfb_read\" and (\"${all_hosts}\" == \"yes\" or r.host =~ /^${host:pipe}$/ ) )  \n    |> range(start: wi.start, stop: wi.stop)     \n    |> drop(columns:[\"_measurement\", \"process\", \"tag\"])\n    |> difference(nonNegative: true) \n     |> fill(column: \"_value\", value: 0)\n    |> group(columns: [\"_field\"]) \n    |> window(every: wi.duration)     \n    |> sum()\n    |> map(fn:(r) => ({_time:r._start, le_float: float(v:r._field), cnt_float: float(v:r._value)}))\n    |> drop(columns:[\"_field\", \"_stop\"]) \n    \np50 = a |> histogramQuantile(quantile:0.50, upperBoundColumn: \"le_float\", countColumn: \"cnt_float\")\n|> rename(columns:{_start: \"_time\"})\n|> set(key: \"_field\", value: \"Read, time to first byte, p50\")\np99 = a |> histogramQuantile(quantile:0.99, upperBoundColumn: \"le_float\", countColumn: \"cnt_float\")\n|> rename(columns:{_start: \"_time\"})\n|> set(key: \"_field\", value: \"Read, time to first byte, p99\")\nunion(tables: [p50, p99])|> group(columns:[\"_field\"])\n\n",
              "refId": "A"
            },
            {
              "query": "import \"ecs\"\n\nwi = ecs.get_dynamic_window_info(int_start: $__range_from_s, int_stop: $__range_to_s, max: 200)\n\na = from(bucket: \"monitoring_main\") \n    |> filter(fn: (r) => r._measurement == \"statDataHead_performance_internal_latency\" and r._field =~ /.*/ and r.id == \"ttlb_write\" and (\"${all_hosts}\" == \"yes\" or r.host =~ /^${host:pipe}$/ ) )  \n    |> range(start: wi.start, stop: wi.stop)     \n    |> drop(columns:[\"_measurement\", \"process\", \"tag\"])\n    |> difference(nonNegative: true) \n    |> fill(column: \"_value\", value: 0)\n    |> group(columns: [\"_field\"]) \n    |> window(every: wi.duration)     \n    |> sum()\n    |> map(fn:(r) => ({_time:r._start, le_float: float(v:r._field), cnt_float: float(v:r._value)}))\n    |> drop(columns:[\"_field\", \"_stop\"]) \n    \np50 = a |> histogramQuantile(quantile:0.50, upperBoundColumn: \"le_float\", countColumn: \"cnt_float\")\n|> rename(columns:{_start: \"_time\"})\n|> set(key: \"_field\", value: \"Write, time to last byte, p50\")\np99 = a |> histogramQuantile(quantile:0.99, upperBoundColumn: \"le_float\", countColumn: \"cnt_float\")\n|> rename(columns:{_start: \"_time\"})\n|> set(key: \"_field\", value: \"Write, time to last byte, p99\")\nunion(tables: [p50, p99])|> group(columns:[\"_field\"])\n\n",
              "refId": "B"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Latency",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "decimals": null,
              "format": "ms",
              "label": "",
              "logBase": 1,
              "max": null,
              "min": "0",
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "collapsed": true,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 24
          },
          "id": 149,
          "panels": [
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "datasource": "${DS_FLUX}",
              "decimals": null,
              "description": "Rate of successful requests per second, by method",
              "fill": 9,
              "gridPos": {
                "h": 9,
                "w": 12,
                "x": 0,
                "y": 22
              },
              "id": 143,
              "legend": {
                "alignAsTable": true,
                "avg": true,
                "current": false,
                "hideEmpty": true,
                "hideZero": true,
                "max": true,
                "min": true,
                "rightSide": true,
                "show": true,
                "sort": null,
                "sortDesc": null,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 0,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": true,
              "steppedLine": false,
              "targets": [
                {
                  "query": "import \"ecs\"\n\nwi = ecs.get_dynamic_window_info(int_start: $__range_from_s, int_stop: $__range_to_s, max: 200)\n\nfrom(bucket: \"monitoring_main\") |> filter(fn: (r) => r._measurement == \"statDataHead_performance_internal_transactions_method\" and r._field == \"succeed_request_counter\" and (\"${all_hosts}\" == \"yes\" or r.host =~ /^${host:pipe}$/ ) )\n|> range(start: wi.start, stop: wi.stop) \n|> keep(columns:[\"_time\", \"_value\", \"host\", \"method\"]) \n|> derivative(nonNegative: true)\n// see MONITORING-194 for details about next 2 lines\n|> window(every: wi.duration)\n|> mean()\n|> drop(columns:[\"host\"]) \n|> sum() \n|> group(columns:[\"method\"])\n|> rename(columns: {_start: \"_time\"})\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Successful Requests/s by Method",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": null,
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "datasource": "${DS_FLUX}",
              "decimals": null,
              "description": "Rate of successful requests per second, by instance",
              "fill": 9,
              "gridPos": {
                "h": 9,
                "w": 12,
                "x": 12,
                "y": 22
              },
              "id": 141,
              "legend": {
                "alignAsTable": true,
                "avg": true,
                "current": false,
                "max": true,
                "min": true,
                "rightSide": true,
                "show": true,
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": true,
              "steppedLine": false,
              "targets": [
                {
                  "query": "import \"ecs\"\n\nwi = ecs.get_dynamic_window_info(int_start: $__range_from_s, int_stop: $__range_to_s, max: 200)\n\nfrom(bucket: \"monitoring_main\") |> filter(fn: (r) => r._measurement == \"statDataHead_performance_internal_transactions\" and r._field == \"succeed_request_counter\" and (\"${all_hosts}\" == \"yes\" or r.host =~ /^${host:pipe}$/ ) )\n\n|> range(start: wi.start, stop: wi.stop) \n|> keep(columns:[\"_time\", \"_value\", \"host\"]) \n|> derivative(nonNegative: true)\n// see MONITORING-194 for details about next 2 lines\n|> window(every: wi.duration)\n|> mean()\n|> group(columns:[\"_field\", \"host\"]) \n|> rename(columns: {_start: \"_time\", host: \"node\"})\n\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Successful Requests/s by Instance",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "datasource": "${DS_FLUX}",
              "decimals": null,
              "description": "Rate of successful requests per second, by Protocol",
              "fill": 9,
              "gridPos": {
                "h": 9,
                "w": 12,
                "x": 0,
                "y": 31
              },
              "id": 153,
              "legend": {
                "alignAsTable": true,
                "avg": true,
                "current": false,
                "hideEmpty": true,
                "hideZero": true,
                "max": true,
                "min": true,
                "rightSide": true,
                "show": true,
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 0,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": true,
              "steppedLine": false,
              "targets": [
                {
                  "query": "import \"ecs\"\n\nwi = ecs.get_dynamic_window_info(int_start: $__range_from_s, int_stop: $__range_to_s, max: 200)\n\nfrom(bucket: \"monitoring_main\") |> filter(fn: (r) => r._measurement == \"statDataHead_performance_internal_transactions_head\" and r._field == \"succeed_request_counter\" and (\"${all_hosts}\" == \"yes\" or r.host =~ /^${host:pipe}$/ ) )\n  |> range(start: wi.start, stop: wi.stop)\n  |> keep(columns:[\"_time\", \"head\", \"_value\", \"host\"]) \n|> derivative(nonNegative: true)\n// see MONITORING-194 for details about next 2 lines\n|> window(every: wi.duration)\n|> mean()\n|> drop(columns:[\"host\"]) \n|> sum() \n|> group(columns:[\"head\"]) \n|> rename(columns: {_start: \"_time\", head: \"protocol\"})\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Successful Requests/s by Protocol",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": null,
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            }
          ],
          "title": "Successful requests drill down",
          "type": "row"
        },
        {
          "collapsed": true,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 25
          },
          "id": 151,
          "panels": [
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "datasource": "${DS_FLUX}",
              "decimals": null,
              "description": "Rate of failed requests per second, split by method",
              "fill": 9,
              "gridPos": {
                "h": 9,
                "w": 12,
                "x": 0,
                "y": 23
              },
              "id": 146,
              "legend": {
                "alignAsTable": true,
                "avg": true,
                "current": false,
                "hideEmpty": true,
                "hideZero": true,
                "max": true,
                "min": true,
                "rightSide": true,
                "show": true,
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 0,
              "links": [],
              "nullPointMode": "null",
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": true,
              "steppedLine": true,
              "targets": [
                {
                  "query": "import \"ecs\"\n\nwi = ecs.get_dynamic_window_info(int_start: $__range_from_s, int_stop: $__range_to_s, max: 200)\n\nfrom(bucket: \"monitoring_main\") |> filter(fn: (r) => r._measurement == \"statDataHead_performance_internal_transactions_method\" and r._field == \"failed_request_counter\" and (\"${all_hosts}\" == \"yes\" or r.host =~ /^${host:pipe}$/ ))\n  |> range(start: wi.start, stop: wi.stop)  \n|> keep(columns:[\"_time\", \"_value\", \"host\", \"method\"]) \n|> derivative(nonNegative: true)\n// see MONITORING-194 for details about next 2 lines\n|> window(every: wi.duration)\n|> mean()\n|> drop(columns:[\"host\"]) \n|> sum() \n|> group(columns:[\"method\"])\n|> rename(columns: {_start: \"_time\"})\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeShift": null,
              "title": "Failed Requests/s by Method",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "datasource": "${DS_FLUX}",
              "decimals": null,
              "description": "Rate of failed requests per second, split by instance",
              "fill": 9,
              "gridPos": {
                "h": 9,
                "w": 12,
                "x": 12,
                "y": 23
              },
              "id": 142,
              "legend": {
                "alignAsTable": true,
                "avg": true,
                "current": false,
                "hideEmpty": true,
                "hideZero": true,
                "max": true,
                "min": true,
                "rightSide": true,
                "show": true,
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 0,
              "links": [],
              "nullPointMode": "null",
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": true,
              "steppedLine": true,
              "targets": [
                {
                  "query": "import \"ecs\"\n\nwi = ecs.get_dynamic_window_info(int_start: $__range_from_s, int_stop: $__range_to_s, max: 200)\n\nfrom(bucket: \"monitoring_main\") |> filter(fn: (r) => r._measurement == \"statDataHead_performance_internal_transactions\" and r._field == \"failed_request_counter\" and (\"${all_hosts}\" == \"yes\" or r.host =~ /^${host:pipe}$/ ) )\n|> range(start: wi.start, stop: wi.stop) \n|> keep(columns:[\"_time\", \"_value\", \"host\"]) \n|> derivative(nonNegative: true)\n// see MONITORING-194 for details about next 2 lines\n|> window(every: wi.duration)\n|> mean()\n|> group(columns:[\"_field\", \"host\"]) \n|> rename(columns: {_start: \"_time\", host: \"node\"})",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeShift": null,
              "title": "Failed Requests/s by Instance",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "datasource": "${DS_FLUX}",
              "decimals": null,
              "description": "Rate of failed requests per second, split by Protocol",
              "fill": 9,
              "gridPos": {
                "h": 9,
                "w": 12,
                "x": 0,
                "y": 32
              },
              "id": 154,
              "legend": {
                "alignAsTable": true,
                "avg": true,
                "current": false,
                "hideEmpty": true,
                "hideZero": true,
                "max": true,
                "min": true,
                "rightSide": true,
                "show": true,
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 0,
              "links": [],
              "nullPointMode": "null",
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": true,
              "steppedLine": true,
              "targets": [
                {
                  "query": "import \"ecs\"\n\nwi = ecs.get_dynamic_window_info(int_start: $__range_from_s, int_stop: $__range_to_s, max: 200)\n\nfrom(bucket: \"monitoring_main\") |> filter(fn: (r) => r._measurement == \"statDataHead_performance_internal_transactions_head\" and r._field == \"failed_request_counter\" and (\"${all_hosts}\" == \"yes\" or r.host =~ /^${host:pipe}$/ ))\n  |> range(start: wi.start, stop: wi.stop)\n  |> keep(columns:[\"_time\", \"head\", \"_value\", \"host\"]) \n|> derivative(nonNegative: true)\n// see MONITORING-194 for details about next 2 lines\n|> window(every: wi.duration)\n|> mean()\n|> drop(columns:[\"host\"]) \n|> sum() \n|> group(columns:[\"head\"]) \n|> rename(columns: {_start: \"_time\", head: \"protocol\"})\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeShift": null,
              "title": "Failed Requests/s by Protocol",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "datasource": "${DS_FLUX}",
              "decimals": null,
              "description": "Rate of failed requests per second, split by error code",
              "fill": 10,
              "gridPos": {
                "h": 9,
                "w": 12,
                "x": 12,
                "y": 32
              },
              "id": 145,
              "legend": {
                "alignAsTable": true,
                "avg": true,
                "current": false,
                "hideEmpty": true,
                "hideZero": true,
                "max": true,
                "min": true,
                "rightSide": true,
                "show": true,
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 0,
              "links": [],
              "nullPointMode": "null",
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": true,
              "steppedLine": true,
              "targets": [
                {
                  "query": "import \"ecs\"\n\nwi = ecs.get_dynamic_window_info(int_start: $__range_from_s, int_stop: $__range_to_s, max: 200)\n\nfrom(bucket: \"monitoring_main\") |> filter(fn: (r) => r._measurement == \"statDataHead_performance_internal_error_code\"  and r._field == \"error_counter\" and (\"${all_hosts}\" == \"yes\" or r.host =~ /^${host:pipe}$/ ))\n  |> range(start: wi.start, stop: wi.stop)\n|> keep(columns:[\"_time\", \"_value\", \"host\", \"code\"]) \n|> derivative(nonNegative: true)\n// see MONITORING-194 for details about next 2 lines\n|> window(every: wi.duration)\n|> mean()\n|> drop(columns:[\"host\"]) \n|> sum() \n|> group(columns:[\"code\"])\n|> rename(columns: {_start: \"_time\"})\n\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeShift": null,
              "title": "Failed Requests/s by error code",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            }
          ],
          "title": "Failures drill down",
          "type": "row"
        },
        {
          "collapsed": true,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 26
          },
          "id": 161,
          "panels": [
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "datasource": "${DS_FLUX}",
              "decimals": null,
              "description": "Select different instances and compare rates of successful requests per second",
              "fill": 1,
              "gridPos": {
                "h": 9,
                "w": 12,
                "x": 0,
                "y": 24
              },
              "id": 162,
              "legend": {
                "alignAsTable": false,
                "avg": true,
                "current": false,
                "max": true,
                "min": true,
                "rightSide": false,
                "show": true,
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 2,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": true,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "import \"ecs\"\n\nwi = ecs.get_dynamic_window_info(int_start: $__range_from_s, int_stop: $__range_to_s, max: 200)\n\nfrom(bucket: \"monitoring_main\") |> filter(fn: (r) => r._measurement == \"statDataHead_performance_internal_transactions\" and r._field =~ /succeed_request_counter$/ and (r.host == \"$host\" or r.host == \"$ct_host\"))\n  |> range(start: wi.start, stop: wi.stop)  \n  |> keep(columns:[\"_time\", \"_field\", \"_value\", \"host\"])  \n  |> derivative(nonNegative: true)\n  // see MONITORING-194 for details about next 2 lines\n  |> window(every: wi.duration)\n  |> mean()\n  |> group(columns:[\"_field\", \"host\"]) \n  |> rename(columns: {_start: \"_time\", host: \"node\"})\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Compare TPS of success requests",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": null,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "datasource": "${DS_FLUX}",
              "decimals": null,
              "description": "Select different instances and compare rates of failed requests per second, split by error type (user/system)",
              "fill": 1,
              "gridPos": {
                "h": 9,
                "w": 12,
                "x": 12,
                "y": 24
              },
              "id": 164,
              "legend": {
                "alignAsTable": false,
                "avg": true,
                "current": false,
                "hideEmpty": true,
                "hideZero": true,
                "max": true,
                "min": true,
                "rightSide": false,
                "show": true,
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 2,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 0.5,
              "points": true,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "import \"ecs\"\n\nwi = ecs.get_dynamic_window_info(int_start: $__range_from_s, int_stop: $__range_to_s, max: 200)\n\nfrom(bucket: \"monitoring_main\") |> filter(fn: (r) => r._measurement == \"statDataHead_performance_internal_error\" and r._field =~ /_errors$/ and (r.host == \"$host\" or r.host == \"$ct_host\"))\n  |> range(start: wi.start, stop: wi.stop)  \n  |> keep(columns:[\"_time\", \"_field\", \"_value\", \"host\"])  \n  |> derivative(nonNegative: true)\n  // see MONITORING-194 for details about next 2 lines\n  |> window(every: wi.duration)\n  |> mean()\n  |> group(columns:[\"_field\", \"host\"]) \n  |> rename(columns: {_start: \"_time\", host: \"node\"})",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Compare rate of failed requests/s",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "datasource": "${DS_FLUX}",
              "decimals": null,
              "description": "Select different instances and compare data access bandwidth of successful requests per second",
              "fill": 1,
              "gridPos": {
                "h": 9,
                "w": 12,
                "x": 0,
                "y": 33
              },
              "id": 163,
              "legend": {
                "alignAsTable": false,
                "avg": true,
                "current": true,
                "max": true,
                "min": true,
                "rightSide": false,
                "show": true,
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 2,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": true,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "import \"ecs\"\n\nwi = ecs.get_dynamic_window_info(int_start: $__range_from_s, int_stop: $__range_to_s, max: 200)\n\nfrom(bucket: \"monitoring_main\") |> filter(fn: (r) => r._measurement == \"statDataHead_performance_internal_throughput\" and r._field == \"total_read_requests_size\" and (r.host == \"$host\" or r.host == \"$ct_host\"))\n  |> range(start: wi.start, stop: wi.stop)  \n  |> keep(columns:[\"_time\", \"_field\", \"_value\", \"host\"])  \n  |> derivative(nonNegative: true)\n  // see MONITORING-194 for details about next 2 lines\n  |> window(every: wi.duration)\n  |> mean()\n  |> group(columns:[\"_field\", \"host\"]) \n  |> rename(columns: {_start: \"_time\", host: \"node\"})\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Compare read bandwidth",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": null,
                  "format": "Bps",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "datasource": "${DS_FLUX}",
              "decimals": null,
              "description": "Select different instances and compare data access bandwidth of successful requests per second",
              "fill": 1,
              "gridPos": {
                "h": 9,
                "w": 12,
                "x": 12,
                "y": 33
              },
              "id": 166,
              "legend": {
                "alignAsTable": false,
                "avg": true,
                "current": true,
                "max": true,
                "min": true,
                "rightSide": false,
                "show": true,
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 2,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": true,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "import \"ecs\"\n\nwi = ecs.get_dynamic_window_info(int_start: $__range_from_s, int_stop: $__range_to_s, max: 200)\n\nfrom(bucket: \"monitoring_main\") |> filter(fn: (r) => r._measurement == \"statDataHead_performance_internal_throughput\" and r._field == \"total_write_requests_size\" and (r.host == \"$host\" or r.host == \"$ct_host\") )\n  |> range(start: wi.start, stop: wi.stop)  \n  |> keep(columns:[\"_time\", \"_field\", \"_value\", \"host\"])  \n  |> derivative(nonNegative: true)\n  // see MONITORING-194 for details about next 2 lines\n  |> window(every: wi.duration)\n  |> mean()\n  |> group(columns:[\"_field\", \"host\"]) \n  |> rename(columns: {_start: \"_time\", host: \"node\"})\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Compare write bandwidth",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": null,
                  "format": "Bps",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "datasource": "${DS_FLUX}",
              "decimals": null,
              "description": "Select different instances and compare latency of read requests",
              "fill": 1,
              "gridPos": {
                "h": 9,
                "w": 12,
                "x": 0,
                "y": 42
              },
              "id": 165,
              "legend": {
                "alignAsTable": false,
                "avg": true,
                "current": true,
                "max": true,
                "min": true,
                "rightSide": false,
                "show": true,
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 2,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 0.5,
              "points": true,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "import \"ecs\"\n\nwi = ecs.get_dynamic_window_info(int_start: $__range_from_s, int_stop: $__range_to_s, max: 200)\n\na = from(bucket: \"monitoring_main\") \n    |> filter(fn: (r) => r._measurement == \"statDataHead_performance_internal_latency\" and r.id == \"ttfb_read\" and (r.host == \"$host\" or r.host == \"$ct_host\") )  \n    |> range(start: wi.start, stop: wi.stop)     \n    |> drop(columns:[\"_measurement\", \"process\", \"tag\"])\n    |> difference(nonNegative: true) \n    |> fill(column: \"_value\", value: 0)\n    |> group(columns: [\"_field\", \"host\"]) \n    |> window(every: wi.duration)     \n    |> sum()\n    |> map(fn:(r) => ({_time:r._start, le_float: float(v:r._field), cnt_float: float(v:r._value)}))\n    |> drop(columns:[\"_field\", \"_stop\"]) \n    \np50 = a |> histogramQuantile(quantile:0.50, upperBoundColumn: \"le_float\", countColumn: \"cnt_float\")\n|> rename(columns:{_start: \"_time\"})\n|> set(key: \"_field\", value: \"Read, time to first byte, p50\")\np99 = a |> histogramQuantile(quantile:0.99, upperBoundColumn: \"le_float\", countColumn: \"cnt_float\")\n|> rename(columns:{_start: \"_time\"})\n|> set(key: \"_field\", value: \"Read, time to first byte, p99\")\nunion(tables: [p50, p99])|> group(columns:[\"_field\", \"host\"])\n\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Compare read latency",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": null,
                  "format": "ms",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "datasource": "${DS_FLUX}",
              "decimals": null,
              "description": "Select different instances and compare latency of write requests",
              "fill": 1,
              "gridPos": {
                "h": 9,
                "w": 12,
                "x": 12,
                "y": 42
              },
              "id": 167,
              "legend": {
                "alignAsTable": false,
                "avg": true,
                "current": true,
                "max": true,
                "min": true,
                "rightSide": false,
                "show": true,
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 2,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 0.5,
              "points": true,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "import \"ecs\"\n\nwi = ecs.get_dynamic_window_info(int_start: $__range_from_s, int_stop: $__range_to_s, max: 200)\n\na = from(bucket: \"monitoring_main\") \n    |> filter(fn: (r) => r._measurement == \"statDataHead_performance_internal_latency\" and r.id == \"ttlb_write\" and (r.host == \"$host\" or r.host == \"$ct_host\"))  \n    |> range(start: wi.start, stop: wi.stop)     \n    |> drop(columns:[\"_measurement\", \"process\", \"tag\"])\n    |> difference(nonNegative: true) \n    |> fill(column: \"_value\", value: 0)\n     |> group(columns: [\"_field\", \"host\"]) \n    |> window(every: wi.duration)     \n    |> sum()\n    |> map(fn:(r) => ({_time:r._start, le_float: float(v:r._field), cnt_float: float(v:r._value)}))\n    |> drop(columns:[\"_field\", \"_stop\"]) \n    \np50 = a |> histogramQuantile(quantile:0.50, upperBoundColumn: \"le_float\", countColumn: \"cnt_float\")\n|> rename(columns:{_start: \"_time\"})\n|> set(key: \"_field\", value: \"Write, time to last byte, p50\")\np99 = a |> histogramQuantile(quantile:0.99, upperBoundColumn: \"le_float\", countColumn: \"cnt_float\")\n|> rename(columns:{_start: \"_time\"})\n|> set(key: \"_field\", value: \"Write, time to last byte, p99\")\nunion(tables: [p50, p99])|> group(columns:[\"_field\", \"host\"])\n\n\n\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Compare write latency",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": null,
                  "format": "ms",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            }
          ],
          "title": "Compare to another instance",
          "type": "row"
        }
      ],
      "refresh": false,
      "schemaVersion": 18,
      "style": "dark",
      "tags": [
        "Data Access Performance"
      ],
      "templating": {
        "list": [
          {
            "allValue": ".*",
            "current": {},
            "datasource": "${DS_FLUX}",
            "definition": "from(bucket: \"monitoring_main\") |> filter(fn: (r) => r._measurement == \"statDataHead_performance_internal_transactions\" and r._field == \"succeed_request_counter\" )     |> range($range)     |> group(columns:[\"host\"])     |> distinct(column:\"host\")",
            "hide": 0,
            "includeAll": false,
            "label": "Instance",
            "multi": false,
            "name": "host",
            "options": [],
            "query": "from(bucket: \"monitoring_main\") |> filter(fn: (r) => r._measurement == \"statDataHead_performance_internal_transactions\" and r._field == \"succeed_request_counter\" )     |> range($range)     |> group(columns:[\"host\"])     |> distinct(column:\"host\")",
            "refresh": 2,
            "regex": "",
            "skipUrlSync": false,
            "sort": 5,
            "tagValuesQuery": "",
            "tags": [],
            "tagsQuery": "",
            "type": "query",
            "useTags": false
          },
          {
            "allValue": ".*",
            "current": {},
            "datasource": "${DS_FLUX}",
            "definition": "from(bucket: \"monitoring_main\") |> filter(fn: (r) => r._measurement == \"statDataHead_performance_internal_transactions\" and r._field == \"succeed_request_counter\" )     |> range($range)     |> group(columns:[\"host\"])     |> distinct(column:\"host\") |> group() |> filter(fn: (r) => r._value != \"$host\")",
            "hide": 0,
            "includeAll": false,
            "label": "Compare to",
            "multi": false,
            "name": "ct_host",
            "options": [],
            "query": "from(bucket: \"monitoring_main\") |> filter(fn: (r) => r._measurement == \"statDataHead_performance_internal_transactions\" and r._field == \"succeed_request_counter\" )     |> range($range)     |> group(columns:[\"host\"])     |> distinct(column:\"host\") |> group() |> filter(fn: (r) => r._value != \"$host\")",
            "refresh": 2,
            "regex": "",
            "skipUrlSync": false,
            "sort": 5,
            "tagValuesQuery": "",
            "tags": [],
            "tagsQuery": "",
            "type": "query",
            "useTags": false
          }
        ]
      },
      "time": {
        "from": "now-24h",
        "to": "now"
      },
      "timepicker": {
        "refresh_intervals": [
          "15m",
          "30m",
          "1h",
          "2h",
          "1d"
        ],
        "time_options": [
          "15m",
          "1h",
          "6h",
          "12h",
          "24h",
          "2d",
          "7d",
          "30d"
        ]
      },
      "timezone": "",
      "title": "Data Access Performance - by Instance",
      "uid": "kRnHd7eiz",
      "version": 2
    }
  data_access_performance_overview.json: |-
    {
      "__inputs": [
        {
          "name": "DS_FLUX",
          "label": "Flux",
          "description": "",
          "type": "datasource",
          "pluginId": "grafana-influxdb-flux-datasource",
          "pluginName": "Flux (InfluxDB) [BETA]"
        }
      ],
      "__requires": [
        {
          "type": "grafana",
          "id": "grafana",
          "name": "Grafana",
          "version": "6.2.5ecs"
        },
        {
          "type": "datasource",
          "id": "grafana-influxdb-flux-datasource",
          "name": "Flux (InfluxDB) [BETA]",
          "version": "5.2.12"
        },
        {
          "type": "panel",
          "id": "graph",
          "name": "Graph",
          "version": ""
        },
        {
          "type": "panel",
          "id": "table",
          "name": "Table",
          "version": ""
        }
      ],
      "annotations": {
        "list": [
          {
            "builtIn": 1,
            "datasource": "-- Grafana --",
            "enable": true,
            "hide": true,
            "iconColor": "rgba(0, 211, 255, 1)",
            "name": "Annotations & Alerts",
            "type": "dashboard"
          }
        ]
      },
      "editable": true,
      "gnetId": null,
      "graphTooltip": 0,
      "id": null,
      "links": [
        {
          "asDropdown": true,
          "icon": "external link",
          "keepTime": true,
          "tags": [
            "Data Access Performance"
          ],
          "title": "Related dashboards",
          "type": "dashboards"
        }
      ],
      "panels": [
        {
          "columns": [],
          "datasource": "${DS_FLUX}",
          "description": "Successful and failed requests summary for selected range",
          "fontSize": "110%",
          "gridPos": {
            "h": 3,
            "w": 24,
            "x": 0,
            "y": 0
          },
          "id": 157,
          "links": [],
          "options": {},
          "pageSize": null,
          "scroll": false,
          "showHeader": true,
          "sort": {
            "col": 3,
            "desc": true
          },
          "styles": [
            {
              "alias": "Time",
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "pattern": "Time",
              "type": "hidden"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Measurement",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Field",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "System Failures",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": null,
              "mappingType": 1,
              "pattern": "b_system_errors",
              "thresholds": [],
              "type": "number",
              "unit": "locale"
            },
            {
              "alias": "Successful requests",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": null,
              "mappingType": 1,
              "pattern": "a_succeed_request_counter",
              "thresholds": [],
              "type": "number",
              "unit": "locale"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Value",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "User Failures",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": null,
              "mappingType": 1,
              "pattern": "c_user_errors",
              "thresholds": [],
              "type": "number",
              "unit": "locale"
            },
            {
              "alias": "Failures % Rate",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 3,
              "mappingType": 1,
              "pattern": "d_error_rate",
              "thresholds": [],
              "type": "number",
              "unit": "percentunit"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "decimals": 2,
              "pattern": "/.*/",
              "thresholds": [],
              "type": "number",
              "unit": "short"
            }
          ],
          "targets": [
            {
              "query": "// need this 'default' table to substitute possibly missing sys_errors table if errors were not registered by ECS service\nimport \"csv\"\nimport \"ecs\"\ndefault_sys_errors = csv.from(csv:\"#datatype,string,long,string,long\n#group,false,false,true,false\n#default,_result,,,\n,result,table,_field,_value\n,,100,succeed_request_counter_i,0\n,,101,system_errors_i,0\n,,102,user_errors_i,0\")\n\nwi = ecs.get_dyn_downsample_info(start: $__range_from_s, stop: $__range_to_s, max: 200, start_offset: 0, stop_offset: 0, measurement: \"cq_performance_transaction_delta\")\ntr_mn = wi.measurement\ner_mn = if wi.in_downsample == 1 then \"cq_performance_error_delta_downsampled\" else \"cq_performance_error_delta\"\n\ntotals = from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == tr_mn)\n|> range(start: wi.start, stop: wi.stop)\n// following 2 lines are to fix MONITORING-568\n|> rename(columns: {_value: \"_value\"})\n|> range(start: wi.start, stop: wi.stop)\n|> keep(columns:[\"_time\", \"_field\", \"_value\"])\n|> sum()\n|> fill(column: \"_value\", value: 0)\n\nsys_errors = from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == er_mn)\n|> range(start: wi.start, stop: wi.stop)\n// following 2 lines are to fix MONITORING-568\n|> rename(columns: {_value: \"_value\"})\n|> range(start: wi.start, stop: wi.stop)\n|> keep(columns:[\"_time\", \"_field\", \"_value\"])\n|> sum()\n|> fill(column: \"_value\", value: 0)\n\nunion(tables: [default_sys_errors, totals, sys_errors])\n|> pivot(rowKey:[], columnKey: [\"_field\"], valueColumn: \"_value\")\n// map does not save non-group columns\n|> map(fn:(r) => ({\na_succeed_request_counter: r.succeed_request_counter_i,\nb_system_errors: r.system_errors_i,\nc_user_errors: r.user_errors_i,\nd_error_rate: float(v:r.system_errors_i+r.user_errors_i)/\nfloat(v:r.system_errors_i+r.user_errors_i+r.succeed_request_counter_i\n// this trick is needed because failed+succeed can be 0, avoid printing NaN in this case\n+int(v:bool(v:(r.system_errors_i+r.user_errors_i+r.succeed_request_counter_i)==0)))}))\n\n",
              "refId": "A",
              "resultFormat": "table"
            }
          ],
          "title": "Transaction Summary",
          "transform": "table",
          "type": "table"
        },
        {
          "columns": [],
          "description": "Latest values of data access bandwidth and latency of read/write requests for selected range",
          "fontSize": "100%",
          "gridPos": {
            "h": 3,
            "w": 24,
            "x": 0,
            "y": 3
          },
          "id": 159,
          "links": [],
          "options": {},
          "pageSize": null,
          "scroll": false,
          "showHeader": true,
          "sort": {
            "col": 1,
            "desc": false
          },
          "styles": [
            {
              "alias": "Time",
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "link": true,
              "pattern": "Time",
              "type": "hidden"
            },
            {
              "alias": "Read, time to first byte, p50",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "a_read_lat_p50",
              "thresholds": [],
              "type": "number",
              "unit": "ms"
            },
            {
              "alias": "Read, time to first byte, p99",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "b_read_lat_p99",
              "thresholds": [],
              "type": "number",
              "unit": "ms"
            },
            {
              "alias": "Write, time to last byte, p50",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "c_write_lat_p50",
              "thresholds": [],
              "type": "number",
              "unit": "ms"
            },
            {
              "alias": "Write, time to last byte, p99",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "d_write_lat_p99",
              "thresholds": [],
              "type": "number",
              "unit": "ms"
            },
            {
              "alias": "Read Bandwidth",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "e_read_bandwidth",
              "thresholds": [],
              "type": "number",
              "unit": "Bps"
            },
            {
              "alias": "Write Bandwidth",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "f_write_bandwidth",
              "thresholds": [],
              "type": "number",
              "unit": "Bps"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Metric",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Value",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Measurement",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Field",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "decimals": 2,
              "pattern": "/.*/",
              "thresholds": [],
              "type": "number",
              "unit": "short"
            }
          ],
          "targets": [
            {
              "query": "import \"csv\"\nbw_padding = csv.from(csv:\"\n#datatype,string,long,double,string\n#group,false,false,false,true\n#default,_result,,,\n,result,table,_value,_field\n,,100,-1,read_p50\n,,101,-1,read_p99\n,,102,-1,write_p50\n,,103,-1,write_p99\n,,104,-1,total_read_requests_size\n,,105,-1,total_write_requests_size\n\")\n\nbandwidth = from(bucket: \"monitoring_vdc\")\r\n |> filter(fn: (r) => r._measurement == \"cq_performance_throughput\")\r\n |> range($range)\n |> last()\r\n |> keep(columns: [\"_field\", \"_value\"])\n\nlatency_all = from(bucket: \"monitoring_vdc\")\r\n |> filter(fn: (r) => r._measurement == \"cq_performance_latency\" )\r\n |> range($range)\r\n |> last()\r\n |> keep(columns: [\"id\", \"_field\", \"_value\"])\n\nlatency_read = latency_all\n|> filter(fn: (r) => r.id == \"ttfb_read\")\r\n|> map(fn:(r) => ({_field: \"read_\" + r._field, _value: r._value}))\n|> keep(columns: [\"_field\", \"_value\"])\n\nlatency_write = latency_all\n|> filter(fn: (r) => r.id == \"ttlb_write\")\r\n|> map(fn:(r) => ({_field: \"write_\" + r._field, _value: r._value}))\n|> keep(columns: [\"_field\", \"_value\"])\n\nunion(tables: [bw_padding, bandwidth, latency_read, latency_write])\n// these two functions are required to exclude values from bw_padding if actual values exist\n|> group(columns:[\"_field\"])\n|> sort()\n|> pivot(rowKey:[], columnKey: [\"_field\"], valueColumn: \"_value\")\n|> map(fn:(r) => ({\n   a_read_lat_p50: if r.read_p50 >= 0 then string(v:r.read_p50) else \"-\",\n   b_read_lat_p99: if r.read_p99 >= 0 then string(v:r.read_p99) else \"-\",\n   c_write_lat_p50: if r.write_p50 >= 0 then string(v:r.write_p50) else \"-\",\n   d_write_lat_p99: if r.write_p99 >= 0 then string(v:r.write_p99) else \"-\",\n   e_read_bandwidth: if r.total_read_requests_size >= 0 then string(v:r.total_read_requests_size) else \"-\",\n   f_write_bandwidth: if r.total_write_requests_size >= 0 then string(v:r.total_write_requests_size) else \"-\",\n}))",
              "refId": "A",
              "resultFormat": "table"
            }
          ],
          "timeFrom": null,
          "timeShift": null,
          "title": "Performance Summary",
          "transform": "table",
          "type": "table"
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": "${DS_FLUX}",
          "decimals": null,
          "description": "Rate of successful requests and failures per second",
          "fill": 1,
          "gridPos": {
            "h": 9,
            "w": 12,
            "x": 0,
            "y": 6
          },
          "id": 147,
          "legend": {
            "alignAsTable": false,
            "avg": true,
            "current": false,
            "max": true,
            "min": true,
            "rightSide": false,
            "show": true,
            "sortDesc": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 2,
          "links": [],
          "nullPointMode": "null",
          "options": {},
          "percentage": false,
          "pointradius": 2,
          "points": true,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "import \"ecs\"\n\nwi = ecs.get_dyn_downsample_info(start: $__range_from_s, stop: $__range_to_s, max: 200\n                                 measurement: \"cq_performance_transaction\")\nmn = wi.measurement\n\nfrom(bucket: \"monitoring_vdc\") |> filter(fn: (r) => r._measurement == mn )\n  |> range(start: wi.start, stop: wi.stop)  \n  |> keep(columns:[\"_time\", \"_field\", \"_value\"])  \n  |> window(every: wi.duration)\n  |> mean()\n  |> group(columns:[\"_field\"]) \n  |> rename(columns: {_start: \"_time\"})\n",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "TPS (success/failure)",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "decimals": null,
              "format": "short",
              "label": "",
              "logBase": 1,
              "max": null,
              "min": "0",
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {
            " total_read_requests_size": "#6ed0e0",
            " total_write_requests_size": "#e24d42"
          },
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": "${DS_FLUX}",
          "decimals": null,
          "description": "Data access bandwidth of successful requests per second",
          "fill": 4,
          "gridPos": {
            "h": 9,
            "w": 12,
            "x": 12,
            "y": 6
          },
          "id": 155,
          "legend": {
            "alignAsTable": false,
            "avg": true,
            "current": true,
            "max": true,
            "min": true,
            "rightSide": false,
            "show": true,
            "sortDesc": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 2,
          "links": [],
          "nullPointMode": "null",
          "options": {},
          "percentage": false,
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": true,
          "steppedLine": false,
          "targets": [
            {
              "query": "import \"ecs\"\n\nwi = ecs.get_dyn_downsample_info(start: $__range_from_s, stop: $__range_to_s, max: 200\n                                 measurement: \"cq_performance_throughput\")\nmn = wi.measurement\n\nfrom(bucket: \"monitoring_vdc\") |> filter(fn: (r) => r._measurement == mn )\n|> range(start: wi.start, stop: wi.stop) \n|> keep(columns:[\"_time\", \"_field\", \"_value\"]) \n|> window(every: wi.duration)\n|> mean()\n|> group(columns:[\"_field\"]) \n|> rename(columns: {_start: \"_time\"})\n\n",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Bandwidth (read/write)",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "decimals": null,
              "format": "Bps",
              "label": "",
              "logBase": 1,
              "max": null,
              "min": "0",
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": "${DS_FLUX}",
          "decimals": null,
          "description": "Rate of failed requests per second, split by error type (user/system)",
          "fill": 9,
          "gridPos": {
            "h": 9,
            "w": 12,
            "x": 0,
            "y": 15
          },
          "id": 144,
          "legend": {
            "alignAsTable": false,
            "avg": true,
            "current": false,
            "hideEmpty": true,
            "hideZero": true,
            "max": true,
            "min": true,
            "rightSide": false,
            "show": true,
            "sortDesc": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 0,
          "links": [],
          "nullPointMode": "null",
          "options": {},
          "percentage": false,
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": true,
          "steppedLine": true,
          "targets": [
            {
              "query": "import \"ecs\"\n\nwi = ecs.get_dyn_downsample_info(start: $__range_from_s, stop: $__range_to_s, max: 200\n                                 measurement: \"cq_performance_error\")\nmn = wi.measurement\n\nfrom(bucket: \"monitoring_vdc\") |> filter(fn: (r) => r._measurement == mn )\n|> range(start: wi.start, stop: wi.stop) \n|> keep(columns:[\"_time\", \"_field\", \"_value\"]) \n|> window(every: wi.duration)\n|> mean()\n|> group(columns:[\"_field\"]) \n|> rename(columns: {_start: \"_time\"})\n",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Failed Requests/s by error type (user/system)",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": "0",
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": "${DS_FLUX}",
          "decimals": null,
          "description": "Latency of read/write requests",
          "fill": 1,
          "gridPos": {
            "h": 9,
            "w": 12,
            "x": 12,
            "y": 15
          },
          "id": 152,
          "legend": {
            "alignAsTable": false,
            "avg": true,
            "current": true,
            "max": true,
            "min": true,
            "rightSide": false,
            "show": true,
            "sortDesc": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 2,
          "links": [],
          "nullPointMode": "null",
          "options": {},
          "percentage": false,
          "pointradius": 0.5,
          "points": true,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "import \"ecs\"\n\nwi = ecs.get_dyn_downsample_info(start: $__range_from_s, stop: $__range_to_s, max: 200\n                                 measurement: \"cq_performance_latency\")\nmn = wi.measurement\n\nall = from(bucket: \"monitoring_vdc\") \n    |> filter(fn: (r) => r._measurement == mn )  \n    |> range(start: wi.start, stop: wi.stop)  \n    |> window(every: wi.duration)\n    |> mean()\n    |> group(columns:[\"_field\",\"id\"])\n\n// can't simple rename ttfb_read to Read, ti... and similarly for ttlb_write\n// when they are in same stream\n// TODO think about possible optimizations:\n// 1. use function? didn't work at first approach, flux can't see it\n// 2. use join with another table created from CSV\n\nreads = all |> filter(fn: (r) => r.id == \"ttfb_read\" )\n    |> set(key: \"id\", value: \"Read, time to first byte\")\n\nwrites = all |> filter(fn: (r) => r.id == \"ttlb_write\" )\n    |> set(key: \"id\", value: \"Write, time to last byte\")\n\nunion(tables: [reads, writes])|> map(fn:(r) => ({_time: r._start, _value: r._value, _field: r.id + \", \" + r._field })) |>drop(columns:[\"id\"])\n\n\n    \n\n\n",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Latency",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "decimals": null,
              "format": "ms",
              "label": "",
              "logBase": 1,
              "max": null,
              "min": "0",
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "collapsed": true,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 24
          },
          "id": 149,
          "panels": [
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "datasource": "${DS_FLUX}",
              "decimals": null,
              "description": "Rate of successful requests per second, by method",
              "fill": 9,
              "gridPos": {
                "h": 9,
                "w": 12,
                "x": 0,
                "y": 25
              },
              "id": 143,
              "legend": {
                "alignAsTable": true,
                "avg": true,
                "current": false,
                "hideEmpty": true,
                "hideZero": true,
                "max": true,
                "min": true,
                "rightSide": true,
                "show": true,
                "sort": null,
                "sortDesc": null,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 0,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": true,
              "steppedLine": false,
              "targets": [
                {
                  "query": "import \"ecs\"\n\nwi = ecs.get_dyn_downsample_info(start: $__range_from_s, stop: $__range_to_s, max: 200\n                                 measurement: \"cq_performance_transaction_method\")\nmn = wi.measurement\n\nfrom(bucket: \"monitoring_vdc\") |> filter(fn: (r) => r._measurement == mn and r._field == \"succeed_request_counter\" )\n|> range(start: wi.start, stop: wi.stop) \n|> keep(columns:[\"_time\", \"_value\", \"method\"]) \n|> window(every: wi.duration)\n|> mean()\n|> group(columns:[\"_field\", \"method\"]) \n|> rename(columns: {_start: \"_time\"})\n\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Successful Requests/s by Method",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": null,
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "datasource": "${DS_FLUX}",
              "decimals": null,
              "description": "Rate of successful requests per second, by Protocol",
              "fill": 9,
              "gridPos": {
                "h": 9,
                "w": 12,
                "x": 12,
                "y": 25
              },
              "id": 153,
              "legend": {
                "alignAsTable": true,
                "avg": true,
                "current": false,
                "hideEmpty": true,
                "hideZero": true,
                "max": true,
                "min": true,
                "rightSide": true,
                "show": true,
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 0,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": true,
              "steppedLine": false,
              "targets": [
                {
                  "query": "import \"ecs\"\n\nwi = ecs.get_dyn_downsample_info(start: $__range_from_s, stop: $__range_to_s, max: 200\n                                 measurement: \"cq_performance_transaction_head\")\nmn = wi.measurement\n\nfrom(bucket: \"monitoring_vdc\") |> filter(fn: (r) => r._measurement == mn and r._field == \"succeed_request_counter\" )\n|> range(start: wi.start, stop: wi.stop) \n|> keep(columns:[\"_time\", \"_value\", \"head\"]) \n|> window(every: wi.duration)\n|> mean()\n|> group(columns:[\"_field\", \"head\"]) \n|> rename(columns: {_start: \"_time\", head: \"protocol\"})\n\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Successful Requests/s by Protocol",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": null,
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            }
          ],
          "title": "Successful requests drill down",
          "type": "row"
        },
        {
          "collapsed": true,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 25
          },
          "id": 151,
          "panels": [
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "datasource": "${DS_FLUX}",
              "decimals": null,
              "description": "Rate of failed requests per second, split by method",
              "fill": 9,
              "gridPos": {
                "h": 9,
                "w": 12,
                "x": 0,
                "y": 26
              },
              "id": 146,
              "legend": {
                "alignAsTable": true,
                "avg": true,
                "current": false,
                "hideEmpty": true,
                "hideZero": true,
                "max": true,
                "min": true,
                "rightSide": true,
                "show": true,
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 0,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": true,
              "steppedLine": true,
              "targets": [
                {
                  "query": "import \"ecs\"\n\nwi = ecs.get_dyn_downsample_info(start: $__range_from_s, stop: $__range_to_s, max: 200\n                                 measurement: \"cq_performance_transaction_method\")\nmn = wi.measurement\n\nfrom(bucket: \"monitoring_vdc\") |> filter(fn: (r) => r._measurement == mn and r._field == \"failed_request_counter\" )\n|> range(start: wi.start, stop: wi.stop) \n|> keep(columns:[\"_time\", \"_value\", \"method\"]) \n|> window(every: wi.duration)\n|> mean()\n|> group(columns:[\"_field\", \"method\"]) \n|> rename(columns: {_start: \"_time\"})\n\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Failed Requests/s by Method",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "datasource": "${DS_FLUX}",
              "decimals": null,
              "description": "Rate of failed requests per second, split by error code",
              "fill": 10,
              "gridPos": {
                "h": 9,
                "w": 12,
                "x": 12,
                "y": 26
              },
              "id": 145,
              "legend": {
                "alignAsTable": true,
                "avg": true,
                "current": false,
                "hideEmpty": true,
                "hideZero": true,
                "max": true,
                "min": true,
                "rightSide": true,
                "show": true,
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 0,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": true,
              "steppedLine": true,
              "targets": [
                {
                  "query": "import \"ecs\"\n\nwi = ecs.get_dyn_downsample_info(start: $__range_from_s, stop: $__range_to_s, max: 200\n                                 measurement: \"cq_performance_error_code\")\nmn = wi.measurement\n\nfrom(bucket: \"monitoring_vdc\") |> filter(fn: (r) => r._measurement == mn and r._field == \"error_counter\" )\n|> range(start: wi.start, stop: wi.stop) \n|> keep(columns:[\"_time\", \"_value\", \"code\"]) \n|> window(every: wi.duration)\n|> mean()\n|> group(columns:[\"_field\", \"code\"]) \n|> rename(columns: {_start: \"_time\"})\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Failed Requests/s by error code",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "datasource": "${DS_FLUX}",
              "decimals": null,
              "description": "Rate of failed requests per second, split by Protocol",
              "fill": 9,
              "gridPos": {
                "h": 9,
                "w": 12,
                "x": 0,
                "y": 35
              },
              "id": 154,
              "legend": {
                "alignAsTable": true,
                "avg": true,
                "current": false,
                "hideEmpty": true,
                "hideZero": true,
                "max": true,
                "min": true,
                "rightSide": true,
                "show": true,
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 0,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": true,
              "steppedLine": true,
              "targets": [
                {
                  "query": "import \"ecs\"\n\nwi = ecs.get_dyn_downsample_info(start: $__range_from_s, stop: $__range_to_s, max: 200\n                                 measurement: \"cq_performance_transaction_head\")\nmn = wi.measurement\n\nfrom(bucket: \"monitoring_vdc\") |> filter(fn: (r) => r._measurement == mn and r._field == \"failed_request_counter\" )\n|> range(start: wi.start, stop: wi.stop) \n|> keep(columns:[\"_time\", \"_value\", \"head\"]) \n|> window(every: wi.duration)\n|> mean()\n|> group(columns:[\"_field\", \"head\"]) \n|> rename(columns: {_start: \"_time\", head: \"protocol\"})\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Failed Requests/s by Protocol",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            }
          ],
          "title": "Failures drill down",
          "type": "row"
        }
      ],
      "refresh": false,
      "schemaVersion": 18,
      "style": "dark",
      "tags": [
        "Data Access Performance",
        "Overview"
      ],
      "templating": {
        "list": []
      },
      "time": {
        "from": "now-24h",
        "to": "now"
      },
      "timepicker": {
        "refresh_intervals": [
          "15m",
          "30m",
          "1h",
          "2h",
          "1d"
        ],
        "time_options": [
          "15m",
          "1h",
          "6h",
          "12h",
          "24h",
          "2d",
          "7d",
          "30d"
        ]
      },
      "timezone": "",
      "title": "Data Access Performance - Overview",
      "uid": "JXFhFS6mz",
      "version": 3
    }
  disk_bandwidth_overview.json: |-
    {
      "__inputs": [
        {
          "name": "DS_FLUX",
          "label": "Flux",
          "description": "",
          "type": "datasource",
          "pluginId": "grafana-influxdb-flux-datasource",
          "pluginName": "Flux (InfluxDB) [BETA]"
        }
      ],
      "__requires": [
        {
          "type": "grafana",
          "id": "grafana",
          "name": "Grafana",
          "version": "6.2.5ecs"
        },
        {
          "type": "datasource",
          "id": "grafana-influxdb-flux-datasource",
          "name": "Flux (InfluxDB) [BETA]",
          "version": "5.2.12"
        },
        {
          "type": "panel",
          "id": "graph",
          "name": "Graph",
          "version": ""
        },
        {
          "type": "panel",
          "id": "table",
          "name": "Table",
          "version": ""
        }
      ],
      "annotations": {
        "list": [
          {
            "builtIn": 1,
            "datasource": "-- Grafana --",
            "enable": true,
            "hide": true,
            "iconColor": "rgba(0, 211, 255, 1)",
            "name": "Annotations & Alerts",
            "type": "dashboard"
          }
        ]
      },
      "editable": true,
      "gnetId": null,
      "graphTooltip": 0,
      "id": null,
      "iteration": 1608022026539,
      "links": [],
      "panels": [
        {
          "columns": [],
          "datasource": "${DS_FLUX}",
          "description": "Monitor the disk usage metrics by read or write operations at the VDC level.",
          "fontSize": "100%",
          "gridPos": {
            "h": 4,
            "w": 24,
            "x": 0,
            "y": 0
          },
          "id": 4,
          "links": [],
          "options": {},
          "pageSize": 8,
          "scroll": true,
          "showHeader": true,
          "sort": {
            "col": null,
            "desc": false
          },
          "styles": [
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "link": false,
              "mappingType": 1,
              "pattern": "Time",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Measurement",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Field",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Value",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "Nodes",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "z_nodes",
              "thresholds": [],
              "type": "string",
              "unit": "short"
            },
            {
              "alias": "Consistency Checker",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "a6_consistency_checker",
              "thresholds": [],
              "type": "number",
              "unit": "Bps"
            },
            {
              "alias": "Erasure Encoding",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "link": false,
              "linkTargetBlank": false,
              "linkTooltip": "",
              "linkUrl": "",
              "mappingType": 1,
              "pattern": "a4_erasure_encoding",
              "thresholds": [],
              "type": "number",
              "unit": "Bps"
            },
            {
              "alias": "Geo",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "a7_geo",
              "thresholds": [],
              "type": "number",
              "unit": "Bps"
            },
            {
              "alias": "Hardware Recovery",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "a3_hardware_recovery",
              "thresholds": [],
              "type": "number",
              "unit": "Bps"
            },
            {
              "alias": "User Traffic",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "a8_user_traffic",
              "thresholds": [],
              "type": "number",
              "unit": "Bps"
            },
            {
              "alias": "XOR",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "a5_xor",
              "thresholds": [],
              "type": "number",
              "unit": "Bps"
            },
            {
              "alias": "Total",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "a2_total",
              "thresholds": [],
              "type": "number",
              "unit": "Bps"
            },
            {
              "alias": "Read or Write",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "type_op",
              "thresholds": [],
              "type": "string",
              "unit": "short"
            }
          ],
          "targets": [
            {
              "query": "from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_disk_bandwidth\")  \n|> range($range)\n|> last()\n|> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n|> map(fn: (r) => ({\r\n    a2_total: r.total,\r\n    a6_consistency_checker: r.consistency_checker,\r\n    a4_erasure_encoding: r.erasure_encoding,\r\n    a3_hardware_recovery: r.hardware_recovery,\r\n    a8_user_traffic: r.user_traffic}))",
              "refId": "A",
              "resultFormat": "table"
            }
          ],
          "title": "Disk Bandwidth Overview (average for selected period for all nodes)",
          "transform": "table",
          "type": "table"
        },
        {
          "collapsed": true,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 4
          },
          "id": 15,
          "panels": [
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "datasource": "${DS_FLUX}",
              "description": "History of the total disk bandwidth used for either read and write operations in the selected time range.",
              "fill": 1,
              "gridPos": {
                "h": 9,
                "w": 6,
                "x": 0,
                "y": 5
              },
              "id": 16,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 3,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_disk_bandwidth\" and r.type_op =~ /${type:pipe}/ and r._field == \"total\")  \n|> range($range)\n|> drop(columns: [\"_measurement\", \"_field\"])\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Total",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "Bps",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "datasource": "${DS_FLUX}",
              "description": "History of the rate at which disk bandwidth is used to recover data after a hardware failure in the selected time range.",
              "fill": 1,
              "gridPos": {
                "h": 9,
                "w": 6,
                "x": 6,
                "y": 5
              },
              "id": 6,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 3,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_disk_bandwidth\" and r.type_op =~ /${type:pipe}/ and r._field == \"hardware_recovery\")  \n|> range($range)\n|> drop(columns: [\"_measurement\", \"_field\"])",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Hardware Recovery",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "Bps",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "datasource": "${DS_FLUX}",
              "description": "History of the rate at which disk bandwidth is used in system erasure coding operations in the selected time range.",
              "fill": 1,
              "gridPos": {
                "h": 9,
                "w": 6,
                "x": 12,
                "y": 5
              },
              "id": 5,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 3,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_disk_bandwidth\" and r.type_op =~ /${type:pipe}/ and r._field == \"erasure_encoding\")  \n|> range($range)\n|> drop(columns: [\"_measurement\", \"_field\"])",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Erasure Encoding",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "Bps",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "datasource": "${DS_FLUX}",
              "description": "History of the rate at which disk bandwidth is used to check for inconsistencies between protected data and its replicas in the selected time range.",
              "fill": 1,
              "gridPos": {
                "h": 9,
                "w": 6,
                "x": 18,
                "y": 5
              },
              "id": 2,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 3,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_disk_bandwidth\" and r.type_op =~ /${type:pipe}/ and r._field == \"consistency_checker\")  \n|> range($range)\n|> drop(columns: [\"_measurement\", \"_field\"])",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Consistency Checker",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "Bps",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "datasource": "${DS_FLUX}",
              "description": "History of the rate at which disk bandwidth is used by object users in the selected time range.",
              "fill": 1,
              "gridPos": {
                "h": 9,
                "w": 12,
                "x": 0,
                "y": 14
              },
              "id": 9,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 3,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_disk_bandwidth\" and r.type_op =~ /${type:pipe}/ and r._field == \"user_traffic\")  \n|> range($range)\n|> drop(columns: [\"_measurement\", \"_field\"])",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "User Traffic",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "Bps",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            }
          ],
          "repeat": null,
          "title": "History - $type",
          "type": "row"
        }
      ],
      "refresh": false,
      "schemaVersion": 18,
      "style": "dark",
      "tags": [
        "Disk Bandwidth"
      ],
      "templating": {
        "list": [
          {
            "allValue": null,
            "current": {
              "tags": [],
              "text": "All",
              "value": "$__all"
            },
            "hide": 0,
            "includeAll": true,
            "label": null,
            "multi": false,
            "name": "type",
            "options": [
              {
                "selected": true,
                "text": "All",
                "value": "$__all"
              },
              {
                "selected": false,
                "text": "read",
                "value": "read"
              },
              {
                "selected": false,
                "text": "write",
                "value": "write"
              }
            ],
            "query": "read,write",
            "skipUrlSync": false,
            "type": "custom"
          }
        ]
      },
      "time": {
        "from": "now-24h",
        "to": "now"
      },
      "timepicker": {
        "refresh_intervals": [
          "15m",
          "30m",
          "1h",
          "2h",
          "1d"
        ],
        "time_options": [
          "15m",
          "1h",
          "6h",
          "12h",
          "24h",
          "2d",
          "7d",
          "30d"
        ]
      },
      "timezone": "",
      "title": "Disk Bandwidth",
      "uid": "f2f9yBFZz",
      "version": 3
    }
  hardware_health_all_nodes_and_disks_by_nodes.json: |
    {
      "__inputs": [
        {
          "name": "DS_FLUX",
          "label": "Flux",
          "description": "",
          "type": "datasource",
          "pluginId": "grafana-influxdb-flux-datasource",
          "pluginName": "Flux (InfluxDB) [BETA]"
        }
      ],
      "__requires": [
        {
          "type": "grafana",
          "id": "grafana",
          "name": "Grafana",
          "version": "6.2.5"
        },
        {
          "type": "datasource",
          "id": "grafana-influxdb-flux-datasource",
          "name": "Flux (InfluxDB) [BETA]",
          "version": "5.2.11"
        },
        {
          "type": "panel",
          "id": "table",
          "name": "Table",
          "version": ""
        }
      ],
      "annotations": {
        "list": [
          {
            "builtIn": 1,
            "datasource": "-- Grafana --",
            "enable": true,
            "hide": true,
            "iconColor": "rgba(0, 211, 255, 1)",
            "name": "Annotations & Alerts",
            "type": "dashboard"
          }
        ]
      },
      "editable": true,
      "gnetId": null,
      "graphTooltip": 0,
      "id": null,
      "iteration": 1582285813172,
      "links": [],
      "panels": [
        {
          "columns": [],
          "fontSize": "100%",
          "gridPos": {
            "h": 22,
            "w": 24,
            "x": 0,
            "y": 0
          },
          "id": 4,
          "links": [],
          "options": {},
          "pageSize": null,
          "scroll": true,
          "showHeader": true,
          "sort": {
            "col": 5,
            "desc": false
          },
          "styles": [
            {
              "alias": "Time",
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "pattern": "Time",
              "type": "hidden"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "decimals": 2,
              "pattern": "Measurement",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Field",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Value",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "Disks",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "a1_Disks",
              "thresholds": [],
              "type": "string",
              "unit": "short"
            },
            {
              "alias": "Status",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "a2_Status",
              "thresholds": [],
              "type": "string",
              "unit": "short"
            },
            {
              "alias": "Slot Info",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "a3_Slot_Info",
              "thresholds": [],
              "type": "string",
              "unit": "short"
            }
          ],
          "targets": [
            {
              "query": "// get node states\nnodes = from(bucket: \"monitoring_main\") \r\n|> filter(fn: (r) => r._measurement == \"ssm_sstable_SSTable_SS\" and r.SS =~ /$node_id/ and r._field == \"state\")\r\n|> range(start: -13h) \n|> last()\r\n|> pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\") \n|> keep(columns: [\"SS\", \"state\"])\n\r|> last(column: \"SS\")\r\n\n// get disk states and additional info\nall_disks_info = from(bucket: \"monitoring_main\")\r\n|> filter(fn: (r) => r._measurement == \"ssm_sstable_SSTable_SS_partitions_PD_status\" and r.SS =~ /$node_id/ and (r._field == \"hwState\"))\r\n|> range(start: -13h)\r\n\r|> last()\r\n\nhwState = all_disks_info\n|> filter(fn: (r) => r._field == \"hwStateTimestamp\" or \rr._field == \"hwState\")\r\n|> pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n|> keep(columns: [\"SS\", \"PD\", \"hwState\"])\n\r|> last(column: \"SS\")\r\n\n// merge disk and nodes statuses\ndisks_and_nodes = join(tables: {hwState: hwState, nodes: nodes}, on: [\"SS\"]) \r\n\n//filter out different statuses\ngood = disks_and_nodes\r\n|> filter(fn: (r) => r.hwState =~ /(?i)good/ and r.state == \"SS UP\")\r\n|> set(key: \"hwState\", value: \"Good\")\r\n\nnotaccessible = disks_and_nodes\r\n|> filter(fn: (r) => r.state != \"SS UP\")\r\n|> set(key: \"hwState\", value: \"Not Accessible\")\r\n\nsuspect = disks_and_nodes\r\n|> filter(fn: (r) => r.hwState =~ /(?i)unknown|(?i)suspect/ and r.state == \"SS UP\")\r\n|> set(key: \"hwState\", value: \"Suspect\")\r\n\nbad = disks_and_nodes\r\n|> filter(fn: (r) => r.hwState =~ /(?i)bad/ and r.state == \"SS UP\")\r\n|> set(key: \"hwState\", value: \"Bad\")\r\n\nmaintenance = disks_and_nodes\r\n|> filter(fn: (r) => r.hwState =~ /(?i)maintenance/ and r.state == \"SS UP\")\r\n|> set(key: \"hwState\", value: \"Maintenance\")\r\n\n// merge all statuses and prepare headers\nunion(tables: [good, notaccessible, suspect, bad, maintenance])\n|> group()\n// sort headers\n|> map(fn: (r) => ({\ra1_Disks: r.PD,\r a2_Status: r.hwState}))",
              "refId": "A",
              "resultFormat": "table"
            }
          ],
          "timeFrom": null,
          "timeShift": null,
          "title": "Disks statuses by node ($node_id)",
          "transform": "table",
          "type": "table"
        }
      ],
      "refresh": false,
      "schemaVersion": 18,
      "style": "dark",
      "tags": [
        "Hardware"
      ],
      "templating": {
        "list": [
          {
            "allValue": null,
            "current": {},
            "datasource": "${DS_FLUX}",
            "definition": "from(bucket: \"monitoring_main\") |> filter(fn: (r) => r._measurement == \"ssm_sstable_SSTable_SS\" and r._field==\"state\" )|> range(start: -5d) |> last()|> distinct(column:\"SS\")",
            "hide": 0,
            "includeAll": false,
            "label": null,
            "multi": false,
            "name": "node_id",
            "options": [],
            "query": "from(bucket: \"monitoring_main\") |> filter(fn: (r) => r._measurement == \"ssm_sstable_SSTable_SS\" and r._field==\"state\" )|> range(start: -5d) |> last()|> distinct(column:\"SS\")",
            "refresh": 1,
            "regex": "",
            "skipUrlSync": false,
            "sort": 0,
            "tagValuesQuery": "",
            "tags": [],
            "tagsQuery": "",
            "type": "query",
            "useTags": false
          }
        ]
      },
      "time": {
        "from": "now-12h",
        "to": "now"
      },
      "timepicker": {
        "refresh_intervals": [
          "5s",
          "10s",
          "30s",
          "1m",
          "5m",
          "15m",
          "30m",
          "1h",
          "2h",
          "1d"
        ],
        "time_options": [
          "5m",
          "15m",
          "1h",
          "6h",
          "12h",
          "24h",
          "2d",
          "7d",
          "30d"
        ]
      },
      "timezone": "",
      "title": "Hardware Health: All Nodes and Disks - by Nodes",
      "uid": "jsSUw7cWk",
      "version": 2
    }
  hardware_health_all_nodes_and_disks_overview.json: |-
    {
      "__inputs": [],
      "__requires": [
        {
          "type": "grafana",
          "id": "grafana",
          "name": "Grafana",
          "version": "6.2.5ecs"
        },
        {
          "type": "panel",
          "id": "table",
          "name": "Table",
          "version": ""
        }
      ],
      "annotations": {
        "list": [
          {
            "builtIn": 1,
            "datasource": "-- Grafana --",
            "enable": true,
            "hide": true,
            "iconColor": "rgba(0, 211, 255, 1)",
            "name": "Annotations & Alerts",
            "type": "dashboard"
          }
        ]
      },
      "editable": true,
      "gnetId": null,
      "graphTooltip": 0,
      "id": null,
      "links": [
        {
          "asDropdown": true,
          "icon": "external link",
          "tags": [
            "Hardware"
          ],
          "title": "Related dashboards",
          "type": "dashboards"
        }
      ],
      "panels": [
        {
          "columns": [],
          "fontSize": "100%",
          "gridPos": {
            "h": 12,
            "w": 24,
            "x": 0,
            "y": 0
          },
          "id": 2,
          "links": [],
          "options": {},
          "pageSize": null,
          "scroll": true,
          "showHeader": true,
          "sort": {
            "col": 6,
            "desc": true
          },
          "styles": [
            {
              "alias": "Status",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "a2_state",
              "preserveFormat": false,
              "sanitize": false,
              "thresholds": [],
              "type": "string",
              "unit": "short",
              "valueMaps": [
                {
                  "text": "Good",
                  "value": "SS UP"
                },
                {
                  "text": "Not Accessible",
                  "value": "SS Transient Down Pending"
                },
                {
                  "text": "Suspect",
                  "value": "SS Permanent Down Pending"
                },
                {
                  "text": "Bad",
                  "value": "SS Permanent Down"
                }
              ]
            },
            {
              "alias": "Nodes",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "a1_Host",
              "thresholds": [],
              "type": "string",
              "unit": "short"
            },
            {
              "alias": "Online Disks",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 0,
              "mappingType": 1,
              "pattern": "a3_OnlineDisks",
              "thresholds": [],
              "type": "number",
              "unit": "short"
            },
            {
              "alias": "Offline Disks",
              "colorMode": "cell",
              "colors": [
                "rgba(255, 255, 255, 0)",
                "#C4162A",
                "#C4162A"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 0,
              "mappingType": 1,
              "pattern": "a4_OfflineDisks",
              "thresholds": [
                "1",
                "2"
              ],
              "type": "number",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Time",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Measurement",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Field",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Value",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            }
          ],
          "targets": [
            {
              "query": "nodes = from(bucket: \"monitoring_main\") \r\n|> filter(fn: (r) => r._measurement == \"ssm_sstable_SSTable_SS\" and r._field == \"state\")\r\n|> range(start: -13h) \n|> last()\r\n|> pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\") \r\n|> keep(columns: [\"SS\", \"state\"])\n|> last(column: \"SS\")\r\n\ndisks = from(bucket: \"monitoring_main\")\r\n|> filter(fn: (r) => r._measurement == \"ssm_sstable_SSTable_SS_partitions_PD_status\" and r._field == \"hwStateTimestamp\" or \rr._field == \"hwState\")\r\n|> range(start: -13h)\r\n|> last()\r\n|> pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\r\n|> keep(columns: [\"SS\", \"PD\", \"hwState\"])\n|> last(column: \"PD\")\r\n\r\ndisks_and_nodes = join(tables: {disks: disks, nodes: nodes}, on: [\"SS\"]) \r\n|> group(columns:[\"SS\", \"state\"])\r\n\n//start to filter different statuses\nonline_disks = disks_and_nodes\r\n|> filter(fn: (r) => r.hwState == \"GOOD\" and r.state == \"SS UP\")\r\n|> count(columns: [\"PD\"])\n|> rename(columns:{PD: \"Online_Disks\"}) \r\n\noffline_disks = disks_and_nodes\r\n|> filter(fn: (r) => r.state != \"SS UP\" or (r.hwState != \"GOOD\" and r.state == \"SS UP\")\r)\n|> count(columns: [\"PD\"])\n|> rename(columns:{PD: \"Offline_Disks\"})\r\n\njoin(tables: {online_disks: online_disks, offline_disks: offline_disks}, on: [\"SS\", \"state\"])\n|> group()\n// sort columns\n|> map(fn: (r) => ({\ra1_Host: r.SS,\r a2_state: r.state,\r a3_OnlineDisks: r.Online_Disks, a4_OfflineDisks: r.Offline_Disks}))\n",
              "refId": "A",
              "resultFormat": "table"
            }
          ],
          "timeFrom": null,
          "timeShift": null,
          "title": "All Nodes and Disks",
          "transform": "table",
          "type": "table"
        }
      ],
      "refresh": false,
      "schemaVersion": 18,
      "style": "dark",
      "tags": [
        "Hardware",
        "Overview"
      ],
      "templating": {
        "list": []
      },
      "time": {
        "from": "now-12h",
        "to": "now"
      },
      "timepicker": {
        "refresh_intervals": [
          "5s",
          "10s",
          "30s",
          "1m",
          "5m",
          "15m",
          "30m",
          "1h",
          "2h",
          "1d"
        ],
        "time_options": [
          "5m",
          "15m",
          "1h",
          "6h",
          "12h",
          "24h",
          "2d",
          "7d",
          "30d"
        ]
      },
      "timezone": "",
      "title": "Hardware Health: All Nodes and Disks - Overview",
      "uid": "ntpoZTFZk",
      "version": 3
    }
  hardware_health_offline_disks.json: |
    {
      "__inputs": [],
      "__requires": [
        {
          "type": "grafana",
          "id": "grafana",
          "name": "Grafana",
          "version": "6.2.5"
        },
        {
          "type": "panel",
          "id": "table",
          "name": "Table",
          "version": ""
        }
      ],
      "annotations": {
        "list": [
          {
            "builtIn": 1,
            "datasource": "-- Grafana --",
            "enable": true,
            "hide": true,
            "iconColor": "rgba(0, 211, 255, 1)",
            "name": "Annotations & Alerts",
            "type": "dashboard"
          }
        ]
      },
      "editable": true,
      "gnetId": null,
      "graphTooltip": 0,
      "id": null,
      "links": [],
      "panels": [
        {
          "columns": [],
          "fontSize": "100%",
          "gridPos": {
            "h": 22,
            "w": 24,
            "x": 0,
            "y": 0
          },
          "id": 4,
          "links": [],
          "options": {},
          "pageSize": null,
          "scroll": true,
          "showHeader": true,
          "sort": {
            "col": 6,
            "desc": true
          },
          "styles": [
            {
              "alias": "Time",
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "pattern": "Time",
              "type": "hidden"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "decimals": 2,
              "pattern": "Measurement",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Field",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Value",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "Disks",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "a1_Disks",
              "thresholds": [],
              "type": "string",
              "unit": "short"
            },
            {
              "alias": "Status",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "a2_Status",
              "thresholds": [],
              "type": "string",
              "unit": "short"
            },
            {
              "alias": "Slot Info",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "a3_Slot_Info",
              "thresholds": [],
              "type": "string",
              "unit": "short"
            },
            {
              "alias": "Nodes",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "a4_Host",
              "thresholds": [],
              "type": "number",
              "unit": "short"
            }
          ],
          "targets": [
            {
              "query": "// get node states\nnodes = from(bucket: \"monitoring_main\") \r\n|> filter(fn: (r) => r._measurement == \"ssm_sstable_SSTable_SS\" and r._field == \"state\")\r\n|> range(start: -13h) \n|> last()\r\n|> pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\") \n|> keep(columns: [\"SS\", \"state\"])\n|> last(column: \"SS\")\r\n\n// get disk states and additional info\nall_disks_info = from(bucket: \"monitoring_main\")\r\n|> filter(fn: (r) => r._measurement == \"ssm_sstable_SSTable_SS_partitions_PD_status\" and (r._field == \"hwState\"))\r\n|> range(start: -13h)\r\n|> last()\r\n\nhwState = all_disks_info\n|> filter(fn: (r) => \rr._field == \"hwState\")\r\n|> pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n|> keep(columns: [\"SS\", \"PD\", \"hwState\"])\n|> last(column: \"PD\")\r\n\n// merge disk and nodes statuses\ndisks_and_nodes = join(tables: {hwState: hwState, nodes: nodes}, on: [\"SS\"]) \r\n\n//filter out different statuses\ngood = disks_and_nodes\r\n|> filter(fn: (r) => r.hwState =~ /(?i)good/ and r.state == \"SS UP\")\r\n|> set(key: \"hwState\", value: \"Good\")\r\n\nnotaccessible = disks_and_nodes\r\n|> filter(fn: (r) => r.state != \"SS UP\")\r\n|> set(key: \"hwState\", value: \"Not Accessible\")\r\n\nsuspect = disks_and_nodes\r\n|> filter(fn: (r) => r.hwState =~ /(?i)unknown|(?i)suspect/ and r.state == \"SS UP\")\r\n|> set(key: \"hwState\", value: \"Suspect\")\r\n\nbad = disks_and_nodes\r\n|> filter(fn: (r) => r.hwState =~ /(?i)bad/ and r.state == \"SS UP\")\r\n|> set(key: \"hwState\", value: \"Bad\")\r\n\nmaintenance = disks_and_nodes\r\n|> filter(fn: (r) => r.hwState =~ /(?i)maintenance/ and r.state == \"SS UP\")\r\n|> set(key: \"hwState\", value: \"Maintenance\")\r\n\n// merge all statuses and prepare headers\nunion(tables: [notaccessible, suspect, bad, maintenance])\r\n|> group()\n// sort headers\n|> map(fn: (r) => ({\ra1_Disks: r.PD,\r a2_Status: r.hwState, a4_Host: r.SS}))",
              "refId": "A",
              "resultFormat": "table"
            }
          ],
          "timeFrom": null,
          "timeShift": null,
          "title": "All offline disks",
          "transform": "table",
          "type": "table"
        }
      ],
      "refresh": false,
      "schemaVersion": 18,
      "style": "dark",
      "tags": [
        "Hardware"
      ],
      "templating": {
        "list": []
      },
      "time": {
        "from": "now-12h",
        "to": "now"
      },
      "timepicker": {
        "refresh_intervals": [
          "5s",
          "10s",
          "30s",
          "1m",
          "5m",
          "15m",
          "30m",
          "1h",
          "2h",
          "1d"
        ],
        "time_options": [
          "5m",
          "15m",
          "1h",
          "6h",
          "12h",
          "24h",
          "2d",
          "7d",
          "30d"
        ]
      },
      "timezone": "",
      "title": "Hardware Health: Offline  Disks",
      "uid": "UIU9_75Zk",
      "version": 2
    }
  hardware_health_offline_nodes.json: |-
    {
      "__inputs": [],
      "__requires": [
        {
          "type": "grafana",
          "id": "grafana",
          "name": "Grafana",
          "version": "6.2.5"
        },
        {
          "type": "panel",
          "id": "table",
          "name": "Table",
          "version": ""
        }
      ],
      "annotations": {
        "list": [
          {
            "builtIn": 1,
            "datasource": "-- Grafana --",
            "enable": true,
            "hide": true,
            "iconColor": "rgba(0, 211, 255, 1)",
            "name": "Annotations & Alerts",
            "type": "dashboard"
          }
        ]
      },
      "editable": true,
      "gnetId": null,
      "graphTooltip": 0,
      "id": null,
      "links": [],
      "panels": [
        {
          "columns": [],
          "fontSize": "100%",
          "gridPos": {
            "h": 12,
            "w": 24,
            "x": 0,
            "y": 0
          },
          "id": 2,
          "links": [],
          "options": {},
          "pageSize": null,
          "scroll": true,
          "showHeader": true,
          "sort": {
            "col": 6,
            "desc": true
          },
          "styles": [
            {
              "alias": "Status",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "a2_state",
              "preserveFormat": false,
              "sanitize": false,
              "thresholds": [],
              "type": "string",
              "unit": "short",
              "valueMaps": [
                {
                  "text": "Good",
                  "value": "SS UP"
                },
                {
                  "text": "Not Accessible",
                  "value": "SS Transient Down Pending"
                },
                {
                  "text": "Suspect",
                  "value": "SS Permanent Down Pending"
                },
                {
                  "text": "Bad",
                  "value": "SS Permanent Down"
                }
              ]
            },
            {
              "alias": "Nodes",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "a1_Host",
              "thresholds": [],
              "type": "string",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Time",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Measurement",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Field",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Value",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            }
          ],
          "targets": [
            {
              "query": "nodes = from(bucket: \"monitoring_main\") \r\n|> filter(fn: (r) => r._measurement == \"ssm_sstable_SSTable_SS\" and r._field == \"state\")\r\n|> range(start: -13h) \n|> last()\r\n|> pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\") \r\n|> keep(columns: [\"SS\", \"state\"])\n|> last(column: \"SS\")\r\n\n//start to filter offline nodes\nnodes\r\n|> filter(fn: (r) => r.state != \"SS UP\"\r)\n|> group()\n// sort columns\n|> map(fn: (r) => ({\ra1_Host: r.SS,\r a2_state: r.state}))\n",
              "refId": "A",
              "resultFormat": "table"
            }
          ],
          "timeFrom": null,
          "timeShift": null,
          "title": "Offline Nodes",
          "transform": "table",
          "type": "table"
        }
      ],
      "refresh": false,
      "schemaVersion": 18,
      "style": "dark",
      "tags": [
        "Hardware"
      ],
      "templating": {
        "list": []
      },
      "time": {
        "from": "now-12h",
        "to": "now"
      },
      "timepicker": {
        "refresh_intervals": [
          "5s",
          "10s",
          "30s",
          "1m",
          "5m",
          "15m",
          "30m",
          "1h",
          "2h",
          "1d"
        ],
        "time_options": [
          "5m",
          "15m",
          "1h",
          "6h",
          "12h",
          "24h",
          "2d",
          "7d",
          "30d"
        ]
      },
      "timezone": "",
      "title": "Hardware Health: Offline  Nodes",
      "uid": "BRSLln5Wk",
      "version": 2
    }
  metering_top_n_buckets.json: "{\r\n  \"__inputs\": [\r\n    {\r\n      \"name\": \"DS_FLUX\",\r\n
    \     \"label\": \"Flux\",\r\n      \"description\": \"\",\r\n      \"type\": \"datasource\",\r\n
    \     \"pluginId\": \"grafana-influxdb-flux-datasource\",\r\n      \"pluginName\":
    \"Flux (InfluxDB) [BETA]\"\r\n    }\r\n  ],\r\n  \"__requires\": [\r\n    {\r\n
    \     \"type\": \"grafana\",\r\n      \"id\": \"grafana\",\r\n      \"name\": \"Grafana\",\r\n
    \     \"version\": \"6.2.5\"\r\n    },\r\n    {\r\n      \"type\": \"datasource\",\r\n
    \     \"id\": \"grafana-influxdb-flux-datasource\",\r\n      \"name\": \"Flux (InfluxDB)
    [BETA]\",\r\n      \"version\": \"5.2.11\"\r\n    },\r\n    {\r\n      \"type\":
    \"panel\",\r\n      \"id\": \"table\",\r\n      \"name\": \"Table\",\r\n      \"version\":
    \"\"\r\n    }\r\n  ],\r\n  \"annotations\": {\r\n    \"list\": [\r\n      {\r\n
    \       \"builtIn\": 1,\r\n        \"datasource\": \"-- Grafana --\",\r\n        \"enable\":
    true,\r\n        \"hide\": true,\r\n        \"iconColor\": \"rgba(0, 211, 255, 1)\",\r\n
    \       \"name\": \"Annotations & Alerts\",\r\n        \"type\": \"dashboard\"\r\n
    \     }\r\n    ]\r\n  },\r\n  \"editable\": true,\r\n  \"gnetId\": null,\r\n  \"graphTooltip\":
    0,\r\n  \"id\": null,\r\n  \"iteration\": 1573110763053,\r\n  \"links\": [],\r\n
    \ \"panels\": [\r\n    {\r\n      \"cacheTimeout\": null,\r\n      \"columns\":
    [],\r\n      \"description\": \"\",\r\n      \"fontSize\": \"100%\",\r\n      \"gridPos\":
    {\r\n        \"h\": 3,\r\n        \"w\": 24,\r\n        \"x\": 0,\r\n        \"y\":
    0\r\n      },\r\n      \"id\": 163,\r\n      \"links\": [],\r\n      \"options\":
    {},\r\n      \"pageSize\": null,\r\n      \"pluginVersion\": \"6.2.5\",\r\n      \"scroll\":
    true,\r\n      \"showHeader\": true,\r\n      \"sort\": {\r\n        \"col\": 0,\r\n
    \       \"desc\": true\r\n      },\r\n      \"styles\": [\r\n        {\r\n          \"alias\":
    \"Time of Calculation\",\r\n          \"dateFormat\": \"YYYY-MM-DD HH:mm:ss\",\r\n
    \         \"link\": false,\r\n          \"pattern\": \"Time\",\r\n          \"type\":
    \"date\"\r\n        },\r\n        {\r\n          \"alias\": \"\",\r\n          \"colorMode\":
    null,\r\n          \"colors\": [\r\n            \"rgba(245, 54, 54, 0.9)\",\r\n
    \           \"rgba(237, 129, 40, 0.89)\",\r\n            \"rgba(50, 172, 45, 0.97)\"\r\n
    \         ],\r\n          \"decimals\": 2,\r\n          \"pattern\": \"/.*/\",\r\n
    \         \"thresholds\": [],\r\n          \"type\": \"hidden\",\r\n          \"unit\":
    \"short\"\r\n        }\r\n      ],\r\n      \"targets\": [\r\n        {\r\n          \"query\":
    \"from(bucket: \\\"monitoring_last\\\")\\n|> filter(fn: (r) => r._measurement ==
    \\\"mm_topn_bucket_by_obj_size_place\\\" and r._field == \\\"value\\\" and r.place
    == \\\"1\\\")\\n|> range($range)\\n|> last()\\n|> keep(columns: [\\\"_time\\\"])\\n\",\r\n
    \         \"refId\": \"A\",\r\n          \"resultFormat\": \"table\"\r\n        }\r\n
    \     ],\r\n      \"timeFrom\": null,\r\n      \"timeShift\": null,\r\n      \"title\":
    \" \",\r\n      \"transform\": \"table\",\r\n      \"type\": \"table\"\r\n    },\r\n
    \   {\r\n      \"columns\": [],\r\n      \"description\": \"Top Buckets by Size\",\r\n
    \     \"fontSize\": \"100%\",\r\n      \"gridPos\": {\r\n        \"h\": 11,\r\n
    \       \"w\": 24,\r\n        \"x\": 0,\r\n        \"y\": 3\r\n      },\r\n      \"id\":
    161,\r\n      \"links\": [],\r\n      \"options\": {},\r\n      \"pageSize\": 10,\r\n
    \     \"scroll\": true,\r\n      \"showHeader\": true,\r\n      \"sort\": {\r\n
    \       \"col\": 3,\r\n        \"desc\": false\r\n      },\r\n      \"styles\":
    [\r\n        {\r\n          \"alias\": \"Time\",\r\n          \"dateFormat\": \"MM/DD/YY
    h:mm:ss a\",\r\n          \"pattern\": \"Time\",\r\n          \"type\": \"hidden\"\r\n
    \       },\r\n        {\r\n          \"alias\": \"\",\r\n          \"colorMode\":
    null,\r\n          \"colors\": [\r\n            \"rgba(245, 54, 54, 0.9)\",\r\n
    \           \"rgba(237, 129, 40, 0.89)\",\r\n            \"rgba(50, 172, 45, 0.97)\"\r\n
    \         ],\r\n          \"dateFormat\": \"YYYY-MM-DD HH:mm:ss\",\r\n          \"decimals\":
    2,\r\n          \"mappingType\": 1,\r\n          \"pattern\": \"Measurement\",\r\n
    \         \"thresholds\": [],\r\n          \"type\": \"hidden\",\r\n          \"unit\":
    \"short\"\r\n        },\r\n        {\r\n          \"alias\": \"\",\r\n          \"colorMode\":
    null,\r\n          \"colors\": [\r\n            \"rgba(245, 54, 54, 0.9)\",\r\n
    \           \"rgba(237, 129, 40, 0.89)\",\r\n            \"rgba(50, 172, 45, 0.97)\"\r\n
    \         ],\r\n          \"dateFormat\": \"YYYY-MM-DD HH:mm:ss\",\r\n          \"decimals\":
    2,\r\n          \"mappingType\": 1,\r\n          \"pattern\": \"Field\",\r\n          \"thresholds\":
    [],\r\n          \"type\": \"hidden\",\r\n          \"unit\": \"short\"\r\n        },\r\n
    \       {\r\n          \"alias\": \"\",\r\n          \"colorMode\": null,\r\n          \"colors\":
    [\r\n            \"rgba(245, 54, 54, 0.9)\",\r\n            \"rgba(237, 129, 40,
    0.89)\",\r\n            \"rgba(50, 172, 45, 0.97)\"\r\n          ],\r\n          \"dateFormat\":
    \"YYYY-MM-DD HH:mm:ss\",\r\n          \"decimals\": 2,\r\n          \"mappingType\":
    1,\r\n          \"pattern\": \"Value\",\r\n          \"thresholds\": [],\r\n          \"type\":
    \"hidden\",\r\n          \"unit\": \"short\"\r\n        },\r\n        {\r\n          \"alias\":
    \"Size\",\r\n          \"colorMode\": null,\r\n          \"colors\": [\r\n            \"rgba(245,
    54, 54, 0.9)\",\r\n            \"rgba(237, 129, 40, 0.89)\",\r\n            \"rgba(50,
    172, 45, 0.97)\"\r\n          ],\r\n          \"dateFormat\": \"YYYY-MM-DD HH:mm:ss\",\r\n
    \         \"decimals\": 2,\r\n          \"mappingType\": 1,\r\n          \"pattern\":
    \"vl4_value\",\r\n          \"thresholds\": [],\r\n          \"type\": \"number\",\r\n
    \         \"unit\": \"decbytes\"\r\n        },\r\n        {\r\n          \"alias\":
    \"Bucket Name\",\r\n          \"colorMode\": null,\r\n          \"colors\": [\r\n
    \           \"rgba(245, 54, 54, 0.9)\",\r\n            \"rgba(237, 129, 40, 0.89)\",\r\n
    \           \"rgba(50, 172, 45, 0.97)\"\r\n          ],\r\n          \"dateFormat\":
    \"YYYY-MM-DD HH:mm:ss\",\r\n          \"decimals\": 2,\r\n          \"mappingType\":
    1,\r\n          \"pattern\": \"vl3_bucketName\",\r\n          \"thresholds\": [],\r\n
    \         \"type\": \"number\",\r\n          \"unit\": \"short\"\r\n        },\r\n
    \       {\r\n          \"alias\": \"Place\",\r\n          \"colorMode\": null,\r\n
    \         \"colors\": [\r\n            \"rgba(245, 54, 54, 0.9)\",\r\n            \"rgba(237,
    129, 40, 0.89)\",\r\n            \"rgba(50, 172, 45, 0.97)\"\r\n          ],\r\n
    \         \"dateFormat\": \"YYYY-MM-DD HH:mm:ss\",\r\n          \"decimals\": 0,\r\n
    \         \"mappingType\": 1,\r\n          \"pattern\": \"vl1_place\",\r\n          \"thresholds\":
    [],\r\n          \"type\": \"number\",\r\n          \"unit\": \"short\"\r\n        },\r\n
    \       {\r\n          \"alias\": \"Namespace\",\r\n          \"colorMode\": null,\r\n
    \         \"colors\": [\r\n            \"rgba(245, 54, 54, 0.9)\",\r\n            \"rgba(237,
    129, 40, 0.89)\",\r\n            \"rgba(50, 172, 45, 0.97)\"\r\n          ],\r\n
    \         \"dateFormat\": \"YYYY-MM-DD HH:mm:ss\",\r\n          \"decimals\": 2,\r\n
    \         \"mappingType\": 1,\r\n          \"pattern\": \"vl2_ns\",\r\n          \"thresholds\":
    [],\r\n          \"type\": \"number\",\r\n          \"unit\": \"short\"\r\n        },\r\n
    \       {\r\n          \"alias\": \"\",\r\n          \"colorMode\": null,\r\n          \"colors\":
    [\r\n            \"rgba(245, 54, 54, 0.9)\",\r\n            \"rgba(237, 129, 40,
    0.89)\",\r\n            \"rgba(50, 172, 45, 0.97)\"\r\n          ],\r\n          \"decimals\":
    2,\r\n          \"pattern\": \"/.*/\",\r\n          \"thresholds\": [],\r\n          \"type\":
    \"number\",\r\n          \"unit\": \"short\"\r\n        }\r\n      ],\r\n      \"targets\":
    [\r\n        {\r\n          \"query\": \"from(bucket: \\\"monitoring_last\\\")\\n|>
    filter(fn: (r) => r._measurement == \\\"mm_topn_bucket_by_obj_size_place\\\" and
    (r._field == \\\"bucketName\\\" or r._field == \\\"value\\\" or r._field == \\\"namespace\\\"))\\n|>
    range($range)\\n|> last()\\n|> keep(columns: [\\\"_time\\\", \\\"_field\\\", \\\"_value\\\",
    \\\"place\\\"])\\n|> pivot(rowKey: [\\\"_time\\\", \\\"place\\\"], columnKey: [\\\"_field\\\"],
    valueColumn: \\\"_value\\\")\\n|> filter(fn: (r) => r.namespace =~ /^${ns:pipe}$/)\\n|>
    map(mergeKey: false, fn:(r) => ({ _time: r._time, vl1_place: int(v: r.place), vl2_ns:
    r.namespace, vl3_bucketName: r.bucketName, vl4_value: r.value }))\\n|> sort(columns:[\\\"place_s\\\"])\",\r\n
    \         \"refId\": \"A\",\r\n          \"resultFormat\": \"table\"\r\n        }\r\n
    \     ],\r\n      \"title\": \"Top Buckets by Size\",\r\n      \"transform\": \"table\",\r\n
    \     \"type\": \"table\"\r\n    },\r\n    {\r\n      \"columns\": [],\r\n      \"description\":
    \"Top Buckets by Object Count\",\r\n      \"fontSize\": \"100%\",\r\n      \"gridPos\":
    {\r\n        \"h\": 11,\r\n        \"w\": 24,\r\n        \"x\": 0,\r\n        \"y\":
    14\r\n      },\r\n      \"id\": 159,\r\n      \"links\": [],\r\n      \"options\":
    {},\r\n      \"pageSize\": 10,\r\n      \"scroll\": true,\r\n      \"showHeader\":
    true,\r\n      \"sort\": {\r\n        \"col\": 3,\r\n        \"desc\": false\r\n
    \     },\r\n      \"styles\": [\r\n        {\r\n          \"alias\": \"Time\",\r\n
    \         \"dateFormat\": \"YYYY-MM-DD HH:mm:ss\",\r\n          \"pattern\": \"Time\",\r\n
    \         \"type\": \"hidden\"\r\n        },\r\n        {\r\n          \"alias\":
    \"\",\r\n          \"colorMode\": null,\r\n          \"colors\": [\r\n            \"rgba(245,
    54, 54, 0.9)\",\r\n            \"rgba(237, 129, 40, 0.89)\",\r\n            \"rgba(50,
    172, 45, 0.97)\"\r\n          ],\r\n          \"dateFormat\": \"YYYY-MM-DD HH:mm:ss\",\r\n
    \         \"decimals\": 2,\r\n          \"mappingType\": 1,\r\n          \"pattern\":
    \"Measurement\",\r\n          \"thresholds\": [],\r\n          \"type\": \"hidden\",\r\n
    \         \"unit\": \"short\"\r\n        },\r\n        {\r\n          \"alias\":
    \"\",\r\n          \"colorMode\": null,\r\n          \"colors\": [\r\n            \"rgba(245,
    54, 54, 0.9)\",\r\n            \"rgba(237, 129, 40, 0.89)\",\r\n            \"rgba(50,
    172, 45, 0.97)\"\r\n          ],\r\n          \"dateFormat\": \"YYYY-MM-DD HH:mm:ss\",\r\n
    \         \"decimals\": 2,\r\n          \"mappingType\": 1,\r\n          \"pattern\":
    \"Field\",\r\n          \"thresholds\": [],\r\n          \"type\": \"hidden\",\r\n
    \         \"unit\": \"short\"\r\n        },\r\n        {\r\n          \"alias\":
    \"\",\r\n          \"colorMode\": null,\r\n          \"colors\": [\r\n            \"rgba(245,
    54, 54, 0.9)\",\r\n            \"rgba(237, 129, 40, 0.89)\",\r\n            \"rgba(50,
    172, 45, 0.97)\"\r\n          ],\r\n          \"dateFormat\": \"YYYY-MM-DD HH:mm:ss\",\r\n
    \         \"decimals\": 2,\r\n          \"mappingType\": 1,\r\n          \"pattern\":
    \"Value\",\r\n          \"thresholds\": [],\r\n          \"type\": \"hidden\",\r\n
    \         \"unit\": \"short\"\r\n        },\r\n        {\r\n          \"alias\":
    \"Objects Count\",\r\n          \"colorMode\": null,\r\n          \"colors\": [\r\n
    \           \"rgba(245, 54, 54, 0.9)\",\r\n            \"rgba(237, 129, 40, 0.89)\",\r\n
    \           \"rgba(50, 172, 45, 0.97)\"\r\n          ],\r\n          \"dateFormat\":
    \"YYYY-MM-DD HH:mm:ss\",\r\n          \"decimals\": 2,\r\n          \"mappingType\":
    1,\r\n          \"pattern\": \"vl4_value\",\r\n          \"thresholds\": [],\r\n
    \         \"type\": \"number\",\r\n          \"unit\": \"short\"\r\n        },\r\n
    \       {\r\n          \"alias\": \"Bucket Name\",\r\n          \"colorMode\": null,\r\n
    \         \"colors\": [\r\n            \"rgba(245, 54, 54, 0.9)\",\r\n            \"rgba(237,
    129, 40, 0.89)\",\r\n            \"rgba(50, 172, 45, 0.97)\"\r\n          ],\r\n
    \         \"dateFormat\": \"YYYY-MM-DD HH:mm:ss\",\r\n          \"decimals\": 2,\r\n
    \         \"mappingType\": 1,\r\n          \"pattern\": \"vl3_bucketName\",\r\n
    \         \"thresholds\": [],\r\n          \"type\": \"number\",\r\n          \"unit\":
    \"short\"\r\n        },\r\n        {\r\n          \"alias\": \"Place\",\r\n          \"colorMode\":
    null,\r\n          \"colors\": [\r\n            \"rgba(245, 54, 54, 0.9)\",\r\n
    \           \"rgba(237, 129, 40, 0.89)\",\r\n            \"rgba(50, 172, 45, 0.97)\"\r\n
    \         ],\r\n          \"dateFormat\": \"YYYY-MM-DD HH:mm:ss\",\r\n          \"decimals\":
    0,\r\n          \"mappingType\": 1,\r\n          \"pattern\": \"vl1_place\",\r\n
    \         \"thresholds\": [],\r\n          \"type\": \"number\",\r\n          \"unit\":
    \"short\"\r\n        },\r\n        {\r\n          \"alias\": \"Namespace\",\r\n
    \         \"colorMode\": null,\r\n          \"colors\": [\r\n            \"rgba(245,
    54, 54, 0.9)\",\r\n            \"rgba(237, 129, 40, 0.89)\",\r\n            \"rgba(50,
    172, 45, 0.97)\"\r\n          ],\r\n          \"dateFormat\": \"YYYY-MM-DD HH:mm:ss\",\r\n
    \         \"decimals\": 2,\r\n          \"mappingType\": 1,\r\n          \"pattern\":
    \"vl2_ns\",\r\n          \"thresholds\": [],\r\n          \"type\": \"number\",\r\n
    \         \"unit\": \"short\"\r\n        },\r\n        {\r\n          \"alias\":
    \"\",\r\n          \"colorMode\": null,\r\n          \"colors\": [\r\n            \"rgba(245,
    54, 54, 0.9)\",\r\n            \"rgba(237, 129, 40, 0.89)\",\r\n            \"rgba(50,
    172, 45, 0.97)\"\r\n          ],\r\n          \"decimals\": 2,\r\n          \"pattern\":
    \"/.*/\",\r\n          \"thresholds\": [],\r\n          \"type\": \"number\",\r\n
    \         \"unit\": \"short\"\r\n        }\r\n      ],\r\n      \"targets\": [\r\n
    \       {\r\n          \"query\": \"from(bucket: \\\"monitoring_last\\\")\\n|> filter(fn:
    (r) => r._measurement == \\\"mm_topn_bucket_by_obj_count_place\\\" and (r._field
    == \\\"bucketName\\\" or r._field == \\\"value\\\" or r._field == \\\"namespace\\\"))\\n|>
    range($range)\\n|> last()\\n|> keep(columns: [\\\"_time\\\", \\\"_field\\\", \\\"_value\\\",
    \\\"place\\\"])\\n|> pivot(rowKey: [\\\"_time\\\", \\\"place\\\"], columnKey: [\\\"_field\\\"],
    valueColumn: \\\"_value\\\")\\n|> filter(fn: (r) => r.namespace =~ /^${ns:pipe}$/)\\n|>
    map(mergeKey: false, fn:(r) => ({ _time: r._time, vl1_place: int(v: r.place), vl2_ns:
    r.namespace, vl3_bucketName: r.bucketName, vl4_value: r.value }))\\n|> sort(columns:[\\\"place_s\\\"])\",\r\n
    \         \"refId\": \"A\",\r\n          \"resultFormat\": \"table\"\r\n        }\r\n
    \     ],\r\n      \"title\": \"Top Buckets by Object Count\",\r\n      \"transform\":
    \"table\",\r\n      \"type\": \"table\"\r\n    }\r\n  ],\r\n  \"refresh\": false,\r\n
    \ \"schemaVersion\": 18,\r\n  \"style\": \"dark\",\r\n  \"tags\": [],\r\n  \"templating\":
    {\r\n    \"list\": [\r\n      {\r\n        \"allValue\": \".*\",\r\n        \"current\":
    {},\r\n        \"datasource\": \"${DS_FLUX}\",\r\n        \"definition\": \"from(bucket:\\\"monitoring_last\\\")
    \   |> filter(fn:(r) => r._measurement == \\\"mm_topn_bucket_by_obj_size_place\\\"
    and r._field==\\\"namespace\\\")     |> range(start: -24h)    |> last()     |> group(columns:[\\\"_value\\\"])
    \    |> last()\",\r\n        \"hide\": 0,\r\n        \"includeAll\": true,\r\n        \"label\":
    \"Namespace\",\r\n        \"multi\": true,\r\n        \"name\": \"ns\",\r\n        \"options\":
    [],\r\n        \"query\": \"from(bucket:\\\"monitoring_last\\\")    |> filter(fn:(r)
    => r._measurement == \\\"mm_topn_bucket_by_obj_size_place\\\" and r._field==\\\"namespace\\\")
    \    |> range(start: -24h)    |> last()     |> group(columns:[\\\"_value\\\"])     |>
    last()\",\r\n        \"refresh\": 1,\r\n        \"regex\": \"\",\r\n        \"skipUrlSync\":
    false,\r\n        \"sort\": 0,\r\n        \"tagValuesQuery\": \"\",\r\n        \"tags\":
    [],\r\n        \"tagsQuery\": \"\",\r\n        \"type\": \"query\",\r\n        \"useTags\":
    false\r\n      }\r\n    ]\r\n  },\r\n  \"time\": {\r\n    \"from\": \"now-24h\",\r\n
    \   \"to\": \"now\"\r\n  },\r\n  \"timepicker\": {\r\n    \"refresh_intervals\":
    [\r\n      \"5s\",\r\n      \"10s\",\r\n      \"30s\",\r\n      \"1m\",\r\n      \"5m\",\r\n
    \     \"15m\",\r\n      \"30m\",\r\n      \"1h\",\r\n      \"2h\",\r\n      \"1d\"\r\n
    \   ],\r\n    \"time_options\": [\r\n      \"5m\",\r\n      \"15m\",\r\n      \"1h\",\r\n
    \     \"6h\",\r\n      \"12h\",\r\n      \"24h\",\r\n      \"2d\",\r\n      \"7d\",\r\n
    \     \"30d\"\r\n    ]\r\n  },\r\n  \"timezone\": \"\",\r\n  \"title\": \"Top Buckets\",\r\n
    \ \"uid\": \"eu-XVJtWk\",\r\n  \"version\": 5\r\n}\r\n"
  node_rebalancing.json: |
    {
      "__inputs": [],
      "__requires": [
        {
          "type": "grafana",
          "id": "grafana",
          "name": "Grafana",
          "version": "6.2.5"
        },
        {
          "type": "panel",
          "id": "graph",
          "name": "Graph",
          "version": ""
        },
        {
          "type": "panel",
          "id": "singlestat",
          "name": "Singlestat",
          "version": ""
        },
        {
          "type": "panel",
          "id": "table",
          "name": "Table",
          "version": ""
        }
      ],
      "annotations": {
        "list": [
          {
            "builtIn": 1,
            "datasource": "-- Grafana --",
            "enable": true,
            "hide": true,
            "iconColor": "rgba(0, 211, 255, 1)",
            "name": "Annotations & Alerts",
            "type": "dashboard"
          }
        ]
      },
      "editable": true,
      "gnetId": null,
      "graphTooltip": 0,
      "id": null,
      "links": [],
      "panels": [
        {
          "cacheTimeout": null,
          "colorBackground": false,
          "colorPostfix": false,
          "colorPrefix": false,
          "colorValue": false,
          "colors": [
            "#d44a3a",
            "rgba(237, 129, 40, 0.89)",
            "#299c46"
          ],
          "format": "none",
          "gauge": {
            "maxValue": 1,
            "minValue": 0,
            "show": false,
            "thresholdLabels": false,
            "thresholdMarkers": false
          },
          "gridPos": {
            "h": 1,
            "w": 5,
            "x": 0,
            "y": 0
          },
          "id": 15,
          "interval": null,
          "links": [],
          "mappingType": 1,
          "mappingTypes": [
            {
              "name": "value to text",
              "value": 1
            },
            {
              "name": "range to text",
              "value": 2
            }
          ],
          "maxDataPoints": 100,
          "nullPointMode": "connected",
          "nullText": null,
          "options": {},
          "postfix": "",
          "postfixFontSize": "40%",
          "prefix": "Rebalance Status:",
          "prefixFontSize": "40%",
          "rangeMaps": [
            {
              "from": "null",
              "text": "N/A",
              "to": "null"
            }
          ],
          "sparkline": {
            "fillColor": "rgba(31, 118, 189, 0.18)",
            "full": false,
            "lineColor": "#3274D9",
            "show": false
          },
          "tableColumn": "Time",
          "targets": [
            {
              "query": "from(bucket: \"monitoring_last\")\n|> filter(fn: (r) => r._measurement == \"dtquery_cmf\" and r._field == \"com.emc.ecs.chunk.rebalance.is_enabled\")\n|> range(start: -6h)\n|> last()\n|> keep(columns: [\"_value\"])",
              "refId": "A",
              "resultFormat": "time_series"
            }
          ],
          "thresholds": "0,1",
          "timeFrom": null,
          "timeShift": null,
          "title": "",
          "transparent": true,
          "type": "singlestat",
          "valueFontSize": "40%",
          "valueMaps": [
            {
              "op": "=",
              "text": "Disabled",
              "value": "0"
            },
            {
              "op": "=",
              "text": "Enabled",
              "value": "1"
            }
          ],
          "valueName": "current"
        },
        {
          "columns": [],
          "description": "The table displays the lastest values for the selected time range.",
          "fontSize": "100%",
          "gridPos": {
            "h": 3,
            "w": 24,
            "x": 0,
            "y": 1
          },
          "id": 8,
          "links": [],
          "options": {},
          "pageSize": null,
          "scroll": true,
          "showHeader": true,
          "sort": {
            "col": 3,
            "desc": true
          },
          "styles": [
            {
              "alias": "Time",
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "pattern": "Time",
              "type": "hidden"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Measurement",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Field",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Value",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Data Rebalanced",
              "thresholds": [],
              "type": "number",
              "unit": "bytes"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "/Rate of Rebalance./",
              "thresholds": [],
              "type": "number",
              "unit": "bytes"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "decimals": 2,
              "pattern": "/.*/",
              "thresholds": [],
              "type": "number",
              "unit": "short"
            }
          ],
          "targets": [
            {
              "query": "from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_node_rebalancing_summary\" and r._field == \"data_rebalanced\")\n|> range($range)\n|> last()\n|> keep(columns: [\"_value\"])\n|> rename(columns:{_value:\"Data Rebalanced\"})",
              "refId": "A",
              "resultFormat": "table"
            },
            {
              "query": "\nfrom(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_node_rebalancing_summary\" and r._field == \"data_rebalanced\")\n|> range($range)\n|> derivative(unit:24h, nonNegative: true, columns: [\"_value\"])\n|> range($range)\n|> last()\n|> keep(columns: [\"_value\"])\n|> rename(columns:{_value:\"Rate of Rebalance (per day)\"})",
              "refId": "C",
              "resultFormat": "table"
            }
          ],
          "title": "Node Rebalancing Overview",
          "transform": "table",
          "type": "table"
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "description": "History of the amount of data that has been rebalanced.",
          "fill": 1,
          "gridPos": {
            "h": 9,
            "w": 12,
            "x": 0,
            "y": 4
          },
          "id": 10,
          "legend": {
            "alignAsTable": true,
            "avg": false,
            "current": true,
            "max": true,
            "min": true,
            "show": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "null",
          "options": {},
          "percentage": false,
          "pointradius": 5,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_node_rebalancing_summary\" and r._field == \"data_rebalanced\")\n|> range($range)\n|> drop(columns: [\"_measurement\"])\n|> set(key: \"_field\", value: \"Data Rebalanced\")",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Data Rebalanced",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "bytes",
              "label": "",
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": "",
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "description": "History of the incremental amount of data that was rebalanced for 24 hours.",
          "fill": 1,
          "gridPos": {
            "h": 9,
            "w": 12,
            "x": 12,
            "y": 4
          },
          "id": 13,
          "legend": {
            "alignAsTable": true,
            "avg": false,
            "current": true,
            "max": true,
            "min": true,
            "show": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "null",
          "options": {},
          "percentage": false,
          "pointradius": 5,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_node_rebalancing_summary\" and r._field == \"data_rebalanced\")\n|> range($range)\n|> drop(columns: [\"_measurement\"])\n|> derivative(unit:24h, nonNegative: true, columns: [\"_value\"])\n|> range($range)\n|> set(key: \"_field\", value: \"Rate\")",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Rate of Rebalance (per day)",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "bytes",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        }
      ],
      "refresh": false,
      "schemaVersion": 18,
      "style": "dark",
      "tags": [],
      "templating": {
        "list": []
      },
      "time": {
        "from": "now-24h",
        "to": "now"
      },
      "timepicker": {
        "refresh_intervals": [
          "15m",
          "30m",
          "1h",
          "2h",
          "1d"
        ],
        "time_options": [
          "15m",
          "1h",
          "6h",
          "12h",
          "24h",
          "2d",
          "7d",
          "30d"
        ]
      },
      "timezone": "",
      "title": "Node Rebalancing",
      "uid": "hVVoixVZz",
      "version": 1
    }
  overview.json: |-
    {
      "__inputs": [],
      "__requires": [
        {
          "type": "grafana",
          "id": "grafana",
          "name": "Grafana",
          "version": "6.2.5ecs"
        },
        {
          "type": "panel",
          "id": "graph",
          "name": "Graph",
          "version": ""
        },
        {
          "type": "panel",
          "id": "singlestat",
          "name": "Singlestat",
          "version": ""
        },
        {
          "type": "panel",
          "id": "table",
          "name": "Table",
          "version": ""
        }
      ],
      "annotations": {
        "list": [
          {
            "builtIn": 1,
            "datasource": "-- Grafana --",
            "enable": true,
            "hide": true,
            "iconColor": "rgba(0, 211, 255, 1)",
            "name": "Annotations & Alerts",
            "type": "dashboard"
          }
        ]
      },
      "editable": true,
      "gnetId": null,
      "graphTooltip": 0,
      "id": null,
      "links": [
        {
          "asDropdown": true,
          "icon": "external link",
          "tags": [
            "Overview"
          ],
          "title": "Related dashboards",
          "type": "dashboards"
        }
      ],
      "panels": [
        {
          "cacheTimeout": null,
          "columns": [],
          "description": "Successful and failed requests summary for selected range",
          "fontSize": "110%",
          "gridPos": {
            "h": 3,
            "w": 24,
            "x": 0,
            "y": 0
          },
          "id": 34,
          "links": [],
          "options": {},
          "pageSize": null,
          "pluginVersion": "6.2.5ecs",
          "scroll": false,
          "showHeader": true,
          "sort": {
            "col": 3,
            "desc": true
          },
          "styles": [
            {
              "alias": "Time",
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "link": false,
              "pattern": "Time",
              "type": "hidden"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Measurement",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Field",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "System Failures",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": null,
              "mappingType": 1,
              "pattern": "b_system_errors",
              "thresholds": [],
              "type": "number",
              "unit": "locale"
            },
            {
              "alias": "Successful requests",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": null,
              "link": false,
              "linkTooltip": "",
              "linkUrl": "",
              "mappingType": 1,
              "pattern": "a_succeed_request_counter",
              "thresholds": [],
              "type": "number",
              "unit": "locale"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Value",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "User Failures",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": null,
              "mappingType": 1,
              "pattern": "c_user_errors",
              "thresholds": [],
              "type": "number",
              "unit": "locale"
            },
            {
              "alias": "Failures % Rate",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 3,
              "mappingType": 1,
              "pattern": "d_error_rate",
              "thresholds": [],
              "type": "number",
              "unit": "percentunit"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "decimals": 2,
              "pattern": "/.*/",
              "thresholds": [],
              "type": "number",
              "unit": "short"
            }
          ],
          "targets": [
            {
              "query": "// need this 'default' table to substitute possibly missing sys_errors table if errors were not registered by ECS service\nimport \"csv\"\ndefault_sys_errors = csv.from(csv:\"#datatype,string,long,string,long\n#group,false,false,true,false\n#default,_result,,,\n,result,table,_field,_value\n,,100,succeed_request_counter_i,0\n,,101,system_errors_i,0\n,,102,user_errors_i,0\")\n\ntotals = from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_performance_transaction_delta\")\n|> range($range)\n|> keep(columns:[\"_time\", \"_field\", \"_value\"])\n|> sum()\n|> fill(column: \"_value\", value: 0)\n\nsys_errors = from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_performance_error_delta\")\n|> range($range)\n|> keep(columns:[\"_time\", \"_field\", \"_value\"])\n|> sum()\n|> fill(column: \"_value\", value: 0)\n\nunion(tables: [default_sys_errors, totals, sys_errors])\n|> pivot(rowKey:[], columnKey: [\"_field\"], valueColumn: \"_value\")\n// map does not save non-group columns\n|> map(fn:(r) => ({\n\"Successful Requests\": r.succeed_request_counter_i,\nb_system_errors: r.system_errors_i,\nc_user_errors: r.user_errors_i,\nd_error_rate: float(v:r.system_errors_i+r.user_errors_i)/\nfloat(v:r.system_errors_i+r.user_errors_i+r.succeed_request_counter_i\n// this trick is needed because failed+succeed can be 0, avoid printing NaN in this case\n+int(v:bool(v:(r.system_errors_i+r.user_errors_i+r.succeed_request_counter_i)==0)))}))\n\n",
              "refId": "A",
              "resultFormat": "table"
            }
          ],
          "timeFrom": null,
          "timeShift": null,
          "title": "Requests",
          "transform": "table",
          "type": "table"
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "decimals": null,
          "description": "Latency of read/write requests",
          "fill": 1,
          "gridPos": {
            "h": 7,
            "w": 12,
            "x": 0,
            "y": 3
          },
          "id": 15,
          "legend": {
            "alignAsTable": false,
            "avg": true,
            "current": true,
            "max": false,
            "min": false,
            "rightSide": false,
            "show": true,
            "sortDesc": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 2,
          "links": [],
          "nullPointMode": "null",
          "options": {},
          "percentage": false,
          "pointradius": 0.5,
          "points": true,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "import \"ecs\"\n\nwi = ecs.get_dyn_downsample_info(start: $__range_from_s, stop: $__range_to_s, max: 200\n                                 measurement: \"cq_performance_latency\")\nmn = wi.measurement\n\nall = from(bucket: \"monitoring_vdc\") \n    |> filter(fn: (r) => r._measurement == mn )  \n    |> range(start: wi.start, stop: wi.stop)  \n    |> window(every: wi.duration)\n    |> mean()\n    |> group(columns:[\"_field\",\"id\"])\n\n// can't simple rename ttfb_read to Read, ti... and similarly for ttlb_write\n// when they are in same stream\n// TODO think about possible optimizations:\n// 1. use function? didn't work at first approach, flux can't see it\n// 2. use join with another table created from CSV\n\nreads = all |> filter(fn: (r) => r.id == \"ttfb_read\" )\n    |> set(key: \"id\", value: \"Read, time to first byte\")\n\nwrites = all |> filter(fn: (r) => r.id == \"ttlb_write\" )\n    |> set(key: \"id\", value: \"Write, time to last byte\")\n\nunion(tables: [reads, writes])|> map(fn:(r) => ({_time: r._start, _value: r._value, _field: r.id + \", \" + r._field })) |>drop(columns:[\"id\"])\n\n\n    \n\n\n",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Latency",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "decimals": null,
              "format": "ms",
              "label": "",
              "logBase": 1,
              "max": null,
              "min": "0",
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {
            " total_read_requests_size": "#6ed0e0",
            " total_write_requests_size": "#e24d42"
          },
          "bars": false,
          "cacheTimeout": null,
          "dashLength": 10,
          "dashes": false,
          "decimals": null,
          "description": "Data access bandwidth of successful requests per second",
          "fill": 4,
          "gridPos": {
            "h": 7,
            "w": 12,
            "x": 12,
            "y": 3
          },
          "id": 17,
          "legend": {
            "alignAsTable": false,
            "avg": true,
            "current": true,
            "max": false,
            "min": false,
            "rightSide": false,
            "show": true,
            "sortDesc": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 2,
          "links": [],
          "nullPointMode": "null",
          "options": {},
          "percentage": false,
          "pluginVersion": "6.2.5ecs",
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": true,
          "steppedLine": false,
          "targets": [
            {
              "query": "import \"ecs\"\n\nwi = ecs.get_dyn_downsample_info(start: $__range_from_s, stop: $__range_to_s, max: 200\n                                 measurement: \"cq_performance_throughput\")\nmn = wi.measurement\n\nfrom(bucket: \"monitoring_vdc\") |> filter(fn: (r) => r._measurement == mn and r._field == \"total_read_requests_size\" )\n|> range(start: wi.start, stop: wi.stop) \n|> keep(columns:[\"_time\", \"_field\", \"_value\"]) \n|> window(every: wi.duration)\n|> mean()\n|> group(columns:[\"_field\"]) \n|> rename(columns: {_start: \"_time\"})\n|> set(key: \"_field\", value: \"Read Bandwidth\")\n\n",
              "refId": "A"
            },
            {
              "query": "import \"ecs\"\n\nwi = ecs.get_dyn_downsample_info(start: $__range_from_s, stop: $__range_to_s, max: 200\n                                 measurement: \"cq_performance_throughput\")\nmn = wi.measurement\n\nfrom(bucket: \"monitoring_vdc\") |> filter(fn: (r) => r._measurement == mn and r._field == \"total_write_requests_size\" )\n|> range(start: wi.start, stop: wi.stop) \n|> keep(columns:[\"_time\", \"_field\", \"_value\"]) \n|> window(every: wi.duration)\n|> mean()\n|> group(columns:[\"_field\"]) \n|> rename(columns: {_start: \"_time\"})\n|> set(key: \"_field\", value: \"Write Bandwidth\")",
              "refId": "B"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Bandwidth (read/write)",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "decimals": null,
              "format": "Bps",
              "label": "",
              "logBase": 1,
              "max": null,
              "min": "0",
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "cacheTimeout": null,
          "colorBackground": false,
          "colorPostfix": false,
          "colorPrefix": false,
          "colorValue": false,
          "colors": [
            "#299c46",
            "rgba(237, 129, 40, 0.89)",
            "#d44a3a"
          ],
          "decimals": 2,
          "description": "Total capacity at ObjectStore level",
          "format": "bytes",
          "gauge": {
            "maxValue": 100,
            "minValue": 0,
            "show": false,
            "thresholdLabels": false,
            "thresholdMarkers": true
          },
          "gridPos": {
            "h": 2,
            "w": 12,
            "x": 0,
            "y": 10
          },
          "id": 21,
          "interval": null,
          "links": [],
          "mappingType": 1,
          "mappingTypes": [
            {
              "name": "value to text",
              "value": 1
            },
            {
              "name": "range to text",
              "value": 2
            }
          ],
          "maxDataPoints": 100,
          "nullPointMode": "connected",
          "nullText": null,
          "options": {},
          "postfix": "",
          "postfixFontSize": "80%",
          "prefix": "",
          "prefixFontSize": "50%",
          "rangeMaps": [
            {
              "from": "null",
              "text": "N/A",
              "to": "null"
            }
          ],
          "sparkline": {
            "fillColor": "rgba(31, 118, 189, 0.18)",
            "full": false,
            "lineColor": "rgb(31, 120, 193)",
            "show": true
          },
          "tableColumn": "",
          "targets": [
            {
              "query": "from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_vdc\" and r._field == \"total_i\")\n|> range($range)\r\n|> last()\r",
              "refId": "B"
            }
          ],
          "thresholds": "",
          "title": "Total Capacity",
          "type": "singlestat",
          "valueFontSize": "80%",
          "valueMaps": [
            {
              "op": "=",
              "text": "N/A",
              "value": "null"
            }
          ],
          "valueName": "current"
        },
        {
          "cacheTimeout": null,
          "colorBackground": false,
          "colorPostfix": false,
          "colorPrefix": false,
          "colorValue": false,
          "colors": [
            "#299c46",
            "rgba(237, 129, 40, 0.89)",
            "#d44a3a"
          ],
          "decimals": 2,
          "description": "Total used capacity at ObjectStore level",
          "format": "bytes",
          "gauge": {
            "maxValue": 100,
            "minValue": 0,
            "show": false,
            "thresholdLabels": false,
            "thresholdMarkers": true
          },
          "gridPos": {
            "h": 2,
            "w": 12,
            "x": 12,
            "y": 10
          },
          "id": 23,
          "interval": null,
          "links": [],
          "mappingType": 1,
          "mappingTypes": [
            {
              "name": "value to text",
              "value": 1
            },
            {
              "name": "range to text",
              "value": 2
            }
          ],
          "maxDataPoints": 100,
          "nullPointMode": "connected",
          "nullText": null,
          "options": {},
          "postfix": "",
          "postfixFontSize": "80%",
          "prefix": "",
          "prefixFontSize": "50%",
          "rangeMaps": [
            {
              "from": "null",
              "text": "N/A",
              "to": "null"
            }
          ],
          "sparkline": {
            "fillColor": "rgba(31, 118, 189, 0.18)",
            "full": false,
            "lineColor": "rgb(31, 120, 193)",
            "show": true
          },
          "tableColumn": "",
          "targets": [
            {
              "query": "from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_vdc\" and r._field == \"used\")\n|> range($range)\r\n|> last()\r",
              "refId": "B"
            }
          ],
          "thresholds": "",
          "title": "Used Capacity",
          "type": "singlestat",
          "valueFontSize": "80%",
          "valueMaps": [
            {
              "op": "=",
              "text": "N/A",
              "value": "null"
            }
          ],
          "valueName": "current"
        },
        {
          "columns": [],
          "description": "ObjectStore used capacity detalization",
          "fontSize": "100%",
          "gridPos": {
            "h": 3,
            "w": 24,
            "x": 0,
            "y": 12
          },
          "id": 25,
          "links": [],
          "options": {},
          "pageSize": null,
          "scroll": true,
          "showHeader": true,
          "sort": {
            "col": 2,
            "desc": false
          },
          "styles": [
            {
              "alias": " ",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "/vl[0-5]_/",
              "thresholds": [],
              "type": "number",
              "unit": "bytes"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Measurement",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Time",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Field",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Value",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "//",
              "thresholds": [],
              "type": "number",
              "unit": "bytes"
            }
          ],
          "targets": [
            {
              "query": "// see MONITORING-410 for more details\n\n// COLLECT DATA FROM PRECALCULATED VDC VALUES\nfrom(bucket: \"monitoring_vdc\")\n  |> filter(fn: (r) => r._measurement == \"cq_capacity_used_elements\")\n  |> range($range)\n  |> last()\n  // remove difference with measurement name\n  |> set(key: \"_measurement\", value: \"1\")\n  // group will make all tag columns removed in map()\n  |> group()\n  |> pivot(rowKey:[\"_measurement\"],columnKey: [\"_field\"],valueColumn: \"_value\")\n \n  |> map(fn: (r) => ({\n \"vl0_User Data\": r.user_data,\n \"vl1_System Metadata\": r.meta_data,\n \"vl2_Protection Overhead\": r.protection_overhead_user + r.protection_overhead_metadata,\n }))\n",
              "refId": "A",
              "resultFormat": "table"
            }
          ],
          "timeFrom": null,
          "timeShift": null,
          "title": "Used Capacity",
          "transform": "table",
          "type": "table"
        },
        {
          "columns": [],
          "description": "Detailed information on the erasure coding process",
          "fontSize": "100%",
          "gridPos": {
            "h": 3,
            "w": 24,
            "x": 0,
            "y": 15
          },
          "id": 27,
          "links": [],
          "options": {},
          "pageSize": null,
          "scroll": true,
          "showHeader": true,
          "sort": {
            "col": 0,
            "desc": true
          },
          "styles": [
            {
              "alias": "Time",
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "pattern": "Time",
              "type": "hidden"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "decimals": 2,
              "pattern": "Field",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Measurement",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Value",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "Coding Rate",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "coding_rate",
              "thresholds": [],
              "type": "number",
              "unit": "Bps"
            },
            {
              "alias": "Coded (%)",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "coded_ratio",
              "thresholds": [],
              "type": "number",
              "unit": "percentunit"
            },
            {
              "alias": "Total Coded Data",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "total_coded_data",
              "thresholds": [],
              "type": "number",
              "unit": "bytes"
            },
            {
              "alias": "Total Coding Data",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "total_coding_data",
              "thresholds": [],
              "type": "number",
              "unit": "bytes"
            },
            {
              "alias": "Est. Time to Complete",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 1,
              "mappingType": 1,
              "pattern": "est_time",
              "thresholds": [],
              "type": "number",
              "unit": "s"
            }
          ],
          "targets": [
            {
              "query": "from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_ec\"\r and r._field == \"total_coding_data\")\r\n|> range($range)\r\n|> last()\r\n|> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n|> keep(columns: [\"total_coding_data\"])\n",
              "refId": "B",
              "resultFormat": "table"
            },
            {
              "query": "from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_ec\"\r and r._field == \"total_coded_data\")\r\n|> range($range)\r\n|> last()\r\n|> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n|> keep(columns: [\"total_coded_data\"])",
              "refId": "A",
              "resultFormat": "table"
            },
            {
              "query": "from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_ec\"\r and (r._field == \"total_coding_data\" or r._field == \"total_coded_data\"))\r\n|> range($range)\r\n|> last()\r\n|> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n|> map(fn: (r) => ({coded_ratio: r.total_coded_data / r.total_coding_data}))\n|> keep(columns: [\"coded_ratio\"])\n",
              "refId": "D",
              "resultFormat": "table"
            },
            {
              "query": "from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_ec_rate\"\r and r._field == \"coding_rate\")\r\n|> range($range)\r\n|> last()\r\n|> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n|> keep(columns: [\"coding_rate\"])\n",
              "refId": "C",
              "resultFormat": "table"
            },
            {
              "query": "cap = from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_capacity_ec\" and (r._field == \"total_coding_data\" or r._field == \"total_coded_data\"))\n|> range($range)\n|> last()\n|> drop(columns: [\"_start\", \"_stop\"])\n|> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n\n\nrate = from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_capacity_ec_rate\" and r._field == \"coding_rate\")\n|> range($range)\n|> last()\n|> drop(columns: [\"_start\", \"_stop\"])\n|> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n\njoin(tables: {cap: cap, rate: rate}, on:[\"\"])\n|> drop(columns: [\"_measurement_cap\",\"_measurement_rate\"])\n|> map(fn: (r) => ({est_time: \n                    if r._time_cap == r._time_rate \n                    then string(v: ((r.total_coding_data - r.total_coded_data) / (r.coding_rate)))\n                    else \"N/A\" }))\n|> keep(columns: [\"est_time\"])",
              "refId": "E",
              "resultFormat": "table"
            }
          ],
          "timeFrom": null,
          "timeShift": null,
          "title": "Storage Efficiency",
          "transform": "table",
          "type": "table"
        },
        {
          "columns": [],
          "description": "Summary of storage server manager instances health in ObjectStore",
          "fontSize": "100%",
          "gridPos": {
            "h": 3,
            "w": 12,
            "x": 0,
            "y": 18
          },
          "id": 35,
          "links": [],
          "options": {},
          "pageSize": null,
          "scroll": true,
          "showHeader": true,
          "sort": {
            "col": 6,
            "desc": true
          },
          "styles": [
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Time",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Measurement",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Value",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Field",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            }
          ],
          "targets": [
            {
              "query": "nodeStatus = from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_ss_state\" and r._field == \"SSState\")\r\n|> range($range)\r\n|> last()\r\n|> keep(columns: [\"SS\", \"_value\"])\r\n\r\nnodeStatusGood = nodeStatus |> filter(fn: (r) => r._value == 1) |> keep(columns: [\"_value\"])\r\n|> count()\r\n|> set(key: \"_field\", value: \"Good Nodes\")\r\n\nnodeStatusBad = nodeStatus |> filter(fn: (r) => r._value != 1) |> keep(columns: [\"_value\"])\n|> count()\r\n|> set(key: \"_field\", value: \"Bad Nodes\")\r\n\nunion(tables: [nodeStatusGood , nodeStatusBad ])\n|> pivot(rowKey:[], columnKey: [\"_field\"], valueColumn: \"_value\")",
              "refId": "A",
              "resultFormat": "table"
            }
          ],
          "timeFrom": null,
          "timeShift": null,
          "title": "Nodes",
          "transform": "table",
          "type": "table"
        },
        {
          "columns": [],
          "description": "Summary of data disks health in ObjectStore",
          "fontSize": "100%",
          "gridPos": {
            "h": 3,
            "w": 12,
            "x": 12,
            "y": 18
          },
          "id": 29,
          "links": [],
          "options": {},
          "pageSize": null,
          "scroll": true,
          "showHeader": true,
          "sort": {
            "col": 6,
            "desc": true
          },
          "styles": [
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Time",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Measurement",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Value",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Field",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            }
          ],
          "targets": [
            {
              "query": "\r\ndisks = from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_disk_state\" and r._field == \"hwState\")\r\n|> range($range)\r\n|> last()\r\n|> keep(columns: [\"_value\"])\n\r\n//filter out different statuses\r\ngood_d = disks\r\n|> filter(fn: (r) => r._value == \"GOOD\")\n|> count()\r\n|> set(key: \"_field\", value: \"Good Disks\")\r\n\r\nbad_d = disks\r\n|> filter(fn: (r) => r._value == \"BAD\" or r._value == \"SUSPECT\")\n|> count()\r\n|> set(key: \"_field\", value: \"Bad Disks\")\r\n\r\nmaintenance_d = disks\r\n|> filter(fn: (r) => r._value == \"MAINTENANCE\")\n|> count()\r\n|> set(key: \"_field\", value: \"Maintenance Disks\")\r\n\r\nunion(tables: [good_d , bad_d , maintenance_d ])\n|> pivot(rowKey:[], columnKey: [\"_field\"], valueColumn: \"_value\")\n",
              "refId": "A",
              "resultFormat": "table"
            }
          ],
          "timeFrom": null,
          "timeShift": null,
          "title": "Data Disks",
          "transform": "table",
          "type": "table"
        }
      ],
      "refresh": false,
      "schemaVersion": 18,
      "style": "dark",
      "tags": [],
      "templating": {
        "list": []
      },
      "time": {
        "from": "now-24h",
        "to": "now"
      },
      "timepicker": {
        "refresh_intervals": [
          "15m",
          "30m",
          "1h",
          "2h",
          "1d"
        ],
        "time_options": [
          "15m",
          "1h",
          "6h",
          "12h",
          "24h",
          "2d",
          "7d",
          "30d"
        ]
      },
      "timezone": "",
      "title": "ObjectStore Overview",
      "uid": "hW7vSacG1",
      "version": 8
    }
  recovery_status.json: |-
    {
      "__inputs": [],
      "__requires": [
        {
          "type": "grafana",
          "id": "grafana",
          "name": "Grafana",
          "version": "6.2.5"
        },
        {
          "type": "panel",
          "id": "graph",
          "name": "Graph",
          "version": ""
        },
        {
          "type": "panel",
          "id": "table",
          "name": "Table",
          "version": ""
        }
      ],
      "annotations": {
        "list": [
          {
            "builtIn": 1,
            "datasource": "-- Grafana --",
            "enable": true,
            "hide": true,
            "iconColor": "rgba(0, 211, 255, 1)",
            "name": "Annotations & Alerts",
            "type": "dashboard"
          }
        ]
      },
      "editable": true,
      "gnetId": null,
      "graphTooltip": 0,
      "id": null,
      "links": [],
      "panels": [
        {
          "columns": [],
          "description": "The latest value of the logical size of the data yet to be recovered in the selected time range.",
          "fontSize": "100%",
          "gridPos": {
            "h": 3,
            "w": 24,
            "x": 0,
            "y": 0
          },
          "id": 10,
          "links": [],
          "options": {},
          "pageSize": null,
          "scroll": true,
          "showHeader": true,
          "sort": {
            "col": 0,
            "desc": true
          },
          "styles": [
            {
              "alias": " Amount of Data to be Recovered ",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "data",
              "thresholds": [],
              "type": "number",
              "unit": "bytes"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Time",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Measurement",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Field",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Value",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            }
          ],
          "targets": [
            {
              "query": "a = from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_recover_status_summary\" and r._field == \"data_to_recover\")\n|> range($range)\n|> keep(columns: [\"_time\", \"_value\"])\n|> last()\n|> keep(columns: [\"_value\"])\n|> rename(columns:{_value:\"data\"})\n|> yield(name: \"1\")\n",
              "refId": "A",
              "resultFormat": "table"
            }
          ],
          "timeFrom": null,
          "timeShift": null,
          "title": "Recovery Status",
          "transform": "table",
          "type": "table"
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "description": "History of the amount of data pending recovery in the selected time range.",
          "fill": 1,
          "gridPos": {
            "h": 11,
            "w": 24,
            "x": 0,
            "y": 3
          },
          "id": 4,
          "legend": {
            "alignAsTable": true,
            "avg": false,
            "current": true,
            "hideEmpty": false,
            "hideZero": false,
            "max": true,
            "min": true,
            "show": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "null",
          "options": {},
          "percentage": false,
          "pointradius": 1,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_recover_status_summary\" and r._field == \"data_to_recover\")\n|> range($range)\n|> keep(columns: [\"_time\", \"_value\"])\n|> set(key: \"_field\", value: \"Amount of Data to be Recovered\")",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Amount of Data to be Recovered",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "decimals": 1,
              "format": "bytes",
              "label": "",
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "bytes",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": false
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        }
      ],
      "refresh": false,
      "schemaVersion": 18,
      "style": "dark",
      "tags": [],
      "templating": {
        "list": []
      },
      "time": {
        "from": "now-24h",
        "to": "now"
      },
      "timepicker": {
        "refresh_intervals": [
          "15m",
          "30m",
          "1h",
          "2h",
          "1d"
        ],
        "time_options": [
          "15m",
          "1h",
          "6h",
          "12h",
          "24h",
          "2d",
          "7d",
          "30d"
        ]
      },
      "timezone": "",
      "title": "Recovery Status",
      "uid": "9t61eCnZk",
      "version": 2
    }
---
# Source: ecs-cluster/charts/ecs-monitoring/charts/grafana/templates/dashboards.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "ecs-cluster-grafana-dashboards-internal-oe"
  labels:
    release: ecs-cluster
data:
  dt_status.json: |-
    {
      "__inputs": [],
      "__requires": [
        {
          "type": "grafana",
          "id": "grafana",
          "name": "Grafana",
          "version": "6.2.5"
        },
        {
          "type": "panel",
          "id": "graph",
          "name": "Graph",
          "version": ""
        },
        {
          "type": "panel",
          "id": "table",
          "name": "Table",
          "version": ""
        }
      ],
      "annotations": {
        "list": [
          {
            "builtIn": 1,
            "datasource": "-- Grafana --",
            "enable": true,
            "hide": true,
            "iconColor": "rgba(0, 211, 255, 1)",
            "name": "Annotations & Alerts",
            "type": "dashboard"
          }
        ]
      },
      "editable": true,
      "gnetId": null,
      "graphTooltip": 0,
      "id": null,
      "iteration": 1582189212759,
      "links": [],
      "panels": [
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "fill": 1,
          "gridPos": {
            "h": 9,
            "w": 12,
            "x": 0,
            "y": 0
          },
          "id": 6,
          "legend": {
            "alignAsTable": true,
            "avg": false,
            "current": true,
            "max": true,
            "min": false,
            "show": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "null",
          "options": {},
          "percentage": false,
          "pointradius": 5,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "multiplier = 1000000\n\nfrom(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"dtquery_dt_status\" and  r._field == \"unready\")\n  |> range($range)\n  |> drop(columns:[\"_measurement\", \"process\", \"tag\"])\n",
              "refId": "A"
            },
            {
              "query": "multiplier = 1000000\n\nfrom(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"dtquery_dt_status\" and r._field == \"unknown\")\n  |> range($range)\n  |> drop(columns:[\"_measurement\",\"process\", \"tag\"])\n",
              "refId": "B"
            },
            {
              "query": "multiplier = 1000000\n\nfrom(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"dtquery_dt_status\" and  r._field == \"total\")\n  |> range($range)\n  |> drop(columns:[\"_measurement\", \"process\", \"tag\"])\n",
              "refId": "C"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "DT status",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "none",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "fill": 1,
          "gridPos": {
            "h": 9,
            "w": 12,
            "x": 12,
            "y": 0
          },
          "id": 7,
          "legend": {
            "alignAsTable": true,
            "avg": false,
            "current": true,
            "max": true,
            "min": false,
            "show": true,
            "sort": "current",
            "sortDesc": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "null",
          "options": {},
          "percentage": false,
          "pointradius": 5,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "multiplier = 1000000\n\nfrom(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"dtquery_dt_status_detailed_type\" and r._field == \"unknown\" and (\"$DT\" == \"All\" or r.type =~ /^${DT:pipe}$/))\n  |> range($range)\n  |> drop(columns:[\"_measurement\", \"process\", \"tag\"])\n\n",
              "refId": "A"
            },
            {
              "query": "multiplier = 1000000\n\nfrom(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"dtquery_dt_status_detailed_type\" and r._field == \"unready\" and (\"$DT\" == \"All\" or r.type =~ /^${DT:pipe}$/))\n  |> range($range)\n  |> drop(columns:[\"_measurement\", \"process\", \"tag\"])\n\n",
              "refId": "B"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "DT status per DT type",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "none",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "columns": [],
          "fontSize": "100%",
          "gridPos": {
            "h": 7,
            "w": 24,
            "x": 0,
            "y": 9
          },
          "id": 2,
          "links": [],
          "options": {},
          "pageSize": 16,
          "scroll": true,
          "showHeader": true,
          "sort": {
            "col": 0,
            "desc": true
          },
          "styles": [
            {
              "alias": "Time",
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "pattern": "Time",
              "type": "date"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Measurement",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Field",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "ip",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "dt_node_id",
              "thresholds": [],
              "type": "number",
              "unit": "short"
            },
            {
              "alias": "Total",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 0,
              "mappingType": 1,
              "pattern": "Value",
              "thresholds": [],
              "type": "number",
              "unit": "short"
            },
            {
              "alias": " ",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 0,
              "mappingType": 1,
              "pattern": "/dtquery_dt_dist_dt_node_id_type_*/",
              "thresholds": [
                "1",
                "1",
                "1"
              ],
              "type": "number",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "decimals": 2,
              "pattern": "/.*/",
              "thresholds": [],
              "type": "number",
              "unit": "short"
            }
          ],
          "targets": [
            {
              "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"dtquery_dt_dist_dt_node_id_type\" and r._field == \"count_i\" )\n  |> range($range)\n  |> last()\n  |> drop(columns:[\"process\", \"tag\"])\n  |> pivot(rowKey: [\"_time\"], columnKey: [\"_measurement\", \"type\"], valueColumn: \"_value\")\n  \n",
              "refId": "A",
              "resultFormat": "table"
            },
            {
              "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"dtquery_dt_dist_host_dt_node_id\" and r._field == \"count_i\" )\n  |> range($range)\n  |> last()\n  |> drop(columns:[\"process\", \"tag\"])",
              "refId": "B",
              "resultFormat": "table"
            }
          ],
          "timeFrom": null,
          "title": "DT distribution",
          "transform": "table",
          "type": "table"
        },
        {
          "columns": [],
          "fontSize": "100%",
          "gridPos": {
            "h": 3,
            "w": 24,
            "x": 0,
            "y": 16
          },
          "id": 4,
          "links": [],
          "options": {},
          "pageSize": 16,
          "scroll": true,
          "showHeader": true,
          "sort": {
            "col": null,
            "desc": false
          },
          "styles": [
            {
              "alias": "Time",
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "pattern": "Time",
              "type": "hidden"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Measurement",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Field",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "ip",
              "thresholds": [],
              "type": "number",
              "unit": "short"
            },
            {
              "alias": " ",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 0,
              "mappingType": 1,
              "pattern": "/dtquery_dt_dist_type_type_*/",
              "thresholds": [],
              "type": "number",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Value",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "decimals": 2,
              "pattern": "/.*/",
              "thresholds": [],
              "type": "number",
              "unit": "short"
            }
          ],
          "targets": [
            {
              "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"dtquery_dt_dist_type_type\" and r._field == \"count_i\" )\n  |> range($range)\n  |> last()\n  |> drop(columns:[\"process\", \"tag\"])\n  |> pivot(rowKey: [\"_time\"], columnKey: [\"_measurement\", \"type\"], valueColumn: \"_value\")\n\n\n",
              "refId": "A",
              "resultFormat": "table"
            }
          ],
          "title": "DT distribution total per type",
          "transform": "table",
          "type": "table"
        }
      ],
      "refresh": false,
      "schemaVersion": 18,
      "style": "dark",
      "tags": [],
      "templating": {
        "list": [
          {
            "allValue": "All",
            "current": {
              "selected": true,
              "tags": [],
              "text": "All",
              "value": [
                "$__all"
              ]
            },
            "hide": 0,
            "includeAll": true,
            "label": null,
            "multi": true,
            "name": "DT",
            "options": [
              {
                "selected": true,
                "text": "All",
                "value": "$__all"
              },
              {
                "selected": false,
                "text": "BR1",
                "value": "BR1"
              },
              {
                "selected": false,
                "text": "BR2",
                "value": "BR2"
              },
              {
                "selected": false,
                "text": "CT1",
                "value": "CT1"
              },
              {
                "selected": false,
                "text": "CT2",
                "value": "CT2"
              },
              {
                "selected": false,
                "text": "ET0",
                "value": "ET0"
              },
              {
                "selected": false,
                "text": "LS0",
                "value": "LS0"
              },
              {
                "selected": false,
                "text": "MA0",
                "value": "MA0"
              },
              {
                "selected": false,
                "text": "MR0",
                "value": "MR0"
              },
              {
                "selected": false,
                "text": "OB0",
                "value": "OB0"
              },
              {
                "selected": false,
                "text": "PR1",
                "value": "PR1"
              },
              {
                "selected": false,
                "text": "PR2",
                "value": "PR2"
              },
              {
                "selected": false,
                "text": "RR0",
                "value": "RR0"
              },
              {
                "selected": false,
                "text": "RT0",
                "value": "RT0"
              },
              {
                "selected": false,
                "text": "SS1",
                "value": "SS1"
              },
              {
                "selected": false,
                "text": "SS2",
                "value": "SS2"
              },
              {
                "selected": false,
                "text": "TT0",
                "value": "TT0"
              }
            ],
            "query": "BR1,BR2,CT1,CT2,ET0,LS0,MA0,MR0,OB0,PR1,PR2,RR0,RT0,SS1,SS2,TT0",
            "skipUrlSync": false,
            "type": "custom"
          }
        ]
      },
      "time": {
        "from": "now-24h",
        "to": "now"
      },
      "timepicker": {
        "refresh_intervals": [
          "5s",
          "10s",
          "30s",
          "1m",
          "5m",
          "15m",
          "30m",
          "1h",
          "2h",
          "1d"
        ],
        "time_options": [
          "5m",
          "15m",
          "1h",
          "6h",
          "12h",
          "24h",
          "2d",
          "7d",
          "30d"
        ]
      },
      "timezone": "",
      "title": "(OE) DT status",
      "uid": "P6Z1cFwik",
      "version": 4
    }
  internal_monitoring_health.json: |-
    {
      "__inputs": [
        {
          "name": "DS_FLUX",
          "label": "Flux",
          "description": "",
          "type": "datasource",
          "pluginId": "grafana-influxdb-flux-datasource",
          "pluginName": "Flux (InfluxDB) [BETA]"
        }
      ],
      "__requires": [
        {
          "type": "grafana",
          "id": "grafana",
          "name": "Grafana",
          "version": "6.2.5ecs"
        },
        {
          "type": "datasource",
          "id": "grafana-influxdb-flux-datasource",
          "name": "Flux (InfluxDB) [BETA]",
          "version": "5.2.12"
        },
        {
          "type": "panel",
          "id": "graph",
          "name": "Graph",
          "version": ""
        }
      ],
      "annotations": {
        "list": [
          {
            "builtIn": 1,
            "datasource": "-- Grafana --",
            "enable": true,
            "hide": true,
            "iconColor": "rgba(0, 211, 255, 1)",
            "name": "Annotations & Alerts",
            "type": "dashboard"
          }
        ]
      },
      "description": "(\"server single\")",
      "editable": true,
      "gnetId": 1375,
      "graphTooltip": 0,
      "id": null,
      "links": [],
      "panels": [
        {
          "collapsed": true,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 0
          },
          "id": 23,
          "panels": [
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 1,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 0,
                "y": 1
              },
              "id": 31,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"procstat\" and r.host =~ /${host:pipe}/ and r._field == \"memory_rss\" and r.process_name == \"telegraf\")\n  |> range($range)\n  |> keep(columns: [\"_time\", \"_value\", \"host\"])",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "RSS Memory, OS View",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": null,
                  "format": "bytes",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 0,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 8,
                "y": 1
              },
              "id": 32,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"procstat\" and r.host =~ /${host:pipe}/ and r._field == \"cpu_usage\" and r.process_name == \"telegraf\")\n  |> range($range)\n  |> keep(columns: [\"_time\", \"_value\", \"host\"])",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "CPU Usage",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 1,
                  "format": "percent",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 0,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 16,
                "y": 1
              },
              "id": 33,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"procstat\" and r.host =~ /${host:pipe}/ and r._field == \"num_fds\" and r.process_name == \"telegraf\")\n  |> range($range)\n  |> keep(columns: [\"_time\", \"_value\", \"host\"])",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Number of File Handles",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 1,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 0,
                "y": 11
              },
              "id": 10,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": true,
              "renderer": "flot",
              "repeat": null,
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"tsdb_telegraf_internal_gather\" and r.input == \"influxdb_listener\" and r._field == \"metrics_gathered\")\n  |> range($range)\n  |> derivative(nonNegative: true, unit:5m)\n  |> keep(columns: [\"_time\", \"tag\", \"_value\", \"host\", \"input\"])",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Metrics Received in 5 minutes",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 1,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 8,
                "y": 11
              },
              "id": 16,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": true,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"tsdb_telegraf_internal_write\" and r.output == \"influxdb\" and r._field == \"metrics_written\" and r.output == \"influxdb\")\n  |> range($range)\n  |> derivative(nonNegative: true, unit:5m)\n  |> keep(columns: [\"_time\", \"tag\", \"_value\", \"host\"])",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Metrics Sent to InfluxDB in 5 mintues",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 1,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 16,
                "y": 11
              },
              "id": 66,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": true,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"tsdb_telegraf_internal_write\" and r.output == \"influxdb\" and r._field == \"metrics_dropped\" and r.output == \"influxdb\")\n  |> range($range)\n  |> derivative(nonNegative: true, unit:5m)\n  |> keep(columns: [\"_time\", \"tag\", \"_value\", \"host\"])",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Metrics Dropped in 5 mintues",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 1,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 0,
                "y": 21
              },
              "id": 18,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"tsdb_telegraf_internal_gather\" and r.input == \"influxdb\" and r._field == \"gather_time_ns\")\n  |> range($range)\n  |> derivative(nonNegative: true, unit:5m)\n  |> keep(columns: [\"_time\", \"tag\", \"_value\", \"host\", \"input\"])",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Maximum Time to Gather Metrics",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": null,
                  "format": "ns",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 1,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 8,
                "y": 21
              },
              "id": 19,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"tsdb_telegraf_internal_write\" and r.output == \"influxdb\" and r._field == \"write_time_ns\")\n  |> range($range)\n  |> derivative(nonNegative: true, unit:5m)\n  |> keep(columns: [\"_time\", \"tag\", \"_value\", \"host\", \"output\"])",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Time to Write Metrics to InfluxDB",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": null,
                  "format": "ns",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 1,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 16,
                "y": 21
              },
              "id": 17,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": true,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"tsdb_telegraf_internal_write\" and r._field == \"buffer_size\" and r.output == \"influxdb\")\n  |> range($range)\n  |> keep(columns: [\"_time\", \"tag\", \"_value\", \"host\"])",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Buffer Size",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            }
          ],
          "title": "Telegraf Instances",
          "type": "row"
        },
        {
          "collapsed": true,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 1
          },
          "id": 21,
          "panels": [
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 1,
              "gridPos": {
                "h": 9,
                "w": 8,
                "x": 0,
                "y": 2
              },
              "id": 34,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"procstat\" and r._field == \"memory_rss\" and r.process_name == \"influxd\")\n  |> range($range)\n  |> keep(columns: [\"_time\", \"_value\", \"host\"])",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "RSS Memory, OS View",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": null,
                  "format": "bytes",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 0,
              "gridPos": {
                "h": 9,
                "w": 8,
                "x": 8,
                "y": 2
              },
              "id": 35,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"procstat\" and r._field == \"cpu_usage\" and r.process_name == \"influxd\")\n  |> range($range)\n  |> keep(columns: [\"_time\", \"_value\", \"host\"])",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "CPU Usage",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 1,
                  "format": "percent",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 0,
              "gridPos": {
                "h": 9,
                "w": 8,
                "x": 16,
                "y": 2
              },
              "id": 36,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"procstat\" and r._field == \"num_fds\" and r.process_name == \"influxd\")\n  |> range($range)\n  |> keep(columns: [\"_time\", \"_value\", \"host\"])",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Number of File Handles",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 1,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 0,
                "y": 11
              },
              "id": 24,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": true,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"tsdb_influxdb_database\" and r._field == \"numMeasurements\")\n  |> range($range)\n  |> keep(columns: [\"_time\", \"_value\", \"host\", \"database\"])\n",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Number of Measurements",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": null,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 1,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 8,
                "y": 11
              },
              "id": 25,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": true,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"tsdb_influxdb_database\" and r._field == \"numSeries\")\n  |> range($range)\n  |> keep(columns: [\"_time\", \"_value\", \"host\", \"database\"])",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Number of Series",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": null,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "description": "Size of /opt/emc/caspian/fabric/agent/services/object/data/influxdb/",
              "editable": true,
              "error": false,
              "fill": 1,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 16,
                "y": 11
              },
              "id": 26,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": false,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": true,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"disk\" and (r._field == \"used\" or r._field == \"free\") and r.host =~ /influxdb/ and r.path == \"/pv\")\n  |> range($range)\n  |> keep(columns: [\"_start\", \"_stop\", \"_time\", \"_value\", \"host\", \"_field\"])",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Storage Disk Space",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": null,
                  "format": "bytes",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 1,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 0,
                "y": 21
              },
              "id": 27,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": true,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_main\")\r\n  |> filter(fn: (r) => r._measurement == \"tsdb_influxdb_httpd\" and r._field == \"pointsWrittenOK\")\n  |> range($range)\n  |> derivative(nonNegative: true, unit:1s)\n  |> keep(columns: [\"_time\", \"_value\", \"host\"])  \n  \n",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Points Written per second",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": null,
                  "format": "wps",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 1,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 8,
                "y": 21
              },
              "id": 40,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"procstat\" and r._field == \"read_bytes\" and r.process_name == \"influxd\")\n  |> range($range)\n  |> derivative(nonNegative: true, unit:1s)\n  |> keep(columns: [\"_time\", \"_value\", \"host\", \"_field\"])\n  \n",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                },
                {
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"procstat\" and r._field == \"write_bytes\" and r.process_name == \"influxd\")\n  |> range($range)\n  |> derivative(nonNegative: true, unit:1s)\n  |> keep(columns: [\"_time\", \"_value\", \"host\", \"_field\"])\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Disk IO rate (bytes per second)",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "Bps",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 1,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 16,
                "y": 21
              },
              "id": 28,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": true,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": true,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"tsdb_influxdb_queryExecutor\" and r._field == \"queriesExecuted\")\n  |> range($range)\n  |> derivative(nonNegative: true, unit:5m)\n  |> keep(columns: [\"_time\", \"_value\", \"host\"])\n  \n  \n",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "SQL Queries Executed in 5 minutes",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 1,
              "gridPos": {
                "h": 9,
                "w": 8,
                "x": 0,
                "y": 31
              },
              "id": 50,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": true,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_main\")\r\n  |> filter(fn: (r) => r._measurement == \"tsdb_influxdb_httpd\" and r._field == \"writeReqBytes\")\n  |> range($range)\n  |> keep(columns: [\"_time\", \"_value\", \"host\"])\n\n\n  \n  \n",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Data Ingest Rate over HTTP, bytes per second",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "Bps",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            }
          ],
          "title": "InfluxDB Instances",
          "type": "row"
        },
        {
          "collapsed": true,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 2
          },
          "id": 15,
          "panels": [
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 1,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 0,
                "y": 3
              },
              "id": 37,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"procstat\" and r.host =~ /${host:pipe}/ and r._field == \"memory_rss\" and r.process_name == \"fluxd\")\n  |> range($range)\n  |> keep(columns: [\"_time\", \"_value\", \"host\"])",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "RSS Memory, OS View",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": null,
                  "format": "bytes",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 0,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 8,
                "y": 3
              },
              "id": 38,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"procstat\" and r.host =~ /${host:pipe}/ and r._field == \"cpu_usage\" and r.process_name == \"fluxd\")\n  |> range($range)\n  |> keep(columns: [\"_time\", \"_value\", \"host\"])",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "CPU Usage",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 1,
                  "format": "percent",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 0,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 16,
                "y": 3
              },
              "id": 39,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"procstat\" and r.host =~ /${host:pipe}/ and r._field == \"num_fds\" and r.process_name == \"fluxd\")\n  |> range($range)\n  |> keep(columns: [\"_time\", \"_value\", \"host\"])",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Number of File Handles",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 10,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 0,
                "y": 13
              },
              "id": 29,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 0,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": true,
              "steppedLine": true,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"tsdb_fluxd_http_api_requests_total\" and r.path =~ /query/)\n  |> range($range)\n  |> keep(columns: [\"_time\", \"_value\", \"address\", \"status\", \"path\"])\n  |> derivative(nonNegative: true, unit:5m)\n  |> drop(columns: [\"path\"])\n  |> window(every:5m)\n  |> sum()\n  |> rename(columns: {_start: \"_time\"})\n  |> group(columns:[\"address\", \"status\"])\n  \n  \n",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Number of Requests in 5 minutes",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": true,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 0,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 8,
                "y": 13
              },
              "id": 30,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": true,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "max",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": false,
              "linewidth": 2,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 3,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": true,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "sum = from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"tsdb_fluxd_http_api_request_duration_seconds\" and r._field == \"sum\" and r.path == \"/query\")\n  |> range($range)\n  |> derivative(nonNegative: true, unit:5m)\n  |> keep(columns: [\"_time\", \"_start\", \"_stop\", \"address\", \"status\", \"_value\"])\n  \ncount = from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"tsdb_fluxd_http_api_request_duration_seconds\" and r._field == \"count\" and r.path == \"/query\")\n  |> range($range)\n  |> derivative(nonNegative: true, unit:5m)\n  |> keep(columns: [\"_time\", \"_start\", \"_stop\", \"address\", \"status\", \"_value\"])\n\njoin(tables: {sum:sum, count:count}, on: [\"_time\", \"_start\", \"_stop\", \"address\", \"status\"])\r\n  |> map(fn: (r) => ({_value: r._value_sum / r._value_count, _time: r._time}))\n  ",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Response Time by result",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "s",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 0,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 16,
                "y": 13
              },
              "id": 67,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": true,
                "rightSide": false,
                "show": true,
                "sort": "min",
                "sortDesc": false,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 0.5,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "        \nfrom(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"tsdb_fluxd_host_state\")\n  |> range($range)\n  |> group(columns: [\"_time\",\"address\"], mode:\"by\")\n  |> sum()\n  |> group(columns: [\"address\"], mode:\"by\")\n",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Number of connected InfluxDB",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 10,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 0,
                "y": 23
              },
              "id": 68,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": true,
                "max": true,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": false,
              "linewidth": 0,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 3,
              "points": true,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": true,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"tsdb_fluxd_host_state_change_total\" and r.status ==\"DISCONNECTED\")\n  |> range($range)\n  |> keep(columns: [\"_time\",\"_start\", \"_stop\",\"_value\", \"address\",\"hostport\"])\n  |> difference()\n  |> filter(fn: (r) => r[\"_value\"] > 0)\n  \n  \n  \n  \n",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Number of Disconnects",
              "tooltip": {
                "msResolution": false,
                "shared": false,
                "sort": 1,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "description": "- Number of single InfluxDB selections in 5 minutes\n- Number of failed selections caused by expired host selection data",
              "editable": true,
              "error": false,
              "fill": 0,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 8,
                "y": 23
              },
              "id": 86,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": true,
                "rightSide": false,
                "show": true,
                "sort": "min",
                "sortDesc": false,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 0.5,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\n\r|> filter(fn: (r) => r._measurement == \"tsdb_fluxd_host_selected\" and r._field == \"counter\")\r\n\r|> range($range)\n\r|> keep(columns: [\"_time\", \"_value\", \"address\", \"hostport\"])\r\n\r|> difference(nonNegative: true)\r\n\r|> fill(column: \"_value\", value: 0)\r\n\r|> drop(columns: [\"hostport\"])\r\n|> window(every:5m)\n|> sum()\r\n|> rename(columns: {_start: \"_time\"})\r\n|> group(columns: [\"address\"])\n\r\r|> set(key: \"_field\", value: \"Successful\")\n\n",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                },
                {
                  "query": "from(bucket: \"monitoring_op\")\n\r|> filter(fn: (r) => r._measurement == \"tsdb_fluxd_hl_expired_detected\" and r._field == \"counter\" and r.host =~ /${host:pipe}/)\r\n\r|> range($range)\n\r|> keep(columns: [\"_time\", \"_value\", \"address\"])\r\n\r|> difference(nonNegative: true)\r\n\r|> fill(column: \"_value\", value: 0)\r\n\r\r|> set(key: \"_field\", value: \"Failed due to expired data\")\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Number of InfluxDB Selections in 5 Minutes",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "description": "Number of queries executed on local Flux engine",
              "editable": true,
              "error": false,
              "fill": 10,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 16,
                "y": 23
              },
              "id": 87,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 0,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": true,
              "steppedLine": true,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"tsdb_fluxd_query_control_executing_duration_seconds\" and r._field =~ /count/)\n  |> range($range)\n  |> keep(columns: [\"_time\", \"_value\", \"address\"])\n  |> derivative(nonNegative: true, unit:5m)\n",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Number of Queries Executed in 5 minutes",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "description": "Number of queries forwarded and executed on remote Fluxd instances",
              "editable": true,
              "error": false,
              "fill": 10,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 0,
                "y": 33
              },
              "id": 88,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 0,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": true,
              "steppedLine": true,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"tsdb_fluxd_http_lb_request_forwarded\" and r._field =~ /count/)\n  |> range($range)\n  |> keep(columns: [\"_time\", \"_value\", \"address\"])\n  |> derivative(nonNegative: true, unit:5m)",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Number of Queries Forwarded in 5 minutes",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "Total number of internal fluxd errors (internal panics counter)",
              "fill": 1,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 8,
                "y": 33
              },
              "id": 90,
              "legend": {
                "avg": false,
                "current": false,
                "max": false,
                "min": false,
                "show": true,
                "total": false,
                "values": false
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\") \n   |> filter(fn: (r) => r._measurement == \"tsdb_fluxd_query_control_panics_total\" and r._field == \"counter\")\n   |> range($range)\n   |> keep(columns: [\"_time\", \"_value\", \"address\"])",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Flux Internal Errors",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            }
          ],
          "title": "Fluxd Instances",
          "type": "row"
        },
        {
          "collapsed": true,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 3
          },
          "id": 53,
          "panels": [
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 1,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 0,
                "y": 44
              },
              "id": 55,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"procstat\" and r.host =~ /${host:pipe}/ and r._field == \"memory_rss\" and (r.process_name == \"throttler\" or r.process_name == \"grafana-server\"))\n  |> range($range)\n  |> keep(columns: [\"_time\", \"_value\", \"host\", \"process_name\"])",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "RSS Memory, OS View",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": null,
                  "format": "bytes",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 0,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 8,
                "y": 44
              },
              "id": 57,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"procstat\" and r.host =~ /${host:pipe}/ and r._field == \"cpu_usage\" and (r.process_name == \"throttler\" or r.process_name == \"grafana-server\"))\n  |> range($range)\n  |> keep(columns: [\"_time\", \"_value\", \"host\", \"process_name\"])",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "CPU Usage",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 1,
                  "format": "percent",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 0,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 16,
                "y": 44
              },
              "id": 59,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"procstat\" and r.host =~ /${host:pipe}/ and r._field == \"num_fds\" and (r.process_name == \"throttler\" or r.process_name == \"grafana-server\"))\n  |> range($range)\n  |> keep(columns: [\"_time\", \"_value\", \"host\", \"process_name\"])",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Number of File Handles",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 0,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 0,
                "y": 54
              },
              "id": 76,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": true,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 1,
              "points": true,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"cquerier_fluxd_requests_total\")\n  |> range($range)\n  |> difference(nonNegative:true)\n  |> keep(columns: [\"_time\", \"_value\", \"type\", \"host\", \"status\"])\n",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Total CQ processing rate",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 0,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 8,
                "y": 54
              },
              "id": 78,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": true,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 1,
              "points": true,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"cquerier_telegraf_requests_total\")\n  |> range($range)\n  |> difference(nonNegative:true)\n  |> keep(columns: [\"_time\", \"_value\", \"type\", \"host\", \"status\"])\n",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "CQ Telegraf requests rate",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 0,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 16,
                "y": 54
              },
              "id": 80,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": true,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": true,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": true,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_vdc\")\r\n  |> filter(fn: (r) => r._measurement =~ /^cq_.*_metadata$/ and r._field == \"_done\")\n  |> range($range)\n  |> keep(columns: [\"_time\", \"_value\", \"_measurement\"])\n",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "CQ progress done status by name",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 0,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 0,
                "y": 64
              },
              "id": 82,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": true,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 1,
              "points": true,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"cquerier_succeeded_cq_total\" and r.type == \"current\")\n  |> range($range)\n  |> difference(nonNegative:true)\n  |> keep(columns: [\"_time\", \"_value\", \"cqname\"])\n",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Number of successfully processed \"current\" CQ by name",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 0,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 8,
                "y": 64
              },
              "id": 84,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": true,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 1,
              "points": true,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"cquerier_succeeded_cq_total\" and r.type == \"history\")\n  |> range($range)\n  |> difference(nonNegative:true)\n  |> keep(columns: [\"_time\", \"_value\", \"cqname\", \"type\"])\n",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Number of successfully processed \"history\" CQ by name",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 0,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 16,
                "y": 64
              },
              "id": 74,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": true,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": true,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"cquerier_exceeded_maxretry_total\")\n  |> range($range)\n  |> keep(columns: [\"_time\",\"_value\", \"host\", \"cqname\"]) \n  |> derivative(nonNegative: true, unit: 5m)\n  |> filter(fn: (r) => r[\"_value\"] > 0)\n  \n  \n  \n  \n",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Number of CQ exceeded max-retry count per 5 min, per query",
              "tooltip": {
                "msResolution": false,
                "shared": false,
                "sort": 1,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 0,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 0,
                "y": 74
              },
              "id": 69,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": true,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"cquerier_fluxd_requests_total\" and r.status!=\"ok\")\n  |> range($range)\n  |> difference()\n  |> keep(columns: [\"_time\", \"_value\", \"host\", \"status\", \"type\"])\n  |> filter(fn: (r) => r[\"_value\"] > 0)\n",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "CQ number of bad requests to Fluxd",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 0,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 8,
                "y": 74
              },
              "id": 70,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": true,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 1,
              "points": true,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"cquerier_exceeded_maxretry_common_total\")\n  |> range($range)\n  |> keep(columns: [\"_time\",\"_value\", \"host\"])\n  |> derivative(nonNegative: true, unit: 5m)\n  |> filter(fn: (r) => r[\"_value\"] > 0)\n  \n  \n  \n  \n",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Number of CQ exceeded max-retry count per 5 min",
              "tooltip": {
                "msResolution": false,
                "shared": false,
                "sort": 1,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 0,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 16,
                "y": 74
              },
              "id": 85,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": true,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"cquerier_non_completed_history_cq_total\")\n  |> range($range)\n  |> difference(nonNegative:true)\n  |> keep(columns: [\"_time\", \"_value\", \"host\"])\n",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "CQ number of  non completed history processing",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            }
          ],
          "title": "Throttler and Grafana instances",
          "type": "row"
        },
        {
          "collapsed": true,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 4
          },
          "id": 61,
          "panels": [
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "datasource": "${DS_FLUX}",
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 1,
              "gridPos": {
                "h": 8,
                "w": 12,
                "x": 0,
                "y": 15
              },
              "id": 62,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "percentage": false,
              "pointradius": 2,
              "points": true,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement =~ /_stat_client_performance$/ and r._field == \"primitives_count\" and r.host =~ /${host:pipe}/)\n  |> range($range)\n  |> drop(columns: [\"_measurement\", \"_field\", \"node_id\", \"tag\", \"host\", \"_start\", \"_stop\"])\n\n",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeShift": null,
              "title": "Number of Primitives per Service",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": null,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "datasource": "${DS_FLUX}",
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 1,
              "gridPos": {
                "h": 8,
                "w": 12,
                "x": 12,
                "y": 15
              },
              "id": 63,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "percentage": false,
              "pointradius": 2,
              "points": true,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement =~ /_stat_client_performance$/ and r._field == \"exported_points\" and r.host =~ /${host:pipe}/)\n  |> range($range)\n  |> drop(columns: [\"_measurement\", \"_field\", \"node_id\", \"tag\", \"host\", \"_start\", \"_stop\"])\n  |> derivative(nonNegative: true)\n",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeShift": null,
              "title": "Exported Points (lines) per second",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": null,
                  "format": "wps",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "datasource": "${DS_FLUX}",
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 1,
              "gridPos": {
                "h": 8,
                "w": 12,
                "x": 0,
                "y": 23
              },
              "id": 64,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": false,
                "hideEmpty": true,
                "hideZero": true,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": true,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "percentage": false,
              "pointradius": 2,
              "points": true,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": true,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement =~ /_stat_client_performance$/ and r._field == \"influxdb_buffer_loss\" and r.host =~ /${host:pipe}/)\n  |> range($range)\n  |> drop(columns: [\"_measurement\", \"_field\", \"node_id\", \"tag\", \"host\", \"_start\", \"_stop\"])\n  |> difference(nonNegative:true)\n\n",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeShift": null,
              "title": "Events of InfluxDB buffer loss",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": null,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "datasource": "${DS_FLUX}",
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 1,
              "gridPos": {
                "h": 8,
                "w": 12,
                "x": 12,
                "y": 23
              },
              "id": 65,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "percentage": false,
              "pointradius": 2,
              "points": true,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement =~ /_stat_client_performance$/ and r._field == \"push_interval_sec\" and r.host =~ /${host:pipe}/)\n  |> range($range)\n  |> keep(columns: [\"_time\", \"_value\", \"process\"])\n",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeShift": null,
              "title": "Maximum Push Interval in seconds",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": null,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            }
          ],
          "title": "Statclient meta-monitoring",
          "type": "row"
        }
      ],
      "refresh": false,
      "schemaVersion": 18,
      "style": "dark",
      "tags": [],
      "templating": {
        "list": []
      },
      "time": {
        "from": "now-24h",
        "to": "now"
      },
      "timepicker": {
        "refresh_intervals": [
          "5s",
          "10s",
          "30s",
          "1m",
          "5m",
          "15m",
          "30m",
          "1h",
          "2h",
          "1d"
        ],
        "time_options": [
          "5m",
          "15m",
          "1h",
          "6h",
          "12h",
          "24h",
          "2d",
          "7d",
          "30d"
        ]
      },
      "timezone": "",
      "title": "(OE) Internal Monitoring Health",
      "uid": "o5ijgcIWz",
      "version": 2
    }
  objectsvc_request_overview.json: |-
    {
      "annotations": {
        "list": [
          {
            "builtIn": 1,
            "datasource": "-- Grafana --",
            "enable": true,
            "hide": true,
            "iconColor": "rgba(0, 211, 255, 1)",
            "name": "Annotations & Alerts",
            "type": "dashboard"
          }
        ]
      },
      "editable": true,
      "gnetId": null,
      "graphTooltip": 0,
      "id": 22,
      "links": [],
      "panels": [
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "description": "",
          "fill": 1,
          "gridPos": {
            "h": 9,
            "w": 12,
            "x": 0,
            "y": 0
          },
          "id": 2,
          "legend": {
            "alignAsTable": true,
            "avg": true,
            "current": false,
            "max": true,
            "min": false,
            "rightSide": false,
            "show": true,
            "total": true,
            "values": true
          },
          "lines": false,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "null",
          "options": {},
          "percentage": false,
          "pointradius": 2,
          "points": true,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "import \"ecs\"\n\nwi = ecs.get_dyn_downsample_info(start: $__range_from_s, stop: $__range_to_s, max: 100,  measurement: \"object_operations\")\n\nmn = wi.measurement\n\nfrom(bucket: \"monitoring_op\") \n    |> filter(fn: (r) => r._measurement == mn \n       and r._field =~ /Success$/)  \n    |> range(start: wi.start, stop: wi.stop)  \n    |> window(every: wi.duration)\n    |> group(columns:[\"_field\",\"id\",\"node_id\"])\n    |> set(key:\"id\", value:\"Successful Requests\")  \n    |> difference()    \n    // remove grouping to see stats for individual nodes\n    |> group(columns:[\"_field\",\"id\"]) \n    // add node_id to keep to see stats per server\n    |> keep(columns:[\"_field\",\"_time\",\"_value\"])\n    \n    \n\n    \n    \n\n\n\n\n\n\n",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Objectsvc Successful Requests",
          "tooltip": {
            "shared": false,
            "sort": 2,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "decimals": null,
          "fill": 1,
          "gridPos": {
            "h": 9,
            "w": 12,
            "x": 12,
            "y": 0
          },
          "id": 4,
          "legend": {
            "alignAsTable": true,
            "avg": true,
            "current": false,
            "max": true,
            "min": false,
            "show": true,
            "total": true,
            "values": true
          },
          "lines": false,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "null",
          "options": {},
          "percentage": false,
          "pointradius": 2,
          "points": true,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "import \"ecs\"\n\nwi = ecs.get_dyn_downsample_info(start: $__range_from_s, stop: $__range_to_s, max: 100,  measurement: \"object_operations\")\n\nmn = wi.measurement\n\nfrom(bucket: \"monitoring_op\") \n    |> filter(fn: (r) => r._measurement == mn \n       and r._field =~ /Failure$/)  \n    |> range(start: wi.start, stop: wi.stop)  \n    |> window(every: wi.duration)\n    |> group(columns:[\"_field\",\"id\",\"node_id\"])\n    |> set(key:\"id\", value:\"Request Failures\")  \n    |> difference()\n    // remove grouping to see stats for individual nodes\n    |> group(columns:[\"_field\",\"id\"]) \n    // add node_id to keep to see stats per server\n    |> keep(columns:[\"_field\",\"_time\",\"_value\"])\n",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Objectsvc Request Failures",
          "tooltip": {
            "shared": false,
            "sort": 2,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "decimals": null,
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "decimals": null,
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "description": "Tracks total size of uploaded objects and MPU parts for a given time period.",
          "fill": 1,
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 0,
            "y": 9
          },
          "id": 6,
          "legend": {
            "alignAsTable": true,
            "avg": false,
            "current": false,
            "hideEmpty": false,
            "hideZero": false,
            "max": true,
            "min": true,
            "rightSide": false,
            "show": true,
            "total": true,
            "values": true
          },
          "lines": false,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "null",
          "options": {},
          "percentage": false,
          "pointradius": 2,
          "points": true,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "import \"ecs\"\n\nwi = ecs.get_dyn_downsample_info(start: $__range_from_s, stop: $__range_to_s, max: 100,  measurement: \"object_operations\")\n\nmn = wi.measurement\n\nfrom(bucket: \"monitoring_op\") \n    |> filter(fn: (r) => r._measurement == mn and\n        r._field =~ /SizeTotal$/)  \n    |> range(start: wi.start, stop: wi.stop)  \n    |> window(every: wi.duration)\n    |> group(columns:[\"_field\",\"id\", \"node_id\"])\n    |> set(key:\"id\", value:\"total upload size\")  \n    |> difference()\n    // remove grouping to see stats for individual nodes\n    |> keep(columns:[\"_field\",\"_time\",\"_value\"])\n    // add node_id to keep to see stats per server\n    |> keep(columns:[\"_field\",\"_time\",\"_value\"])\n\n",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Objectsvc data delta",
          "tooltip": {
            "shared": false,
            "sort": 2,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "decimals": null,
              "format": "bytes",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        }
      ],
      "schemaVersion": 18,
      "style": "dark",
      "tags": [],
      "templating": {
        "list": []
      },
      "time": {
        "from": "now-1d/d",
        "to": "now-1d/d"
      },
      "timepicker": {
        "refresh_intervals": [
          "15m",
          "30m",
          "1h",
          "2h",
          "1d"
        ],
        "time_options": [
          "15m",
          "1h",
          "6h",
          "12h",
          "24h",
          "2d",
          "7d",
          "30d"
        ]
      },
      "timezone": "",
      "title": "objectsvc",
      "uid": "uJFq6mLGz",
      "version": 39
    }
  pravega_operator.json: |-
    {
      "__inputs": [
        {
          "name": "DS_FLUX",
          "label": "Flux",
          "description": "",
          "type": "datasource",
          "pluginId": "grafana-influxdb-flux-datasource",
          "pluginName": "Flux (InfluxDB) [BETA]"
        }
      ],
      "__requires": [
        {
          "type": "grafana",
          "id": "grafana",
          "name": "Grafana",
          "version": "6.2.5ecs"
        },
        {
          "type": "datasource",
          "id": "grafana-influxdb-flux-datasource",
          "name": "Flux (InfluxDB) [BETA]",
          "version": "5.2.12"
        },
        {
          "type": "panel",
          "id": "graph",
          "name": "Graph",
          "version": ""
        },
        {
          "type": "panel",
          "id": "singlestat",
          "name": "Singlestat",
          "version": ""
        }
      ],
      "annotations": {
        "list": [
          {
            "builtIn": 1,
            "datasource": "-- Grafana --",
            "enable": true,
            "hide": true,
            "iconColor": "rgba(0, 211, 255, 1)",
            "name": "Annotations & Alerts",
            "type": "dashboard"
          }
        ]
      },
      "editable": true,
      "gnetId": null,
      "graphTooltip": 0,
      "id": null,
      "iteration": 1612511825789,
      "links": [],
      "panels": [
        {
          "collapsed": false,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 0
          },
          "id": 104,
          "panels": [],
          "title": "Current Latency Stats",
          "type": "row"
        },
        {
          "cacheTimeout": null,
          "colorBackground": false,
          "colorValue": false,
          "colors": [
            "#299c46",
            "rgba(237, 129, 40, 0.89)",
            "#d44a3a"
          ],
          "format": "ms",
          "gauge": {
            "maxValue": 100,
            "minValue": 0,
            "show": false,
            "thresholdLabels": false,
            "thresholdMarkers": true
          },
          "gridPos": {
            "h": 3,
            "w": 5,
            "x": 0,
            "y": 1
          },
          "id": 2,
          "interval": null,
          "links": [],
          "mappingType": 1,
          "mappingTypes": [
            {
              "name": "value to text",
              "value": 1
            },
            {
              "name": "range to text",
              "value": 2
            }
          ],
          "maxDataPoints": 100,
          "nullPointMode": "connected",
          "nullText": null,
          "options": {},
          "postfix": "",
          "postfixFontSize": "50%",
          "prefix": "",
          "prefixFontSize": "50%",
          "rangeMaps": [
            {
              "from": "null",
              "text": "N/A",
              "to": "null"
            }
          ],
          "sparkline": {
            "fillColor": "rgba(31, 118, 189, 0.18)",
            "full": false,
            "lineColor": "rgb(31, 120, 193)",
            "show": false
          },
          "tableColumn": "",
          "targets": [
            {
              "query": "from(bucket: \"monitoring_op\")\r\n|> filter(fn: (r) => r._measurement == \"pravega_segmentstore_segment_write_latency_ms_percentile\" and r.phi==\"0.99\"\r and r.host=~/^${host:pipe}$/)\n|> range($range)\r\n|> group()\n|> last()\n",
              "refId": "A"
            }
          ],
          "thresholds": "",
          "timeFrom": null,
          "timeShift": null,
          "title": "Segment Write Latency (p0.99)",
          "type": "singlestat",
          "valueFontSize": "80%",
          "valueMaps": [
            {
              "op": "=",
              "text": "N/A",
              "value": "null"
            }
          ],
          "valueName": "avg"
        },
        {
          "cacheTimeout": null,
          "colorBackground": false,
          "colorValue": false,
          "colors": [
            "#299c46",
            "rgba(237, 129, 40, 0.89)",
            "#d44a3a"
          ],
          "format": "ms",
          "gauge": {
            "maxValue": 100,
            "minValue": 0,
            "show": false,
            "thresholdLabels": false,
            "thresholdMarkers": true
          },
          "gridPos": {
            "h": 3,
            "w": 5,
            "x": 5,
            "y": 1
          },
          "id": 8,
          "interval": null,
          "links": [],
          "mappingType": 1,
          "mappingTypes": [
            {
              "name": "value to text",
              "value": 1
            },
            {
              "name": "range to text",
              "value": 2
            }
          ],
          "maxDataPoints": 100,
          "nullPointMode": "connected",
          "nullText": null,
          "options": {},
          "postfix": "",
          "postfixFontSize": "50%",
          "prefix": "",
          "prefixFontSize": "50%",
          "rangeMaps": [
            {
              "from": "null",
              "text": "N/A",
              "to": "null"
            }
          ],
          "sparkline": {
            "fillColor": "rgba(31, 118, 189, 0.18)",
            "full": false,
            "lineColor": "rgb(31, 120, 193)",
            "show": false
          },
          "tableColumn": "",
          "targets": [
            {
              "query": "from(bucket: \"monitoring_op\")\r\n|> filter(fn: (r) => r._measurement == \"pravega_segmentstore_segment_read_latency_ms_percentile\" and r.phi==\"0.99\"\r and r.host=~/^${host:pipe}$/)\n|> range($range)\r\n|> group()\n|> last()\n",
              "refId": "A"
            }
          ],
          "thresholds": "",
          "timeFrom": null,
          "timeShift": null,
          "title": "Storage Write Latency (p0.99)",
          "type": "singlestat",
          "valueFontSize": "80%",
          "valueMaps": [
            {
              "op": "=",
              "text": "N/A",
              "value": "null"
            }
          ],
          "valueName": "avg"
        },
        {
          "cacheTimeout": null,
          "colorBackground": false,
          "colorValue": false,
          "colors": [
            "#299c46",
            "rgba(237, 129, 40, 0.89)",
            "#d44a3a"
          ],
          "format": "ms",
          "gauge": {
            "maxValue": 100,
            "minValue": 0,
            "show": false,
            "thresholdLabels": false,
            "thresholdMarkers": true
          },
          "gridPos": {
            "h": 3,
            "w": 5,
            "x": 10,
            "y": 1
          },
          "id": 14,
          "interval": null,
          "links": [],
          "mappingType": 1,
          "mappingTypes": [
            {
              "name": "value to text",
              "value": 1
            },
            {
              "name": "range to text",
              "value": 2
            }
          ],
          "maxDataPoints": 100,
          "nullPointMode": "connected",
          "nullText": null,
          "options": {},
          "postfix": "",
          "postfixFontSize": "50%",
          "prefix": "",
          "prefixFontSize": "50%",
          "rangeMaps": [
            {
              "from": "null",
              "text": "N/A",
              "to": "null"
            }
          ],
          "sparkline": {
            "fillColor": "rgba(31, 118, 189, 0.18)",
            "full": false,
            "lineColor": "rgb(31, 120, 193)",
            "show": false
          },
          "tableColumn": "",
          "targets": [
            {
              "query": "from(bucket: \"monitoring_op\")\r\n|> filter(fn: (r) => r._measurement == \"pravega_segmentstore_bookkeeper_write_latency_ms_percentile\" and r.phi==\"0.99\"\r and r.host=~/^${host:pipe}$/)\n|> range($range)\r\n|> group()\n|> last()\n",
              "refId": "A"
            }
          ],
          "thresholds": "",
          "timeFrom": null,
          "timeShift": null,
          "title": "BK Write Latency(p0.99)",
          "type": "singlestat",
          "valueFontSize": "80%",
          "valueMaps": [
            {
              "op": "=",
              "text": "N/A",
              "value": "null"
            }
          ],
          "valueName": "avg"
        },
        {
          "cacheTimeout": null,
          "colorBackground": false,
          "colorValue": false,
          "colors": [
            "#299c46",
            "rgba(237, 129, 40, 0.89)",
            "#d44a3a"
          ],
          "format": "ms",
          "gauge": {
            "maxValue": 100,
            "minValue": 0,
            "show": false,
            "thresholdLabels": false,
            "thresholdMarkers": true
          },
          "gridPos": {
            "h": 3,
            "w": 5,
            "x": 15,
            "y": 1
          },
          "id": 12,
          "interval": null,
          "links": [],
          "mappingType": 1,
          "mappingTypes": [
            {
              "name": "value to text",
              "value": 1
            },
            {
              "name": "range to text",
              "value": 2
            }
          ],
          "maxDataPoints": 100,
          "nullPointMode": "connected",
          "nullText": null,
          "options": {},
          "postfix": "",
          "postfixFontSize": "50%",
          "prefix": "",
          "prefixFontSize": "50%",
          "rangeMaps": [
            {
              "from": "null",
              "text": "N/A",
              "to": "null"
            }
          ],
          "sparkline": {
            "fillColor": "rgba(31, 118, 189, 0.18)",
            "full": false,
            "lineColor": "rgb(31, 120, 193)",
            "show": false
          },
          "tableColumn": "",
          "targets": [
            {
              "query": "from(bucket: \"monitoring_op\")\r\n|> filter(fn: (r) => r._measurement == \"pravega_segmentstore_storage_write_latency_ms_percentile\" and r.phi==\"0.99\"\r and r.host=~/^${host:pipe}$/)\n|> range($range)\r\n|> group()\n|> last()\n",
              "refId": "A"
            }
          ],
          "thresholds": "",
          "timeFrom": null,
          "timeShift": null,
          "title": "Storage Read Latency (p0.99)",
          "type": "singlestat",
          "valueFontSize": "80%",
          "valueMaps": [
            {
              "op": "=",
              "text": "N/A",
              "value": "null"
            }
          ],
          "valueName": "avg"
        },
        {
          "cacheTimeout": null,
          "colorBackground": false,
          "colorValue": false,
          "colors": [
            "#299c46",
            "rgba(237, 129, 40, 0.89)",
            "#d44a3a"
          ],
          "format": "ms",
          "gauge": {
            "maxValue": 100,
            "minValue": 0,
            "show": false,
            "thresholdLabels": false,
            "thresholdMarkers": true
          },
          "gridPos": {
            "h": 3,
            "w": 4,
            "x": 20,
            "y": 1
          },
          "id": 10,
          "interval": null,
          "links": [],
          "mappingType": 1,
          "mappingTypes": [
            {
              "name": "value to text",
              "value": 1
            },
            {
              "name": "range to text",
              "value": 2
            }
          ],
          "maxDataPoints": 100,
          "nullPointMode": "connected",
          "nullText": null,
          "options": {},
          "postfix": "",
          "postfixFontSize": "50%",
          "prefix": "",
          "prefixFontSize": "50%",
          "rangeMaps": [
            {
              "from": "null",
              "text": "N/A",
              "to": "null"
            }
          ],
          "sparkline": {
            "fillColor": "rgba(31, 118, 189, 0.18)",
            "full": false,
            "lineColor": "rgb(31, 120, 193)",
            "show": false
          },
          "tableColumn": "",
          "targets": [
            {
              "query": "from(bucket: \"monitoring_op\")\r\n|> filter(fn: (r) => r._measurement == \"pravega_segmentstore_storage_read_latency_ms_percentile\" and r.phi==\"0.99\"\r and r.host=~/^${host:pipe}$/)\n|> range($range)\r\n|> group()\n|> last()\n",
              "refId": "A"
            }
          ],
          "thresholds": "",
          "timeFrom": null,
          "timeShift": null,
          "title": "Segment Read Latency (p0.99)",
          "type": "singlestat",
          "valueFontSize": "80%",
          "valueMaps": [
            {
              "op": "=",
              "text": "N/A",
              "value": "null"
            }
          ],
          "valueName": "avg"
        },
        {
          "collapsed": false,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 4
          },
          "id": 102,
          "panels": [],
          "title": "Throughput Rates",
          "type": "row"
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "fill": 1,
          "gridPos": {
            "h": 6,
            "w": 12,
            "x": 0,
            "y": 5
          },
          "id": 6,
          "legend": {
            "alignAsTable": false,
            "avg": false,
            "current": false,
            "hideEmpty": false,
            "hideZero": false,
            "max": false,
            "min": false,
            "rightSide": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "connected",
          "options": {},
          "percentage": false,
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [
            {}
          ],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "hide": false,
              "query": "from(bucket: \"monitoring_op\")\n|> filter(fn: (r) => r._measurement == \"pravega_segmentstore_segment_write_bytes_global\"  and r.host =~ /$host/)\n|> range($range)\n|> keep(columns: [\"_time\", \"_value\", \"host\"])\n|> window(every: 10s)\n|> sum()\n|> rename(columns: {_stop: \"_time\"})\n|> map(fn: (r) => ({ _value: r._value /10.0}))\n|> group(columns:[\"host\"])\n\n\n\n\n",
              "refId": "A",
              "resultFormat": "time_series"
            },
            {
              "query": "from(bucket: \"monitoring_op\")\n|> filter(fn: (r) => r._measurement == \"pravega_segmentstore_segment_write_bytes\" and r.host =~ /$host/)\n|> range($range)\n|> keep(columns: [\"_time\", \"_value\"])\n|> window(every: 10s)\n|> sum()\n|> rename(columns: {_stop: \"_time\"})\n|> map(fn: (r) => ({ _value: r._value /10.0}))\n|> group(columns: [\"host\"])\n|> set(key: \"_field\", value: \"Total\")",
              "refId": "B"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Segment  Write Bytes/Second",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "bytes",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "fill": 1,
          "gridPos": {
            "h": 6,
            "w": 12,
            "x": 12,
            "y": 5
          },
          "id": 16,
          "legend": {
            "alignAsTable": false,
            "avg": false,
            "current": false,
            "hideEmpty": false,
            "hideZero": false,
            "max": false,
            "min": false,
            "rightSide": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "connected",
          "options": {},
          "percentage": false,
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [
            {}
          ],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "from(bucket: \"monitoring_op\")\n|> filter(fn: (r) => r._measurement == \"pravega_segmentstore_segment_read_bytes\" and r.host =~ /$host/)\n|> range($range)\n|> keep(columns: [\"_time\", \"_value\", \"host\"])\n|> window(every: 10s)\n|> sum()\n|> rename(columns: {_stop: \"_time\"})\n|> map(fn: (r) => ({ _value: r._value /10.0}))\n|> group(columns:[\"host\"])\n\n\n\n",
              "refId": "A",
              "resultFormat": "time_series"
            },
            {
              "query": "from(bucket: \"monitoring_op\")\n|> filter(fn: (r) => r._measurement == \"pravega_segmentstore_segment_read_bytes\" and r.host =~ /$host/)\n|> range($range)\n|> keep(columns: [\"_time\", \"_value\"])\n|> window(every: 10s)\n|> sum()\n|> rename(columns: {_stop: \"_time\"})\n|> map(fn: (r) => ({ _value: r._value /10.0}))\n|> group(columns: [\"host\"])\n|> set(key: \"_field\", value: \"Total\")",
              "refId": "B"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Segment Read Bytes/Second",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "bytes",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "fill": 1,
          "gridPos": {
            "h": 6,
            "w": 12,
            "x": 0,
            "y": 11
          },
          "id": 30,
          "legend": {
            "alignAsTable": false,
            "avg": false,
            "current": false,
            "hideEmpty": false,
            "hideZero": false,
            "max": false,
            "min": false,
            "rightSide": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "connected",
          "options": {},
          "percentage": false,
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [
            {}
          ],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "from(bucket: \"monitoring_op\")\n|> filter(fn: (r) => r._measurement == \"pravega_segmentstore_storage_write_bytes\" and r.host =~ /$host/)\n|> range($range)\n|> keep(columns: [\"_time\", \"_value\", \"host\"])\n|> window(every: 10s)\n|> sum()\n|> rename(columns: {_stop: \"_time\"})\n|> map(fn: (r) => ({ _value: r._value /10.0}))\n|> group(columns: [\"host\"])\n\n\n\n\n\n",
              "refId": "A",
              "resultFormat": "time_series"
            },
            {
              "query": "from(bucket: \"monitoring_op\")\n|> filter(fn: (r) => r._measurement == \"pravega_segmentstore_storage_write_bytes\" and r.host =~ /$host/)\n|> range($range)\n|> keep(columns: [\"_time\", \"_value\"])\n|> window(every: 10s)\n|> sum()\n|> rename(columns: {_stop: \"_time\"})\n|> map(fn: (r) => ({ _value: r._value /10.0}))\n|> group(columns: [\"host\"])\n|> set(key: \"_field\", value: \"Total\")",
              "refId": "C"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Storage Write Bytes/Second",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "bytes",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "fill": 1,
          "gridPos": {
            "h": 6,
            "w": 12,
            "x": 12,
            "y": 11
          },
          "id": 32,
          "legend": {
            "alignAsTable": false,
            "avg": false,
            "current": false,
            "hideEmpty": false,
            "hideZero": false,
            "max": false,
            "min": false,
            "rightSide": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "connected",
          "options": {},
          "percentage": false,
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [
            {}
          ],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "from(bucket: \"monitoring_op\")\n|> filter(fn: (r) => r._measurement == \"pravega_segmentstore_storage_read_bytes\" and r.host =~ /$host/)\n|> range($range)\n|> keep(columns: [\"_time\", \"_value\", \"host\"])\n|> window(every: 10s)\n|> sum()\n|> rename(columns: {_stop: \"_time\"})\n|> map(fn: (r) => ({ _value: r._value /10.0}))\n|> group(columns:[\"host\"])\n\n\n\n\n\n",
              "refId": "A",
              "resultFormat": "time_series"
            },
            {
              "query": "from(bucket: \"monitoring_op\")\n|> filter(fn: (r) => r._measurement == \"pravega_segmentstore_storage_read_bytes\" and r.host =~ /$host/)\n|> range($range)\n|> keep(columns: [\"_time\", \"_value\"])\n|> window(every: 10s)\n|> sum()\n|> rename(columns: {_stop: \"_time\"})\n|> map(fn: (r) => ({ _value: r._value /10.0}))\n|> group(columns: [\"host\"])\n|> set(key: \"_field\", value: \"Total\")",
              "refId": "B"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Storage Read Bytes/Second",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "bytes",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "fill": 1,
          "gridPos": {
            "h": 7,
            "w": 8,
            "x": 0,
            "y": 17
          },
          "id": 34,
          "legend": {
            "alignAsTable": false,
            "avg": false,
            "current": false,
            "hideEmpty": false,
            "hideZero": false,
            "max": false,
            "min": false,
            "rightSide": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "connected",
          "options": {},
          "percentage": false,
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [
            {}
          ],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "from(bucket: \"monitoring_op\")\n|> filter(fn: (r) => r._measurement == \"pravega_segmentstore_storage_slts_write_bytes\" and r.host =~ /$host/)\n|> range($range)\n|> keep(columns: [\"_time\", \"_value\", \"host\"])\n|> window(every: 10s)\n|> sum()\n|> rename(columns: {_stop: \"_time\"})\n|> map(fn: (r) => ({ _value: r._value /10.0}))\n|> group(columns: [\"host\"])\n\n\n\n\n\n",
              "refId": "A",
              "resultFormat": "time_series"
            },
            {
              "query": "from(bucket: \"monitoring_op\")\n|> filter(fn: (r) => r._measurement == \"pravega_segmentstore_storage_slts_write_bytes\" and r.host =~ /$host/)\n|> range($range)\n|> keep(columns: [\"_time\", \"_value\"])\n|> window(every: 10s)\n|> sum()\n|> rename(columns: {_stop: \"_time\"})\n|> map(fn: (r) => ({ _value: r._value /10.0}))\n|> group(columns: [\"host\"])\n|> set(key: \"_field\", value: \"Total\")",
              "refId": "B"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "SLTS Write Bytes/Second",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "bytes",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "fill": 1,
          "gridPos": {
            "h": 7,
            "w": 8,
            "x": 8,
            "y": 17
          },
          "id": 36,
          "legend": {
            "alignAsTable": false,
            "avg": false,
            "current": false,
            "hideEmpty": false,
            "hideZero": false,
            "max": false,
            "min": false,
            "rightSide": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "connected",
          "options": {},
          "percentage": false,
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [
            {}
          ],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "from(bucket: \"monitoring_op\")\n|> filter(fn: (r) => r._measurement == \"pravega_segmentstore_storage_slts_read_bytes\" and r.host =~ /$host/)\n|> range($range)\n|> keep(columns: [\"_time\", \"_value\", \"host\"])\n|> window(every: 10s)\n|> sum()\n|> map(fn: (r) => ({ _value: r._value /10.0}))\n|> rename(columns: {_stop: \"_time\"})\n|> group(columns: [\"host\"])\n\n\n\n\n\n",
              "refId": "A",
              "resultFormat": "time_series"
            },
            {
              "query": "from(bucket: \"monitoring_op\")\n|> filter(fn: (r) => r._measurement == \"pravega_segmentstore_storage_slts_read_bytes\" and r.host =~ /$host/)\n|> range($range)\n|> keep(columns: [\"_time\", \"_value\"])\n|> window(every: 10s)\n|> sum()\n|> rename(columns: {_stop: \"_time\"})\n|> map(fn: (r) => ({ _value: r._value /10.0}))\n|> group(columns: [\"host\"])\n|> set(key: \"_field\", value: \"Total\")",
              "refId": "B"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "SLTS Read Bytes/Second",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "bytes",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "fill": 1,
          "gridPos": {
            "h": 7,
            "w": 8,
            "x": 16,
            "y": 17
          },
          "id": 38,
          "legend": {
            "alignAsTable": false,
            "avg": false,
            "current": false,
            "hideEmpty": false,
            "hideZero": false,
            "max": false,
            "min": false,
            "rightSide": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "connected",
          "options": {},
          "percentage": false,
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [
            {}
          ],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "from(bucket: \"monitoring_op\")\n|> filter(fn: (r) => r._measurement == \"pravega_segmentstore_storage_slts_concat_bytes\" and r.host =~ /$host/)\n|> range($range)\n|> keep(columns: [\"_time\", \"_value\", \"host\"])\n|> window(every: 10s)\n|> sum()\n|> map(fn: (r) => ({ _value: r._value /10.0}))\n|> rename(columns: {_stop: \"_time\"})\n|> group(columns: [\"host\"])\n\n\n\n\n\n",
              "refId": "A",
              "resultFormat": "time_series"
            },
            {
              "query": "from(bucket: \"monitoring_op\")\n|> filter(fn: (r) => r._measurement == \"pravega_segmentstore_storage_slts_concat_bytes\" and r.host =~ /$host/)\n|> range($range)\n|> keep(columns: [\"_time\", \"_value\"])\n|> window(every: 10s)\n|> sum()\n|> rename(columns: {_stop: \"_time\"})\n|> map(fn: (r) => ({ _value: r._value /10.0}))\n|> group(columns: [\"host\"])\n|> set(key: \"_field\", value: \"Total\")",
              "refId": "B"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "SLTS Concat Bytes/Second",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "bytes",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "collapsed": false,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 24
          },
          "id": 100,
          "panels": [],
          "title": "Segmentstore - Segment Latencies",
          "type": "row"
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "fill": 1,
          "gridPos": {
            "h": 6,
            "w": 12,
            "x": 0,
            "y": 25
          },
          "id": 22,
          "legend": {
            "alignAsTable": false,
            "avg": false,
            "current": false,
            "hideEmpty": false,
            "hideZero": false,
            "max": false,
            "min": false,
            "rightSide": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "connected",
          "options": {},
          "percentage": false,
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "from(bucket: \"monitoring_op\")\n|> filter(fn: (r) => r._measurement == \"pravega_segmentstore_segment_write_latency_ms_percentile\" and r.host =~ /$host/)\n|> range($range)\n|> keep(columns: [\"_time\", \"_value\", \"phi\"])\n|> window(every: 1m)\n|> max()\n|> group(columns: [\"phi\"])\n\n\n\n\n\n",
              "refId": "A",
              "resultFormat": "time_series"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Segment Write Latency",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "ms",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "fill": 1,
          "gridPos": {
            "h": 6,
            "w": 12,
            "x": 12,
            "y": 25
          },
          "id": 24,
          "legend": {
            "alignAsTable": false,
            "avg": false,
            "current": false,
            "hideEmpty": false,
            "hideZero": false,
            "max": false,
            "min": false,
            "rightSide": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "connected",
          "options": {},
          "percentage": false,
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "from(bucket: \"monitoring_op\")\n|> filter(fn: (r) => r._measurement == \"pravega_segmentstore_segment_read_latency_ms_percentile\" and r.host =~ /$host/)\n|> range($range)\n|> keep(columns: [\"_time\", \"_value\", \"phi\"])\n|> window(every: 1m)\n|> max()\n|> group(columns: [\"phi\"])\n\n\n\n\n\n",
              "refId": "A",
              "resultFormat": "time_series"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Segment Read Latency",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "ms",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "fill": 1,
          "gridPos": {
            "h": 6,
            "w": 12,
            "x": 0,
            "y": 31
          },
          "id": 40,
          "legend": {
            "alignAsTable": false,
            "avg": false,
            "current": false,
            "hideEmpty": false,
            "hideZero": false,
            "max": false,
            "min": false,
            "rightSide": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "connected",
          "options": {},
          "percentage": false,
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "from(bucket: \"monitoring_op\")\n|> filter(fn: (r) => r._measurement == \"pravega_segmentstore_segment_create_latency_ms_percentile\" and r.host =~ /$host/)\n|> range($range)\n|> keep(columns: [\"_time\", \"_value\", \"phi\"])\n|> window(every: 1m)\n|> max()\n|> group(columns: [\"phi\"])\n\n\n\n\n\n",
              "refId": "A",
              "resultFormat": "time_series"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Segment Create Latency",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "ms",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "fill": 1,
          "gridPos": {
            "h": 6,
            "w": 12,
            "x": 12,
            "y": 31
          },
          "id": 42,
          "legend": {
            "alignAsTable": false,
            "avg": false,
            "current": false,
            "hideEmpty": false,
            "hideZero": false,
            "max": false,
            "min": false,
            "rightSide": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "connected",
          "options": {},
          "percentage": false,
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "from(bucket: \"monitoring_op\")\n|> filter(fn: (r) => r._measurement == \"pravega_segmentstore_segment_delete_latency_ms_percentile\" and r.host =~ /$host/)\n|> range($range)\n|> keep(columns: [\"_time\", \"_value\", \"phi\"])\n|> window(every: 1m)\n|> max()\n|> group(columns: [\"phi\"])\n\n\n\n\n\n",
              "refId": "A",
              "resultFormat": "time_series"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Segment Delete Latency",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "ms",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "collapsed": false,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 37
          },
          "id": 98,
          "panels": [],
          "title": "Segmentstore - Storage Latencies",
          "type": "row"
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "fill": 1,
          "gridPos": {
            "h": 6,
            "w": 12,
            "x": 0,
            "y": 38
          },
          "id": 26,
          "legend": {
            "alignAsTable": false,
            "avg": false,
            "current": false,
            "hideEmpty": false,
            "hideZero": false,
            "max": false,
            "min": false,
            "rightSide": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "connected",
          "options": {},
          "percentage": false,
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "from(bucket: \"monitoring_op\")\n|> filter(fn: (r) => r._measurement == \"pravega_segmentstore_segment_write_latency_ms_percentile\" and r.host =~ /$host/)\n|> range($range)\n|> keep(columns: [\"_time\", \"_value\", \"phi\"])\n|> window(every: 1m)\n|> max()\n|> group(columns: [\"phi\"])\n\n\n\n\n\n",
              "refId": "A",
              "resultFormat": "time_series"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Storage Write Latency",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "ms",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "fill": 1,
          "gridPos": {
            "h": 6,
            "w": 12,
            "x": 12,
            "y": 38
          },
          "id": 28,
          "legend": {
            "alignAsTable": false,
            "avg": false,
            "current": false,
            "hideEmpty": false,
            "hideZero": false,
            "max": false,
            "min": false,
            "rightSide": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "connected",
          "options": {},
          "percentage": false,
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "from(bucket: \"monitoring_op\")\n|> filter(fn: (r) => r._measurement == \"pravega_segmentstore_segment_read_latency_ms_percentile\" and r.host =~ /$host/)\n|> range($range)\n|> keep(columns: [\"_time\", \"_value\", \"phi\"])\n|> window(every: 1m)\n|> max()\n|> group(columns: [\"phi\"])\n\n\n\n\n\n",
              "refId": "A",
              "resultFormat": "time_series"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Storage Read Latency",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "ms",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "fill": 1,
          "gridPos": {
            "h": 6,
            "w": 12,
            "x": 0,
            "y": 44
          },
          "id": 48,
          "legend": {
            "alignAsTable": false,
            "avg": false,
            "current": false,
            "hideEmpty": false,
            "hideZero": false,
            "max": false,
            "min": false,
            "rightSide": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "connected",
          "options": {},
          "percentage": false,
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "from(bucket: \"monitoring_op\")\n|> filter(fn: (r) => r._measurement == \"pravega_segmentstore_storage_slts_write_latency_ms_percentile\" and r.host =~ /$host/)\n|> range($range)\n|> keep(columns: [\"_time\", \"_value\", \"phi\"])\n|> window(every: 1m)\n|> max()\n|> group(columns: [\"phi\"])\n\n\n\n\n\n",
              "refId": "A",
              "resultFormat": "time_series"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "SLTS Write Latency",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "ms",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "fill": 1,
          "gridPos": {
            "h": 6,
            "w": 12,
            "x": 12,
            "y": 44
          },
          "id": 50,
          "legend": {
            "alignAsTable": false,
            "avg": false,
            "current": false,
            "hideEmpty": false,
            "hideZero": false,
            "max": false,
            "min": false,
            "rightSide": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "connected",
          "options": {},
          "percentage": false,
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "from(bucket: \"monitoring_op\")\n|> filter(fn: (r) => r._measurement == \"pravega_segmentstore_storage_slts_read_latency_ms_percentile\" and r.host =~ /$host/)\n|> range($range)\n|> keep(columns: [\"_time\", \"_value\", \"phi\"])\n|> window(every: 1m)\n|> max()\n|> group(columns: [\"phi\"])\n\n\n\n\n\n",
              "refId": "A",
              "resultFormat": "time_series"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "SLTS Read Latency",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "ms",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "fill": 1,
          "gridPos": {
            "h": 6,
            "w": 12,
            "x": 0,
            "y": 50
          },
          "id": 52,
          "legend": {
            "alignAsTable": false,
            "avg": false,
            "current": false,
            "hideEmpty": false,
            "hideZero": false,
            "max": false,
            "min": false,
            "rightSide": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "connected",
          "options": {},
          "percentage": false,
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "from(bucket: \"monitoring_op\")\n|> filter(fn: (r) => r._measurement == \"pravega_segmentstore_storage_slts_create_latency_ms_percentile\" and r.host =~ /$host/)\n|> range($range)\n|> keep(columns: [\"_time\", \"_value\", \"phi\"])\n|> window(every: 1m)\n|> max()\n|> group(columns: [\"phi\"])\n\n\n\n\n\n",
              "refId": "A",
              "resultFormat": "time_series"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "SLTS Create Latency",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "ms",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "fill": 1,
          "gridPos": {
            "h": 6,
            "w": 12,
            "x": 12,
            "y": 50
          },
          "id": 54,
          "legend": {
            "alignAsTable": false,
            "avg": false,
            "current": false,
            "hideEmpty": false,
            "hideZero": false,
            "max": false,
            "min": false,
            "rightSide": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "connected",
          "options": {},
          "percentage": false,
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "from(bucket: \"monitoring_op\")\n|> filter(fn: (r) => r._measurement == \"pravega_segmentstore_storage_slts_delete_latency_ms_percentile\" and r.host =~ /$host/)\n|> range($range)\n|> keep(columns: [\"_time\", \"_value\", \"phi\"])\n|> window(every: 1m)\n|> max()\n|> group(columns: [\"phi\"])\n\n\n\n\n\n",
              "refId": "A",
              "resultFormat": "time_series"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "SLTS Delete Latency",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "ms",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "fill": 1,
          "gridPos": {
            "h": 6,
            "w": 8,
            "x": 0,
            "y": 56
          },
          "id": 56,
          "legend": {
            "alignAsTable": false,
            "avg": false,
            "current": false,
            "hideEmpty": false,
            "hideZero": false,
            "max": false,
            "min": false,
            "rightSide": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "connected",
          "options": {},
          "percentage": false,
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "from(bucket: \"monitoring_op\")\n|> filter(fn: (r) => r._measurement == \"pravega_segmentstore_storage_slts_concat_latency_ms_percentile\" and r.host =~ /$host/)\n|> range($range)\n|> keep(columns: [\"_time\", \"_value\", \"phi\"])\n|> window(every: 1m)\n|> max()\n|> group(columns: [\"phi\"])\n\n\n\n\n\n",
              "refId": "A",
              "resultFormat": "time_series"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "SLTS Concat Latency",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "ms",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "fill": 1,
          "gridPos": {
            "h": 6,
            "w": 8,
            "x": 8,
            "y": 56
          },
          "id": 58,
          "legend": {
            "alignAsTable": false,
            "avg": false,
            "current": false,
            "hideEmpty": false,
            "hideZero": false,
            "max": false,
            "min": false,
            "rightSide": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "connected",
          "options": {},
          "percentage": false,
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "from(bucket: \"monitoring_op\")\n|> filter(fn: (r) => r._measurement == \"pravega_segmentstore_storage_slts_truncate_latency_ms_percentile\" and r.host =~ /$host/)\n|> range($range)\n|> keep(columns: [\"_time\", \"_value\", \"phi\"])\n|> window(every: 1m)\n|> max()\n|> group(columns: [\"phi\"])\n\n\n\n\n\n",
              "refId": "A",
              "resultFormat": "time_series"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "SLTS Truncate Latency",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "ms",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "fill": 1,
          "gridPos": {
            "h": 6,
            "w": 8,
            "x": 16,
            "y": 56
          },
          "id": 60,
          "legend": {
            "alignAsTable": false,
            "avg": false,
            "current": false,
            "hideEmpty": false,
            "hideZero": false,
            "max": false,
            "min": false,
            "rightSide": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "connected",
          "options": {},
          "percentage": false,
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "from(bucket: \"monitoring_op\")\n|> filter(fn: (r) => r._measurement == \"pravega_segmentstore_storage_slts_read_index_scan_latency_ms_percentile\" and r.host =~ /$host/)\n|> range($range)\n|> keep(columns: [\"_time\", \"_value\", \"phi\"])\n|> window(every: 1m)\n|> max()\n|> group(columns: [\"phi\"])\n\n\n\n\n\n",
              "refId": "A",
              "resultFormat": "time_series"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "SLTS Read Index Scan Latency",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "ms",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "fill": 1,
          "gridPos": {
            "h": 6,
            "w": 12,
            "x": 0,
            "y": 62
          },
          "id": 62,
          "legend": {
            "alignAsTable": false,
            "avg": false,
            "current": false,
            "hideEmpty": false,
            "hideZero": false,
            "max": false,
            "min": false,
            "rightSide": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "connected",
          "options": {},
          "percentage": false,
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [
            {}
          ],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "from(bucket: \"monitoring_op\")\n|> filter(fn: (r) => r._measurement == \"pravega_segmentstore_storage_metadata_commit_latency_ms_percentile\" and r.host =~ /$host/)\n|> range($range)\n|> keep(columns: [\"_time\", \"_value\",\"phi\"])\n|> window(every: 1m)\n|> max()\n|> group(columns:[\"phi\"])\n\n\n\n\n\n",
              "refId": "A",
              "resultFormat": "time_series"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "SLTS Metadata Commit Latency",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "ms",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "fill": 1,
          "gridPos": {
            "h": 6,
            "w": 12,
            "x": 12,
            "y": 62
          },
          "id": 64,
          "legend": {
            "alignAsTable": false,
            "avg": false,
            "current": false,
            "hideEmpty": false,
            "hideZero": false,
            "max": false,
            "min": false,
            "rightSide": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "connected",
          "options": {},
          "percentage": false,
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [
            {}
          ],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "from(bucket: \"monitoring_op\")\n|> filter(fn: (r) => r._measurement == \"pravega_segmentstore_storage_metadata_get_latency_ms_percentile\" and r.host =~ /$host/)\n|> range($range)\n|> keep(columns: [\"_time\", \"_value\",\"phi\"])\n|> window(every: 1m)\n|> max()\n|> group(columns:[\"phi\"])\n\n\n\n\n\n",
              "refId": "A",
              "resultFormat": "time_series"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "SLTS Metadata Get Latency",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "ms",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "fill": 1,
          "gridPos": {
            "h": 6,
            "w": 12,
            "x": 0,
            "y": 68
          },
          "id": 66,
          "legend": {
            "alignAsTable": false,
            "avg": false,
            "current": false,
            "hideEmpty": false,
            "hideZero": false,
            "max": false,
            "min": false,
            "rightSide": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "connected",
          "options": {},
          "percentage": false,
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [
            {}
          ],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "from(bucket: \"monitoring_op\")\n|> filter(fn: (r) => r._measurement == \"pravega_segmentstore_storage_metadata_table_write_latency_ms_percentile\" and r.host =~ /$host/)\n|> range($range)\n|> keep(columns: [\"_time\", \"_value\",\"phi\"])\n|> window(every: 1m)\n|> max()\n|> group(columns:[\"phi\"])\n\n\n\n\n\n",
              "refId": "A",
              "resultFormat": "time_series"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "SLTS Metadata Table Write Latency",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "ms",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "fill": 1,
          "gridPos": {
            "h": 6,
            "w": 12,
            "x": 12,
            "y": 68
          },
          "id": 68,
          "legend": {
            "alignAsTable": false,
            "avg": false,
            "current": false,
            "hideEmpty": false,
            "hideZero": false,
            "max": false,
            "min": false,
            "rightSide": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "connected",
          "options": {},
          "percentage": false,
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [
            {}
          ],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "from(bucket: \"monitoring_op\")\n|> filter(fn: (r) => r._measurement == \"pravega_segmentstore_storage_metadata_table_get_latency_ms_percentile\" and r.host =~ /$host/)\n|> range($range)\n|> keep(columns: [\"_time\", \"_value\",\"phi\"])\n|> window(every: 1m)\n|> max()\n|> group(columns:[\"phi\"])\n\n\n\n\n\n",
              "refId": "A",
              "resultFormat": "time_series"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "SLTS Metadata Table Get Latency",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "ms",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "collapsed": false,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 74
          },
          "id": 96,
          "panels": [],
          "title": "Segmentstore - Container Latencies",
          "type": "row"
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "fill": 1,
          "gridPos": {
            "h": 6,
            "w": 12,
            "x": 0,
            "y": 75
          },
          "id": 70,
          "legend": {
            "alignAsTable": false,
            "avg": false,
            "current": false,
            "hideEmpty": false,
            "hideZero": false,
            "max": false,
            "min": false,
            "rightSide": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "connected",
          "options": {},
          "percentage": false,
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [
            {}
          ],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "from(bucket: \"monitoring_op\")\n|> filter(fn: (r) => r._measurement == \"pravega_segmentstore_container_operation_processor_in_flight_percentile\" and r.host =~ /$host/)\n|> range($range)\n|> keep(columns: [\"_time\", \"_value\",\"phi\"])\n|> window(every: 1m)\n|> max()\n|> group(columns:[\"phi\"])\n\n\n\n\n\n",
              "refId": "A",
              "resultFormat": "time_series"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Container Processors In Flight Distribution",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "ms",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "fill": 1,
          "gridPos": {
            "h": 6,
            "w": 12,
            "x": 12,
            "y": 75
          },
          "id": 72,
          "legend": {
            "alignAsTable": false,
            "avg": false,
            "current": false,
            "hideEmpty": false,
            "hideZero": false,
            "max": false,
            "min": false,
            "rightSide": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "connected",
          "options": {},
          "percentage": false,
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [
            {}
          ],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "from(bucket: \"monitoring_op\")\n|> filter(fn: (r) => r._measurement == \"pravega_segmentstore_container_operation_queue_size_percentile\" and r.host =~ /$host/)\n|> range($range)\n|> keep(columns: [\"_time\", \"_value\",\"phi\"])\n|> window(every: 1m)\n|> max()\n|> group(columns:[\"phi\"])\n\n\n\n\n\n",
              "refId": "A",
              "resultFormat": "time_series"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Container Operation Queue Size Distribution",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "ms",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "fill": 1,
          "gridPos": {
            "h": 6,
            "w": 12,
            "x": 0,
            "y": 81
          },
          "id": 74,
          "legend": {
            "alignAsTable": false,
            "avg": false,
            "current": false,
            "hideEmpty": false,
            "hideZero": false,
            "max": false,
            "min": false,
            "rightSide": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "connected",
          "options": {},
          "percentage": false,
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [
            {}
          ],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "from(bucket: \"monitoring_op\")\n|> filter(fn: (r) => r._measurement == \"pravega_segmentstore_container_process_operations_batch_size_percentile\" and r.host =~ /$host/)\n|> range($range)\n|> keep(columns: [\"_time\", \"_value\",\"phi\"])\n|> window(every: 1m)\n|> max()\n|> group(columns:[\"phi\"])\n\n\n\n\n\n",
              "refId": "A",
              "resultFormat": "time_series"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Container Batch Size  Distribution",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "ms",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "fill": 1,
          "gridPos": {
            "h": 6,
            "w": 12,
            "x": 12,
            "y": 81
          },
          "id": 76,
          "legend": {
            "alignAsTable": false,
            "avg": false,
            "current": false,
            "hideEmpty": false,
            "hideZero": false,
            "max": false,
            "min": false,
            "rightSide": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "connected",
          "options": {},
          "percentage": false,
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [
            {}
          ],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "from(bucket: \"monitoring_op\")\n|> filter(fn: (r) => r._measurement == \"pravega_segmentstore_container_operation_commit_memory_count_percentile\" and r.host =~ /$host/)\n|> range($range)\n|> keep(columns: [\"_time\", \"_value\",\"phi\"])\n|> window(every: 1m)\n|> max()\n|> group(columns:[\"phi\"])\n\n\n\n\n\n",
              "refId": "A",
              "resultFormat": "time_series"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Container Operation Commit Count Distribution",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "ms",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "fill": 1,
          "gridPos": {
            "h": 6,
            "w": 12,
            "x": 0,
            "y": 87
          },
          "id": 20,
          "legend": {
            "alignAsTable": false,
            "avg": false,
            "current": false,
            "hideEmpty": false,
            "hideZero": false,
            "max": false,
            "min": false,
            "rightSide": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "connected",
          "options": {},
          "percentage": false,
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "from(bucket: \"monitoring_op\")\n|> filter(fn: (r) => r._measurement == \"pravega_segmentstore_container_operation_processor_delay_ms\" and r.host =~ /$host/)\n|> range($range)\n|> keep(columns: [\"_time\", \"_value\", \"throttler\"])\n|> window(every: 10s)\n|> max()\n|> group(columns: [\"host\",\"throttler\"])\n\n\n\n\n\n",
              "refId": "A",
              "resultFormat": "time_series"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Container Operation Processor Delay Latency",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "ms",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "fill": 1,
          "gridPos": {
            "h": 6,
            "w": 12,
            "x": 12,
            "y": 87
          },
          "id": 78,
          "legend": {
            "alignAsTable": false,
            "avg": false,
            "current": false,
            "hideEmpty": false,
            "hideZero": false,
            "max": false,
            "min": false,
            "rightSide": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "connected",
          "options": {},
          "percentage": false,
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [
            {}
          ],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "from(bucket: \"monitoring_op\")\n|> filter(fn: (r) => r._measurement == \"pravega_segmentstore_container_operation_queue_wait_time_percentile\" and r.host =~ /$host/)\n|> range($range)\n|> keep(columns: [\"_time\", \"_value\",\"phi\"])\n|> window(every: 1m)\n|> max()\n|> group(columns:[\"phi\"])\n\n\n\n\n\n",
              "refId": "A",
              "resultFormat": "time_series"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Container Queue Wait Time Latency",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "ms",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "fill": 1,
          "gridPos": {
            "h": 6,
            "w": 8,
            "x": 0,
            "y": 93
          },
          "id": 80,
          "legend": {
            "alignAsTable": false,
            "avg": false,
            "current": false,
            "hideEmpty": false,
            "hideZero": false,
            "max": false,
            "min": false,
            "rightSide": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "connected",
          "options": {},
          "percentage": false,
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "from(bucket: \"monitoring_op\")\n|> filter(fn: (r) => r._measurement == \"pravega_segmentstore_container_operation_commit_latency_ms_percentile\" and r.host =~ /$host/)\n|> range($range)\n|> keep(columns: [\"_time\", \"_value\", \"phi\"])\n|> window(every: 1m)\n|> max()\n|> group(columns: [\"phi\"])\n\n\n\n\n\n",
              "refId": "A",
              "resultFormat": "time_series"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Container Operation Commit Latency",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "ms",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "fill": 1,
          "gridPos": {
            "h": 6,
            "w": 8,
            "x": 8,
            "y": 93
          },
          "id": 82,
          "legend": {
            "alignAsTable": false,
            "avg": false,
            "current": false,
            "hideEmpty": false,
            "hideZero": false,
            "max": false,
            "min": false,
            "rightSide": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "connected",
          "options": {},
          "percentage": false,
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "from(bucket: \"monitoring_op\")\n|> filter(fn: (r) => r._measurement == \"pravega_segmentstore_container_operation_commit_memory_latency_ms_percentile\" and r.host =~ /$host/)\n|> range($range)\n|> keep(columns: [\"_time\", \"_value\", \"phi\"])\n|> window(every: 1m)\n|> max()\n|> group(columns: [\"phi\"])\n\n\n\n\n\n",
              "refId": "A",
              "resultFormat": "time_series"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Container Operation Commit Memory Latency",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "ms",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "fill": 1,
          "gridPos": {
            "h": 6,
            "w": 8,
            "x": 16,
            "y": 93
          },
          "id": 84,
          "legend": {
            "alignAsTable": false,
            "avg": false,
            "current": false,
            "hideEmpty": false,
            "hideZero": false,
            "max": false,
            "min": false,
            "rightSide": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "connected",
          "options": {},
          "percentage": false,
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "from(bucket: \"monitoring_op\")\n|> filter(fn: (r) => r._measurement == \"pravega_segmentstore_container_operation_latency_ms_percentile\" and r.host =~ /$host/)\n|> range($range)\n|> keep(columns: [\"_time\", \"_value\", \"phi\"])\n|> window(every: 1m)\n|> max()\n|> group(columns: [\"phi\"])\n\n\n\n\n\n",
              "refId": "A",
              "resultFormat": "time_series"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Container Operation Latency",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "ms",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "collapsed": false,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 99
          },
          "id": 4,
          "panels": [],
          "title": "Segmentstore -Bookkeeper",
          "type": "row"
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "fill": 1,
          "gridPos": {
            "h": 6,
            "w": 12,
            "x": 0,
            "y": 100
          },
          "id": 94,
          "legend": {
            "alignAsTable": false,
            "avg": false,
            "current": false,
            "hideEmpty": false,
            "hideZero": false,
            "max": false,
            "min": false,
            "rightSide": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "connected",
          "options": {},
          "percentage": false,
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [
            {}
          ],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "from(bucket: \"monitoring_op\")\n|> filter(fn: (r) => r._measurement == \"pravega_segmentstore_bookkeeper_write_bytes\" and r.host =~ /$host/)\n|> range($range)\n|> keep(columns: [\"_time\", \"_value\", \"host\"])\n|> window(every: 10s)\n|> sum()\n|> rename(columns: {_stop: \"_time\"})\n|> map(fn: (r) => ({ _value: r._value /10.0}))\n|> group(columns:[\"host\"])\n\n\n\n\n",
              "refId": "A",
              "resultFormat": "time_series"
            },
            {
              "query": "from(bucket: \"monitoring_op\")\n|> filter(fn: (r) => r._measurement == \"pravega_segmentstore_bookkeeper_write_bytes\" and r.host =~ /$host/)\n|> range($range)\n|> keep(columns: [\"_time\", \"_value\"])\n|> window(every: 10s)\n|> sum()\n|> rename(columns: {_stop: \"_time\"})\n|> map(fn: (r) => ({ _value: r._value /10.0}))\n|> group(columns: [\"host\"])\n|> set(key: \"_field\", value: \"Total\")",
              "refId": "B"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "BK Write Bytes/Second",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "bytes",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "fill": 1,
          "gridPos": {
            "h": 6,
            "w": 12,
            "x": 12,
            "y": 100
          },
          "id": 92,
          "legend": {
            "alignAsTable": false,
            "avg": false,
            "current": false,
            "hideEmpty": false,
            "hideZero": false,
            "max": false,
            "min": false,
            "rightSide": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "connected",
          "options": {},
          "percentage": false,
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [
            {}
          ],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "from(bucket: \"monitoring_op\")\n|> filter(fn: (r) => r._measurement == \"pravega_segmentstore_bookkeeper_ledger_count\" and r.host =~ /$host/)\n|> range($range)\n|> keep(columns: [\"_time\", \"_value\",\"container\"])\n|> window(every: 1m)\n|> last()\n|> group(columns:[\"container\"])\n\n\n\n\n\n",
              "refId": "A",
              "resultFormat": "time_series"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "BK Ledger Count",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "none",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "fill": 1,
          "gridPos": {
            "h": 6,
            "w": 12,
            "x": 0,
            "y": 106
          },
          "id": 88,
          "legend": {
            "alignAsTable": false,
            "avg": false,
            "current": false,
            "hideEmpty": false,
            "hideZero": false,
            "max": false,
            "min": false,
            "rightSide": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "connected",
          "options": {},
          "percentage": false,
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [
            {}
          ],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "from(bucket: \"monitoring_op\")\n|> filter(fn: (r) => r._measurement == \"pravega_segmentstore_bookkeeper_write_queue_size_percentile\" and r.host =~ /$host/)\n|> range($range)\n|> keep(columns: [\"_time\", \"_value\",\"phi\"])\n|> window(every: 1m)\n|> max()\n|> group(columns:[\"phi\"])\n\n\n\n\n\n",
              "refId": "A",
              "resultFormat": "time_series"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "BK Write Queue Size Distribution",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "ms",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "fill": 1,
          "gridPos": {
            "h": 6,
            "w": 12,
            "x": 12,
            "y": 106
          },
          "id": 90,
          "legend": {
            "alignAsTable": false,
            "avg": false,
            "current": false,
            "hideEmpty": false,
            "hideZero": false,
            "max": false,
            "min": false,
            "rightSide": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "connected",
          "options": {},
          "percentage": false,
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [
            {}
          ],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "from(bucket: \"monitoring_op\")\n|> filter(fn: (r) => r._measurement == \"pravega_segmentstore_bookkeeper_write_queue_fill_percentile\" and r.host =~ /$host/)\n|> range($range)\n|> keep(columns: [\"_time\", \"_value\",\"phi\"])\n|> window(every: 1m)\n|> max()\n|> group(columns:[\"phi\"])\n\n\n\n\n\n",
              "refId": "A",
              "resultFormat": "time_series"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "BK Write Queue Fill Rate Distribution",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "ms",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "fill": 1,
          "gridPos": {
            "h": 6,
            "w": 12,
            "x": 0,
            "y": 112
          },
          "id": 18,
          "legend": {
            "alignAsTable": false,
            "avg": false,
            "current": false,
            "hideEmpty": false,
            "hideZero": false,
            "max": false,
            "min": false,
            "rightSide": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "connected",
          "options": {},
          "percentage": false,
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [
            {}
          ],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "from(bucket: \"monitoring_op\")\n|> filter(fn: (r) => r._measurement == \"pravega_segmentstore_bookkeeper_write_latency_ms_percentile\" and r.host =~ /$host/)\n|> range($range)\n|> keep(columns: [\"_time\", \"_value\",\"phi\"])\n|> window(every: 1m)\n|> max()\n|> group(columns:[\"phi\"])\n\n\n\n\n\n",
              "refId": "A",
              "resultFormat": "time_series"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "BK Write Exclusive Latency",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "ms",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "fill": 1,
          "gridPos": {
            "h": 6,
            "w": 12,
            "x": 12,
            "y": 112
          },
          "id": 86,
          "legend": {
            "alignAsTable": false,
            "avg": false,
            "current": false,
            "hideEmpty": false,
            "hideZero": false,
            "max": false,
            "min": false,
            "rightSide": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "connected",
          "options": {},
          "percentage": false,
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [
            {}
          ],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "from(bucket: \"monitoring_op\")\n|> filter(fn: (r) => r._measurement == \"pravega_segmentstore_bookkeeper_total_write_latency_ms_percentile\" and r.host =~ /$host/)\n|> range($range)\n|> keep(columns: [\"_time\", \"_value\",\"phi\"])\n|> window(every: 1m)\n|> max()\n|> group(columns:[\"phi\"])\n\n\n\n\n\n",
              "refId": "A",
              "resultFormat": "time_series"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "BK Total Write Latency (including Queue)",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "ms",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        }
      ],
      "refresh": false,
      "schemaVersion": 18,
      "style": "dark",
      "tags": [],
      "templating": {
        "list": [
          {
            "allValue": null,
            "current": {},
            "datasource": "${DS_FLUX}",
            "definition": "from(bucket:\"monitoring_op\")     |> range(start: -60m)     |> filter(fn:(r) => r._measurement == \"pravega_segmentstore_segment_write_latency_ms_percentile\" )     |> group(columns:[\"host\"])     |> distinct(column:\"host\")",
            "hide": 0,
            "includeAll": true,
            "label": "host",
            "multi": true,
            "name": "host",
            "options": [],
            "query": "from(bucket:\"monitoring_op\")     |> range(start: -60m)     |> filter(fn:(r) => r._measurement == \"pravega_segmentstore_segment_write_latency_ms_percentile\" )     |> group(columns:[\"host\"])     |> distinct(column:\"host\")",
            "refresh": 1,
            "regex": "",
            "skipUrlSync": false,
            "sort": 1,
            "tagValuesQuery": "",
            "tags": [],
            "tagsQuery": "",
            "type": "query",
            "useTags": false
          },
          {
            "allValue": null,
            "current": {},
            "datasource": "${DS_FLUX}",
            "definition": "from(bucket:\"monitoring_op\")     |> range(start: -60m)      |> filter(fn:(r) => r._measurement == \"pravega_segmentstore_segment_write_latency_ms_percentile\" )      |> group(columns:[\"host\"])      |> distinct(column:\"host\") |> group() |> count()",
            "hide": 2,
            "includeAll": false,
            "label": null,
            "multi": false,
            "name": "host_number",
            "options": [],
            "query": "from(bucket:\"monitoring_op\")     |> range(start: -60m)      |> filter(fn:(r) => r._measurement == \"pravega_segmentstore_segment_write_latency_ms_percentile\" )      |> group(columns:[\"host\"])      |> distinct(column:\"host\") |> group() |> count()",
            "refresh": 1,
            "regex": "",
            "skipUrlSync": false,
            "sort": 0,
            "tagValuesQuery": "",
            "tags": [],
            "tagsQuery": "",
            "type": "query",
            "useTags": false
          }
        ]
      },
      "time": {
        "from": "now-30m",
        "to": "now"
      },
      "timepicker": {
        "refresh_intervals": [
          "5s",
          "10s",
          "30s",
          "1m",
          "5m",
          "15m",
          "30m",
          "1h",
          "2h",
          "1d"
        ],
        "time_options": [
          "15m",
          "1h",
          "6h",
          "12h",
          "24h",
          "2d",
          "7d",
          "30d"
        ]
      },
      "timezone": "",
      "title": "Pravega Operator Dashboard",
      "uid": "yiCD3iTGz",
      "version": 4
    }
  pravega_stream.json: |-
    {
      "__inputs": [
        {
          "name": "DS_FLUX",
          "label": "Flux",
          "description": "",
          "type": "datasource",
          "pluginId": "grafana-influxdb-flux-datasource",
          "pluginName": "Flux (InfluxDB) [BETA]"
        }
      ],
      "__requires": [
        {
          "type": "grafana",
          "id": "grafana",
          "name": "Grafana",
          "version": "6.2.5ecs"
        },
        {
          "type": "datasource",
          "id": "grafana-influxdb-flux-datasource",
          "name": "Flux (InfluxDB) [BETA]",
          "version": "5.2.12"
        },
        {
          "type": "panel",
          "id": "graph",
          "name": "Graph",
          "version": ""
        }
      ],
      "annotations": {
        "list": [
          {
            "builtIn": 1,
            "datasource": "-- Grafana --",
            "enable": true,
            "hide": true,
            "iconColor": "rgba(0, 211, 255, 1)",
            "name": "Annotations & Alerts",
            "type": "dashboard"
          }
        ]
      },
      "editable": true,
      "gnetId": null,
      "graphTooltip": 0,
      "id": null,
      "iteration": 1610679357149,
      "links": [],
      "panels": [
        {
          "collapsed": false,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 0
          },
          "id": 26,
          "panels": [],
          "title": "Stream Write/Read",
          "type": "row"
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "fill": 1,
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 0,
            "y": 1
          },
          "id": 4,
          "legend": {
            "avg": false,
            "current": false,
            "max": false,
            "min": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "null",
          "options": {},
          "percentage": false,
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "from(bucket: \"monitoring_op\")\n|> filter(fn: (r) => r._measurement == \"pravega_segmentstore_segment_write_bytes\" and r.scope=~/$scope/ and r.stream=~/$stream/)\n|> range($range)\n|> keep(columns: [\"_time\", \"_value\",\"host\"])\n|> window(every: 1m)\n|> mean()\n|> rename(columns:{_stop:\"_time\"})\n|> group(columns:[\"host\"])\n",
              "refId": "A",
              "resultFormat": "time_series"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Total write bytes/second",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "fill": 1,
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 12,
            "y": 1
          },
          "id": 2,
          "legend": {
            "avg": false,
            "current": false,
            "max": false,
            "min": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "null",
          "options": {},
          "percentage": false,
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "from(bucket: \"monitoring_op\")\n|> filter(fn: (r) => r._measurement == \"pravega_segmentstore_segment_read_bytes\" and r.scope=~/$scope/ and r.stream=~/$stream/)\n|> range($range)\n|> keep(columns: [\"_time\", \"_value\",\"host\"])\n|> window(every: 1m)\n|> mean()\n|> rename(columns:{_stop:\"_time\"})\n|> group(columns:[\"host\"])\n",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Total read bytes/second",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "fill": 1,
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 0,
            "y": 9
          },
          "id": 6,
          "legend": {
            "avg": false,
            "current": false,
            "max": false,
            "min": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "null",
          "options": {},
          "percentage": false,
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "from(bucket: \"monitoring_op\")\n|> filter(fn: (r) => r._measurement == \"pravega_segmentstore_segment_write_events\" and r.scope=~/$scope/ and r.stream=~/$stream/)\n|> range($range)\n|> keep(columns: [\"_time\", \"_value\",\"host\"])\n|> window(every: 1m)\n|> mean()\n|> rename(columns:{_stop:\"_time\"})\n|> group(columns:[\"host\"])\n",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Total write events/second",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "fill": 1,
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 12,
            "y": 9
          },
          "id": 8,
          "legend": {
            "avg": false,
            "current": false,
            "max": false,
            "min": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "null",
          "options": {},
          "percentage": false,
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "from(bucket: \"monitoring_op\")\n|> filter(fn: (r) => r._measurement == \"pravega_segmentstore_segment_read_size\" )\n|> range($range)\n",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Total read events/second",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "collapsed": false,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 17
          },
          "id": 16,
          "panels": [],
          "title": "Controller Stream Operations",
          "type": "row"
        },
        {
          "aliasColors": {},
          "bars": false,
          "cacheTimeout": null,
          "dashLength": 10,
          "dashes": false,
          "fill": 1,
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 0,
            "y": 18
          },
          "id": 20,
          "legend": {
            "avg": false,
            "current": false,
            "max": false,
            "min": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "null",
          "options": {},
          "percentage": false,
          "pointradius": 0.5,
          "points": true,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "from(bucket: \"monitoring_op\")\n|> range($range)\n|> filter(fn: (r) => r._measurement == \"pravega_controller_stream_created\")\n|> window(every: 1m)\n|> sum()\n|> keep(columns: [ \"_start\",\"_stop\",\"_value\",\"host\",\"_field\"])\n|> duplicate(column: \"_stop\", as: \"_time\")\n|> group(columns: [\"host\"])\n|> fill(usePrevious: true)\n\n\n\n\n\n\n",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Stream Created Count",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "fill": 1,
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 12,
            "y": 18
          },
          "id": 10,
          "legend": {
            "avg": false,
            "current": false,
            "max": false,
            "min": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "null",
          "options": {},
          "percentage": false,
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "from(bucket: \"monitoring_op\")\n|> range($range)\n|> filter(fn: (r) => r._measurement == \"pravega_controller_stream_created_latency_ms_percentile\")\n|> keep(columns: [\"_time\", \"_value\",\"phi\"])\n|> window(every: 1m)\n|> max()\n|> group(columns: [\"phi\"])\n\n\n\n\n\n\n",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Stream Created Latency",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "fill": 1,
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 0,
            "y": 26
          },
          "id": 22,
          "legend": {
            "avg": false,
            "current": false,
            "max": false,
            "min": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "null",
          "options": {},
          "percentage": false,
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "from(bucket: \"monitoring_op\")\n|> range($range)\n|> filter(fn: (r) => r._measurement == \"pravega_controller_stream_truncated\")\n|> window(every: 1m)\n|> sum()\n|> keep(columns: [ \"_start\",\"_stop\",\"_value\",\"host\",\"_field\"])\n|> duplicate(column: \"_stop\", as: \"_time\")\n|> group(columns: [\"host\"])\n|> fill(usePrevious: true)\n\n\n\n\n\n\n",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Stream Truncate Count",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "fill": 1,
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 12,
            "y": 26
          },
          "id": 14,
          "legend": {
            "avg": false,
            "current": false,
            "max": false,
            "min": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "null",
          "options": {},
          "percentage": false,
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "from(bucket: \"monitoring_op\")\n|> filter(fn: (r) => r._measurement == \"pravega_controller_stream_truncated_latency_ms_percentile\")\n|> range($range)\n|> keep(columns: [\"_time\", \"_value\", \"phi\"])\n|> window(every: 1m)\n|> max()\n|> group(columns: [\"phi\"])\n\n\n\n\n\n\n",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Stream Truncated Latency",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "fill": 1,
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 0,
            "y": 34
          },
          "id": 24,
          "legend": {
            "avg": false,
            "current": false,
            "max": false,
            "min": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "null",
          "options": {},
          "percentage": false,
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "from(bucket: \"monitoring_op\")\n|> range($range)\n|> filter(fn: (r) => r._measurement == \"pravega_controller_stream_deleted\")\n|> window(every: 1m)\n|> sum()\n|> keep(columns: [ \"_start\",\"_stop\",\"_value\",\"host\",\"_field\"])\n|> duplicate(column: \"_stop\", as: \"_time\")\n|> group(columns: [\"host\"])\n|> fill(usePrevious: true)\n\n\n\n\n\n\n",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Stream Delete Count",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "fill": 1,
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 12,
            "y": 34
          },
          "id": 12,
          "legend": {
            "avg": false,
            "current": false,
            "max": false,
            "min": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "null",
          "options": {},
          "percentage": false,
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "from(bucket: \"monitoring_op\")\n|> filter(fn: (r) => r._measurement == \"pravega_controller_stream_deleted_latency_ms_percentile\")\n|> range($range)\n|> window(every: 1m)\n|> max()\n|> keep(columns: [\"_time\", \"_value\", \"phi\"])\n|> group(columns: [\"phi\"])\n\n\n\n\n\n\n",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Stream Delete Latency",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        }
      ],
      "refresh": false,
      "schemaVersion": 18,
      "style": "dark",
      "tags": [],
      "templating": {
        "list": [
          {
            "allValue": null,
            "current": {},
            "datasource": "${DS_FLUX}",
            "definition": "from(bucket:\"monitoring_op\")  |> range($range)|>filter(fn: (r)=>r._measurement==\"pravega_segmentstore_segment_write_bytes\")|> group(columns:[\"scope\"])   |> distinct(column:\"scope\")",
            "hide": 0,
            "includeAll": false,
            "label": "scope",
            "multi": false,
            "name": "scope",
            "options": [],
            "query": "from(bucket:\"monitoring_op\")  |> range($range)|>filter(fn: (r)=>r._measurement==\"pravega_segmentstore_segment_write_bytes\")|> group(columns:[\"scope\"])   |> distinct(column:\"scope\")",
            "refresh": 1,
            "regex": "",
            "skipUrlSync": false,
            "sort": 1,
            "tagValuesQuery": "",
            "tags": [],
            "tagsQuery": "",
            "type": "query",
            "useTags": false
          },
          {
            "allValue": null,
            "current": {},
            "datasource": "${DS_FLUX}",
            "definition": "from(bucket:\"monitoring_op\")|>filter(fn: (r)=>r._measurement==\"pravega_segmentstore_segment_write_bytes\")|>range($range)|> group(columns:[\"stream\"])|> distinct(column:\"stream\")",
            "hide": 0,
            "includeAll": false,
            "label": "stream",
            "multi": false,
            "name": "stream",
            "options": [],
            "query": "from(bucket:\"monitoring_op\")|>filter(fn: (r)=>r._measurement==\"pravega_segmentstore_segment_write_bytes\")|>range($range)|> group(columns:[\"stream\"])|> distinct(column:\"stream\")",
            "refresh": 2,
            "regex": "",
            "skipUrlSync": false,
            "sort": 1,
            "tagValuesQuery": "",
            "tags": [],
            "tagsQuery": "",
            "type": "query",
            "useTags": false
          }
        ]
      },
      "time": {
        "from": "now-6h",
        "to": "now"
      },
      "timepicker": {
        "refresh_intervals": [
          "15m",
          "30m",
          "1h",
          "2h",
          "1d"
        ],
        "time_options": [
          "15m",
          "1h",
          "6h",
          "12h",
          "24h",
          "2d",
          "7d",
          "30d"
        ]
      },
      "timezone": "",
      "title": "Pravega Stream Dashboard",
      "uid": "ihbEun1Gk",
      "version": 2
    }
---
# Source: ecs-cluster/charts/ecs-monitoring/charts/grafana/templates/grafana-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ecs-cluster-grafana-grafana-ini
  labels:
    app: "ecs-cluster-grafana"
    chart: "grafana-0.54.0"
    release: ecs-cluster
data:
  grafana.ini: |+
    ##################### Grafana Configuration #####################
    # possible values : production, development
    app_mode = production

    # instance name, defaults to HOSTNAME environment variable value or hostname if HOSTNAME var is empty
    instance_name = ${HOSTNAME}

    #################################### Paths ###############################
    [paths]
    # Path to where grafana can store temp files, sessions, and the sqlite3 db (if that is used)
    # we use /data/grafana
    ;data = /var/lib/grafana

    # Temporary files in `data` directory older than given duration will be removed
    temp_data_lifetime = 24h

    # Directory where grafana can store logs
    logs = /var/log/grafana

    # Directory where grafana will automatically scan and look for plugins
    plugins = /plugins

    # folder that contains provisioning config files that grafana will apply on startup and while running.
    ;provisioning = conf/provisioning

    #################################### Server ##############################
    [server]
    # Protocol (http, https, socket)
    ;protocol = http

    # The ip address to bind to, empty will bind to all interfaces
    ;http_addr =

    # The http port to use
    ;http_port = 3000

    # Redirect to correct domain if host header does not match domain
    # Prevents DNS rebinding attacks
    ;enforce_domain = false
    # The public facing domain name used to access grafana from a browser
    domain = localhost

    # The full public facing url
    root_url = http://localhost/grafana/default/ecs-cluster

    # Log web requests
    ## Set to true for Grafana to log all HTTP requests (not just errors). These are logged as Info level events to grafana log.
    router_logging = true

    # the path relative working path
    static_root_path = /grafana/public

    # enable gzip
    ;enable_gzip = false

    # https certs & key file
    ;cert_file =
    ;cert_key =

    # Unix socket path
    ;socket = /tmp/grafana.sock

    #################################### Database ############################
    [database]
    # You can configure the database connection by specifying type, host, name, user and password
    # as separate properties or as on string using the url property.

    # Either "mysql", "postgres" or "sqlite3", it's your choice
    ;type = sqlite3
    ;host = 127.0.0.1:3306
    ;name = grafana
    ;user = root
    # If the password contains # or ; you have to wrap it with triple quotes. Ex """#password;"""
    ;password =
    # Use either URL or the previous fields to configure the database
    # Example: mysql://user:secret@host:port/database
    ;url =

    # Max idle conn setting default is 2
    ;max_idle_conn = 2

    # Max conn setting default is 0 (mean not set)
    ;max_open_conn =

    # Connection Max Lifetime default is 14400 (means 14400 seconds or 4 hours)
    ;conn_max_lifetime = 14400

    # Set to true to log the sql calls and execution times.
    ;log_queries =

    # For "postgres", use either "disable", "require" or "verify-full"
    # For "mysql", use either "true", "false", or "skip-verify".
    ;ssl_mode = disable

    ;ca_cert_path =
    ;client_key_path =
    ;client_cert_path =
    ;server_cert_name =

    # For "sqlite3" only, path relative to data_path setting
    ;path = grafana.db

    # For "sqlite3" only. cache mode setting used for connecting to the database
    ;cache_mode = private

    #################################### Cache server #############################
    [remote_cache]
    # Either "redis", "memcached" or "database" default is "database"
    ;type = database

    # cache connectionstring options
    # database: will use Grafana primary database.
    # redis: config like redis server e.g. `addr=127.0.0.1:6379,pool_size=100,db=0`. Only addr is required.
    # memcache: 127.0.0.1:11211
    ;connstr =

    #################################### Data proxy ###########################
    [dataproxy]

    # This enables data proxy logging, default is false
    ;logging = false

    # How long the data proxy should wait before timing out default is 30 (seconds)
    ;timeout = 30

    # If enabled and user is not anonymous, data proxy will add X-Grafana-User header with username into the request, default is false.
    ;send_user_header = false

    #################################### Analytics ###########################
    [analytics]
    # Server reporting, sends usage counters to stats.grafana.org every 24 hours.
    # No ip addresses are being tracked, only simple counters to track
    # running instances, dashboard and error counts. It is very helpful to us.
    # Change this option to false to disable reporting.
    reporting_enabled = false

    # Set to false to disable all checks to https://grafana.com
    # for new versions (grafana itself and plugins), check is used
    # in some UI views to notify that grafana or plugin update exists
    # This option does not cause any auto updates, nor send any information
    # only a GET request to https://grafana.com to get latest versions
    check_for_updates = false

    # Google Analytics universal tracking code, only enabled if you specify an id here
    ;google_analytics_ua_id =

    # Google Tag Manager ID, only enabled if you specify an id here
    ;google_tag_manager_id =

    #################################### Security ############################
    [security]
    # default admin user, created on startup
    admin_user = grafana_admin

    # default admin password, can be changed before first start of grafana, or in profile settings
    admin_password = grafana_admin

    # used for signing
    ;secret_key =

    # disable gravatar profile images
    disable_gravatar = true

    # data source proxy whitelist (ip_or_domain:port separated by spaces)
    ;data_source_proxy_whitelist =

    # disable protection against brute force login attempts
    ;disable_brute_force_login_protection = false

    # set to true if you host Grafana behind HTTPS. default is false.
    cookie_secure = false

    # set cookie SameSite attribute. defaults to `lax`. can be set to "lax", "strict" and "none"
    ;cookie_samesite = lax

    # When false, the HTTP header X-Frame-Options: deny will be set in Grafana HTTP responses which
    # will instruct browsers to not allow rendering Grafana in a <frame>, <iframe>, <embed> or <object>.
    # The main goal is to mitigate the risk of Clickjacking. Default is false.
    allow_embedding = true

    # Set to true if you want to enable http strict transport security (HSTS) response header.
    # This is only sent when HTTPS is enabled in this configuration.
    # HSTS tells browsers that the site should only be accessed using HTTPS.
    # The default will change to true in the next minor release, 6.3.
    ;strict_transport_security = false

    # Sets how long a browser should cache HSTS. Only applied if strict_transport_security is enabled.
    ;strict_transport_security_max_age_seconds = 86400

    # Set to true if to enable HSTS preloading option. Only applied if strict_transport_security is enabled.
    ;strict_transport_security_preload = false

    # Set to true if to enable the HSTS includeSubDomains option. Only applied if strict_transport_security is enabled.
    ;strict_transport_security_subdomains = false

    # Set to true to enable the X-Content-Type-Options response header.
    # The X-Content-Type-Options response HTTP header is a marker used by the server to indicate that the MIME types advertised
    # in the Content-Type headers should not be changed and be followed. The default will change to true in the next minor release, 6.3.
    ;x_content_type_options = false

    # Set to true to enable the X-XSS-Protection header, which tells browsers to stop pages from loading
    # when they detect reflected cross-site scripting (XSS) attacks. The default will change to true in the next minor release, 6.3.
    ;x_xss_protection = false


    #################################### Snapshots ###########################
    [snapshots]
    # snapshot sharing options
    external_enabled = false
    external_snapshot_url =
    ;external_snapshot_name = Publish to snapshot.raintank.io

    # remove expired snapshot
    ;snapshot_remove_expired = true

    #################################### Dashboards ##################

    [dashboards]
    # Number dashboard versions to keep (per dashboard). Default: 20, Minimum: 1
    ;versions_to_keep = 20

    #################################### Users ###############################
    [users]
    # disable user signup / registration
    allow_sign_up = false

    # Allow non admin users to create organizations
    ;allow_org_create = false

    # Set to true to automatically assign new users to the default organization (id 1)
    ;auto_assign_org = true

    # Set this value to automatically add new users to the provided organization (if auto_assign_org above is set to true)
    auto_assign_org_id = 1

    # Default role new users will be automatically assigned (if auto_assign_org above is set to true)
    auto_assign_org_role = Viewer

    # Require email validation before sign up completes
    ;verify_email_enabled = false

    # Background text for the user field on the login page
    ;login_hint = email or username
    ;password_hint = password

    # Default UI theme ("dark" or "light")
    default_theme = dark

    # External user management
    ;external_manage_link_url =
    ;external_manage_link_name =
    ;external_manage_info =

    # Viewers can edit/inspect dashboard settings in the browser. But not save the dashboard.
    ;viewers_can_edit = false

    # Editors can administrate dashboard, folders and teams they create
    ;editors_can_admin = false

    [auth]
    # Login cookie name
    login_cookie_name = grafana_session

    # The lifetime (days) an authenticated user can be inactive before being required to login at next visit. Default is 7 days.
    login_maximum_inactive_lifetime_days = 1

    # The maximum lifetime (days) an authenticated user can be logged in since login time before being required to login. Default is 30 days.
    login_maximum_lifetime_days = 1

    # How often should auth tokens be rotated for authenticated users when being active. The default is each 10 minutes.
    token_rotation_interval_minutes = 10

    # Set to true to disable (hide) the login form, useful if you use OAuth
    disable_login_form = false

    # Set to true to disable the signout link in the side menu. useful if you use auth.proxy
    disable_signout_menu = false

    # URL to redirect the user to after sign out
    signout_redirect_url =

    # Set to true to attempt login with OAuth automatically, skipping the login screen.
    # This setting is ignored if multiple OAuth providers are configured.
    oauth_auto_login = false

    #################################### Anonymous Auth ######################
    [auth.anonymous]
    # enable anonymous access
    ;enabled = false

    # specify organization name that should be used for unauthenticated users
    ;org_name = Main Org.

    # specify role for unauthenticated users
    ;org_role = Viewer

    #################################### Github Auth #########################
    [auth.github]
    ;enabled = false
    ;allow_sign_up = true
    ;client_id = some_id
    ;client_secret = some_secret
    ;scopes = user:email,read:org
    auth_url =
    token_url =
    api_url =
    ;team_ids =
    ;allowed_organizations =

    #################################### GitLab Auth #########################
    [auth.gitlab]
    ;enabled = false
    ;allow_sign_up = true
    ;client_id = some_id
    ;client_secret = some_secret
    ;scopes = api
    auth_url =
    token_url =
    api_url =
    ;allowed_groups =

    #################################### Google Auth #########################
    [auth.google]
    ;enabled = false
    ;allow_sign_up = true
    ;client_id = some_client_id
    ;client_secret = some_client_secret
    scopes =
    auth_url =
    token_url =
    api_url =
    ;allowed_domains =
    ;hosted_domain =

    #################################### Grafana.com Auth ####################
    # legacy key names (so they work in env variables)
    [auth.grafananet]
    ;enabled = false
    ;allow_sign_up = true
    ;client_id = some_id
    ;client_secret = some_secret
    ;scopes = user:email
    ;allowed_organizations =

    [auth.grafana_com]
    ;enabled = false
    ;allow_sign_up = true
    ;client_id = some_id
    ;client_secret = some_secret
    ;scopes = user:email
    ;allowed_organizations =

    #################################### Generic OAuth #######################
    [auth.generic_oauth]
    ;name = OAuth
    ;enabled = false
    ;allow_sign_up = true
    ;client_id = some_id
    ;client_secret = some_secret
    ;scopes = user:email
    ;email_attribute_name = email:primary
    auth_url =
    token_url =
    api_url =
    ;team_ids =
    ;allowed_organizations =
    ;tls_skip_verify_insecure = false
    ;tls_client_cert =
    ;tls_client_key =
    ;tls_client_ca =
    ;send_client_credentials_via_post = false


    #################################### Basic Auth ##########################
    [auth.basic]
    enabled = true

    #################################### Auth Proxy ##########################
    [auth.proxy]
    ;enabled = false
    ;header_name =
    ;header_property = username
    ;auto_sign_up = true
    ;ldap_sync_ttl = 60
    ## Limit where auth proxy requests come from by configuring a list of IP addresses.
    ## This can be used to prevent users spoofing the X-WEBAUTH-USER header.
    ;whitelist =
    ;headers =

    #################################### Auth LDAP ###########################
    [auth.ldap]
    ;enabled = false
    ;config_file = /etc/grafana/ldap.toml
    ;allow_sign_up = true

    # LDAP backround sync (Enterprise only)
    ;sync_cron = @hourly
    ;active_sync_enabled = false

    #################################### SMTP / Emailing #####################
    [smtp]
    ;enabled = false
    ;host = localhost:25
    ;user =
    # If the password contains # or ; you have to wrap it with triple quotes. Ex """#password;"""
    ;password =
    ;cert_file =
    ;key_file =
    ;skip_verify = false
    ;from_address = admin@grafana.localhost
    ;from_name = Grafana
    ;ehlo_identity =

    [emails]
    ;welcome_email_on_sign_up = false
    ;templates_pattern = emails/*.html

    #################################### Logging ##########################
     [log]
    # Either "console", "file", "syslog". Default is console and file
    # Use space to separate multiple modes, e.g. "console file"
    ;mode = console file

    # Either "debug", "info", "warn", "error", "critical", default is "info"
    level = debug

    # optional settings to set different levels for specific loggers. Ex filters = sqlstore:debug
    ;filters =

    # For "console" mode only
    [log.console]
    ;level =

    # log line format, valid options are text, console and json
    ;format = console

    # For "file" mode only
    [log.file]
    ;level =

    # log line format, valid options are text, console and json
    ;format = text

    # This enables automated log rotate(switch of following options), default is true
    ;log_rotate = true

    # Max line number of single file, default is 1000000
    ;max_lines = 1000000

    # Max size shift of single file, default is 28 means 1 << 28, 256MB
    ;max_size_shift = 28

    # Segment log daily, default is true
    ;daily_rotate = true

    # Expired days of log file(delete after max days), default is 7
    ;max_days = 7

    [log.syslog]
    ;level =

    # log line format, valid options are text, console and json
    ;format = text

    # Syslog network type and address. This can be udp, tcp, or unix. If left blank, the default unix endpoints will be used.
    ;network =
    ;address =

    # Syslog facility. user, daemon and local0 through local7 are valid.
    ;facility =

    # Syslog tag. By default, the process' argv[0] is used.
    ;tag =

    #################################### Usage Quotas ########################
    [quota]
    ;enabled = false

    #### set quotas to -1 to make unlimited. ####
    # limit number of users per Org.
    ;org_user = 10

    # limit number of dashboards per Org.
    ;org_dashboard = 100

    # limit number of data_sources per Org.
    ;org_data_source = 10

    # limit number of api_keys per Org.
    ;org_api_key = 10

    # limit number of orgs a user can create.
    ;user_org = 10

    # Global limit of users.
    ;global_user = -1

    # global limit of orgs.
    ;global_org = -1

    # global limit of dashboards
    ;global_dashboard = -1

    # global limit of api_keys
    ;global_api_key = -1

    # global limit on number of logged in users.
    ;global_session = -1

    #################################### Alerting ############################
    [alerting]
    # Disable alerting engine & UI features
    enabled = false
    # Makes it possible to turn off alert rule execution but alerting UI is visible
    execute_alerts = false

    # Default setting for new alert rules. Defaults to categorize error and timeouts as alerting. (alerting, keep_state)
    ;error_or_timeout = alerting

    # Default setting for how Grafana handles nodata or null values in alerting. (alerting, no_data, keep_state, ok)
    ;nodata_or_nullvalues = no_data

    # Alert notifications can include images, but rendering many images at the same time can overload the server
    # This limit will protect the server from render overloading and make sure notifications are sent out quickly
    ;concurrent_render_limit = 5

    # Default setting for alert calculation timeout. Default value is 30
    ;evaluation_timeout_seconds = 30

    # Default setting for alert notification timeout. Default value is 30
    ;notification_timeout_seconds = 30

    # Default setting for max attempts to sending alert notifications. Default value is 3
    ;max_attempts = 3


    #################################### Explore #############################
    [explore]
    # Enable the Explore section
    enabled = false

    #################################### Internal Grafana Metrics ############
    # Metrics available at HTTP API Url /metrics
    [metrics]
    enabled           = true
    ;interval_seconds  = 10

    #If both are set, basic auth will be required for the metrics endpoint.
    ;basic_auth_username =
    ;basic_auth_password =

    # Send internal Grafana metrics to graphite
    [metrics.graphite]
    # Enable by setting the address setting (ex localhost:2003)
    ;address =
    ;prefix = prod.grafana.%(instance_name)s.

    [grafana_net]
    url =

    [grafana_com]
    url =

    #################################### Distributed tracing ############
    [tracing.jaeger]
    # jaeger destination (ex localhost:6831)
    ;address =
    # tag that will always be included in when creating new spans. ex (tag1:value1,tag2:value2)
    ;always_included_tag =
    # Type specifies the type of the sampler: const, probabilistic, rateLimiting, or remote
    ;sampler_type = const
    # jaeger samplerconfig param
    # for "const" sampler, 0 or 1 for always false/true respectively
    # for "probabilistic" sampler, a probability between 0 and 1
    # for "rateLimiting" sampler, the number of spans per second
    # for "remote" sampler, param is the same as for "probabilistic"
    # and indicates the initial sampling rate before the actual one
    # is received from the mothership
    ;sampler_param = 1

    #################################### External Image Storage ##############
    [external_image_storage]
    # You can choose between (s3, webdav, gcs, azure_blob, local)
    ;provider =

    [external_image_storage.s3]
    ;bucket_url =
    ;bucket =
    ;region =
    ;path =
    ;access_key =
    ;secret_key =

    [external_image_storage.webdav]
    ;url =
    ;username =
    ;password =
    ;public_url =

    [external_image_storage.gcs]
    ;key_file =
    ;bucket =
    ;path =

    [external_image_storage.azure_blob]
    ;account_name =
    ;account_key =
    ;container_name =

    [external_image_storage.local]
    # does not require any configuration

    [rendering]
    # Options to configure external image rendering server like https://github.com/grafana/grafana-image-renderer
    ;server_url =
    ;callback_url =

    [panels]
    # here for to support old env variables, can remove after a few months
    ;enable_alpha = false
    ;disable_sanitize_html = false

    [plugins]
    ;enable_alpha = false
    ;app_tls_skip_verify_insecure = false

    [enterprise]
    ;license_path =
---
# Source: ecs-cluster/charts/ecs-monitoring/charts/grafana/templates/provision_profile.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
apiVersion: v1
kind: ConfigMap
metadata:
  name: "ecs-cluster-grafana-profile"
  labels:
    release: ecs-cluster
data:
  profile.conf: |+
    {
        "internal": {
            "db_dir": "/dashboards_flex/internal",
            "username": "grafana_admin",
            "password": "grafana_admin",
            "home_dashboard": "ObjectStore Overview"
        },
        "internal_oe": {
            "db_dir": "/dashboards_flex/internal_oe",
            "username": "grafana_admin",
            "password": "grafana_admin",
            "home_dashboard": null,
            "folder_permissions": {
                "defaults": {},
                "view_mode": {
                    "emcservice": "view",
                    "emcmonitor": "view"
                },
                "edit_mode": {
                    "emcservice": "edit",
                    "emcmonitor": "view"
                }
            }
        }
    }
---
# Source: ecs-cluster/charts/ecs-monitoring/charts/influxdb/templates/config.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#

apiVersion: v1
kind: ConfigMap
metadata:
  name: "ecs-cluster-influxdb"
  labels:
    release: ecs-cluster
data:
  influxdb.conf: |+
    reporting-disabled = true
    bind-address = ":8088"

    [meta]
      dir = "/data/influxdb/meta"
      retention-autocreate = true
      logging-enabled = true

    [data]
      dir = "/data/influxdb/data"
      wal-dir = "/data/influxdb/wal"
      query-log-enabled = true
      cache-max-memory-size = 1073741824
      cache-snapshot-memory-size = 26214400
      cache-snapshot-write-cold-duration = "10m0s"
      compact-full-write-cold-duration = "4h0m0s"
      max-series-per-database = 1000000
      max-values-per-tag = 100000
      index-version = "tsi1"
      trace-logging-enabled = false

    [coordinator]
      write-timeout = "10s"
      max-concurrent-queries = 0
      query-timeout = "0s"
      log-queries-after = "0s"
      max-select-point = 0
      max-select-series = 0
      max-select-buckets = 0

    [retention]
      enabled = true
      check-interval = "30m0s"

    [shard-precreation]
      enabled = true
      check-interval = "10m0s"
      advance-period = "30m0s"

    [admin]
      enabled = false
      bind-address = ":8083"
      https-enabled = false
      https-certificate = "/etc/ssl/influxdb.pem"

    [monitor]
      store-enabled = false
      store-database = "_internal"
      store-interval = "10s"

    [subscriber]
      enabled = true
      http-timeout = "30s"
      insecure-skip-verify = false
      ca-certs = ""
      write-concurrency = 40
      write-buffer-size = 1000

    [http]
      enabled = true
      bind-address = ":8086"
      flux-enabled = true
      auth-enabled = false
      log-enabled = true
      write-tracing = false
      pprof-enabled = true
      https-enabled = false
      https-certificate = "/etc/ssl/influxdb.pem"
      https-private-key = ""
      max-row-limit = 10000
      max-connection-limit = 0
      shared-secret = "beetlejuicebeetlejuicebeetlejuice"
      realm = "InfluxDB"
      unix-socket-enabled = false
      bind-socket = "/var/run/influxdb.sock"

    [logging]
      format =  "auto"
      level =  "info"
      supress-logo = false
  endpoints.json: |+
    [
      {
        "id": "ecs-cluster-influxdb-0",
        "partition_id": "0",
        "ip": "ecs-cluster-influxdb-0.ecs-cluster-influxdb.default.svc.cluster.local",
        "http_port": "8086",
        "rpc_port": "8088"

      },
      {
        "id": "ecs-cluster-influxdb-1",
        "partition_id": "0",
        "ip": "ecs-cluster-influxdb-1.ecs-cluster-influxdb.default.svc.cluster.local",
        "http_port": "8086",
        "rpc_port": "8088"

      },
      {
        "id": "ecs-cluster-influxdb-2",
        "partition_id": "0",
        "ip": "ecs-cluster-influxdb-2.ecs-cluster-influxdb.default.svc.cluster.local",
        "http_port": "8086",
        "rpc_port": "8088"

      }
    ]
---
# Source: ecs-cluster/charts/ecs-monitoring/charts/influxdb/templates/cron-config.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#

apiVersion: v1
kind: ConfigMap
metadata:
  name: ecs-cluster-influxdb-cron-config
  labels:
    app.kubernetes.io/instance: ecs-cluster
data:
  restore_downtime_ranges_cmd: |+
    @hourly root /restore_downtime_ranges.sh cron 127.0.0.1 8086 &>> /var/log/recover.log
---
# Source: ecs-cluster/charts/ecs-monitoring/charts/influxdb/templates/init-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "ecs-cluster-influxdb-init"
  labels:
    release: ecs-cluster
data:
  init.iql: |
    CREATE DATABASE "monitoring_main" WITH DURATION 60d SHARD DURATION 10d NAME "default"
    CREATE DATABASE "monitoring_op" WITH DURATION 5d SHARD DURATION 5d NAME "default"
    CREATE DATABASE "monitoring_last" WITH DURATION 1d SHARD DURATION 1d NAME "default"
    CREATE DATABASE "monitoring_vdc" WITH DURATION 60d SHARD DURATION 10d NAME "default"
    CREATE DATABASE "monitoring_meta" WITH DURATION 60d SHARD DURATION 10d NAME "default"
    CREATE DATABASE "monitoring_rt" WITH DURATION 1h SHARD DURATION 1h NAME "default"
---
# Source: ecs-cluster/charts/ecs-monitoring/charts/influxdb/templates/replicas-config.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#

apiVersion: v1
kind: ConfigMap
metadata:
  name: ecs-cluster-influxdb-replicas
  labels:
    release: ecs-cluster
data:
  replicas.json: |
    {
      "replicas":3
    }
---
# Source: ecs-cluster/charts/ecs-monitoring/charts/influxdb/templates/telegraf-sidecar-config.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#

apiVersion: v1
kind: ConfigMap
metadata:
  name: ecs-cluster-influxdb-telegraf-sidecar-custom-config
  labels:
    app.kubernetes.io/instance: ecs-cluster
data:
  custom.conf: |+

    [[inputs.influxdb]]
      ## Works with InfluxDB debug endpoints out of the box,
      ## but other services can use this format too.
      ## See the influxdb plugin's README for more details.

      ## Multiple URLs from which to read InfluxDB-formatted JSON
      ## Default is "http://localhost:8086/debug/vars".
      interval = "300s"
      urls = [
      "http://127.0.0.1:8086/debug/vars"
      ]
      name_prefix = "tsdb_"

    [[inputs.procstat]]
      interval = "300s"
      # need using full path to executable, because native PIDFinder match exe pattern as substring in `exe` symlink.
      exe = "^/usr/bin/influxd$"
      pid_finder = "native"
      # 'exe' and 'pattern' are excluded here and below to unify columns in Flux tables
      # measurement 'procstat_lookup' is not necessary for our use cases
      tagexclude = ["exe"]
      namedrop = ["procstat_lookup"]
---
# Source: ecs-cluster/charts/ecs-monitoring/charts/telegraf-prom/templates/configmap-confd-template.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
apiVersion: v1
kind: ConfigMap
metadata:
  name: ecs-cluster-telegraf-prom-confd-template
  labels:
    app.kubernetes.io/name: ecs-cluster-telegraf-prom
    app.kubernetes.io/instance: ecs-cluster
    app.kubernetes.io/managed-by: Helm
data:
  telegraf_flex.toml: |+
    [template]
    src = "telegraf_flex.conf.tmpl"
    dest = "/etc/telegraf/telegraf.conf"
    keys = [
        "/replicas",
    ]
    reload_cmd = "pkill -SIGHUP telegraf"
---
# Source: ecs-cluster/charts/ecs-monitoring/charts/telegraf-prom/templates/configmap-template.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
apiVersion: v1
kind: ConfigMap
metadata:
  name: ecs-cluster-telegraf-prom-config-template
  labels:
    app.kubernetes.io/name: ecs-cluster-telegraf-prom
    app.kubernetes.io/instance: ecs-cluster
    app.kubernetes.io/managed-by: Helm
data:
  telegraf_flex.conf.tmpl: |+
    [global_tags]
      release_name = "ecs-cluster"
    [agent]
      collection_jitter = "0s"
      debug = false
      flush_interval = "10s"
      flush_jitter = "0s"
      interval = "10s"
      logfile = ""
      metric_batch_size = 1000
      metric_buffer_limit = 10000
      omit_hostname = true
      precision = ""
      quiet = false
      round_interval = true
    [[processors.override]]
      namepass = [
        "tsdb_influxdb_httpd"
      ]
      tagexclude = [
        "node_id",
        "ip"
      ]
    
    [[inputs.internal]]
      collect_memstats = true
      interval = "$COLLECTION_INTERVAL"
      name_prefix = "tsdb_telegraf_"
      [inputs.internal.tags]
        host = "$HOSTNAME"
        tag = "system"
    [[inputs.prometheus]]
      bearer_token = "/var/run/secrets/kubernetes.io/serviceaccount/token"
      insecure_skip_verify = true
      interval = "$COLLECTION_INTERVAL"
      kubernetes_label_selector = "app.kubernetes.io/name=ecs-cluster-fluxd"
      monitor_kubernetes_pods = true
      monitor_kubernetes_pods_namespace = "default"
      name_prefix = "tsdb_fluxd_"
      [inputs.prometheus.tags]
        tag = "system"
    [[inputs.prometheus]]
      insecure_skip_verify = true
      interval = "$COLLECTION_INTERVAL"
      kubernetes_services = [
        "http://ecs-cluster-throttler.default.svc.cluster.local:8094/metrics"
      ]
      monitor_kubernetes_pods = false
      [inputs.prometheus.tags]
        host = "throttler"
        tag = "system"
    {{- $replicas := atoi (getv "/replicas" "1") }}
    {{- $replicas_per_partition := atoi (getenv "INFLUXDB_REPLICAS_PER_PARTITION" "3") }}
    {{- $partitions_count := div $replicas $replicas_per_partition }}
    {{range $i, $e := seq 1 ($replicas)}}
    [[inputs.influxdb]]
      ## Works with InfluxDB debug endpoints out of the box,
      ## but other services can use this format too.
      ## See the influxdb plugin's README for more details.

      ## Multiple URLs from which to read InfluxDB-formatted JSON
      ## Default is "http://localhost:8086/debug/vars".
      interval = "30s"
      urls = [
        "http://ecs-cluster-influxdb-{{$i}}.ecs-cluster-influxdb.default.svc.cluster.local:8086/debug/vars",
      ]
      name_prefix = "tsdb_"
      insecure_skip_verify = true
      [inputs.influxdb.tags]
        tag = "system"
        revision = "v2"
        host = "ecs-cluster-influxdb-{{$i}}"{{- end -}}{{range $i, $e := seq 1 ($replicas)}}
  
    [[outputs.influxdb]]
      urls = ["http://ecs-cluster-influxdb-{{$i}}.ecs-cluster-influxdb.default.svc.cluster.local:8086"]
      database = "monitoring_main"
      insecure_skip_verify = true
      namepass = ["tsdb_influxdb_httpd"]
      retention_policy = "default"
      skip_database_creation = true
      tagexclude = ["cluster", "release_name"]
      [outputs.influxdb.tagpass]
        host = ["ecs-cluster-influxdb-{{$i}}"]
  
    [[outputs.influxdb]]
      urls = ["http://ecs-cluster-influxdb-{{$i}}.ecs-cluster-influxdb.default.svc.cluster.local:8086"]
      database = "monitoring_op"
      insecure_skip_verify = true
      namepass = ["tsdb_influxdb_httpd"]
      retention_policy = "default"
      skip_database_creation = true
      tagexclude = ["cluster", "release_name"]
      [outputs.influxdb.tagpass]
        host = ["ecs-cluster-influxdb-{{$i}}"]
  
    [[outputs.influxdb]]
      urls = ["http://ecs-cluster-influxdb-{{$i}}.ecs-cluster-influxdb.default.svc.cluster.local:8086"]
      database = "monitoring_last"
      insecure_skip_verify = true
      namepass = ["tsdb_influxdb_httpd"]
      retention_policy = "default"
      skip_database_creation = true
      tagexclude = ["cluster", "release_name"]
      [outputs.influxdb.tagpass]
        host = ["ecs-cluster-influxdb-{{$i}}"]
  
    [[outputs.influxdb]]
      urls = ["http://ecs-cluster-influxdb-{{$i}}.ecs-cluster-influxdb.default.svc.cluster.local:8086"]
      database = "monitoring_vdc"
      insecure_skip_verify = true
      namepass = ["tsdb_influxdb_httpd"]
      retention_policy = "default"
      skip_database_creation = true
      tagexclude = ["cluster", "release_name"]
      [outputs.influxdb.tagpass]
        host = ["ecs-cluster-influxdb-{{$i}}"]{{- end }}
    {{ $release_name := getenv "RELEASE_NAME" "" }}
    {{ $release_namespace := getenv "RELEASE_NAMESPACE" "" }}
    {{ $scheme := getenv "SCHEME" "http" }}{{range $i, $e := seq 1 ($replicas)}}{{- $urls := print $scheme "://" $release_name "-influxdb-" $i "." $release_name "-influxdb." $release_namespace ".svc.cluster.local:8086" }}
    {{ $partition := div $i $replicas_per_partition -}}[[outputs.influxdb]]{{- if ne $urls "" }}
      urls = ["{{$urls}}"]{{- end }}
      database = "monitoring_op"
      insecure_skip_verify = true
      namepass = [
        "tsdb_fluxd_http_api_request_duration_seconds",
        "tsdb_fluxd_http_api_requests_total",
        "tsdb_fluxd_host_state_change_total",
        "tsdb_fluxd_host_state",
        "tsdb_fluxd_host_selected",
        "tsdb_fluxd_host_selection_failed",
        "tsdb_fluxd_hl_*",
        "tsdb_fluxd_query_control_executing_duration_seconds",
        "tsdb_fluxd_http_lb_request_forwarded",
        "tsdb_fluxd_query_control_panics_total",
        "tsdb_influxdb",
        "tsdb_influxdb_database",
        "tsdb_influxdb_queryExecutor",
        "tsdb_telegraf_internal_gather",
        "tsdb_telegraf_internal_write",
        "cquerier_*"
      ]
      retention_policy = "default"
      skip_database_creation = true
      tagexclude = [
        "vdc",
        "storage_pool",
        "cluster",
        "release_name"
      ]
      timeout = "30s"{{- if ne $partitions_count 1 }}
      [outputs.influxdb.hashpass]
        partitionpass = {{$partition}}
        partitions = {{$partitions_count}}{{- end }}
    
    {{ end -}}
    {{- $urls := "" }}
---
# Source: ecs-cluster/charts/ecs-monitoring/charts/telegraf-sidecar/templates/telegraf-config.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#

apiVersion: v1
kind: ConfigMap
metadata:
  name: ecs-cluster-telegraf-sidecar
  labels:
    app.kubernetes.io/instance: ecs-cluster
data:
  telegraf.conf: |+# Configuration for telegraf agent
    [ agent ]
      ## Default data collection interval for all inputs
      ## Set to 10 seconds to make sure data is sent to output as soon as possible
      interval = "10s"

      ## Default flushing interval for all outputs. You shouldn't set this below
      ## interval. Maximum flush_interval will be flush_interval + flush_jitter
      flush_interval = "10s"

      ## Jitter the flush interval by a random amount. This is primarily to avoid
      ## large write spikes for users running a large number of telegraf instances.
      ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
      flush_jitter = "10s"

      debug = true

      ## Following limitation of batch size and buffer limit ensures memory use <70MB
      ## when 2 InfluxDB instances are down.
      ## See README.md and MONITORING-241
      metric_batch_size = 1000
      metric_buffer_limit = 4000

    [[outputs.influxdb]]
      skip_database_creation = true
      urls = ["http://ecs-cluster-telegraf.default.svc.cluster.local:11002"]
      timeout = "30s"
      database = "default"
      retention_policy = "default"

    # Read metrics about disk usage by mount point
    [[inputs.disk]]
      interval = "300s"
      ## By default stats will be gathered for all mount points.
      ## Set mount_points will restrict the stats to only the specified mount points.
      mount_points = ["/", "/pv"]
      fieldpass = ["free", "used", "total", "used_percent", "inodes*"]

    [[processors.override]]
      namepass = [ "disk" ]
      tagexclude = ["device", "fstype", "mode"]
---
# Source: ecs-cluster/charts/ecs-monitoring/charts/telegraf/templates/configmap-confd-template.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
apiVersion: v1
kind: ConfigMap
metadata:
  name: ecs-cluster-telegraf-confd-template
  labels:
    app.kubernetes.io/name: ecs-cluster-telegraf
    app.kubernetes.io/instance: ecs-cluster
    app.kubernetes.io/managed-by: Helm
data:
  telegraf_flex.toml: |+
    [template]
    src = "telegraf_flex.conf.tmpl"
    dest = "/etc/telegraf/telegraf.conf"
    keys = [
        "/replicas",
    ]
    reload_cmd = "pkill -SIGHUP telegraf"
---
# Source: ecs-cluster/charts/ecs-monitoring/charts/telegraf/templates/configmap-template.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
apiVersion: v1
kind: ConfigMap
metadata:
  name: ecs-cluster-telegraf-config-template
  labels:
    app.kubernetes.io/name: ecs-cluster-telegraf
    app.kubernetes.io/instance: ecs-cluster
    app.kubernetes.io/managed-by: Helm
data:
  telegraf_flex.conf.tmpl: |+
    [global_tags]
      release_name = "ecs-cluster"
    [agent]
      collection_jitter = "0s"
      debug = false
      flush_interval = "10s"
      flush_jitter = "0s"
      interval = "10s"
      logfile = ""
      metric_batch_size = 1000
      metric_buffer_limit = 10000
      omit_hostname = true
      precision = ""
      quiet = false
      round_interval = true
    [[processors.override]]
      namepass = [
        "dtquery_dt_status",
        "dtquery_dt_status_detailed_type",
        "dtquery_dt_dist_dt_node_id_type",
        "dtquery_dt_dist_host_dt_node_id",
        "dtquery_dt_dist_type_type",
        "dtquery_cmf",
        "resource_EKM_EKMServer",
        "ssm_sstable_SSTable_SS*",
        "mm_topn_bucket_by_obj_size_place",
        "mm_topn_bucket_by_obj_count_place"
      ]
      tagexclude = [
        "host",
        "node_id",
        "ip"
      ]
    [[processors.rename]]
      namepass = [
        "filestat"
      ]
      [[processors.rename.replace]]
        dest = "size_bytes_i"
        field = "size_bytes"
    
    [[inputs.influxdb_listener]]
      read_timeout = "30s"
      service_address = ":11002"
      write_timeout = "30s"
    [[inputs.internal]]
      collect_memstats = true
      interval = "300s"
      name_prefix = "tsdb_telegraf_"
      [inputs.internal.tags]
        host = "$HOSTNAME"
        tag = "system"
    {{- $replicas := atoi (getv "/replicas" "1") }}
    {{- $replicas_per_partition := atoi (getenv "INFLUXDB_REPLICAS_PER_PARTITION" "3") }}
    {{- $partitions_count := div $replicas $replicas_per_partition }}{{range $i, $e := seq 1 ($replicas)}}
  
    [[outputs.influxdb]]
      urls = ["http://ecs-cluster-influxdb-{{$i}}.ecs-cluster-influxdb.default.svc.cluster.local:8086"]
      database = "monitoring_main"
      insecure_skip_verify = true
      namepass = ["tsdb_influxdb_httpd"]
      retention_policy = "default"
      skip_database_creation = true
      tagexclude = ["cluster", "release_name"]
      [outputs.influxdb.tagpass]
        host = ["ecs-cluster-influxdb-{{$i}}"]
  
    [[outputs.influxdb]]
      urls = ["http://ecs-cluster-influxdb-{{$i}}.ecs-cluster-influxdb.default.svc.cluster.local:8086"]
      database = "monitoring_op"
      insecure_skip_verify = true
      namepass = ["tsdb_influxdb_httpd"]
      retention_policy = "default"
      skip_database_creation = true
      tagexclude = ["cluster", "release_name"]
      [outputs.influxdb.tagpass]
        host = ["ecs-cluster-influxdb-{{$i}}"]
  
    [[outputs.influxdb]]
      urls = ["http://ecs-cluster-influxdb-{{$i}}.ecs-cluster-influxdb.default.svc.cluster.local:8086"]
      database = "monitoring_last"
      insecure_skip_verify = true
      namepass = ["tsdb_influxdb_httpd"]
      retention_policy = "default"
      skip_database_creation = true
      tagexclude = ["cluster", "release_name"]
      [outputs.influxdb.tagpass]
        host = ["ecs-cluster-influxdb-{{$i}}"]
  
    [[outputs.influxdb]]
      urls = ["http://ecs-cluster-influxdb-{{$i}}.ecs-cluster-influxdb.default.svc.cluster.local:8086"]
      database = "monitoring_vdc"
      insecure_skip_verify = true
      namepass = ["tsdb_influxdb_httpd"]
      retention_policy = "default"
      skip_database_creation = true
      tagexclude = ["cluster", "release_name"]
      [outputs.influxdb.tagpass]
        host = ["ecs-cluster-influxdb-{{$i}}"]{{- end }}
    {{ $release_name := getenv "RELEASE_NAME" "" }}
    {{ $release_namespace := getenv "RELEASE_NAMESPACE" "" }}
    {{ $scheme := getenv "SCHEME" "http" }}{{range $i, $e := seq 1 ($replicas)}}{{- $urls := print $scheme "://" $release_name "-influxdb-" $i "." $release_name "-influxdb." $release_namespace ".svc.cluster.local:8086" }}
    {{ $partition := div $i $replicas_per_partition -}}[[outputs.influxdb]]{{- if ne $urls "" }}
      urls = ["{{$urls}}"]{{- end }}
      database = "monitoring_main"
      fielddrop = [
        "*Timestamp"
      ]
      insecure_skip_verify = true
      namepass = [
        "*_IO_Statistics_data_*",
        "cm_BTREE_GC_Statistics",
        "cm_BTREE_GC_Statistics_CoS_StorageTier_StoragePolicy",
        "cm_Chunk_Statistics",
        "cm_Chunk_Statistics_CoS_StorageTier_StoragePolicy",
        "cm_Chunk_Statistics_CoS_StorageTier_StoragePolicy_Source",
        "cm_EC_Statistics",
        "cm_EC_Statistics_CoS_StorageTier_StoragePolicy",
        "cm_EC_Statistics_CoS_StorageTier_StoragePolicy_Source",
        "cm_REPO_GC_Statistics",
        "cm_REPO_GC_Statistics_CoS_StorageTier_StoragePolicy",
        "sr_REPO_GC_Statistics",
        "cm_Recover_Statistics",
        "cm_Recover_Statistics_CoS_StorageTier_StoragePolicy",
        "cm_Rebalance_Statistics",
        "cm_Rebalance_Statistics_CoS_StorageTier_StoragePolicy",
        "ssm_sstable_SSTable_SS",
        "ssm_sstable_SSTable_SS_partitions_PD",
        "ssm_sstable_SSTable_SS_partitions_PD_status",
        "statDataHead_performance_internal_*",
        "blob_SSDReadCache_Stats"
      ]
      retention_policy = "default"
      skip_database_creation = true
      tagexclude = [
        "vdc",
        "storage_pool",
        "cluster",
        "release_name"
      ]
      timeout = "30s"{{- if ne $partitions_count 1 }}
      [outputs.influxdb.hashpass]
        partitionpass = {{$partition}}
        partitions = {{$partitions_count}}{{- end }}
      [outputs.influxdb.tagpasscoordinated]
        limit = 25.0
        namespace = [
            "*",
        ]
    [[outputs.influxdb]]{{- if ne $urls "" }}
      urls = ["{{$urls}}"]{{- end }}
      database = "monitoring_op"
      fielddrop = [
        "*Timestamp"
      ]
      insecure_skip_verify = true
      namepass = [
        "dtquery_dt_status",
        "dtquery_dt_status_detailed_type",
        "dtquery_dt_dist_dt_node_id_type",
        "dtquery_dt_dist_host_dt_node_id",
        "dtquery_dt_dist_type_type",
        "*_stat_client_performance",
        "tsdb_telegraf_internal_gather",
        "tsdb_telegraf_internal_write",
        "disk",
        "procstat",
        "object_operations*",
        "*_Stream_Stats_Scope_Group_Scope*",
        "pravega_*",
        "ons_Stream_Stats_Scope_Group_Scope",
        "ons_Stream_Stats_Scope_Group_Scope_Stream",
        "ons_clients_external",
        "ons_clients_objmt",
        "ons_clients_replication",
        "ons_manager",
        "ons_parsing_task"
      ]
      retention_policy = "default"
      skip_database_creation = true
      tagexclude = [
        "vdc",
        "storage_pool",
        "cluster",
        "release_name"
      ]
      timeout = "30s"{{- if ne $partitions_count 1 }}
      [outputs.influxdb.hashpass]
        partitionpass = {{$partition}}
        partitions = {{$partitions_count}}{{- end }}
    [[outputs.influxdb]]{{- if ne $urls "" }}
      urls = ["{{$urls}}"]{{- end }}
      database = "monitoring_last"
      fielddrop = [
        "*Timestamp"
      ]
      insecure_skip_verify = true
      namepass = [
        "*_Process_status",
        "resource_EKM_EKMServer",
        "dtquery_cmf",
        "mm_topn_bucket_by_obj_size_place",
        "mm_topn_bucket_by_obj_count_place"
      ]
      retention_policy = "default"
      skip_database_creation = true
      tagexclude = [
        "vdc",
        "storage_pool",
        "cluster",
        "release_name"
      ]
      timeout = "30s"{{- if ne $partitions_count 1 }}
      [outputs.influxdb.hashpass]
        partitionpass = {{$partition}}
        partitions = {{$partitions_count}}{{- end }}
    [[outputs.influxdb]]{{- if ne $urls "" }}
      urls = ["{{$urls}}"]{{- end }}
      database = "monitoring_vdc"
      insecure_skip_verify = true
      namepass = [
        "cq_*"
      ]
      retention_policy = "default"
      skip_database_creation = true
      tagexclude = [
        "host",
        "node_id",
        "vdc",
        "storage_pool",
        "cluster",
        "release_name"
      ]
      timeout = "30s"{{- if ne $partitions_count 1 }}
      [outputs.influxdb.hashpass]
        partitionpass = {{$partition}}
        partitions = {{$partitions_count}}{{- end }}
    [[outputs.influxdb]]{{- if ne $urls "" }}
      urls = ["{{$urls}}"]{{- end }}
      database = "monitoring_rt"
      fielddrop = [
        "*Timestamp"
      ]
      insecure_skip_verify = true
      namepass = [
        "statDataHead_realtime_*"
      ]
      retention_policy = "default"
      skip_database_creation = true
      tagexclude = [
        "vdc",
        "storage_pool",
        "cluster",
        "release_name"
      ]
      timeout = "30s"{{- if ne $partitions_count 1 }}
      [outputs.influxdb.hashpass]
        partitionpass = {{$partition}}
        partitions = {{$partitions_count}}{{- end }}
    
    {{ end -}}
    {{- $urls := "" }}[[outputs.influxdb]]{{- if ne $urls "" }}
      urls = ["{{$urls}}"]{{- end }}
      insecure_skip_verify = true
      namedrop = [
        "cq_*_metadata"
      ]
      namepass = [
        "cq_performance_transaction",
        "cq_performance_throughput",
        "cq_performance_error",
        "cq_performance_latency",
        "cq_capacity_vdc",
        "cq_recover_status_summary",
        "cq_node_rebalancing_summary",
        "cq_capacity_ec",
        "cq_capacity_ec_rate",
        "cq_disk_bandwidth",
        "cq_gc_data",
        "cq_capacity_used_elements",
        "cq_hardware_health_nodes_counter",
        "cq_hardware_health_disks_counter",
        "cq_capacity_data_being_processed"
      ]
      skip_database_creation = true
      timeout = "30s"
      urls = [
        "http://objectscale-manager-telegraf.default.svc.cluster.local:11002"
      ]{{- if ne $partitions_count 1 }}
      [outputs.influxdb.hashpass]
        partitionpass = 0
        partitions = 1{{- end }}
---
# Source: ecs-cluster/charts/ecs-monitoring/charts/throttler/templates/config_throttler.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ecs-cluster-throttler-config
  labels:
    app: "ecs-cluster-throttler"
    chart: "throttler-0.54.0"
    release: ecs-cluster
data:
  throttler.conf: |+
    ### Throttler configuration file.
    ###
    ### [throttler]
    ###
    ### Contains the parameters to configure throttler engine.
    ###
    [throttler]
      # Used to detect count of iterations which should be done by throttler before shutdown.
      # By default, iterations-count is set to 0 which means that iterations count is unlimited.
      iterations-count = 0

      # Used to detect which metrics should be throttled: "service", "system", "all"
      throttle-metrics-type = "system"

      # Used to detect throttler scrape interval.
      scrape-interval-minutes = 5

      # Used to detect maximum available metrics' ingest rate (points per second).
      max-ingest-rate = 350

      # Used to detect maximum available metrics' cardinality.
      max-metric-cardinality = 10000

      # Used to increase current metrics push interval to time series database
      # and pull interval (for system metrics) if the InfluxDB exceeded its limit
      increase-metrics-interval-sec = 60

      # Set the directory for all throttler's log messages
      log-dir = "/var/log"

    ###
    ### [influx]
    ### Contains the list with the necessary parameters for creating the connections to the InfluxDB instances.
    ### These instances are used to detect current ingest rate per each time series database.
    ###
    [influx]
      # List of InfluxDB endpoints in this format: host:port, separated by comma.
      endpoints = ["ecs-cluster-influxdb-0.ecs-cluster-influxdb.default.svc.cluster.local:8086,ecs-cluster-influxdb-1.ecs-cluster-influxdb.default.svc.cluster.local:8086,ecs-cluster-influxdb-2.ecs-cluster-influxdb.default.svc.cluster.local:8086"]

    ###
    ### [cf]
    ###
    ### Contains the parameters which are needed for communication with the cf service REST interface.
    ###
    [cf]
      # Node with cf instance.
      host = "127.0.0.1"

      # Used to get auth token for the further communication.
      username = "emcservice"

      # Port of the service which is listening all incoming requests.
      port = 4443

      # Http scheme which is used for cf requests.
      http-scheme = "https"

      # Url to get auth token
      auth-token-url = "/login"

      # Base url for all cf specific requests.
      auth-token-file = "/data/throttler/conf/.authcount"

    ###
    ### [http]
    ###
    ### Contains the parameters for http client.
    ###
    [http]
      # Timeout for the outgoing http requests.
      timeout-sec = 30

    ###
    ### [cq]
    ###
    ### Contains the parameters for CQ service.
    ###
    [cq]
      # Timeout for the outgoing http requests.
      fluxd-url = "http://ecs-cluster-fluxd.default.svc.cluster.local:8093/api/v3/query"
      # Telegraf URL is sent to Fluxd with http.to() function
      # and should be handled on Fluxd side
      telegraf-url = "http://ecs-cluster-telegraf.default.svc.cluster.local:11002/write"
      interval = "5m"
      template-folder = "/etc/cq_flex"

    [alerter]
      fluxd-url = "http://ecs-cluster-fluxd.default.svc.cluster.local:8093/api/v3/query"
      interval = "5m"
      alerts-folder = "/etc/alerter/"
      alerts-conf-path = "/etc/alerter/alerts.yaml"
      event-template = "event.tmpl"

    [fluxd-alerter]
      conf-path = "/etc/fluxd-alerter/config.yaml"
---
# Source: ecs-cluster/charts/ecs-monitoring/charts/throttler/templates/cq.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "ecs-cluster-throttler-cq"
  labels:
    release: ecs-cluster
data:
  CQ.json: |
    [
      {
        "template":"requests.tmpl",
        "min-depth":"5m",
        "max-depth":"4h",
        "max-age": "1440h",
        "start-offset": "-30m",
        "keep-offset": "20m",
        "target":"cq_performance_transaction",
  
        "value-columns":["failed_request_counter","succeed_request_counter"],
        "tag-columns":null,
        "params":{
          "comment":"min-depth values in all performance CQs are set to 30m to ensure that derivative()/difference() functions work correctly with possible data loss cases",
          "measurement":"statDataHead_performance_internal_transactions"
        },
        "max-retry": 3
      },
      {
        "template":"requests-delta.tmpl",
        "min-depth":"5m",
        "max-depth":"4h",
        "start-offset": "-30m",
        "keep-offset": "20m",
        "max-age": "1440h",
        "target":"cq_performance_transaction_delta",
  
        "value-columns":["failed_request_counter_i","succeed_request_counter_i"],
        "tag-columns":null,
        "params":{
          "comment":"generates delta values while other cqs generate rates. delta are needed for total table",
          "measurement":"statDataHead_performance_internal_transactions",
          "column_rename":"failed_request_counter: \"failed_request_counter_i\", succeed_request_counter: \"succeed_request_counter_i\""
        },
        "max-retry": 3
      },
      {
        "template":"requests-delta.tmpl",
        "min-depth":"5m",
        "max-depth":"4h",
        "start-offset": "-30m",
        "keep-offset": "20m",
        "max-age": "1440h",
        "target":"cq_performance_error_delta",
  
        "value-columns":["user_errors_i","system_errors_i"],
        "tag-columns":null,
        "params":{
          "measurement":"statDataHead_performance_internal_error",
          "column_rename":"user_errors: \"user_errors_i\", system_errors: \"system_errors_i\""
        },
        "max-retry": 3
      },
      {
        "template":"requests.tmpl",
        "min-depth":"5m",
        "max-depth":"4h",
        "start-offset": "-30m",
        "keep-offset": "20m",
        "max-age": "1440h",
        "target":"cq_performance_throughput",
  
        "value-columns":["total_read_requests_size","total_write_requests_size"],
        "tag-columns":null,
        "params":{
          "measurement":"statDataHead_performance_internal_throughput"
        },
        "max-retry": 3
      },
      {
        "template":"requests.tmpl",
        "min-depth":"5m",
        "max-depth":"4h",
        "start-offset": "-30m",
        "keep-offset": "20m",
        "max-age": "1440h",
        "target":"cq_performance_error",
  
        "value-columns":["user_errors","system_errors"],
        "tag-columns":null,
        "params":{
          "measurement":"statDataHead_performance_internal_error"
        },
        "max-retry": 3
      },
      {
        "template":"latency.tmpl",
        "min-depth":"5m",
        "max-depth":"1h",
        "start-offset": "-30m",
        "keep-offset": "20m",
        "max-age": "1440h",
        "target":"cq_performance_latency",
  
        "value-columns":["p50","p99"],
        "tag-columns":["id"],
        "params":{
          "measurement":"statDataHead_performance_internal_latency"
        },
        "max-retry": 3,
        "sync-query": true
      },
      {
        "template":"capacity-disks.tmpl",
        "min-depth":"5m",
        "max-depth":"1h",
        "start-offset":"-12h",
        "keep-offset":"0m",
        "max-age":"1440h",
        "target":"cq_capacity_disks",
        "value-columns":["freeSpace", "totalSpace", "usedSpace"],
        "tag-columns":["SS", "PD", "SSTableLevel"],
        "max-retry": 3,
        "sync-query": true
      },
      {
        "template":"disk-state.tmpl",
        "min-depth":"5m",
        "max-depth":"1h",
        "start-offset":"-12h",
        "keep-offset":"0m",
        "max-age":"1440h",
        "target":"cq_disk_state",
        "value-columns":["hwState"],
        "tag-columns":["SS", "PD"],
        "max-retry": 3,
        "sync-query": true
      },
      {
        "template":"ss-state.tmpl",
        "min-depth":"5m",
        "max-depth":"1h",
        "start-offset":"-12h",
        "keep-offset":"0m",
        "max-age":"1440h",
        "target":"cq_ss_state",
        "value-columns":["SSState"],
        "tag-columns":["SS"],
        "max-retry": 3,
        "sync-query": true
      },
      {
        "template":"capacity-nodes-total.tmpl",
        "min-depth":"5m",
        "max-depth":"1h",
        "start-offset":"-1h",
        "keep-offset":"0m",
        "max-age":"1440h",
        "target":"cq_capacity_nodes_total",
        "value-columns":["total_i", "totalL1", "totalL2"],
        "tag-columns":["_host_id"],
        "max-retry": 3,
        "sync-query": true,
        "depend-on": ["cq_capacity_disks"]
      },
      {
        "template":"capacity-nodes-used.tmpl",
        "min-depth":"5m",
        "max-depth":"1h",
        "start-offset":"-1h",
        "keep-offset":"0m",
        "max-age":"1440h",
        "target":"cq_capacity_nodes_used",
        "value-columns":["used", "usedL1", "usedL2"],
        "tag-columns":["_host_id"],
        "max-retry": 3,
        "sync-query": true,
        "depend-on": ["cq_ss_state", "cq_disk_state", "cq_capacity_disks"]
      },
      {
        "template":"capacity-nodes-offline.tmpl",
        "min-depth":"5m",
        "max-depth":"1h",
        "start-offset":"-1h",
        "keep-offset":"0m",
        "max-age":"1440h",
        "target":"cq_capacity_nodes_offline",
        "value-columns":["offline", "offline_recovered", "offline_unrecovered"],
        "tag-columns":["_host_id"],
        "max-retry": 3,
        "sync-query": true,
        "depend-on": ["cq_ss_state", "cq_disk_state", "cq_capacity_disks"]
      },
      {
        "template":"capacity-vdc.tmpl",
        "min-depth":"5m",
        "max-depth":"1h",
        "start-offset":"-1h",
        "keep-offset":"0m",
        "max-age":"1440h",
        "target":"cq_capacity_vdc",
        "value-columns":["total_i","used","available","reserved", "offline", "offline_recovered", "offline_unrecovered"],
        "max-retry": 3,
        "sync-query": true,
        "depend-on": ["cq_capacity_nodes_total", "cq_capacity_nodes_used", "cq_capacity_nodes_offline"]
      },
      {
        "template":"capacity-data-being-processed.tmpl",
        "min-depth":"5m",
        "max-depth":"1h",
        "start-offset":"-1h",
        "keep-offset":"0m",
        "max-age":"1440h",
        "target":"cq_capacity_data_being_processed",
        "value-columns":["data_being_processed"],
        "max-retry": 3,
        "sync-query": true,
        "depend-on": ["cq_capacity_vdc", "cq_capacity_used_elements", "cq_gc_data"]
      },
      {
        "template":"recover-status-summary.tmpl",
        "type": "downsampling",
        "min-depth":"5m",
        "max-depth":"24h",
        "start-offset":"-12h",
        "keep-offset":"715m",
        "max-age":"1440h",
        "target":"cq_recover_status_summary",
        "value-columns":["data_to_recover", "data_recovered"],
        "tag-columns":null,
        "max-retry": 3,
        "depend-on": ["cq_total_cm_Recover_Statistics"],
        "sync-query": true
      },
      {
        "template":"node-rebalancing.tmpl",
        "type": "downsampling",
        "min-depth":"5m",
        "max-depth":"24h",
        "start-offset":"-12h",
        "keep-offset":"715m",
        "max-age":"1440h",
        "target":"cq_node_rebalancing_summary",
        "value-columns":["data_rebalanced", "pending_rebalance"],
        "depend-on": ["cq_total_cm_Rebalance_Statistics"],
        "sync-query": true
      },
      {
        "template":"capacity-ec.tmpl",
        "type": "downsampling",
        "min-depth":"5m",
        "max-depth":"1h",
        "start-offset":"-1h",
        "keep-offset":"0s",
        "max-age":"1440h",
        "target":"cq_capacity_ec",
        "value-columns":["total_coded_data", "total_coding_data"],
        "tag-columns":null,
        "max-retry": 3,
        "depend-on": ["cq_total_cm_Chunk_Statistics_Source", "cq_total_cm_EC_Statistics_Source"],
        "sync-query": true
      },
      {
        "template":"capacity-ec-rate.tmpl",
        "min-depth":"5m",
        "max-depth":"1h",
        "start-offset":"-12h",
        "keep-offset":"0m",
        "max-age":"1440h",
        "target":"cq_capacity_ec_rate",
        "value-columns":["coding_rate"],
        "max-retry": 3,
        "sync-query": true
      },
      {
        "template":"disk-bandwidth.tmpl",
        "min-depth":"5m",
        "max-depth":"1h",
        "start-offset":"-1h",
        "keep-offset":"0m",
        "max-age":"1440h",
        "target":"cq_disk_bandwidth",
        "value-columns":["total", "consistency_checker", "erasure_encoding", "geo", "hardware_recovery", "user_traffic", "xor"],
        "tag-columns":["type_op"],
        "max-retry": 3,
        "sync-query": true
      },
      {
        "template": "gc-stats.tmpl",
        "type": "downsampling",
        "min-depth": "5m",
        "max-depth": "1h",
        "start-offset": "-1h",
        "keep-offset": "0s",
        "max-age":"1440h",
        "target":"cq_gc_data",
        "value-columns":["user_gc_pending", "user_gc_unreclaim", "system_gc_pending", "system_gc_unreclaim"],
        "tag-columns":null,
        "max-retry": 3,
        "depend-on": ["cq_total_cm_REPO_GC_Statistics", "cq_total_cm_BTREE_GC_Statistics", "cq_total_sr_REPO_GC_Statistics"],
        "sync-query": true
      },
      {
        "template":"capacity-used-elements.tmpl",
        "type": "downsampling",
        "min-depth":"5m",
        "max-depth":"1h",
        "start-offset":"-1h",
        "keep-offset":"0s",
        "max-age":"1440h",
        "target":"cq_capacity_used_elements",
        "value-columns":["user_data", "meta_data", "protection_overhead_user", "protection_overhead_metadata"],
        "tag-columns":null,
        "max-retry": 3,
        "depend-on": ["cq_capacity_used_user_data", "cq_capacity_used_meta_data", "cq_capacity_used_protection"],
        "sync-query": true
      },
      {
        "template":"capacity-used-user-data.tmpl",
        "type": "downsampling",
        "min-depth":"5m",
        "max-depth":"1h",
        "start-offset":"-1h",
        "keep-offset":"0s",
        "max-age":"1440h",
        "target":"cq_capacity_used_user_data",
        "value-columns":["user_data", "user_injected", "user_injected_active", "user_injected_sealed",
          "replica", "replica_active", "replica_sealed"],
        "tag-columns":null,
        "max-retry": 3,
        "depend-on": ["cq_total_cm_Chunk_Statistics_Source"],
        "sync-query": true
      },
      {
        "template":"capacity-used-metadata.tmpl",
        "type": "downsampling",
        "min-depth":"5m",
        "max-depth":"1h",
        "start-offset":"-1h",
        "keep-offset":"0s",
        "max-age":"1440h",
        "target":"cq_capacity_used_meta_data",
        "value-columns":["meta_data", "meta_data_btree", "meta_data_journal"],
        "tag-columns":null,
        "max-retry": 3,
        "depend-on": ["cq_total_cm_Chunk_Statistics"],
        "sync-query": true
      },
      {
        "template":"capacity-used-protection.tmpl",
        "type": "downsampling",
        "min-depth":"5m",
        "max-depth":"1h",
        "start-offset":"-1h",
        "keep-offset":"0s",
        "max-age":"1440h",
        "target":"cq_capacity_used_protection",
        "value-columns":["protection_overhead_user_data_ec", "protection_overhead_user_data_non_ec", "protection_overhead_metadata_btree", "protection_overhead_metadata_journal"],
        "tag-columns":null,
        "max-retry": 3,
        "depend-on": ["cq_total_cm_Chunk_Statistics_Source", "cq_total_cm_EC_Statistics_Source", "cq_capacity_used_meta_data"],
        "sync-query": true
      },
      {
        "template":"hardware-health-nodes-counters.tmpl",
        "min-depth":"5m",
        "max-depth":"1h",
        "start-offset":"-12h",
        "keep-offset":"0m",
        "max-age":"24h",
        "target":"cq_hardware_health_nodes_counter",
        "value-columns":["good_nodes", "bad_nodes", "maintenance_nodes"],
        "max-retry": 3,
        "sync-query": true
      },
      {
        "template":"hardware-health-disks-counters.tmpl",
        "min-depth":"5m",
        "max-depth":"1h",
        "start-offset":"-12h",
        "keep-offset":"0m",
        "max-age":"24h",
        "target":"cq_hardware_health_disks_counter",
        "value-columns":["good_disks", "bad_disks", "maintenance_disks"],
        "max-retry": 3,
        "sync-query": true
      },
      {
        "comment":"******************************* DOWNSAMPLE CQs *******************************",
        "template":"downsample.tmpl",
        "type": "downsampling",
        "min-depth":"24h",
        "max-depth":"24h",
        "start-offset": "0s",
        "keep-offset": "0s",
        "max-age": "1440h",
        "target":"cq_performance_transaction_downsampled",
        "value-columns":["failed_request_counter","succeed_request_counter"],
        "tag-columns":null,
        "depend-on": ["cq_performance_transaction"],
        "params":{
          "measurement":"cq_performance_transaction",
          "aggregation":"mean"
        },
        "max-retry": 3
      },
      {
        "template":"downsample.tmpl",
        "type": "downsampling",
        "min-depth":"24h",
        "max-depth":"24h",
        "start-offset": "0s",
        "keep-offset": "0s",
        "max-age": "1440h",
        "target":"cq_performance_transaction_delta_downsampled",
        "value-columns":["failed_request_counter_i","succeed_request_counter_i"],
        "tag-columns":null,
        "depend-on": ["cq_performance_transaction_delta"],
        "params":{
          "measurement":"cq_performance_transaction_delta",
          "aggregation":"sum"
        },
        "max-retry": 3
      },
      {
        "template":"downsample.tmpl",
        "type": "downsampling",
        "min-depth":"24h",
        "max-depth":"24h",
        "start-offset": "0s",
        "keep-offset": "0s",
        "max-age": "1440h",
        "target":"cq_performance_error_delta_downsampled",
        "value-columns":["user_errors_i","system_errors_i"],
        "tag-columns":null,
        "depend-on": ["cq_performance_error_delta"],
        "params":{
          "measurement":"cq_performance_error_delta",
          "aggregation":"sum"
        },
        "max-retry": 3
      },
      {
        "template":"downsample.tmpl",
        "type": "downsampling",
        "min-depth":"24h",
        "max-depth":"24h",
        "start-offset": "0s",
        "keep-offset": "0s",
        "max-age": "1440h",
        "target":"cq_performance_throughput_downsampled",
        "value-columns":["total_read_requests_size","total_write_requests_size"],
        "tag-columns":null,
        "depend-on": ["cq_performance_throughput"],
        "params":{
          "measurement":"cq_performance_throughput",
          "aggregation":"mean"
        },
        "max-retry": 3
      },
      {
        "template":"downsample.tmpl",
        "type": "downsampling",
        "min-depth":"24h",
        "max-depth":"24h",
        "start-offset": "0s",
        "keep-offset": "0s",
        "max-age": "1440h",
        "target":"cq_performance_error_downsampled",
        "value-columns":["user_errors","system_errors"],
        "tag-columns":null,
        "depend-on": ["cq_performance_error"],
        "params":{
          "measurement":"cq_performance_error",
          "aggregation":"mean"
        },
        "max-retry": 3
      },
      {
        "template":"downsample.tmpl",
        "type": "downsampling",
        "min-depth":"24h",
        "max-depth":"24h",
        "start-offset": "0s",
        "keep-offset": "0s",
        "max-age": "1440h",
        "target":"cq_performance_latency_downsampled",
        "value-columns":["p50","p99"],
        "tag-columns":["id"],
        "depend-on": ["cq_performance_latency"],
        "params":{
          "measurement":"cq_performance_latency",
          "aggregation":"mean"
        },
        "max-retry": 3
      },
      {
        "comment":"********************************** Total CQs **********************************",
        "template":"total.tmpl",
        "type":"downsampling",
        "min-depth":"5m",
        "max-depth":"1h",
        "start-offset":"-12h",
        "keep-offset":"0m",
        "max-age":"1440h",
        "target": "cq_total_cm_Chunk_Statistics",
        "value-columns": ["chunks_copy_active", "chunks_copy", "chunks_copy_s0", "chunks_xor",
          "chunks_level_0_btree_s0", "chunks_level_1_btree_s0", "chunks_level_0_journal_s0",
          "chunks_level_1_journal_s0", "chunks_level_0_btree_active", "chunks_level_1_btree_active", "chunks_level_0_journal_active",
          "chunks_level_1_journal_active", "chunks_level_0_btree", "chunks_level_1_btree", "chunks_level_0_journal", "chunks_level_1_journal" ,
          "data_copy", "data_xor", "data_level_0_btree"],
        "tag-columns": null,
        "max-retry": 3,
        "sync-query": true,
        "dependent-intervals": true,
        "params": {
          "database": "monitoring_main",
          "measurement": "cm_Chunk_Statistics_CoS_StorageTier_StoragePolicy"
        }
      },
      {
        "template":"total.tmpl",
        "type":"downsampling",
        "min-depth":"5m",
        "max-depth":"1h",
        "start-offset":"-12h",
        "keep-offset":"0m",
        "max-age":"1440h",
        "target": "cq_total_cm_Chunk_Statistics_Source",
        "value-columns": [
          "chunks_repo_active",
          "chunks_repo",
          "chunks_repo_s0",
          "chunks_typeI_ec_pending",
          "chunks_typeII_ec_pending",
          "data_repo",
          "data_repo_free"],
        "tag-columns": null,
        "max-retry": 3,
        "sync-query": true,
        "dependent-intervals": true,
        "params": {
          "database": "monitoring_main",
          "measurement": "cm_Chunk_Statistics_CoS_StorageTier_StoragePolicy_Source"
        }
      },
      {
        "template":"total.tmpl",
        "type":"downsampling",
        "min-depth":"5m",
        "max-depth":"1h",
        "start-offset":"-12h",
        "keep-offset":"0m",
        "max-age":"1440h",
        "target": "cq_total_cm_REPO_GC_Statistics",
        "value-columns": ["reclaimed_data_repo", "merge_copy_overhead_in_reclaimed_data_repo"],
        "tag-columns":null,
        "max-retry": 3,
        "sync-query": true,
        "dependent-intervals": true,
        "params": {
          "database": "monitoring_main",
          "measurement": "cm_REPO_GC_Statistics"
        }
      },
      {
        "template":"total.tmpl",
        "type":"downsampling",
        "min-depth":"5m",
        "max-depth":"1h",
        "start-offset":"-12h",
        "keep-offset":"0m",
        "max-age":"1440h",
        "target": "cq_total_cm_BTREE_GC_Statistics",
        "value-columns": [
          "verification_waiting_chunks_btree_gc_level_0", "verification_waiting_chunks_btree_gc_level_1",
          "reclaimed_data_btree_level_0", "reclaimed_data_btree_level_1",
          "copy_waiting_chunks_btree_gc_level_0", "copy_waiting_chunks_btree_gc_level_1",
          "candidate_garbage_btree_gc_level_0", "candidate_garbage_btree_gc_level_1"],
        "tag-columns":null,
        "max-retry": 3,
        "sync-query": true,
        "dependent-intervals": true,
        "params": {
          "database": "monitoring_main",
          "measurement": "cm_BTREE_GC_Statistics"
        }
      },
      {
        "template":"total.tmpl",
        "type":"downsampling",
        "min-depth":"5m",
        "max-depth":"1h",
        "start-offset":"-12h",
        "keep-offset":"0m",
        "max-age":"1440h",
        "target": "cq_total_sr_REPO_GC_Statistics",
        "value-columns": ["full_reclaimable_repo_chunk", "total_repo_garbage",
          "merge_copy_overhead_in_full_garbage", "garbage_in_repo_usage",
          "garbage_in_partial_sr_tasks"],
        "tag-columns":null,
        "max-retry": 3,
        "sync-query": true,
        "dependent-intervals": true,
        "params": {
          "database": "monitoring_main",
          "measurement": "sr_REPO_GC_Statistics"
        }
      },
      {
        "template":"total.tmpl",
        "type":"downsampling",
        "min-depth":"5m",
        "max-depth":"1h",
        "start-offset":"-12h",
        "keep-offset":"0m",
        "max-age":"1440h",
        "target": "cq_total_cm_EC_Statistics_Source",
        "value-columns": ["chunks_ec_encoded_alive", "data_ec_encoded_alive"],
        "tag-columns":null,
        "max-retry": 3,
        "sync-query": true,
        "dependent-intervals": true,
        "params": {
          "database": "monitoring_main",
          "measurement": "cm_EC_Statistics_CoS_StorageTier_StoragePolicy_Source"
        }
      },
      {
        "template":"total.tmpl",
        "type":"downsampling",
        "min-depth":"5m",
        "max-depth":"1h",
        "start-offset":"-12h",
        "keep-offset":"0m",
        "max-age":"1440h",
        "target": "cq_total_cm_Recover_Statistics",
        "value-columns": ["data_to_recover", "data_recovered"],
        "tag-columns":null,
        "max-retry": 3,
        "sync-query": true,
        "dependent-intervals": true,
        "params": {
          "database": "monitoring_main",
          "measurement": "cm_Recover_Statistics"
        }
      },
      {
        "template":"total.tmpl",
        "type":"downsampling",
        "min-depth":"5m",
        "max-depth":"1h",
        "start-offset":"-12h",
        "keep-offset":"0m",
        "max-age":"1440h",
        "target": "cq_total_cm_Rebalance_Statistics",
        "value-columns": ["bytes_rebalanced", "segments_for_rebalancing", "segments_rebalanced", "segments_rebalancing_failed"],
        "tag-columns":null,
        "max-retry": 3,
        "sync-query": true,
        "dependent-intervals": true,
        "params": {
          "database": "monitoring_main",
          "measurement": "cm_Rebalance_Statistics"
        }
      }
    ]
  capacity-data-being-processed.tmpl: |
    import "http"
  
    data1 = from(bucket: "monitoring_vdc")
        |> filter(fn: (r) => r._measurement == "cq_capacity_vdc" and r._field == "used")
        |> range(start:{{ .Start }}, stop:{{ .Stop }})
        |> last()
        |> keep(columns:["_stop", "_field", "_value"])
        |> rename(columns: {_stop: "_time"})
  
    data2 = from(bucket: "monitoring_vdc")
        |> filter(fn: (r) => r._measurement == "cq_capacity_used_elements")
        |> range(start:{{ .Start }}, stop:{{ .Stop }})
        |> last()
        |> keep(columns:["_stop", "_field", "_value"])
        |> rename(columns: {_stop: "_time"})
  
    data3 = from(bucket: "monitoring_vdc")
        |> filter(fn: (r) => r._measurement == "cq_gc_data")
        |> range(start:{{ .Start }}, stop:{{ .Stop }})
        |> last()
        |> keep(columns:["_stop", "_field", "_value"])
        |> rename(columns: {_stop: "_time"})
  
    union(tables: [data1, data2, data3])
        |> pivot(rowKey:["_time"],columnKey: ["_field"],valueColumn: "_value")
        |> map(fn: (r) => ({
            data_being_processed: r.used
                - r.user_data - r.meta_data
                - r.protection_overhead_user - r.protection_overhead_metadata
                - r.user_gc_pending - r.user_gc_unreclaim
                - r.system_gc_pending - r.system_gc_unreclaim,
            }))
  capacity-disks.tmpl: |-
    import "http"
  
    data = from(bucket: "monitoring_main")
    |> filter(fn: (r) => r._measurement == "ssm_sstable_SSTable_SS_partitions_PD"
      and (r._field == "freeSpace" or r._field == "totalSpace"))
    |> range(start:{{ .Start }},stop:{{ .Stop }})
    |> last()
    |> keep(columns: ["PD", "SS", "SSTable", "_field", "_value", "_stop"])
    |> last()
    |> rename(columns: {_stop: "_time"})
  
    L1 = data
    |> filter(fn: (r) => r.SSTable =~ /_1:$/)
    |> drop(columns: ["SSTable"])
    |> pivot(rowKey:[], columnKey: ["_field"], valueColumn: "_value")
    |> map(fn: (r) => ({freeSpace: r.freeSpace, totalSpace: r.totalSpace,
      usedSpace: int(v: math.mMax(x: float(v: r.totalSpace - r.freeSpace), y: float(v: 0))),
      SSTableLevel: "1"}))
  
    L2 = data
    |> filter(fn: (r) => r.SSTable =~ /_2:$/)
    |> drop(columns: ["SSTable"])
    |> pivot(rowKey:[], columnKey: ["_field"], valueColumn: "_value")
    |> map(fn: (r) => ({freeSpace: r.freeSpace, totalSpace: r.totalSpace,
      usedSpace: int(v: math.mMax(x: float(v: r.totalSpace - r.freeSpace), y: float(v: 0))),
      SSTableLevel: "2"}))
  
    sumL1L2 = data
    |> drop(columns: ["SSTable"])
    |> sum()
    |> pivot(rowKey:[], columnKey: ["_field"], valueColumn: "_value")
    |> map(fn: (r) => ({freeSpace: r.freeSpace, totalSpace: r.totalSpace,
      usedSpace: int(v: math.mMax(x: float(v: r.totalSpace - r.freeSpace), y: float(v: 0))),
      SSTableLevel: "Sum"}))
  
    union(tables: [L1, L2, sumL1L2])
  capacity-ec-rate.tmpl: |
    import "http"
    from(bucket: "monitoring_main")
    |> filter(fn: (r) => r._measurement == "cm_EC_Statistics_CoS_StorageTier_StoragePolicy_Source" and r._field == "data_ec_encoded_alive")
    |> range(start: {{ .Start }}, stop: {{ .Stop }})
    |> derivative(nonNegative: true)
    |> last()
    |> keep(columns:["_stop", "_value"])
    |> sum()
    |> set(key: "_field", value: "coding_rate")
    |> map(fn: (r) => ({_time:{{ .Stop }},
                            _field: r._field,
                            _value: r._value,
                            }))
    |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
  capacity-ec.tmpl: |
    import "http"
    coding_data=from(bucket: "monitoring_vdc")
    |> filter(fn: (r) => r._measurement == "cq_total_cm_Chunk_Statistics_source" and r._field == "data_repo")
    |> range(start: {{ .Start }}, stop: {{ .Stop }})
    |> last()
    |> keep(columns:["_stop", "_value"])
    // sum all fields (repo))
    |> sum()
    |> toFloat()
    |> set(key: "_field", value: "total_coding_data")
  
    coded_data=from(bucket: "monitoring_vdc")
    |> filter(fn: (r) => r._measurement == "cq_total_cm_EC_Statistics_source" and r._field == "data_ec_encoded_alive")
    |> range(start: {{ .Start }}, stop: {{ .Stop }})
    |> last()
    |> keep(columns:["_stop", "_value"])
    |> sum()
    |> toFloat()
    |> set(key: "_field", value: "total_coded_data")
  
    union(tables: [coding_data, coded_data])
    |> rename(columns:{_stop: "_time"})
    |> pivot(rowKey:["_time"], columnKey: ["_field"], valueColumn: "_value")
  capacity-nodes-offline.tmpl: |
    import "http"
  
    // Capacity per node: offline
    // Sum of Total capacity for all:
    // * Partition not in good hardware state
    // * Partition on node which is not in good hard ware state
    // on LV1 and LV2
  
    nodeStatus = from(bucket: "monitoring_vdc")
    |> filter(fn: (r) => r._measurement == "cq_ss_state" and r._field == "SSState")
    |> range(start:{{ .Start }},stop:{{ .Stop }})
    |> last()
    |> keep(columns: ["SS", "_value"])
  
    nodeStatusGood = nodeStatus |> filter(fn: (r) => r._value == 1) |> keep(columns: ["SS"])
    nodeStatusBad = nodeStatus |> filter(fn: (r) => r._value != 1) |> keep(columns: ["SS"])
  
    diskStatus = from(bucket: "monitoring_vdc")
    |> filter(fn: (r) => r._measurement == "cq_disk_state" and r._field == "hwState")
    |> range(start:{{ .Start }},stop:{{ .Stop }})
    |> last()
    |> keep(columns: ["SS", "PD", "_value"])
  
    // Sets of disks filtered by statuses for further filtering of capacity metrics
  
    diskStatusAll = diskStatus
    |> keep(columns: ["SS", "PD"])
  
    diskStatusGood = diskStatus
    |> filter(fn: (r) => r._value == "GOOD")
    |> keep(columns: ["SS", "PD"])
  
    diskStatusNotGood = diskStatus
    |> filter(fn: (r) => r._value != "GOOD")
    |> keep(columns: ["SS", "PD"])
  
    // Calculate total space:
    // Good nodes: sum of total space on good and maintenance disks
    // Bad nodes: sum of total space on maintenance disks
  
    space = from(bucket: "monitoring_vdc")
    |> filter(fn: (r) => r._measurement == "cq_capacity_disks" and r.SSTableLevel == "Sum" and (r._field == "totalSpace" or r._field == "freeSpace"))
    |> range(start:{{ .Start }},stop:{{ .Stop }})
    |> last()
    |> keep(columns: ["_stop", "SS", "PD", "_field", "_value"])
    |> rename(columns: {_stop: "_time"})
  
    spaceGoodNodes = join(tables: {space: space, nodeStatusGood: nodeStatusGood}, on: ["SS"])
    spaceBadNodes = join(tables: {space: space, nodeStatusBad: nodeStatusBad}, on: ["SS"])
  
  
    // Calculate offline space:
    // Good nodes: sum of total space on not good disks
    // Bad nodes: sum of total space of all disks
  
    // Offline space values for not good disks on good nodes
    offlineSpaceGoodNodesNotGoodDisks = join(tables:
                                        {spaceGoodNodes: spaceGoodNodes,
                                         diskStatusNotGood: diskStatusNotGood},
                                      on: ["PD", "SS"])
  
    // Set offline space for good disks on good nodes to 0
    offlineSpaceGoodNodesGoodDisks = join(tables:
                                             {spaceGoodNodes: spaceGoodNodes,
                                              diskStatusGood: diskStatusGood},
                                           on: ["PD", "SS"])
    |> map(fn: (r) => 0)
  
    // Offline space values for all disks on bad nodes
    offlineSpaceBadNodesAllDisks = join(tables:
                                       {spaceBadNodes: spaceBadNodes,
                                        diskStatusAll: diskStatusAll},
                                     on: ["PD", "SS"])
  
    union(tables: [offlineSpaceGoodNodesNotGoodDisks, offlineSpaceGoodNodesGoodDisks,
                   offlineSpaceBadNodesAllDisks])
    // Drop 'PD' to sum values per SS
    |> keep(columns: ["_field", "_value", "SS", "_time"])
    |> sum()
    |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
    |> map(fn: (r) => ({
        offline: r.totalSpace,
        offline_recovered: r.freeSpace,
        offline_unrecovered: int(v: math.mMax(x: float(v: r.totalSpace - r.freeSpace), y: float(v: 0)))
        }))
    |> rename(columns: {SS: "_host_id"})
  capacity-nodes-total.tmpl: |
    import "http"
  
    // Capacity per node: total
  
    totalPerSSTableLevel = from(bucket: "monitoring_vdc")
    |> filter(fn: (r) => r._measurement == "cq_capacity_disks" and r._field == "totalSpace")
    |> range(start:{{ .Start }},stop:{{ .Stop }})
    |> last()
    |> keep(columns: ["_stop", "SS", "PD", "SSTableLevel", "_value"])
    |> rename(columns: {_stop: "_time"})
  
    total = totalPerSSTableLevel
    // Drop 'SSTableLevel' and 'PD' to sum values per SS
    |> filter(fn: (r) => r.SSTableLevel == "Sum")
    |> keep(columns: ["_value", "SS", "_time"])
    |> sum()
    |> set(key: "_field",value: "total_i")
  
    totalL1 = totalPerSSTableLevel
    |> filter(fn: (r) => r.SSTableLevel == "1")
    |> keep(columns: ["_value", "_time", "SS"])
    |> sum()
    |> set(key: "_field",value: "totalL1")
  
    totalL2 = totalPerSSTableLevel
    |> filter(fn: (r) => r.SSTableLevel == "2")
    |> keep(columns: ["_value", "_time", "SS"])
    |> sum()
    |> set(key: "_field",value: "totalL2")
  
  
    // Gather result table
    union(tables: [total, totalL1, totalL2])
    |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
    |> keep(columns: ["SS", "_time",
                      "total_i", "totalL1", "totalL2"])
    |> rename(columns: {SS: "_host_id"})
  capacity-nodes-used.tmpl: |
    import "http"
  
    // Capacity per node: used
    //
    // Sum of allocated capacity for all partition in good hardware state and its device is also in good hardware state.
    //
    // Formula:
    //
    // Total Physical Capacity = Sum of all node's all partitions' (totalSpace - freeSpace)
    // which partition stats is good and device stats is good
  
    nodeStatus = from(bucket: "monitoring_vdc")
    |> filter(fn: (r) => r._measurement == "cq_ss_state" and r._field == "SSState")
    |> range(start:{{ .Start }},stop:{{ .Stop }})
    |> last()
    |> keep(columns: ["SS", "_value"])
  
    nodeStatusGood = nodeStatus |> filter(fn: (r) => r._value == 1) |> keep(columns: ["SS"])
    nodeStatusBad = nodeStatus |> filter(fn: (r) => r._value != 1) |> keep(columns: ["SS"])
  
    diskStatus = from(bucket: "monitoring_vdc")
    |> filter(fn: (r) => r._measurement == "cq_disk_state" and r._field == "hwState")
    |> range(start:{{ .Start }},stop:{{ .Stop }})
    |> last()
    |> keep(columns: ["SS", "PD", "_value"])
  
    // Sets of disks filtered by statuses for further filtering of capacity metrics
  
    diskStatusGood = diskStatus
    |> filter(fn: (r) => r._value == "GOOD")
    |> keep(columns: ["SS", "PD"])
  
    diskStatusNotGood = diskStatus
    |> filter(fn: (r) => r._value != "GOOD")
    |> keep(columns: ["SS", "PD"])
  
    // Calculate used (allocated) space:
    // Good nodes: sum of used space on good disks
    // Bad nodes: 0
  
    usedSpace = from(bucket: "monitoring_vdc")
    |> filter(fn: (r) => r._measurement == "cq_capacity_disks" and r._field == "usedSpace")
    |> range(start:{{ .Start }},stop:{{ .Stop }})
    |> last()
    |> keep(columns: ["_stop", "SS", "PD", "SSTableLevel", "_value"])
    |> rename(columns: {_stop: "_time"})
  
    usedSpaceGoodNodes = join(tables: {usedSpace: usedSpace, nodeStatusGood: nodeStatusGood}, on: ["SS"])
  
    // Used space values for good and maintenance disks on good nodes
    usedSpaceGoodNodesGoodDisks = join(tables:
                                     {usedSpaceGoodNodes: usedSpaceGoodNodes,
                                      diskStatusGood: diskStatusGood},
                                   on: ["PD", "SS"])
  
    // Set used space for not good on good nodes to 0
    usedSpaceGoodNodesNotGoodDisks = join(tables:
                                          {usedSpaceGoodNodes: usedSpaceGoodNodes,
                                           diskStatusNotGood: diskStatusNotGood},
                                        on: ["PD", "SS"])
    |> map(fn: (r) => 0)
  
    usedSpaceBadNodes = join(tables: {usedSpace: usedSpace, nodeStatusBad: nodeStatusBad}, on: ["SS"])
  
    // Set used space for all disks on bad nodes to 0
    usedSpaceBadNodesAllDisks = join(tables:
                                    {usedSpaceBadNodes: usedSpaceBadNodes,
                                     diskStatus: diskStatus},
                                  on: ["PD", "SS"])
    |> map(fn: (r) => 0)
  
    usedPerSSTableLevel = union(tables: [usedSpaceGoodNodesGoodDisks, usedSpaceGoodNodesNotGoodDisks,
                                         usedSpaceBadNodesAllDisks])
  
    used = usedPerSSTableLevel
    // Drop 'SSTableLevel' and 'PD' to sum values per SS
    |> filter(fn: (r) => r.SSTableLevel == "Sum")
    |> keep(columns: ["_value", "SS", "_time"])
    |> sum()
    |> set(key: "_field",value: "used")
  
    usedL1 = usedPerSSTableLevel
    |> filter(fn: (r) => r.SSTableLevel == "1")
    // Drop 'SSTableLevel' and 'PD' to sum values per SS
    |> keep(columns: ["_value", "SS", "_time"])
    |> sum()
    |> set(key: "_field",value: "usedL1")
  
    usedL2 = usedPerSSTableLevel
    |> filter(fn: (r) => r.SSTableLevel == "2")
    // Drop 'SSTableLevel' and 'PD' to sum values per SS
    |> keep(columns: ["_value", "SS", "_time"])
    |> sum()
    |> set(key: "_field",value: "usedL2")
  
    // Gather result table
    union(tables: [used, usedL1, usedL2])
    |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
    |> keep(columns: ["SS", "_time",
                      "used", "usedL1", "usedL2"])
    |> rename(columns: {SS: "_host_id"})
  capacity-used-elements.tmpl: |
    import "http"
  
    data1 = from(bucket: "monitoring_vdc")
        |> filter(fn: (r) => r._measurement == "cq_capacity_used_user_data")
        |> range(start:{{ .Start }}, stop:{{ .Stop }})
        |> last()
        |> keep(columns:["_stop", "_field", "_value"])
        |> rename(columns: {_stop: "_time"})
  
    data2 = from(bucket: "monitoring_vdc")
        |> filter(fn: (r) => r._measurement == "cq_capacity_used_meta_data")
        |> range(start:{{ .Start }}, stop:{{ .Stop }})
        |> last()
        |> keep(columns:["_stop", "_field", "_value"])
        |> rename(columns: {_stop: "_time"})
  
    data3 = from(bucket: "monitoring_vdc")
        |> filter(fn: (r) => r._measurement == "cq_capacity_used_protection")
        |> range(start:{{ .Start }}, stop:{{ .Stop }})
        |> last()
        |> keep(columns:["_stop", "_field", "_value"])
        |> rename(columns: {_stop: "_time"})
  
    union(tables: [data1, data2, data3])
        |> pivot(rowKey:["_time"],columnKey: ["_field"],valueColumn: "_value")
        |> map(fn: (r) => ({
            user_data: r.user_data,
            meta_data: r.meta_data,
            protection_overhead_user: r.protection_overhead_user_data_ec + r.protection_overhead_user_data_non_ec,
            protection_overhead_metadata: r.protection_overhead_metadata_btree + r.protection_overhead_metadata_journal,
            }))
  capacity-used-metadata.tmpl: |
    import "http"
    chunk_size = 134217600
  
    from(bucket: "monitoring_vdc")
        |> filter(fn: (r) => r._measurement == "cq_total_cm_Chunk_Statistics"
                            and r._field =~ /^(chunks_level_(0|1)_(btree|journal)(|_s0|_active))$/)
        |> range(start:{{ .Start }}, stop:{{ .Stop }})
        |> last()
        |> keep(columns:["_stop", "_field", "_value"])
        |> rename(columns: {_stop: "_time"})
        |> pivot(rowKey:["_time"],columnKey: ["_field"], valueColumn: "_value")
        |> map(fn: (r) => ({
            L1_btree_size: (r.chunks_level_0_btree_active + r.chunks_level_0_btree - r.chunks_level_0_btree_s0) * chunk_size,
            L2_btree_size: (r.chunks_level_1_btree_active + r.chunks_level_1_btree - r.chunks_level_1_btree_s0) * chunk_size,
            L1_journal_size: (r.chunks_level_0_journal_active + r.chunks_level_0_journal - r.chunks_level_0_journal_s0) * chunk_size,
            L2_journal_size: (r.chunks_level_1_journal_active + r.chunks_level_1_journal - r.chunks_level_1_journal_s0) * chunk_size,
            }))
        |> map(fn: (r) => ({
            meta_data: r.L1_btree_size + r.L2_btree_size + r.L1_journal_size + r.L2_journal_size,
            meta_data_btree: r.L1_btree_size + r.L2_btree_size,
            meta_data_journal: r.L1_journal_size + r.L2_journal_size,
            meta_data_pravega: 0,
            }))
  capacity-used-protection.tmpl: |
    import "http"
    chunk_size = 134217600
    EC_Protection_Overhead = 0.25
    Non_EC_Protection_Overhead = 2
  
    data1 = from(bucket: "monitoring_vdc")
        |> filter(fn: (r) => r._measurement == "cq_total_cm_Chunk_Statistics_Source"
                    and r._field =~ /^(chunks_typeII?_ec_pending|chunks_repo_active|chunks_repo|chunks_repo_s0)$/)
        |> range(start:{{ .Start }}, stop:{{ .Stop }})
        |> last()
        |> keep(columns:["_stop", "_field", "_value"])
        |> rename(columns: {_stop: "_time"})
  
    data2 = from(bucket: "monitoring_vdc")
        |> filter(fn: (r) => r._measurement == "cq_total_cm_EC_Statistics_Source"
                    and r._field == "chunks_ec_encoded_alive")
        |> range(start:{{ .Start }}, stop:{{ .Stop }})
        |> last()
        |> keep(columns:["_stop", "_field", "_value"])
        |> rename(columns: {_stop: "_time"})
  
    data3 = from(bucket: "monitoring_vdc")
        |> filter(fn: (r) => r._measurement == "cq_capacity_used_meta_data")
        |> range(start:{{ .Start }}, stop:{{ .Stop }})
        |> last()
        |> keep(columns:["_stop", "_field", "_value"])
        |> rename(columns: {_stop: "_time"})
  
    union(tables: [data1, data2, data3])
        |> pivot(rowKey:["_time"],columnKey: ["_field"],valueColumn: "_value")
        |> map(fn: (r) => ({
            chunk_with_ec_count: r.chunks_ec_encoded_alive + r.chunks_typeI_ec_pending + r.chunks_typeII_ec_pending,
            chunk_only_ec_count: r.chunks_typeII_ec_pending + r.chunks_ec_encoded_alive,
            repo_chunk_count: r.chunks_repo_active + r.chunks_repo - r.chunks_repo_s0,
            metadata_btree: r.meta_data_btree,
            metadata_journal: r.meta_data_journal,
            }))
        |> map(fn: (r) => ({
            protection_overhead_user_data_ec: r.chunk_with_ec_count * int(v: float(v: chunk_size) * EC_Protection_Overhead),
            protection_overhead_user_data_non_ec: (r.repo_chunk_count - r.chunk_with_ec_count) * chunk_size * Non_EC_Protection_Overhead,
            protection_overhead_metadata_btree: r.metadata_btree * Non_EC_Protection_Overhead,
            protection_overhead_metadata_journal: r.metadata_journal * Non_EC_Protection_Overhead,
            }))
  capacity-used-user-data.tmpl: |
    import "http"
    chunk_size = 134217600
  
    // USER (REPO) DATA USAGE
    data = from(bucket: "monitoring_vdc")
        |> filter(fn: (r) => r._measurement == "cq_total_cm_Chunk_Statistics_Source"
                        and r._field =~ /^(chunks_repo_active|chunks_repo|chunks_repo_s0|data_repo_free)$/)
        |> range(start:{{ .Start }}, stop:{{ .Stop }})
        |> last()
        |> keep(columns:["_stop", "_field", "_value"])
        |> rename(columns: {_stop: "_time"})
  
    data
        |> pivot(rowKey:["_time"],columnKey: ["_field"],valueColumn: "_value")
        |> map(fn: (r) => ({
            user_injected_active: r.chunks_repo_active * chunk_size,
            user_injected_sealed: (r.chunks_repo - r.chunks_repo_s0) * chunk_size - r.data_repo_free,
            }))
        |> map(fn: (r) => ({
            user_injected_active: r.user_injected_active,
            user_injected_sealed: r.user_injected_sealed,
            user_injected: r.user_injected_active + r.user_injected_sealed,
            user_data: r.user_injected_active + r.user_injected_sealed,
            replica: 0,
            replica_active: 0,
            replica_sealed: 0,
            }))
  capacity-vdc.tmpl: |
    import "http"
  
    // Capacity for VDC: total, used, available, reserved
  
    // TODO: get reserved threshold from stats
    reservedThreshold = 0.1
  
    capacity_total = from(bucket: "monitoring_vdc")
    |> filter(fn: (r) => r._measurement == "cq_capacity_nodes_total")
    |> range(start:{{ .Start }}, stop:{{ .Stop }})
    // Get last result
    |> last()
    // Drop _host and _host_id tags
    |> keep(columns: ["_stop", "_value", "_field"])
    |> rename(columns: {_stop: "_time"})
    // Sum values per _field
    |> sum()
  
    capacity_used = from(bucket: "monitoring_vdc")
    |> filter(fn: (r) => r._measurement == "cq_capacity_nodes_used")
    |> range(start:{{ .Start }}, stop:{{ .Stop }})
    // Get last result
    |> last()
    // Drop _host and _host_id tags
    |> keep(columns: ["_stop", "_value", "_field"])
    |> rename(columns: {_stop: "_time"})
    // Sum values per _field
    |> sum()
  
    capacity_offline = from(bucket: "monitoring_vdc")
    |> filter(fn: (r) => r._measurement == "cq_capacity_nodes_offline")
    |> range(start:{{ .Start }}, stop:{{ .Stop }})
    // Get last result
    |> last()
    // Drop _host and _host_id tags
    |> keep(columns: ["_stop", "_value", "_field"])
    |> rename(columns: {_stop: "_time"})
    // Sum values per _field
    |> sum()
  
    union(tables: [capacity_total, capacity_used, capacity_offline])
    |> pivot(rowKey:["_time"], columnKey: ["_field"], valueColumn: "_value")
    |> map(fn: (r) => ({
        _time: r._time,
        total_i: r.total_i,
        used: r.used,
        offline: r.offline,
        offline_recovered: r.offline_recovered,
        _reserved: int(v: math.mMax(
            x: float(v: r.total_i - r.offline) * reservedThreshold,
            y: float(v: 0)))
    }))
    |> map(fn: (r) => ({
        _time: r._time,
        total_i: r.total_i,
        used: r.used,
        available: int(v: math.mMax(
            x: float(v: r.total_i) - float(v: r.used) - float(v: r.offline) - float(v: r._reserved),
            y: float(v: 0))),
        reserved: r._reserved,
        offline: r.offline,
        offline_recovered: r.offline_recovered,
        offline_unrecovered: int(v: math.mMax(
                x: float(v: r.offline - r.offline_recovered),
                y: float(v: 0)))
    }))
  disk-bandwidth.tmpl: |
    import "http"
    // compute mean disk banwidth over selected time range
  
    all = from(bucket: "monitoring_main")
    |> filter(fn: (r) => r._measurement =~ /_IO_Statistics_data_(read|write)/ and r._field =~ /Total/)
    |> range(start:{{ .Start }},stop:{{ .Stop }})
    |> keep(columns: ["_measurement","node_id","_value","_stop","_time", "_field"])
    // compute mean of bandwidth over selected time-range
    |> derivative(nonNegative: true)
    |> mean()
    // sum up all nodes and processes
    |> drop(columns:["_measurement","node_id"])
    |> sum()
  
    // compute 'read' bandwidth
    reads = all
    |> filter(fn: (r) => r._field =~ /^read_/)
    |> pivot(rowKey:["_stop"], columnKey: ["_field"], valueColumn: "_value")
    |> set(key: "type_op", value: "read")
    |> map(fn: (r) => ({
        _time: r._stop,
        type_op: r.type_op,
        total: r.read_CCTotal + r.read_ECTotal + r.read_GEOTotal
          + r.read_RECOVERTotal + r.read_USERTotal + r.read_XORTotal,
        consistency_checker: r.read_CCTotal,
        erasure_encoding: r.read_ECTotal,
        geo: r.read_GEOTotal,
        hardware_recovery: r.read_RECOVERTotal,
        user_traffic: r.read_USERTotal,
        xor: r.read_XORTotal}))
  
    // compute 'write' bandwidth
    write = all
    |> filter(fn: (r) => r._field =~ /^write_/)
    |> pivot(rowKey:["_stop"], columnKey: ["_field"], valueColumn: "_value")
    |> set(key: "type_op", value: "write")
    |> map(fn: (r) => ({
        _time: r._stop,
        type_op: r.type_op,
        total: r.write_CCTotal + r.write_ECTotal + r.write_GEOTotal
          + r.write_RECOVERTotal + r.write_USERTotal + r.write_XORTotal,
        consistency_checker: r.write_CCTotal,
        erasure_encoding: r.write_ECTotal,
        geo: r.write_GEOTotal,
        hardware_recovery: r.write_RECOVERTotal,
        user_traffic: r.write_USERTotal,
        xor: r.write_XORTotal}))
  
    // union of results
    union(tables: [reads, write])
    |> group(columns:["_field", "type_op"])
  disk-state.tmpl: |
    import "http"
  
    // Disk hwState per SS/PD
  
    from(bucket: "monitoring_main")
    |> filter(fn: (r) => r._measurement == "ssm_sstable_SSTable_SS_partitions_PD_status" and r._field == "hwState")
    |> range(start:{{ .Start }},stop:{{ .Stop }})
    |> last()
    |> keep(columns: ["_stop", "SS", "PD", "_value"])
    |> last()
    // filter MISSING and REMOVED disks that are not used in capacity calculations
    |> filter(fn: (r) => r._value == "GOOD"
                         or r._value == "MAINTENANCE"
                         or r._value == "BAD"
                         or r._value == "SUSPECT"
                         )
    |> rename(columns:{_stop: "_time"})
    |> map(fn: (r) => ({hwState: r._value}))
  downsample.tmpl: |
    import "http"
    from(bucket: "monitoring_vdc")
    |> filter(fn: (r) => r._measurement == "{{ .Params.measurement }}")
    |> range(start:{{ .Start }},stop:{{ .Stop }})
    // following 2 lines are to fix MONITORING-568
    |> rename(columns: {_value: "_value"})
    |> range(start:{{ .Start }},stop:{{ .Stop }})
    |> {{ .Params.aggregation }}()
    |> rename(columns: {_start: "_time"})
    |> pivot(rowKey:["_time"], columnKey: ["_field"], valueColumn: "_value")
    |> group()
  gc-stats.tmpl: |-
    import "http"
    CHUNK_SIZE = 134217600
    EC_Protection_Overhead = 0.25
    Non_EC_Protection_Overhead = 2
  
    data1 = from(bucket: "monitoring_vdc")
        |> filter(fn: (r) => r._measurement == "cq_total_sr_REPO_GC_Statistics"
                    and r._field =~ /^(full_reclaimable_repo_chunk|merge_copy_overhead_in_full_garbage|garbage_in_repo_usage|garbage_in_partial_sr_tasks|total_repo_garbage)$/)
        |> range(start:{{ .Start }}, stop:{{ .Stop }})
        |> last()
        |> keep(columns:["_stop", "_field", "_value"])
        |> rename(columns: {_stop: "_time"})
  
    data2 = from(bucket: "monitoring_vdc")
        |> filter(fn: (r) => r._measurement == "cq_total_cm_REPO_GC_Statistics")
        |> range(start:{{ .Start }}, stop:{{ .Stop }})
        |> last()
        |> keep(columns:["_stop", "_field", "_value"])
        |> rename(columns: {_stop: "_time"})
  
    data3 = from(bucket: "monitoring_vdc")
        |> filter(fn: (r) => r._measurement == "cq_total_cm_BTREE_GC_Statistics"
                    and r._field =~ /^(verification_waiting_chunks_btree_gc_level_0|verification_waiting_chunks_btree_gc_level_1|reclaimed_data_btree_level_0|reclaimed_data_btree_level_1|copy_waiting_chunks_btree_gc_level_0|copy_waiting_chunks_btree_gc_level_1|candidate_garbage_btree_gc_level_0|candidate_garbage_btree_gc_level_1)$/)
        |> range(start:{{ .Start }}, stop:{{ .Stop }})
        |> last()
        |> keep(columns:["_stop", "_field", "_value"])
        |> rename(columns: {_stop: "_time"})
  
    union(tables: [data1, data2, data3])
        |> pivot(rowKey:["_time"],columnKey: ["_field"],valueColumn: "_value")
        |> map(fn: (r) => ({
            user_data_full_reclaimable_size: r.full_reclaimable_repo_chunk * CHUNK_SIZE - r.merge_copy_overhead_in_full_garbage + r.reclaimed_data_repo - r.merge_copy_overhead_in_reclaimed_data_repo,
            user_data_partial_eligible_size: r.garbage_in_repo_usage + r.garbage_in_partial_sr_tasks,
            user_data_reclaimable_garbage_protection_overhead: r.full_reclaimable_repo_chunk * int(v: float(v: CHUNK_SIZE) * EC_Protection_Overhead),
            metadata_btree_full_reclaimable_size: (r.verification_waiting_chunks_btree_gc_level_0 + r.verification_waiting_chunks_btree_gc_level_1) * CHUNK_SIZE + r.reclaimed_data_btree_level_0 + r.reclaimed_data_btree_level_1,
            metadata_btree_partial_eligible_size: (r.copy_waiting_chunks_btree_gc_level_0 + r.copy_waiting_chunks_btree_gc_level_1) * CHUNK_SIZE,
            metadata_btree_reclaimable_garbage_protection_overhead: (r.verification_waiting_chunks_btree_gc_level_0 + r.verification_waiting_chunks_btree_gc_level_1 ) * CHUNK_SIZE * Non_EC_Protection_Overhead,
            metadata_pravega_garbage_size: 0,
            user_data_unreclaimable_garbage_size: r.total_repo_garbage - r.full_reclaimable_repo_chunk * CHUNK_SIZE - (r.garbage_in_repo_usage + r.garbage_in_partial_sr_tasks),
            metadata_pravega_partial_unreclaimable_size: 0,
  
            candidate_garbage_btree_gc_level_0: r.candidate_garbage_btree_gc_level_0,
            candidate_garbage_btree_gc_level_1: r.candidate_garbage_btree_gc_level_1,
            }))
        |> map(fn: (r) => ({
            user_data_reclaimable_garbage: r.user_data_full_reclaimable_size + r.user_data_partial_eligible_size + r.user_data_reclaimable_garbage_protection_overhead,
            metadata_reclaimable_garbage: r.metadata_btree_full_reclaimable_size + r.metadata_btree_partial_eligible_size + r.metadata_btree_reclaimable_garbage_protection_overhead + r.metadata_pravega_garbage_size,
            metadata_btree_reclaimable_garbage_protection_overhead: r.metadata_btree_reclaimable_garbage_protection_overhead,
            metadata_btree_partial_unreclaimable_size: r.candidate_garbage_btree_gc_level_0 + r.candidate_garbage_btree_gc_level_1 - r.metadata_btree_full_reclaimable_size - r.metadata_btree_partial_eligible_size,
  
            user_data_full_reclaimable_size: r.user_data_full_reclaimable_size,
            user_data_partial_eligible_size: r.user_data_partial_eligible_size,
            user_data_reclaimable_garbage_protection_overhead: r.user_data_reclaimable_garbage_protection_overhead,
            metadata_btree_full_reclaimable_size: r.metadata_btree_full_reclaimable_size,
            metadata_btree_partial_eligible_size: r.metadata_btree_partial_eligible_size,
            metadata_pravega_garbage_size: r.metadata_pravega_garbage_size,
            user_data_unreclaimable_garbage_size: r.user_data_unreclaimable_garbage_size,
            metadata_pravega_partial_unreclaimable_size: r.metadata_pravega_partial_unreclaimable_size,
            }))
        |> map(fn: (r) => ({
            system_gc_pending: r.metadata_btree_full_reclaimable_size + r.metadata_btree_partial_eligible_size + r.metadata_btree_reclaimable_garbage_protection_overhead + r.metadata_pravega_garbage_size,
            system_gc_unreclaim: r.metadata_btree_partial_unreclaimable_size + r.metadata_pravega_partial_unreclaimable_size,
  
            user_gc_pending: r.user_data_reclaimable_garbage,
            user_gc_unreclaim: r.user_data_unreclaimable_garbage_size,
            user_data_full_reclaimable_size: r.user_data_full_reclaimable_size,
            user_data_partial_eligible_size: r.user_data_partial_eligible_size,
            user_data_reclaimable_garbage_protection_overhead: r.user_data_reclaimable_garbage_protection_overhead,
            metadata_btree_full_reclaimable_size: r.metadata_btree_full_reclaimable_size,
            metadata_btree_partial_eligible_size: r.metadata_btree_partial_eligible_size,
            metadata_btree_reclaimable_garbage_protection_overhead: r.metadata_btree_reclaimable_garbage_protection_overhead,
            metadata_pravega_garbage_size: r.metadata_pravega_garbage_size,
            metadata_btree_partial_unreclaimable_size: r.metadata_btree_partial_unreclaimable_size,
            metadata_pravega_partial_unreclaimable_size: r.metadata_pravega_partial_unreclaimable_size,
            }))
  hardware-health-disks-counters.tmpl: |+
    import "http"
  
    // MONITORING-414
    // good, bad, maintenance counters for disks for dashboards widget
    // example:
    //#datatype,string,long,long,long,long
    //#group,false,false,false,false,false
    //#default,_result,,,,
    //,result,table,bad_disks,good_disks,maintenance_disks
    //,,0,2,228,1
  
    disks = from(bucket: "monitoring_main")
    |> filter(fn: (r) => r._measurement == "ssm_sstable_SSTable_SS_partitions_PD_status" and r._field == "hwState")
    |> range(start:{{ .Start }}, stop:{{ .Stop }})
    |> last()
    |> keep(columns: ["SS", "PD", "_value"])
    |> last()
    |> group()
  
    //filter out different statuses
    good_d = disks
    |> filter(fn: (r) => r.hwState =~ /(?i)good/)
    |> count(columns: ["PD"])
    |> group()
    |> sum(columns: ["PD"])
    |> rename(columns:{"PD": "good_disks"})
  
    bad_d = disks
    |> filter(fn: (r) => r.hwState =~ /(?i)bad|(?i)unknown|(?i)suspect/)
    |> count(columns: ["PD"])
    |> group()
    |> sum(columns: ["PD"])
    |> rename(columns:{"PD": "bad_disks"})
  
    maintenance_d = disks
    |> filter(fn: (r) => r.hwState =~ /(?i)maintenance/)
    |> count(columns: ["PD"])
    |> group()
    |> sum(columns: ["PD"])
    |> rename(columns:{"PD": "maintenance_disks"})
  
    count_disks = join(tables: {good_d: good_d, bad_d: bad_d})
    join(tables: {count_disks: count_disks, maintenance_d: maintenance_d})
    |> set(key: "_measurement", value: "cq_hardware_disks_counter")
    |> map(fn: (r) => ({_time: {{ .Stop }}, good_disks: r.good_disks, bad_disks: r.bad_disks, maintenance_disks: r.maintenance_disks}))
  
  hardware-health-nodes-counters.tmpl: |+
    import "http"
  
    // MONITORING-414
    // good, bad, maintenance counters for nodes for dashboards widget
    // example:
    //#datatype,string,long,long,long,long
    //#group,false,false,false,false,false
    //#default,_result,,,,
    //,result,table,bad_nodes,good_nodes,maintenance_nodes
    //,,0,0,8,0
  
    nodes = from(bucket: "monitoring_main")
    |> filter(fn: (r) => r._measurement == "ssm_sstable_SSTable_SS" and r._field == "state")
    |> range(start:{{ .Start }}, stop:{{ .Stop }})
    |> last()
    |> keep(columns: ["SS", "_value"])
    |> last()
  
    //filter out different statuses
    good_n = nodes
    |> filter(fn: (r) => r.state == "SS UP")
    |> count(columns: ["state"])
    |> group()
    |> sum(columns: ["state"])
    |> rename(columns:{"state": "good_nodes"})
  
    bad_n = nodes
    |> filter(fn: (r) => r.state !~ /SS UP|SS Maintenance/)
    |> count(columns: ["state"])
    |> group()
    |> sum(columns: ["state"])
    |> rename(columns:{"state": "bad_nodes"})
  
    maintenance_n = nodes
    |> filter(fn: (r) => r.state == "SS Maintenance")
    |> count(columns: ["state"])
    |> group()
    |> sum(columns: ["state"])
    |> rename(columns:{"state": "maintenance_nodes"})
  
    count_nodes = join(tables: {good_n: good_n, bad_n: bad_n})
    join(tables: {count_nodes: count_nodes, maintenance_n: maintenance_n})
    |> set(key: "_measurement", value: "cq_hardware_health_nodes_counter")
    |> map(fn: (r) => ({_time: {{ .Stop }}, good_nodes: r.good_nodes, bad_nodes: r.bad_nodes, maintenance_nodes: r.maintenance_nodes}))
  
  
  latency.tmpl: |
    import "http"
    raw = from(bucket: "monitoring_main")
    |> filter(fn: (r) => r._measurement == "{{ .Params.measurement }}")
    |> range(start:{{ .Start }},stop:{{ .Stop }})
    |> keep(columns:["_time", "_field", "_value", "host", "id"])
    |> difference(nonNegative: true)
    |> fill(column: "_value", value: 0)
    |> group(columns: ["_field", "id"])
    |> window(every:5m)
    |> sum()
    |> rename(columns: {_start: "_time"})
    |> range(start:{{ .KeepStart }},stop:{{ .Stop }})
    |> map(fn:(r) => ({le_float: float(v:r._field), cnt_float: float(v:r._value)}))
    |> drop(columns:["_field", "_stop"])
  
    p50 = raw |> histogramQuantile(quantile:0.50, upperBoundColumn: "le_float", countColumn: "cnt_float")
    |> set(key: "_field", value: "p50")
    p99 = raw |> histogramQuantile(quantile:0.99, upperBoundColumn: "le_float", countColumn: "cnt_float")
    |> set(key: "_field", value: "p99")
  
    union(tables: [p50, p99])|> group(columns:["_field"])
    |> group(columns: ["id"])
    |> pivot(rowKey:["_time"], columnKey: ["_field"], valueColumn: "_value")
    |> group()
  node-rebalancing.tmpl: |-
    import "http"
    import "csv"
  
    padding = csv.from(csv:"#datatype,string,long,dateTime:RFC3339,dateTime:RFC3339,dateTime:RFC3339,long,long,long,long
    #group,false,false,false,false,false,false,false,false,false
    #default,_result,,,,,,,,
    ,result,table,_stop,_start,_time,bytes_rebalanced,segments_for_rebalancing,segments_rebalanced,segments_rebalancing_failed
    ,,0,1970-01-01T00:00:00Z,1970-01-01T00:00:00Z,1970-01-01T00:00:00Z,0,0,0,0")
  
    real = from(bucket: "monitoring_vdc")
    |> filter(fn: (r) => r._measurement == "cq_total_cm_Rebalance_Statistics" and (r._field =~ /^(bytes_rebalanced|segments_for_rebalancing|segments_rebalanced|segments_rebalancing_failed)$/))
    |> range(start: {{ .Start }}, stop: {{ .Stop }})
    |> fillMissing(period: 5m)
    |> range(start: {{ .KeepStart }}, stop: {{ .Stop }})
    |> keep(columns:["_value", "_time", "_start", "_stop",  "_field"])
    |> pivot(rowKey:["_time"], columnKey: ["_field"], valueColumn: "_value")
  
    union(tables: [real, padding])
    |> group()
    |> fill(column: "segments_rebalancing_failed", usePrevious:true)
    |> fill(column: "segments_for_rebalancing", usePrevious:true)
    |> fill(column: "segments_rebalanced", usePrevious:true)
    |> fill(column: "bytes_rebalanced", usePrevious:true)
    |> range(start: {{ .KeepStart }}, stop: {{ .Stop }})
    |> map(fn: (r) => ({data_rebalanced: r.bytes_rebalanced, pending_rebalance: (r.segments_for_rebalancing - r.segments_rebalanced - r.segments_rebalancing_failed) * 11184800, _time:r._time}))
    |> map(fn: (r) => ({data_rebalanced: r.data_rebalanced, pending_rebalance: int(v: (r.pending_rebalance >= 0)) * r.pending_rebalance, _time:r._time}))
  recover-status-summary.tmpl: |-
    import "http"
    from(bucket: "monitoring_vdc")
    |> filter(fn: (r) => r._measurement == "cq_total_cm_Recover_Statistics" and (r._field =~ /data_to_recover|data_recovered/))
    |> range(start: {{ .Start }}, stop: {{ .Stop }})
    |> fillMissing(period: 5m)
    |> range(start:{{ .KeepStart }}, stop:{{ .Stop }})
    |> keep(columns:["_value", "_time", "_start", "_stop", "_field"])
    |> pivot(rowKey:["_time"], columnKey: ["_field"], valueColumn: "_value")
    |> map(fn: (r) => ({_time: r._time, data_to_recover: int(v:(r.data_to_recover>=0))*r.data_to_recover, data_recovered: r.data_recovered}))
  requests-delta.tmpl: |-
    import "http"
    from(bucket: "monitoring_main")
    |> filter(fn: (r) => r._measurement == "{{ .Params.measurement }}")
    |> range(start:{{ .Start }},stop:{{ .Stop }})
    |> keep(columns:["_time", "_field", "_value", "host"])
    |> difference(nonNegative: true)
    |> fill(column: "_value", value: 0)
    // see MONITORING-194 for details about next 2 lines
    |> window(every:5m)
    |> drop(columns:["host"])
    |> sum()
    |> drop(columns:["_stop"])
    |> rename(columns: {_start: "_time"})
    |> group()
    |> pivot(rowKey:["_time"], columnKey: ["_field"], valueColumn: "_value")
    |> rename(columns: { {{ .Params.column_rename }} })
    |> range(start:{{ .KeepStart }},stop:{{ .Stop }})
  requests.tmpl: |-
    import "http"
    from(bucket: "monitoring_main")
    |> filter(fn: (r) => r._measurement == "{{ .Params.measurement }}")
    |> range(start:{{ .Start }},stop:{{ .Stop }})
    |> keep(columns:["_time", "_field", "_value", "host"])
    |> derivative(nonNegative: true)
    // see MONITORING-194 for details about next 2 lines
    |> window(every:5m)
    |> mean()
    |> drop(columns:["host"])
    |> sum()
    |> drop(columns:["_stop"])
    |> rename(columns: {_start: "_time"})
    |> group()
    |> pivot(rowKey:["_time"], columnKey: ["_field"], valueColumn: "_value")
    |> range(start:{{ .KeepStart }},stop:{{ .Stop }})
  ss-state.tmpl: |-
    import "http"
  
    // SS state per SS
    // state to SSState mapping: "SS UP" - 1; other - 0.
  
    from(bucket: "monitoring_main")
    |> filter(fn: (r) => r._measurement == "ssm_sstable_SSTable_SS" and r._field == "state")
    |> range(start:{{ .Start }},stop:{{ .Stop }})
    |> last()
    |> keep(columns: ["_stop", "SS", "_value"])
    |> last()
    |> rename(columns:{_stop: "_time"})
    |> map(fn: (r) => ({
                 _time: r._time,
                 SS: r.SS,
                 SSState: int(v: r._value == "SS UP")
    }))
  tohttp.tmpl: '|> http.to(url:"{{.Telegraf}}", method:"POST", name:"{{.Target}}", timeout:{{.HTTPToTimeout}},
    timeColumn:"_time"{{if .Tags}}, tagColumns:[{{range $i, $e:=.Tags}}{{if $i}},{{end}}"{{.}}"{{end}}]{{end}}{{if
    .Values}}, valueColumns:[{{range $i, $e:=.Values}}{{if $i}},{{end}}"{{.}}"{{end}}]{{end}})'
  total.tmpl: |-
    import "http"
    // calculate total value based on this formula A(t1) = A(t0) + delta(t0, t1).
    // at first, calculate delta(t0, t1) using difference() function.
    previous=from(bucket: "{{ .Params.database }}")
    // .PrevStart will be replaced with timestamp of the latest successful
    // filled cq interval (where cq_metadata point is set to done)
    |> range(start: {{ .PrevStart }}, stop: {{ .StartWithoutOffset }})
    |> filter(fn: (r) => r._measurement == "{{ .Params.measurement }}")
    {{if .Fields}}|> filter(fn: (r) => r._field =~ /^({{range $i, $f:=.Fields}}{{if $i}}|{{end}}{{$f}}{{end}})$/){{end}}
    |> last()
  
    first=from(bucket: "{{ .Params.database }}")
    |> range(start: {{ .StartWithoutOffset }}, stop: {{ .Stop }})
    |> filter(fn: (r) => r._measurement == "{{ .Params.measurement }}")
    {{if .Fields}}|> filter(fn: (r) => r._field =~ /^({{range $i, $f:=.Fields}}{{if $i}}|{{end}}{{$f}}{{end}})$/){{end}}
    |> first()
  
    // get latest current value
    current=from(bucket: "{{ .Params.database }}")
    |> range(start: {{ .Start }}, stop: {{ .Stop }})
    |> filter(fn: (r) => r._measurement == "{{ .Params.measurement }}")
    {{if .Fields}}|> filter(fn: (r) => r._field =~ /^({{range $i, $f:=.Fields}}{{if $i}}|{{end}}{{$f}}{{end}})$/){{end}}
    |> last()
  
    // delta(t0, t1) is calculated below
    diff=union(tables: [previous, first, current])
    |> drop(columns: ["_start", "_stop"])
    |> sort(columns: ["_time"])
    |> difference()
    |> keep(columns: ["_field", "_value", "_time"])
    |> sum()
  
    prev_total=from(bucket: "monitoring_vdc")
    |> filter(fn: (r) => r._measurement == "{{ .Target }}")
    |> range(start: {{ .PrevStart }}, stop: {{ .StartWithoutOffset }})
    |> last()
    |> keep(columns: ["_time", "_field", "_value"])
  
    // PRODUCE FINAL OUTPUT
    union(tables:[diff, prev_total])
        |> group(columns: ["_field"])
        |> sum()
        // insert _time field equal to .Stop from CQ engine
        |> map(fn: (r) => ({_time:{{ .Stop }},
                            _field: r._field,
                            _value: r._value,
                            }))
        |> pivot(rowKey:["_time"], columnKey: ["_field"], valueColumn: "_value")
        |> group()
---
# Source: ecs-cluster/charts/ecs-monitoring/charts/throttler/templates/fluxd_alerter.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#

apiVersion: v1
kind: ConfigMap
metadata:
  name: "ecs-cluster-throttler-fluxd-alerter"
  labels:
    app: "ecs-cluster-throttler"
    chart: "throttler-0.54.0"
    release: ecs-cluster
data:
  config.yaml: |-
    enabled: true
    prefix: OBJST-MON
    symptoms:
      Critical: 4020
---
# Source: ecs-cluster/charts/ecs-monitoring/charts/throttler/templates/logger.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ecs-cluster-throttler-logger-config
  labels:
    app: "ecs-cluster-throttler"
    chart: "throttler-0.54.0"
    release: ecs-cluster
data:
  logger.json: |+
    {
      "maxsize": 10,
      "maxbackups": 20,
      "maxage": 14,
      "compress": true
    }
---
# Source: ecs-cluster/charts/rsyslog-client/templates/cleanup-logs.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#

apiVersion: v1
kind: ConfigMap
metadata:
  name: ecs-cluster-rsyslog-client-cleanup-logs-script
  labels:
    app.kubernetes.io/name: ecs-cluster-rsyslog-client
    app.kubernetes.io/instance: ecs-cluster
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.54.0"
    app.kubernetes.io/part-of: ecs-cluster
    helm.sh/chart: rsyslog-client-3.7.0-1146.a692701d
    release: ecs-cluster
data:
  cleanup_logs.sh: |+
    #!/bin/bash

    source /etc/pod.env

    _log(){
        msg="$*"
        if [[ -n "$msg" ]] ; then
            echo "$(date "+%m%d%Y %T")":  "$msg"
        fi
    }

    MONITORING_LOGS="/var/log"
    _log "Started cleanup script. Logs folder: ${MONITORING_LOGS}"

    test -d "${MONITORING_LOGS}"            || exit 3

    # check if another instance is running (slowly) already
    SELF=$(basename "$0")
    if pidof -o %PPID -x "$SELF" > /dev/null; then
        exit 4
    fi

    fs_size_kb=$(df --output=size ${MONITORING_LOGS} | grep -v '1K-blocks')
    fs_size=$(( $fs_size_kb * 1024 ))

    # TODO: add alert on script failure
    python3 /etc/logrotate_autoconf.py -s ${fs_size} -c /etc/svc_logs_priority_conf.json >> "${MONITORING_LOGS}/logrotate_autoconf.log" 2>&1
    /etc/run_logrotate.sh >> /var/log/logrotate.log 2>&1

    # only remove compressed log files for now
    LOG_FILE_PATTERN="*.log*.gz" # the index/timestamp could be before or after the .log infix

    CHECK_INTERVAL=10

    du_high_watermark="${LOGS_SIZE_HIGH_WATERMARK:-204800}"
    du_low_watermark="${LOGS_SIZE_LOW_WATERMARK:-153600}"

    # some log files might not get compressed in error conditions,
    # compress them if not modified for a day.
    # assume the file name will be like
    #     messages-20140825-1409004745
    #     rm.log.20140826-165818
    NOT_COMPRESSED_PATTERN=".*20[0-9]{6}-[0-9]{6,10}$"
    find -L "${MONITORING_LOGS}" -regextype posix-egrep -regex "${NOT_COMPRESSED_PATTERN}" \
        -mmin +60 -exec gzip -f {} +

    LOGS_DISK_USAGE=$(du -skL "${MONITORING_LOGS}" | cut -f1)
    _log "Disk usage: $LOGS_DISK_USAGE. High watermark: ${du_high_watermark}."

    if [[ "$LOGS_DISK_USAGE" -gt ${du_high_watermark} ]]; then
        # TODO: alert if this part is executed
        _log "Perform cleanup"

        LOG_LIST_FILE=/tmp/log_list

        # list files in time order
        find -L "${MONITORING_LOGS}" \( -name "${LOG_FILE_PATTERN}" \) \
            -exec stat -c "%Y %n" {} + | sort -n | awk '{print $2}' > ${LOG_LIST_FILE}

        # remove one by one
        i=0
        while read -r file; do
            rm -f "$file"
            _log "Removed $file"

            # check du less frequently to speed up removal
            i=$(( i + 1 ))
            if [[ $(( i % CHECK_INTERVAL)) -eq 0 ]]; then
              usage="$(du -skL ${MONITORING_LOGS} | cut -f1)"
              _log "Disk usage: ${usage}"
              if [[ "${usage}" -le "${du_low_watermark}" ]]; then
                _log "Disk usage ${usage} is below low watermark ${du_low_watermark}"
                break
              fi
            fi
        done < ${LOG_LIST_FILE}

        rm -f ${LOG_LIST_FILE}
    fi
    _log "Finished cleanup script"
---
# Source: ecs-cluster/charts/rsyslog-client/templates/cron-config.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#

apiVersion: v1
kind: ConfigMap
metadata:
  name: ecs-cluster-rsyslog-client-cron-config
  labels:
    app.kubernetes.io/name: ecs-cluster-rsyslog-client
    app.kubernetes.io/instance: ecs-cluster
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.54.0"
    app.kubernetes.io/part-of: ecs-cluster
    helm.sh/chart: rsyslog-client-3.7.0-1146.a692701d
    release: ecs-cluster
data:
  cron_logrotate: |+
    * * * * *      root    /etc/cleanup_logs.sh >> /var/log/cleanup_logs.log 2>&1
---
# Source: ecs-cluster/charts/rsyslog-client/templates/logrotate-config.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#

apiVersion: v1
kind: ConfigMap
metadata:
  name: ecs-cluster-rsyslog-client-logrotate-config
  labels:
    app.kubernetes.io/name: ecs-cluster-rsyslog-client
    app.kubernetes.io/instance: ecs-cluster
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.54.0"
    app.kubernetes.io/part-of: ecs-cluster
    helm.sh/chart: rsyslog-client-3.7.0-1146.a692701d
    release: ecs-cluster
data:
  svc: |+
    /var/log/*.log
    {
      missingok
      copytruncate
      nocreate
      nosharedscripts
      size=10M
      maxage 14
      rotate 10
      notifempty
      compress
      dateext
      dateformat .%Y%m%d-%H%M%S
      postrotate
      endscript
    }
  logrotate.conf: |+
    # see "man logrotate" for details
    # rotate log files daily
    daily

    # keep rotated logs for 14 days max
    maxage 14

    # rotate 10 by default
    rotate 10

    # use date as a suffix of the rotated file
    dateext

    # Add a dateformat
    dateformat .%Y%m%d-%H%M%S

    # max size is 5 MB
    size 5M

    # Compress log files
    compress

    # comment these to switch compression to use gzip or another
    # compression scheme
    compresscmd /usr/bin/gzip
    uncompresscmd /usr/bin/gunzip

    # rotate logs as root
    su root root

    # RPM packages drop log rotation information into this directory
    include /etc/logrotate.d
---
# Source: ecs-cluster/charts/rsyslog-client/templates/rsyslog-client-config.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#

apiVersion: v1
kind: ConfigMap
metadata:
  name: ecs-cluster-rsyslog-client-config
  # namespace is required for resources created by objectscale-vsphere
  namespace: default
  labels:
    app.kubernetes.io/name: ecs-cluster-rsyslog-client
    app.kubernetes.io/instance: ecs-cluster
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.54.0"
    app.kubernetes.io/part-of: ecs-cluster
    helm.sh/chart: rsyslog-client-3.7.0-1146.a692701d
    release: ecs-cluster
data:
  rsyslog.conf.template: |+
    #### MODULES ####

    # input module: file
    module(load="imfile")

    #### GLOBAL DIRECTIVES ####

    #### RULES ####

    # input log files
    input(type="imfile"
          File="/var/log/*.log"
          Tag="ecs-cluster"
          addMetadata="on"
          Ruleset="handle_multiple_logs"
          Facility="local0"
    )

    _STDOUT_CONF_

    ruleset(name="handle_multiple_logs") {
      # http://www.rsyslog.com/doc/v8-stable/rainerscript/functions.html
      # re_extract(expr, re, match, submatch, no-found)
      set $.suffix=re_extract($!metadata!filename, "(.*)/([^/]*)", 0, 2, "all.log");
      set $.pod_name=getenv("POD_NAME");
      call sendToLogserver
    }

    ruleset(name="handle_stdout_logs") {
      # http://www.rsyslog.com/doc/v8-stable/rainerscript/functions.html
      # re_extract(expr, re, match, submatch, no-found)
      set $.container_name=re_extract($!metadata!filename, "(.*)/([^/]*)/([^/]*)", 0, 2, "unknown_container");
      set $.log_name=re_extract($!metadata!filename, "(.*)/([^/]*)", 0, 2, "all.log");
      set $.suffix= $.container_name & ".stdout." & $.log_name;
      set $.pod_name=getenv("POD_NAME");
      call sendToLogserver
    }

    # output template
    template(name="FileFormat" type="string"
    string= "<%PRI%>%TIMESTAMP% %HOSTNAME% %syslogtag%__%$.pod_name%__%$.suffix%%msg:::sp-if-no-1st-sp%%msg:::drop-last-lf%\n"
            )

    ruleset(name="sendToLogserver") {
      action(type="omfwd"
          Target="_RSYSLOG_POD_NAME_.objectscale-manager-rsyslog.default.svc.cluster.local"
          Port="10514"
          Protocol="tcp"
          Template="FileFormat" )
    #    action.resumeRetryCount=100
    #    queue.type=linkedList queue.size=10000)
    }
  rsyslog_stdout.conf.template: |+
    input(type="imfile"
          File="_CONTAINER_DIR_/*.log"
          Tag="ecs-cluster"
          addMetadata="on"
          Ruleset="handle_stdout_logs"
          Facility="local0"
    )
---
# Source: ecs-cluster/templates/objectstore-app-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
    name: ecs-cluster-app-config
    namespace: 
    labels:
      app.kubernetes.io/name: ecs-cluster
      app.kubernetes.io/version: 0.69.0
      app.kubernetes.io/instance: ecs-cluster
      app.kubernetes.io/managed-by: Helm
      helm.sh/chart: ecs-cluster-0.69.0
      product: objectscale
      release: ecs-cluster
    annotations:
        com.dellemc.kahm.subscribed: "true"
data:
    eventRules: |-
      issueRules:
        - description: "Hard quota exceeded for this bucket"
          name: "BUCKET_HARD_QUOTA_EXCEEDED"
          issueCategory: Manual
          matchOnList:
            - matchon:
                # ERROR
                - label: SymptomID
                  value: 1006
        # Do not generate SR
        
        - description: "Soft quota limit exceeded for bucket"
          name: "BUCKET_SOFT_QUOTA_EXCEEDED"
          issueCategory: Manual
          matchOnList:
            - matchon:
                # WARNING
                - label: SymptomID
                  value: 1008
        # Do not generate SR
        
        - description: "System metadata garbage collection throughput is too slow to catch up with garbage detection"
          name: "BTREE_CHUNK_SR_THRESHOLD_EXCEEDED"
          defaultAutoClearTimeOut: 60
          issueCategory: Auto
          matchOnList:
            - matchon:
                # NORMAL
                - label: SymptomID
                  value: 1320
            - matchon:
                # WARNING
                - label: SymptomID
                  value: 1321
          notifiers:
            - objectscale-supportassist-ese
        
        - description: "Capacity free-up throughput is too slow to catch up with system metadata garbage collection"
          name: "BTREE_DISK_SR_THRESHOLD_EXCEEDED"
          defaultAutoClearTimeOut: 60
          issueCategory: Auto
          matchOnList:
            - matchon:
                # NORMAL
                - label: SymptomID
                  value: 1324
            - matchon:
                # WARNING
                - label: SymptomID
                  value: 1325
          notifiers:
            - objectscale-supportassist-ese
        
        - description: "Partial GC for system metadata is too slow"
          name: "BTREE_PARTIAL_SR_THRESHOLD_EXCEEDED"
          defaultAutoClearTimeOut: 60
          issueCategory: Auto
          matchOnList:
            - matchon:
                # NORMAL
                - label: SymptomID
                  value: 1328
            - matchon:
                # WARNING
                - label: SymptomID
                  value: 1329
          notifiers:
            - objectscale-supportassist-ese
        
        - description: "User garbage collection throughput is too slow to catch up with garbage detection"
          name: "REPO_CHUNK_SR_THRESHOLD_EXCEEDED"
          defaultAutoClearTimeOut: 60
          issueCategory: Auto
          matchOnList:
            - matchon:
                # NORMAL
                - label: SymptomID
                  value: 1332
            - matchon:
                # WARNING
                - label: SymptomID
                  value: 1333
          notifiers:
            - objectscale-supportassist-ese
        
        - description: "Capacity free-up throughput is too slow to catch up with user garbage collection"
          name: "REPO_DISK_SR_THRESHOLD_EXCEEDED"
          defaultAutoClearTimeOut: 60
          issueCategory: Auto
          matchOnList:
            - matchon:
                # NORMAL
                - label: SymptomID
                  value: 1336
            - matchon:
                # WARNING
                - label: SymptomID
                  value: 1337
          notifiers:
            - objectscale-supportassist-ese
        
        - description: "Partial GC for user garbage is too slow"
          name: "REPO_PARTIAL_SR_THRESHOLD_EXCEEDED"
          defaultAutoClearTimeOut: 60
          issueCategory: Auto
          matchOnList:
            - matchon:
                # NORMAL
                - label: SymptomID
                  value: 1340
            - matchon:
                # WARNING
                - label: SymptomID
                  value: 1341
          notifiers:
            - objectscale-supportassist-ese
        
        - description: "Garbage collection for user data / system metadata is disabled"
          name: "SR_STATUS_THRESHOLD_EXCEEDED"
          defaultAutoClearTimeOut: 60
          issueCategory: Auto
          matchOnList:
            - matchon:
                # NORMAL
                - label: SymptomID
                  value: 1344
            - matchon:
                # WARNING
                - label: SymptomID
                  value: 1345
          notifiers:
            - objectscale-supportassist-ese
        
        - description: "Memory table size for process is less than the specified threshold"
          name: "MEMORY_TABLE_FREE_SPACE_PERCENT"
          defaultAutoClearTimeOut: 60
          issueCategory: Auto
          matchOnList:
            - matchon:
                # NORMAL
                - label: SymptomID
                  value: 1352
            - matchon:
                # ERROR
                - label: SymptomID
                  value: 1354
          notifiers:
            - objectscale-supportassist-ese
        
        - description: "Listing Conversion speed is slow"
          name: "LISTING_CONVERSION_THRESHOLD_EXCEEDED"
          defaultAutoClearTimeOut: 60
          issueCategory: Auto
          matchOnList:
            - matchon:
                # NORMAL
                - label: SymptomID
                  value: 1364
            - matchon:
                # WARNING
                - label: SymptomID
                  value: 1365
            - matchon:
                # ERROR
                - label: SymptomID
                  value: 1366
          notifiers:
            - objectscale-supportassist-ese
        
        - description: "Page Table memory cache size for sr exceeded threshold"
          name: "SR_MEMORY_CACHE_SIZE"
          defaultAutoClearTimeOut: 60
          issueCategory: Auto
          matchOnList:
            - matchon:
                # NORMAL
                - label: SymptomID
                  value: 1381
            - matchon:
                # WARNING
                - label: SymptomID
                  value: 1382
          notifiers:
            - objectscale-supportassist-ese
        
        - description: "Page Table disk cache size for sr exceeded threshold"
          name: "SR_DISK_CACHE_SIZE"
          defaultAutoClearTimeOut: 60
          issueCategory: Auto
          matchOnList:
            - matchon:
                # NORMAL
                - label: SymptomID
                  value: 1385
            - matchon:
                # WARNING
                - label: SymptomID
                  value: 1386
          notifiers:
            - objectscale-supportassist-ese
        
        - description: "SSD read cache auto clean up failed when capacity full and fall back to memory cache"
          name: "SSD_READ_CACHE_CAPACITY_FAILURE"
          defaultAutoClearTimeOut: 60
          issueCategory: Auto
          matchOnList:
            - matchon:
                # NORMAL
                - label: SymptomID
                  value: 1390
            - matchon:
                # ERROR
                - label: SymptomID
                  value: 1392
          notifiers:
            - objectscale-supportassist-ese
        
        - description: "Page Table memory cache size for objectsvc exceeded threshold"
          name: "OBJECT_MEMORY_CACHE_SIZE"
          defaultAutoClearTimeOut: 60
          issueCategory: Auto
          matchOnList:
            - matchon:
                # NORMAL
                - label: SymptomID
                  value: 1402
            - matchon:
                # WARNING
                - label: SymptomID
                  value: 1403
          notifiers:
            - objectscale-supportassist-ese
        
        - description: "Page Table disk cache size for objectsvc exceeded threshold"
          name: "OBJECT_DISK_CACHE_SIZE"
          defaultAutoClearTimeOut: 60
          issueCategory: Auto
          matchOnList:
            - matchon:
                # NORMAL
                - label: SymptomID
                  value: 1406
            - matchon:
                # WARNING
                - label: SymptomID
                  value: 1407
          notifiers:
            - objectscale-supportassist-ese
        
        - description: "DT init status alert"
          name: "DTSTATUS_RECENT_FAILURE"
          defaultAutoClearTimeOut: 60
          issueCategory: Auto
          matchOnList:
            - matchon:
                # CRITICAL
                - label: SymptomID
                  value: 3001
          notifiers:
            - objectscale-supportassist-ese
        
        - description: "No data has been pushed to the monitoring framework for the last 30 minutes"
          name: "MonitoringHealth"
          defaultAutoClearTimeOut: 60
          issueCategory: Auto
          matchOnList:
            - matchon:
                # NORMAL
                - label: SymptomID
                  value: 4016
            - matchon:
                # CRITICAL
                - label: SymptomID
                  value: 4019
          notifiers:
            - objectscale-supportassist-ese
        
        - description: "Fluxd has not responded for the last 30 minutes"
          name: "MonitoringFluxd"
          defaultAutoClearTimeOut: 60
          issueCategory: Auto
          matchOnList:
            - matchon:
                # CRITICAL
                - label: SymptomID
                  value: 4020
          notifiers:
            - objectscale-supportassist-ese
        

    eventRemedies: |-
      symptoms:
        - symptomid: 1006
          description: Hard quota limit exceeded for bucket
          remedies:
            - Free up space in the bucket
        
        - symptomid: 1321
          description: System metadata garbage collection throughput is too slow to catch up with garbage detection
          remedies:
            - KB https://support.emc.com/kb/530073
        
        - symptomid: 1325
          description: Capacity free-up throughput is too slow to catch up with system metadata garbage collection
          remedies:
            - KB https://support.emc.com/kb/530074
        
        - symptomid: 1329
          description: Partial GC for system metadata is too slow
          remedies:
            - KB https://support.emc.com/kb/530075
        
        - symptomid: 1333
          description: User garbage collection throughput is too slow to catch up with garbage detection
          remedies:
            - KB https://support.emc.com/kb/530076
        
        - symptomid: 1337
          description: Capacity free-up throughput is too slow to catch up with user garbage collection
          remedies:
            - KB https://support.emc.com/kb/530077
        
        - symptomid: 1341
          description: Partial GC for user garbage is too slow
          remedies:
            - KB https://support.emc.com/kb/530078
        
        - symptomid: 1345
          description: Garbage collection for user data / system metadata is disabled
          remedies:
            - KB https://support.emc.com/kb/530079
        
        - symptomid: 1354
          description: Memory table size for process is less than specified threshold
          remedies:
            - KB https://support.emc.com/kb/530081
        
        - symptomid: 1365
          description: Listing Conversion speed is slow
          remedies:
            - KB https://support.emc.com/kb/530091
        - symptomid: 1366
          description: Listing Conversion speed is slow
          remedies:
            - KB https://support.emc.com/kb/530091
        - symptomid: 1382
          description: Page Table memory cache size for sr exceeded threshold
          remedies:
            - KB https://support.emc.com/kb/536253
        
        - symptomid: 1386
          description: Page Table disk cache size for sr exceeded threshold
          remedies:
            - KB https://support.emc.com/kb/536253
        
        - symptomid: 1402
          description: Page Table memory cache size for objectsvc exceeded threshold
          remedies:
            - KB https://support.emc.com/kb/536253
        - symptomid: 1403
          description: Page Table memory cache size for objectsvc exceeded threshold
          remedies:
            - KB https://support.emc.com/kb/536253
        
        - symptomid: 1406
          description: Page Table disk cache size for objectsvc exceeded threshold
          remedies:
            - KB https://support.emc.com/kb/536253
        - symptomid: 1407
          description: Page Table disk cache size for objectsvc exceeded threshold
          remedies:
            - KB https://support.emc.com/kb/536253
        
        - symptomid: 4019
          description: No data has been pushed to the monitoring framework for the last 30 minutes
          remedies:
            - KB https://support.emc.com/kb/536249
        
        - symptomid: 4020
          description: Fluxd has not responded for the last 30 minutes
          remedies:
            - Please check fluxd service status
        

    health: |-
      spec:
        - name: healthcheck
          container: emccorp/objectstore-connectivity:0.69.0
          serviceaccount: ecs-cluster-healthchecks
          schedule: "0 */6 * * *"
          timelimit: "5m"
          args:
            - all
        - name: pre-update
          container: emccorp/objectstore-pre-update:0.69.0
          serviceaccount: ecs-cluster-healthchecks
          timelimit: "5m"
          args:
            - -target-version
            - 0.69.0
---
# Source: ecs-cluster/templates/svc-configs.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ecs-cluster-blob-log4j2
  namespace: 
  labels:
    app.kubernetes.io/name: ecs-cluster
    app.kubernetes.io/version: 0.69.0
    app.kubernetes.io/instance: ecs-cluster
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: ecs-cluster-0.69.0
    product: objectscale
    release: ecs-cluster

data:
  blobsvc-log4j2.xml: |
    <?xml version="1.0" encoding="UTF-8"?>
    <Configuration monitorInterval="60" shutdownHook="disable">
        <CustomLevels>
            <CustomLevel name="DEBUG_TREE" intLevel="520"/>
            <CustomLevel name="DEBUG_SYNC" intLevel="540"/>
            <CustomLevel name="DEBUG_PAGE" intLevel="560"/>
            <CustomLevel name="DEBUG_ALL" intLevel="580"/>
        </CustomLevels>
        <Appenders>
            <RollingFile name="R" fileName="${sys:product.home}/logs/blobsvc.log"
                         filePattern="${sys:product.home}/logs/blobsvc.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t%X{apiRequestId}] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="P" fileName="${sys:product.home}/logs/blobsvc-perf-counter.log"
                         filePattern="${sys:product.home}/logs/blobsvc-perf-counter.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="E" fileName="${sys:product.home}/logs/blobsvc-error.log"
                         filePattern="${sys:product.home}/logs/blobsvc-error.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t%X{apiRequestId}] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="M" fileName="${sys:product.home}/logs/blobsvc-stats.log"
                         filePattern="${sys:product.home}/logs/blobsvc-stats.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="O" fileName="${sys:product.home}/logs/blobsvc-ownership.log"
                         filePattern="${sys:product.home}/logs/blobsvc-ownership.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="Z" fileName="${sys:product.home}/logs/blobsvc-logbasedmetering.log"
                         filePattern="${sys:product.home}/logs/blobsvc-logbasedmetering.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="N" fileName="${sys:product.home}/logs/blobsvc-georeplayer.log"
                         filePattern="${sys:product.home}/logs/blobsvc-georeplayer.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="G" fileName="${sys:product.home}/logs/blobsvc-chunk-reclaim.log"
                         filePattern="${sys:product.home}/logs/blobsvc-chunk-reclaim.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="T" fileName="${sys:product.home}/logs/blobsvc-monitor.log"
                         filePattern="${sys:product.home}/logs/blobsvc-monitor.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="L" fileName="${sys:product.home}/logs/blobsvc-chunk-lifecycle.log"
                         filePattern="${sys:product.home}/logs/blobsvc-chunk-lifecycle.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="D" fileName="${sys:product.home}/logs/blobsvc-btree-dump.log"
                         filePattern="${sys:product.home}/logs/blobsvc-btree-dump.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t%X{apiRequestId}] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="C" fileName="${sys:product.home}/logs/blobsvc-metering-reconstruction.log"
                         filePattern="${sys:product.home}/logs/blobsvc-metering-reconstruction.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t%X{apiRequestId}] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="S" fileName="${sys:product.home}/logs/blobsvc-btree-ssd-cache.log"
                         filePattern="${sys:product.home}/logs/blobsvc-btree-ssd-cache.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t%X{apiRequestId}] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="AKKA_BFW" fileName="${sys:product.home}/logs/blobsvc-akkabfw.log"
                         filePattern="${sys:product.home}/logs/blobsvc-akkabfw.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t%X{apiRequestId}] %X{akkaSource} %5p %c{1} %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="RCC" fileName="${sys:product.home}/logs/blobsvc-refresh-chunk-cache.log"
                         filePattern="${sys:product.home}/logs/blobsvc-refresh-chunk-cache.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t%X{apiRequestId}] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <Syslog name="alertsLogger" host="localhost" port="514" protocol="UDP" facility="LOCAL7"/>
  
            <Async name="asyncR" includeLocation="true">
                <AppenderRef ref="R"/>
            </Async>
            <Async name="asyncE" includeLocation="true">
                <AppenderRef ref="E"/>
            </Async>
            <Async name="asyncP" includeLocation="true">
                <AppenderRef ref="P"/>
            </Async>
            <Async name="asyncM" includeLocation="true">
                <AppenderRef ref="M"/>
            </Async>
            <Async name="asyncO" includeLocation="true">
                <AppenderRef ref="O"/>
            </Async>
            <Async name="asyncG" includeLocation="true">
                <AppenderRef ref="G"/>
            </Async>
            <Async name="asyncT" includeLocation="true">
                <AppenderRef ref="T"/>
            </Async>
            <Async name="asyncN" includeLocation="true">
                <AppenderRef ref="N"/>
            </Async>
            <Async name="asyncL" includeLocation="true">
                <AppenderRef ref="L"/>
            </Async>
            <Async name="asyncD" includeLocation="true">
                <AppenderRef ref="D"/>
            </Async>
            <Async name="asyncC" includeLocation="true">
                <AppenderRef ref="C"/>
            </Async>
            <Async name="asyncS" includeLocation="true">
                <AppenderRef ref="S"/>
            </Async>
            <Async name="asyncAkkaBfw" includeLocation="true">
                <AppenderRef ref="AKKA_BFW"/>
            </Async>
            <Async name="asyncRCC" includeLocation="true">
                <AppenderRef ref="RCC"/>
            </Async>
        </Appenders>
  
        <Loggers>
            <Logger name="org.apache.zookeeper" level="INFO"/>
            <Logger name="org.perf4j.TimingLogger" level="ERROR"/>
            <Logger name="com.emc.storageos.data.object.ipc" level="DEBUG"/>
            <Logger name="com.emc.storageos.data.object.directoryService.impl.PaxosClient" level="INFO"/>
            <Logger name="com.emc.storageos.data.object.directoryService.impl.PaxosOperations" level="INFO"/>
            <Logger name="com.emc.storageos.data.object.bplustree.BPlusTreeSSDCache" level="INFO">
                <AppenderRef ref="asyncS"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.bplustree.BPlusTreeReadCache" level="INFO">
                <AppenderRef ref="asyncS"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.bplustree.BPlusTreeCache" level="INFO">
                <AppenderRef ref="asyncS"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.bplustree.rocksdb.ColumnFamilies" level="INFO">
                <AppenderRef ref="asyncS"/>
            </Logger>
  
            <Logger name="com.emc.storageos.services.util.AlertsLogger" level="WARN" additivity="false">
                <AppenderRef ref="alertsLogger"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
  
            <Logger name="com.emc.storageos.data.object.impl.TaskScheduler" level="INFO" additivity="false">
                <AppenderRef ref="asyncT"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.utils.ProcessMonitor" level="INFO" additivity="false">
                <AppenderRef ref="asyncT"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.communicator.nioimpl.NioCollectThreadStats" level="INFO" additivity="false">
                <AppenderRef ref="asyncT"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
  
            <Logger name="com.emc.storageos.objcontrol.object.shared.PerformanceCounter" level="DEBUG" additivity="false">
                <AppenderRef ref="asyncP"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
  
            <Logger name="com.emc.storageos.objcontrol.object.shared.SensitivePerformanceCounter" level="DEBUG" additivity="false">
                <AppenderRef ref="asyncP"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
  
            <Logger name="com.emc.storageos.data.monitoring.MonitoringWorker" level="INFO">
                <AppenderRef ref="asyncM"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.impl.buffer" level="INFO">
                <AppenderRef ref="asyncM"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.ownership.impl" level="INFO" additivity="false">
                <AppenderRef ref="asyncO"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.LogBasedMetering" level="INFO" additivity="false">
                <AppenderRef ref="Z"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.StorageStats.reconstruction.OBMeteringCollectorTaskScanner" level="DEBUG" additivity="false">
                <AppenderRef ref="asyncC"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.impl.geo" level="INFO" additivity="false">
                <AppenderRef ref="asyncN"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.impl.gc" level="DEBUG" additivity="false">
                <AppenderRef ref="asyncG"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
  
            <Logger name="com.emc.storageos.data.object.impl.gc.reference" level="INFO" additivity="false">
                <AppenderRef ref="asyncG"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.impl.gc.RepositoryReferenceTable" level="INFO" additivity="false">
                <AppenderRef ref="asyncG"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.bplustree.gc" level="INFO" additivity="false">
                <AppenderRef ref="asyncG"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.impl.gc.ChunkLifecycleLogger" level="INFO" additivity="false">
                <AppenderRef ref="asyncL"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
  
            <Logger name="org.apache.http" level="WARN" additivity="false">
                <AppenderRef ref="asyncR" level="WARN"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
  
            <Logger name="org.apache.http.impl.conn.PoolingHttpClientConnectionManager" level="DEBUG" additivity="false">
                <AppenderRef ref="asyncR"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
  
  
  
  
            <!-- BTree dump section -->
            <Logger name="com.emc.storageos.data.object.bplustree" level="INFO" additivity="false">
                <AppenderRef ref="asyncD"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.impl.file.directoryTable.cleanup" level="INFO" additivity="false">
                <AppenderRef ref="asyncD"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.impl.file.directoryTable.BPlusTreeIndexStore" level="INFO" additivity="false">
                <AppenderRef ref="asyncD"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.impl.file.directoryTable.DirectoryTable" level="INFO" additivity="false">
                <AppenderRef ref="asyncD"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.impl.file.directoryTable.DirectoryTableRecordManager" level="INFO" additivity="false">
                <AppenderRef ref="asyncD"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.impl.file.directoryTable.DirectoryTableRecordManagerImpl" level="INFO" additivity="false">
                <AppenderRef ref="asyncD"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.impl.file.directoryTable.DTChunkRotationCallback" level="INFO" additivity="false">
                <AppenderRef ref="asyncD"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.impl.file.directoryTable.IndexStore" level="INFO" additivity="false">
                <AppenderRef ref="asyncD"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.impl.file.directoryTable.IndexStorePeriodicalSealer" level="INFO" additivity="false">
                <AppenderRef ref="asyncD"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.impl.file.directoryTable.JournalIterator" level="INFO" additivity="false">
                <AppenderRef ref="asyncD"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.impl.file.directoryTable.JournalReplayer" level="INFO" additivity="false">
                <AppenderRef ref="asyncD"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.impl.file.directoryTable.MemoryTable" level="INFO" additivity="false">
                <AppenderRef ref="asyncD"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.impl.file.directoryTable.MemoryTable" level="INFO" additivity="false">
                <AppenderRef ref="asyncD"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
            <!-- End of BTree dump section -->
  
            <Logger name="akka.actor" level="warning" additivity="false">
                <AppenderRef ref="asyncAkkaBfw"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.akkaimpl" level="INFO"  additivity="false">
                <AppenderRef ref="asyncAkkaBfw"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
  
            <Logger name="com.emc.storageos.data.object.client.ReportBlockErrorTask.refreshChunkInfo" level="WARN" additivity="false">
                <AppenderRef ref="asyncRCC"/>
            </Logger>
  
            <Root level="info">
                <AppenderRef ref="asyncR"/>
                <AppenderRef ref="asyncE" level="error"/>
            </Root>
        </Loggers>
  
    </Configuration>
---
# Source: ecs-cluster/templates/svc-configs.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ecs-cluster-cm-log4j2
  namespace: 
  labels:
    app.kubernetes.io/name: ecs-cluster
    app.kubernetes.io/version: 0.69.0
    app.kubernetes.io/instance: ecs-cluster
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: ecs-cluster-0.69.0
    product: objectscale
    release: ecs-cluster

data:
  cm-log4j2.xml: |-
    <?xml version="1.0" encoding="UTF-8"?>
    <Configuration monitorInterval="60" shutdownHook="disable">
        <CustomLevels>
            <CustomLevel name="DEBUG_TREE" intLevel="520"/>
            <CustomLevel name="DEBUG_SYNC" intLevel="540"/>
            <CustomLevel name="DEBUG_PAGE" intLevel="560"/>
            <CustomLevel name="DEBUG_ALL" intLevel="580"/>
        </CustomLevels>
        <Appenders>
            <RollingFile name="R" fileName="${sys:product.home}/logs/cm.log"
                         filePattern="${sys:product.home}/logs/cm.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t%X{apiRequestId}] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="P" fileName="${sys:product.home}/logs/cm-perf-counter.log"
                         filePattern="${sys:product.home}/logs/cm-perf-counter.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="E" fileName="${sys:product.home}/logs/cm-error.log"
                         filePattern="${sys:product.home}/logs/cm-error.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t%X{apiRequestId}] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="M" fileName="${sys:product.home}/logs/cm-stats.log"
                         filePattern="${sys:product.home}/logs/cm-stats.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="B" fileName="${sys:product.home}/logs/cm-zk.log"
                         filePattern="${sys:product.home}/logs/cm-zk.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="O" fileName="${sys:product.home}/logs/cm-ownership.log"
                         filePattern="${sys:product.home}/logs/cm-ownership.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="G" fileName="${sys:product.home}/logs/cm-chunk-reclaim.log"
                         filePattern="${sys:product.home}/logs/cm-chunk-reclaim.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="C" fileName="${sys:product.home}/logs/cm-corruption-scan.log"
                         filePattern="${sys:product.home}/logs/cm-corruption-scan.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="L" fileName="${sys:product.home}/logs/cm-chunk-lifecycle.log"
                         filePattern="${sys:product.home}/logs/cm-chunk-lifecycle.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="D" fileName="${sys:product.home}/logs/cm-typeII-EC-delete.log"
                         filePattern="${sys:product.home}/logs/cm-typeII-EC-delete.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="T" fileName="${sys:product.home}/logs/cm-remove-repair-task.log"
                         filePattern="${sys:product.home}/logs/cm-remove-repair-task.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="L" fileName="${sys:product.home}/logs/cm-chunk-lifecycle.log"
                         filePattern="${sys:product.home}/logs/cm-chunk-lifecycle.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="W" fileName="${sys:product.home}/logs/cm-statistics.log"
                         filePattern="${sys:product.home}/logs/cm-statistics.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t%X{apiRequestId}] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="S" fileName="${sys:product.home}/logs/cm-migration-block-lifecycle.log"
                         filePattern="${sys:product.home}/logs/cm-migration-block-lifecycle.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t%X{apiRequestId}] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="AKKA_BFW" fileName="${sys:product.home}/logs/cm-akkabfw.log"
                         filePattern="${sys:product.home}/logs/cm-akkabfw.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t%X{apiRequestId}] %X{akkaSource} %5p %c{1} %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="RCC" fileName="${sys:product.home}/logs/cm-refresh-chunk-cache.log"
                         filePattern="${sys:product.home}/logs/cm-refresh-chunk-cache.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t%X{apiRequestId}] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <Syslog name="alertsLogger" host="localhost" port="514" protocol="UDP" facility="LOCAL7"/>
  
            <Async name="asyncR" includeLocation="true">
                <AppenderRef ref="R"/>
            </Async>
            <Async name="asyncE" includeLocation="true">
                <AppenderRef ref="E"/>
            </Async>
            <Async name="asyncP" includeLocation="true">
                <AppenderRef ref="P"/>
            </Async>
            <Async name="asyncM" includeLocation="true">
                <AppenderRef ref="M"/>
            </Async>
            <Async name="asyncB" includeLocation="true">
                <AppenderRef ref="B"/>
            </Async>
            <Async name="asyncO" includeLocation="true">
                <AppenderRef ref="O"/>
            </Async>
            <Async name="asyncG" includeLocation="true">
                <AppenderRef ref="G"/>
            </Async>
            <Async name="asyncC" includeLocation="true">
                <AppenderRef ref="C"/>
            </Async>
            <Async name="asyncL" includeLocation="true">
                <AppenderRef ref="L"/>
            </Async>
            <Async name="asyncD" includeLocation="true">
                <AppenderRef ref="D"/>
            </Async>
            <Async name="asyncT" includeLocation="true">
                <AppenderRef ref="T"/>
            </Async>
            <Async name="asyncW" includeLocation="true">
                <AppenderRef ref="W"/>
            </Async>
            <Async name="asyncS" includeLocation="true">
                <AppenderRef ref="S"/>
            </Async>
            <Async name="asyncAkkaBfw" includeLocation="true">
                <AppenderRef ref="AKKA_BFW"/>
            </Async>
            <Async name="asyncRCC" includeLocation="true">
                <AppenderRef ref="RCC"/>
            </Async>
        </Appenders>
  
        <Loggers>
            <Logger name="org.apache.zookeeper" level="INFO"/>
            <Logger name="org.perf4j.TimingLogger" level="ERROR"/>
            <Logger name="com.emc.storageos.data.chunkmanager" level="DEBUG"/>
  
            <Logger name="com.emc.storageos.services.util.AlertsLogger" level="WARN" additivity="false">
                <AppenderRef ref="alertsLogger"/>
            </Logger>
            <Logger name="com.emc.storageos.objcontrol.object.shared.PerformanceCounter" level="DEBUG" additivity="false">
                <AppenderRef ref="asyncP"/>
            </Logger>
            <Logger name="com.emc.storageos.data.monitoring.MonitoringWorker" level="INFO">
                <AppenderRef ref="asyncM"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.impl.buffer" level="INFO">
                <AppenderRef ref="asyncM"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.zkstore" level="INFO" additivity="false">
                <AppenderRef ref="asyncB"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.zkbtree" level="INFO" additivity="false">
                <AppenderRef ref="asyncB"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.ownership.impl" level="INFO" additivity="false">
                <AppenderRef ref="asyncO"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.impl.gc" level="DEBUG" additivity="false">
                <AppenderRef ref="asyncG"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.bplustree.gc" level="INFO" additivity="false">
                <AppenderRef ref="asyncG"/>
            </Logger>
            <Logger name="com.emc.storageos.data.chunkmanager.scanner.bplustree" level="DEBUG" additivity="false">
                <AppenderRef ref="asyncG"/>
            </Logger>
            <Logger name="com.emc.storageos.data.chunkmanager.scanner.BPlusTreeChunkReclaimerScanner" level="INFO" additivity="false">
                <AppenderRef ref="asyncG"/>
            </Logger>
            <Logger name="com.emc.storageos.data.chunkmanager.scanner.BPlusTreeReclaimer" level="INFO" additivity="false">
                <AppenderRef ref="asyncG"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.impl.geoShipping" level="DEBUG">
                <AppenderRef ref="asyncG"/>
            </Logger>
            <Logger name="com.emc.storageos.data.chunkmanager.scanner.ChunkCorruptionScanner" level="INFO" additivity="false">
                <AppenderRef ref="asyncC"/>
            </Logger>
            <Logger name="com.emc.storageos.data.chunkmanager.operations.CorruptionChecker" level="INFO" additivity="false">
                <AppenderRef ref="asyncC"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.impl.gc.ChunkLifecycleLogger" level="INFO" additivity="false">
                <AppenderRef ref="asyncL"/>
            </Logger>
            <Logger name="com.emc.storageos.data.EcDelete" level="WARN" additivity="false">
                <AppenderRef ref="asyncD"/>
            </Logger>
            <Logger name="com.emc.storageos.data.chunkmanager.scanner.remove_repair_task" level="WARN" additivity="false">
                <AppenderRef ref="asyncT"/>
            </Logger>
            <Logger name="com.emc.storageos.data.chunkmanager.CmStats" level="DEBUG">
                <AppenderRef ref="asyncW"/>
            </Logger>
  
            <Logger name="org.apache.http" level="WARN" additivity="false">
                <AppenderRef ref="asyncR" level="WARN"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
  
            <Logger name="org.apache.http.impl.conn.PoolingHttpClientConnectionManager" level="DEBUG" additivity="false">
                <AppenderRef ref="asyncR"/>
            </Logger>
  
            <Logger name="com.emc.storageos.data.object.impl.gc.ChunkLifecycleLogger" level="INFO" additivity="false">
                <AppenderRef ref="asyncL"/>
            </Logger>
  
            <Logger name="com.emc.storageos.data.object.bplustree" level="INFO" additivity="false">
                <AppenderRef ref="asyncD"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
  
            <Logger name="com.emc.storageos.data.ssmanager.sstable.task.datamigration.MigrationBlockLifecycleLogger" level="DEBUG" additivity="false">
                <AppenderRef ref="asyncS"/>
            </Logger>
  
            <Logger name="akka.actor" level="warning" additivity="false">
                <AppenderRef ref="asyncAkkaBfw"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.akkaimpl" level="INFO"  additivity="false">
                <AppenderRef ref="asyncAkkaBfw"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
  
            <Logger name="com.emc.storageos.data.object.client.ReportBlockErrorTask.refreshChunkInfo" level="WARN" additivity="false">
                <AppenderRef ref="asyncRCC"/>
            </Logger>
  
            <Root level="info">
                <AppenderRef ref="asyncR"/>
                <AppenderRef ref="asyncE" level="error"/>
            </Root>
        </Loggers>
  
    </Configuration>
---
# Source: ecs-cluster/templates/svc-configs.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ecs-cluster-control-log4j2
  namespace: 
  labels:
    app.kubernetes.io/name: ecs-cluster
    app.kubernetes.io/version: 0.69.0
    app.kubernetes.io/instance: ecs-cluster
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: ecs-cluster-0.69.0
    product: objectscale
    release: ecs-cluster

data:
  objcontrolsvc-log4j2.xml: |-
    <?xml version="1.0" encoding="UTF-8"?>
    <Configuration monitorInterval="60" shutdownHook="disable">
        <Appenders>
            <RollingFile name="R" fileName="${sys:product.home}/logs/objcontrolsvc.log"
                         filePattern="${sys:product.home}/logs/objcontrolsvc.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t%X{apiRequestId}] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="P" fileName="${sys:product.home}/logs/objcontrolsvc-perf-counter.log"
                         filePattern="${sys:product.home}/logs/objcontrolsvc-perf-counter.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="E" fileName="${sys:product.home}/logs/objcontrolsvc-error.log"
                         filePattern="${sys:product.home}/logs/objcontrolsvc-error.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t%X{apiRequestId}] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="M" fileName="${sys:product.home}/logs/objcontrolsvc-stats.log"
                         filePattern="${sys:product.home}/logs/objcontrolsvc-stats.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="O" fileName="${sys:product.home}/logs/objcontrolsvc-ownership.log"
                         filePattern="${sys:product.home}/logs/objcontrolsvc-ownership.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="G" fileName="${sys:product.home}/logs/objcontrolsvc-chunk-reclaim.log"
                         filePattern="${sys:product.home}/logs/objcontrolsvc-chunk-reclaim.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <Syslog name="alertsLogger" host="localhost" port="514" protocol="UDP" facility="LOCAL7"/>
  
            <Async name="asyncE" includeLocation="true">
                <AppenderRef ref="E"/>
            </Async>
            <Async name="asyncP" includeLocation="true">
                <AppenderRef ref="P"/>
            </Async>
            <Async name="asyncM" includeLocation="true">
                <AppenderRef ref="M"/>
            </Async>
            <Async name="asyncO" includeLocation="true">
                <AppenderRef ref="O"/>
            </Async>
            <Async name="asyncG" includeLocation="true">
                <AppenderRef ref="G"/>
            </Async>
  
        </Appenders>
  
        <Loggers>
            <Logger name="org.apache.zookeeper" level="WARN"/>
            <Logger name="com.emc.storageos.objcontrol.service.impl.resource.bucket.BucketService" level="DEBUG"/>
  
            <Logger name="com.emc.storageos.services.util.AlertsLogger" level="WARN" additivity="false">
                <AppenderRef ref="alertsLogger"/>
            </Logger>
  
            <Logger name="org.perf4j.TimingLogger" level="ERROR"/>
            <Logger name="com.emc.storageos.data.object.StorageStats.MeteringCollector" level="DEBUG"/>
            <Logger name="com.emc.storageos.data.object.stats.BandwidthStatsAggregator" level="DEBUG"/>
  
            <Logger name="com.emc.storageos.data.object.directoryclient.PaxosClient" level="DEBUG"/>
            <Logger name="com.emc.storageos.data.object.directoryService.impl.PaxosOperations" level="DEBUG"/>
            <Logger name="com.emc.storageos.objcontrol.object.shared.PerformanceCounter" level="DEBUG" additivity="false">
                <AppenderRef ref="asyncP"/>
            </Logger>
            <Logger name="com.emc.storageos.data.monitoring.MonitoringWorker" level="INFO">
                <AppenderRef ref="asyncM"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.ownership.impl" level="INFO" additivity="false">
                <AppenderRef ref="asyncO"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.impl.gc" level="DEBUG" additivity="false">
                <AppenderRef ref="asyncG"/>
            </Logger>
  
            <Root level="info">
                <AppenderRef ref="R"/>
                <AppenderRef ref="asyncE" level="error"/>
            </Root>
        </Loggers>
  
    </Configuration>
---
# Source: ecs-cluster/templates/svc-configs.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ecs-cluster-cp-log4j2
  namespace: 
  labels:
    app.kubernetes.io/name: ecs-cluster
    app.kubernetes.io/version: 0.69.0
    app.kubernetes.io/instance: ecs-cluster
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: ecs-cluster-0.69.0
    product: objectscale
    release: ecs-cluster

data:
  controlsvc-log4j2.xml: |-
    <?xml version="1.0" encoding="UTF-8"?>
    <Configuration monitorInterval="60" shutdownHook="disable">
        <CustomLevels>
            <CustomLevel name="DEBUG_TREE" intLevel="520"/>
            <CustomLevel name="DEBUG_SYNC" intLevel="540"/>
            <CustomLevel name="DEBUG_PAGE" intLevel="560"/>
            <CustomLevel name="DEBUG_ALL" intLevel="580"/>
        </CustomLevels>
        <Appenders>
            <RollingFile name="R" fileName="${sys:product.home}/logs/controlsvc.log"
                         filePattern="${sys:product.home}/logs/controlsvc.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t%X{apiRequestId}] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="P" fileName="${sys:product.home}/logs/controlsvc-perf-counter.log"
                         filePattern="${sys:product.home}/logs/controlsvc-perf-counter.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="E" fileName="${sys:product.home}/logs/controlsvc-error.log"
                         filePattern="${sys:product.home}/logs/controlsvc-error.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t%X{apiRequestId}] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="M" fileName="${sys:product.home}/logs/controlsvc-stats.log"
                         filePattern="${sys:product.home}/logs/controlsvc-stats.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="O" fileName="${sys:product.home}/logs/controlsvc-ownership.log"
                         filePattern="${sys:product.home}/logs/controlsvc-ownership.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="N" fileName="${sys:product.home}/logs/controlsvc-georeplayer.log"
                         filePattern="${sys:product.home}/logs/controlsvc-georeplayer.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="G" fileName="${sys:product.home}/logs/controlsvc-chunk-reclaim.log"
                         filePattern="${sys:product.home}/logs/controlsvc-chunk-reclaim.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="B" fileName="${sys:product.home}/logs/controlsvc-zk.log"
                         filePattern="${sys:product.home}/logs/controlsvc-zk.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="L" fileName="${sys:product.home}/logs/controlsvc-chunk-lifecycle.log"
                         filePattern="${sys:product.home}/logs/controlsvc-chunk-lifecycle.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="ObjectGC" fileName="${sys:product.home}/logs/controlsvc-object-gc.log"
                         filePattern="${sys:product.home}/logs/controlsvc-object-gc.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="ObjectGCIDs" fileName="${sys:product.home}/logs/controlsvc-objectgc-ids.log"
                         filePattern="${sys:product.home}/logs/controlsvc-objectgc-ids.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="D" fileName="${sys:product.home}/logs/controlsvc-btree-dump.log"
                         filePattern="${sys:product.home}/logs/controlsvc-btree-dump.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t%X{apiRequestId}] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <Syslog name="alertsLogger" host="localhost" port="514" protocol="UDP" facility="LOCAL7"/>
  
            <Async name="asyncR" includeLocation="true">
                <AppenderRef ref="R"/>
            </Async>
            <Async name="asyncE" includeLocation="true">
                <AppenderRef ref="E"/>
            </Async>
            <Async name="asyncP" includeLocation="true">
                <AppenderRef ref="P"/>
            </Async>
            <Async name="asyncM" includeLocation="true">
                <AppenderRef ref="M"/>
            </Async>
            <Async name="asyncO" includeLocation="true">
                <AppenderRef ref="O"/>
            </Async>
            <Async name="asyncG" includeLocation="true">
                <AppenderRef ref="G"/>
            </Async>
            <Async name="asyncN" includeLocation="true">
                <AppenderRef ref="N"/>
            </Async>
            <Async name="asyncB" includeLocation="true">
                <AppenderRef ref="B"/>
            </Async>
            <Async name="asyncL" includeLocation="true">
                <AppenderRef ref="L"/>
            </Async>
            <Async name="asyncD" includeLocation="true">
                <AppenderRef ref="D"/>
            </Async>
  
            <Async name="asyncObjectGC" includeLocation="true">
                <AppenderRef ref="ObjectGC"/>
            </Async>
            <Async name="asyncObjectGCIDs" includeLocation="true">
                <AppenderRef ref="ObjectGCIDs"/>
            </Async>
  
        </Appenders>
  
        <Loggers>
            <Logger name="org.apache.zookeeper" level="INFO"/>
            <Logger name="org.perf4j.TimingLogger" level="ERROR"/>
  
            <Logger name="com.emc.storageos.data.object.StorageStats.MeteringCollector" level="DEBUG"/>
  
            <Logger name="com.emc.storageos.data.object.stats.BandwidthStatsAggregator" level="DEBUG"/>
            <Logger name="com.emc.storageos.data.object.directoryService.impl.PaxosClient" level="DEBUG"/>
            <Logger name="com.emc.storageos.data.object.directoryService.impl.PaxosOperations" level="DEBUG"/>
  
            <Logger name="org.apache.http.impl.conn.PoolingHttpClientConnectionManager" level="DEBUG" additivity="false">
                <AppenderRef ref="asyncR"/>
            </Logger>
  
            <Logger name="com.emc.storageos.objcontrol.service.impl.resource.bucket.BucketService" level="DEBUG"/>
  
            <Logger name="com.emc.storageos.data.object.impl.objectgc" level="INFO"/>
  
            <Logger name="com.emc.storageos.data.stat.service.impl.cm.stress" level="DEBUG"/>
  
            <Logger name="com.emc.storageos.objcontrol.object.shared.PerformanceCounter" level="DEBUG" additivity="false">
                <AppenderRef ref="asyncP"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
            <Logger name="com.emc.storageos.data.monitoring.MonitoringWorker" level="INFO">
                <AppenderRef ref="asyncM"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.zkstore" level="INFO">
                <AppenderRef ref="asyncB"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.zkbtree" level="INFO">
                <AppenderRef ref="asyncB"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.ownership.impl" level="INFO" additivity="false">
                <AppenderRef ref="asyncO"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.impl.gc" level="DEBUG" additivity="false">
                <AppenderRef ref="asyncG"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.impl.gc.reference" level="INFO" additivity="false">
                <AppenderRef ref="asyncG"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.impl.gc.RepositoryReferenceTable" level="INFO" additivity="false">
                <AppenderRef ref="asyncG"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
            <Logger name="com.emc.storageos.data.metering.journalparser" level="INFO" additivity="false">
                <AppenderRef ref="asyncG"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.impl.gc.journalparser" level="INFO" additivity="false">
                <AppenderRef ref="asyncG"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
            <Logger name="com.emc.storageos.data.spacereclamation.rrtable.bgOps.partialgc" level="DEBUG">
                <AppenderRef ref="asyncG"/>
            </Logger>
            <Logger name="com.emc.storageos.data.spacereclamation.rrtable.RRTable" level="INFO">
                <AppenderRef ref="asyncG"/>
            </Logger>
            <Logger name="com.emc.storageos.data.metering.mttable" level="INFO" additivity="false">
                <AppenderRef ref="asyncR"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.bplustree.gc" level="INFO" additivity="false">
                <AppenderRef ref="asyncG"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.impl.geo" level="DEBUG" additivity="false">
                <AppenderRef ref="asyncN"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
            <Logger name="com.emc.storageos.services.util.AlertsLogger" level="WARN" additivity="false">
                <AppenderRef ref="alertsLogger"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.impl.gc.ChunkLifecycleLogger" level="INFO" additivity="false">
                <AppenderRef ref="asyncL"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
            <Logger name="LoggerObjectGCIDs" level="INFO" additivity="false">
                <AppenderRef ref="asyncObjectGCIDs"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.impl.objectgc" level="INFO" additivity="false">
                <AppenderRef ref="asyncObjectGC"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
  
            <Logger name="com.emc.storageos.data.object.bplustree" level="INFO" additivity="false">
                <AppenderRef ref="asyncD"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
  
            <Logger name="com.emc.storageos.data.object.impl.file.directoryTable" level="INFO" additivity="false">
                <AppenderRef ref="asyncD"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
  
            <Logger name="org.apache.http" level="WARN" additivity="false">
                <AppenderRef ref="asyncR" level="WARN"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
  
            <Root level="info">
                <AppenderRef ref="asyncR"/>
                <AppenderRef ref="asyncE" level="error"/>
            </Root>
        </Loggers>
  
    </Configuration>
---
# Source: ecs-cluster/templates/svc-configs.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ecs-cluster-diagnostic-log4j2
  namespace: 
  labels:
    app.kubernetes.io/name: ecs-cluster
    app.kubernetes.io/version: 0.69.0
    app.kubernetes.io/instance: ecs-cluster
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: ecs-cluster-0.69.0
    product: objectscale
    release: ecs-cluster

data:
  dtquery-log4j2.xml: |-
    <?xml version="1.0" encoding="UTF-8"?>
    <Configuration monitorInterval="60" shutdownHook="disable">
        <Appenders>
            <RollingFile name="R" fileName="${sys:product.home}/logs/dtquery.log"
                         filePattern="${sys:product.home}/logs/dtquery.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="E" fileName="${sys:product.home}/logs/dtquery-error.log"
                         filePattern="${sys:product.home}/logs/dtquery-error.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="M" fileName="${sys:product.home}/logs/dtquery-stats.log"
                         filePattern="${sys:product.home}/logs/dtquery-stats.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="O" fileName="${sys:product.home}/logs/dtquery-ownership.log"
                         filePattern="${sys:product.home}/logs/dtquery-ownership.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <Syslog name="alertsLogger" host="localhost" port="514" protocol="UDP" facility="LOCAL7"/>
  
            <Async name="asyncR" includeLocation="true">
                <AppenderRef ref="R"/>
            </Async>
            <Async name="asyncE" includeLocation="true">
                <AppenderRef ref="E"/>
            </Async>
            <Async name="asyncM" includeLocation="true">
                <AppenderRef ref="M"/>
            </Async>
            <Async name="asyncO" includeLocation="true">
                <AppenderRef ref="O"/>
            </Async>
        </Appenders>
  
        <Loggers>
            <Logger name="org.apache.zookeeper" level="INFO"/>
            <Logger name="org.perf4j.TimingLogger" level="ERROR"/>
            <Logger name="com.emc.storageos.data.dtquery.service.impl.cm.stress" level="DEBUG"/>
  
            <Logger name="com.emc.storageos.services.util.AlertsLogger" level="WARN" additivity="false">
                <AppenderRef ref="alertsLogger"/>
            </Logger>
            <Logger name="com.emc.storageos.data.monitoring.MonitoringWorker" level="INFO">
                <AppenderRef ref="asyncM"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.ownership.impl" level="INFO" additivity="false">
                <AppenderRef ref="asyncO"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.bplustree" level="INFO" additivity="false">
                <AppenderRef ref="asyncR"/>
            </Logger>
  
  
            <Root level="info">
                <AppenderRef ref="asyncR"/>
                <AppenderRef ref="asyncE" level="error"/>
            </Root>
        </Loggers>
  
    </Configuration>
---
# Source: ecs-cluster/templates/svc-configs.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ecs-cluster-event-log4j2
  namespace: 
  labels:
    app.kubernetes.io/name: ecs-cluster
    app.kubernetes.io/version: 0.69.0
    app.kubernetes.io/instance: ecs-cluster
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: ecs-cluster-0.69.0
    product: objectscale
    release: ecs-cluster

data:
  eventsvc-log4j2.xml: |-
    <?xml version="1.0" encoding="UTF-8"?>
    <Configuration  monitorInterval="60" shutdownHook="disable">
        <CustomLevels>
            <CustomLevel name="DEBUG_TREE" intLevel="520"/>
            <CustomLevel name="DEBUG_SYNC" intLevel="540"/>
            <CustomLevel name="DEBUG_PAGE" intLevel="560"/>
            <CustomLevel name="DEBUG_ALL" intLevel="580"/>
        </CustomLevels>
        <Appenders>
            <RollingFile name="R" fileName="${sys:product.home}/logs/eventsvc.log"
                         filePattern="${sys:product.home}/logs/eventsvc.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="P" fileName="${sys:product.home}/logs/eventsvc-perf-counter.log"
                         filePattern="${sys:product.home}/logs/eventsvc-perf-counter.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="E" fileName="${sys:product.home}/logs/eventsvc-error.log"
                         filePattern="${sys:product.home}/logs/eventsvc-error.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="M" fileName="${sys:product.home}/logs/eventsvc-stats.log"
                         filePattern="${sys:product.home}/logs/eventsvc-stats.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="O" fileName="${sys:product.home}/logs/eventsvc-ownership.log"
                         filePattern="${sys:product.home}/logs/eventsvc-ownership.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="G" fileName="${sys:product.home}/logs/eventsvc-chunk-reclaim.log"
                         filePattern="${sys:product.home}/logs/eventsvc-chunk-reclaim.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="AKKA_BFW" fileName="${sys:product.home}/logs/eventsvc-akkabfw.log"
                         filePattern="${sys:product.home}/logs/eventsvc-akkabfw.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t%X{apiRequestId}] %X{akkaSource} %5p %c{1} %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <Syslog name="alertsLogger" host="localhost" port="514" protocol="UDP" facility="LOCAL7"/>
  
            <Async name="asyncR" includeLocation="true">
                <AppenderRef ref="R"/>
            </Async>
            <Async name="asyncE" includeLocation="true">
                <AppenderRef ref="E"/>
            </Async>
            <Async name="asyncP" includeLocation="true">
                <AppenderRef ref="P"/>
            </Async>
            <Async name="asyncM" includeLocation="true">
                <AppenderRef ref="M"/>
            </Async>
            <Async name="asyncO" includeLocation="true">
                <AppenderRef ref="O"/>
            </Async>
            <Async name="asyncG" includeLocation="true">
                <AppenderRef ref="G"/>
            </Async>
            <Async name="asyncAkkaBfw" includeLocation="true">
                <AppenderRef ref="AKKA_BFW"/>
            </Async>
        </Appenders>
  
        <Loggers>
            <Logger name="org.apache.zookeeper" level="INFO"/>
            <Logger name="org.perf4j.TimingLogger" level="ERROR"/>
  
            <Logger name="com.emc.storageos.objcontrol.object.shared.PerformanceCounter" level="DEBUG" additivity="false">
                <AppenderRef ref="asyncP"/>
            </Logger>
            <Logger name="com.emc.storageos.data.monitoring.MonitoringWorker" level="INFO">
                <AppenderRef ref="asyncM"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.ownership.impl" level="INFO" additivity="false">
                <AppenderRef ref="asyncO"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.impl.gc" level="DEBUG" additivity="false">
                <AppenderRef ref="asyncG"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.bplustree.gc" level="INFO" additivity="false">
                <AppenderRef ref="asyncG"/>
            </Logger>
            <Logger name="com.emc.storageos.services.util.AlertsLogger" level="WARN" additivity="false">
                <AppenderRef ref="alertsLogger"/>
            </Logger>
  
            <Logger name="org.apache.http" level="WARN" additivity="false">
                <AppenderRef ref="asyncR" level="WARN"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
  
            <Logger name="akka.actor" level="warning" additivity="false">
                <AppenderRef ref="asyncAkkaBfw"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.akkaimpl" level="INFO"  additivity="false">
                <AppenderRef ref="asyncAkkaBfw"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
  
            <Root level="info">
                <AppenderRef ref="asyncR"/>
                <AppenderRef ref="asyncE" level="error"/>
            </Root>
        </Loggers>
  
    </Configuration>
---
# Source: ecs-cluster/templates/svc-configs.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ecs-cluster-geo-log4j2
  namespace: 
  labels:
    app.kubernetes.io/name: ecs-cluster
    app.kubernetes.io/version: 0.69.0
    app.kubernetes.io/instance: ecs-cluster
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: ecs-cluster-0.69.0
    product: objectscale
    release: ecs-cluster

data:
  georeceiver-log4j2.xml: |-
    <?xml version="1.0" encoding="UTF-8"?>
    <Configuration  monitorInterval="60" shutdownHook="disable">
        <Appenders>
            <RollingFile name="R" fileName="${sys:product.home}/logs/georeceiver.log"
                         filePattern="${sys:product.home}/logs/georeceiver.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="P" fileName="${sys:product.home}/logs/georeceiver-perf-counter.log"
                         filePattern="${sys:product.home}/logs/georeceiver-perf-counter.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="E" fileName="${sys:product.home}/logs/georeceiver-error.log"
                         filePattern="${sys:product.home}/logs/georeceiver-error.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="M" fileName="${sys:product.home}/logs/georeceiver-stats.log"
                         filePattern="${sys:product.home}/logs/georeceiver-stats.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="O" fileName="${sys:product.home}/logs/georeceiver-ownership.log"
                         filePattern="${sys:product.home}/logs/georeceiver-ownership.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <Syslog name="alertsLogger" host="localhost" port="514" protocol="UDP" facility="LOCAL7"/>
  
            <Async name="asyncR" includeLocation="true">
                <AppenderRef ref="R"/>
            </Async>
            <Async name="asyncE" includeLocation="true">
                <AppenderRef ref="E"/>
            </Async>
            <Async name="asyncP" includeLocation="true">
                <AppenderRef ref="P"/>
            </Async>
            <Async name="asyncM" includeLocation="true">
                <AppenderRef ref="M"/>
            </Async>
            <Async name="asyncO" includeLocation="true">
                <AppenderRef ref="O"/>
            </Async>
        </Appenders>
  
        <Loggers>
            <Logger name="org.apache.zookeeper" level="INFO"/>
            <Logger name="org.perf4j.TimingLogger" level="ERROR"/>
            <Logger name="com.emc.storageos.data.object.utils.RequestTrace" level="INFO"/>
            <Logger name="org.eclipse.jetty.server.RequestLog" level="INFO"/>
  
            <Logger name="com.emc.storageos.data.object.utils.ThreadPoolMonitor" level="INFO"/>
            <Logger name="org.eclipse.jetty.servlets.DoSFilter" level="WARN"/>
            <Logger name="org.eclipse.jetty.util.thread.QueuedThreadPool" level="WARN"/>
  
            <Logger name="com.emc.storageos.services.util.AlertsLogger" level="WARN" additivity="false">
                <AppenderRef ref="alertsLogger"/>
            </Logger>
            <Logger name="com.emc.storageos.objcontrol.object.shared.PerformanceCounter" level="DEBUG" additivity="false">
                <AppenderRef ref="asyncP"/>
            </Logger>
            <Logger name="com.emc.storageos.data.monitoring.MonitoringWorker" level="INFO">
                <AppenderRef ref="asyncM"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.impl.buffer" level="INFO">
                <AppenderRef ref="asyncM"/>
            </Logger>
  
            <Root level="info">
                <AppenderRef ref="asyncR"/>
                <AppenderRef ref="asyncE" level="error"/>
            </Root>
        </Loggers>
  
    </Configuration>
---
# Source: ecs-cluster/templates/svc-configs.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ecs-cluster-metering-log4j2
  namespace: 
  labels:
    app.kubernetes.io/name: ecs-cluster
    app.kubernetes.io/version: 0.69.0
    app.kubernetes.io/instance: ecs-cluster
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: ecs-cluster-0.69.0
    product: objectscale
    release: ecs-cluster

data:
  metering-log4j2.xml: |-
    <?xml version="1.0" encoding="UTF-8"?>
    <Configuration monitorInterval="60" shutdownHook="disable">
        <CustomLevels>
            <CustomLevel name="DEBUG_TREE" intLevel="520"/>
            <CustomLevel name="DEBUG_SYNC" intLevel="540"/>
            <CustomLevel name="DEBUG_PAGE" intLevel="560"/>
            <CustomLevel name="DEBUG_ALL" intLevel="580"/>
        </CustomLevels>
        <Appenders>
            <RollingFile name="R" fileName="${sys:product.home}/logs/metering.log"
                         filePattern="${sys:product.home}/logs/metering.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="P" fileName="${sys:product.home}/logs/metering-perf-counter.log"
                         filePattern="${sys:product.home}/logs/metering-perf-counter.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="E" fileName="${sys:product.home}/logs/metering-error.log"
                         filePattern="${sys:product.home}/logs/metering-error.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="M" fileName="${sys:product.home}/logs/metering-stats.log"
                         filePattern="${sys:product.home}/logs/metering-stats.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="O" fileName="${sys:product.home}/logs/metering-ownership.log"
                         filePattern="${sys:product.home}/logs/metering-ownership.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="N" fileName="${sys:product.home}/logs/metering-georeplayer.log"
                         filePattern="${sys:product.home}/logs/metering-georeplayer.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="G" fileName="${sys:product.home}/logs/metering-chunk-reclaim.log"
                         filePattern="${sys:product.home}/logs/metering-chunk-reclaim.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="B" fileName="${sys:product.home}/logs/metering-zk.log"
                         filePattern="${sys:product.home}/logs/metering-zk.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="L" fileName="${sys:product.home}/logs/metering-chunk-lifecycle.log"
                         filePattern="${sys:product.home}/logs/metering-chunk-lifecycle.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="D" fileName="${sys:product.home}/logs/metering-btree-dump.log"
                         filePattern="${sys:product.home}/logs/metering-btree-dump.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t%X{apiRequestId}] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="AKKA_BFW" fileName="${sys:product.home}/logs/metering-akkabfw.log"
                         filePattern="${sys:product.home}/logs/metering-akkabfw.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t%X{apiRequestId}] %X{akkaSource} %5p %c{1} %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <Syslog name="alertsLogger" host="localhost" port="514" protocol="UDP" facility="LOCAL7"/>
  
            <Async name="asyncR" includeLocation="true">
                <AppenderRef ref="R"/>
            </Async>
            <Async name="asyncE" includeLocation="true">
                <AppenderRef ref="E"/>
            </Async>
            <Async name="asyncP" includeLocation="true">
                <AppenderRef ref="P"/>
            </Async>
            <Async name="asyncM" includeLocation="true">
                <AppenderRef ref="M"/>
            </Async>
            <Async name="asyncO" includeLocation="true">
                <AppenderRef ref="O"/>
            </Async>
            <Async name="asyncG" includeLocation="true">
                <AppenderRef ref="G"/>
            </Async>
            <Async name="asyncN" includeLocation="true">
                <AppenderRef ref="N"/>
            </Async>
            <Async name="asyncB" includeLocation="true">
                <AppenderRef ref="B"/>
            </Async>
            <Async name="asyncL" includeLocation="true">
                <AppenderRef ref="L"/>
            </Async>
            <Async name="asyncD" includeLocation="true">
                <AppenderRef ref="D"/>
            </Async>
            <Async name="asyncAkkaBfw" includeLocation="true">
                <AppenderRef ref="AKKA_BFW"/>
            </Async>
        </Appenders>
  
        <Loggers>
            <Logger name="org.apache.zookeeper" level="INFO"/>
            <Logger name="org.perf4j.TimingLogger" level="ERROR"/>
  
            <Logger name="com.emc.storageos.objcontrol.object.shared.PerformanceCounter" level="DEBUG" additivity="false">
                <AppenderRef ref="asyncP"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
            <Logger name="com.emc.storageos.data.monitoring.MonitoringWorker" level="INFO">
                <AppenderRef ref="asyncM"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.zkstore" level="INFO">
                <AppenderRef ref="asyncB"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.zkbtree" level="INFO">
                <AppenderRef ref="asyncB"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.ownership.impl" level="INFO" additivity="false">
                <AppenderRef ref="asyncO"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.impl.gc" level="DEBUG" additivity="false">
                <AppenderRef ref="asyncG"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
            <Logger name="com.emc.storageos.data.metering.journalparser" level="INFO" additivity="false">
                <AppenderRef ref="asyncG"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
            <Logger name="com.emc.storageos.data.metering.mttable" level="INFO" additivity="false">
                <AppenderRef ref="asyncR"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.bplustree.gc" level="INFO" additivity="false">
                <AppenderRef ref="asyncG"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.impl.geo" level="DEBUG" additivity="false">
                <AppenderRef ref="asyncN"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
            <Logger name="com.emc.storageos.services.util.AlertsLogger" level="WARN" additivity="false">
                <AppenderRef ref="alertsLogger"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
  
            <Logger name="com.emc.storageos.data.object.bplustree" level="INFO" additivity="false">
                <AppenderRef ref="asyncD"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
  
            <Logger name="com.emc.storageos.data.object.impl.file.directoryTable" level="INFO" additivity="false">
                <AppenderRef ref="asyncD"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
  
            <Logger name="org.apache.http" level="WARN" additivity="false">
                <AppenderRef ref="asyncR" level="WARN"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
  
            <Logger name="akka.actor" level="warning" additivity="false">
                <AppenderRef ref="asyncAkkaBfw"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.akkaimpl" level="INFO"  additivity="false">
                <AppenderRef ref="asyncAkkaBfw"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
  
            <Root level="info">
                <AppenderRef ref="asyncR"/>
                <AppenderRef ref="asyncE" level="error"/>
            </Root>
        </Loggers>
  
    </Configuration>
---
# Source: ecs-cluster/templates/svc-configs.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ecs-cluster-objmt-log4j2
  namespace: 
  labels:
    app.kubernetes.io/name: ecs-cluster
    app.kubernetes.io/version: 0.69.0
    app.kubernetes.io/instance: ecs-cluster
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: ecs-cluster-0.69.0
    product: objectscale
    release: ecs-cluster

data:
  objmt-log4j2.xml: |-
    <?xml version="1.0" encoding="UTF-8"?>
    <Configuration monitorInterval="60" shutdownHook="disable">
        <CustomLevels>
            <CustomLevel name="DEBUG_TREE" intLevel="520"/>
            <CustomLevel name="DEBUG_SYNC" intLevel="540"/>
            <CustomLevel name="DEBUG_PAGE" intLevel="560"/>
            <CustomLevel name="DEBUG_ALL" intLevel="580"/>
        </CustomLevels>
        <Appenders>
            <RollingFile name="R" fileName="${sys:product.home}/logs/objmt.log"
                         filePattern="${sys:product.home}/logs/objmt.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="P" fileName="${sys:product.home}/logs/objmt-perf-counter.log"
                         filePattern="${sys:product.home}/logs/objmt-perf-counter.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="E" fileName="${sys:product.home}/logs/objmt-error.log"
                         filePattern="${sys:product.home}/logs/objmt-error.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="M" fileName="${sys:product.home}/logs/objmt-stats.log"
                         filePattern="${sys:product.home}/logs/objmt-stats.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="O" fileName="${sys:product.home}/logs/objmt-ownership.log"
                         filePattern="${sys:product.home}/logs/objmt-ownership.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="N" fileName="${sys:product.home}/logs/objmt-georeplayer.log"
                         filePattern="${sys:product.home}/logs/objmt-georeplayer.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="G" fileName="${sys:product.home}/logs/objmt-chunk-reclaim.log"
                         filePattern="${sys:product.home}/logs/objmt-chunk-reclaim.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="B" fileName="${sys:product.home}/logs/objmt-zk.log"
                         filePattern="${sys:product.home}/logs/objmt-zk.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="L" fileName="${sys:product.home}/logs/objmt-chunk-lifecycle.log"
                         filePattern="${sys:product.home}/logs/objmt-chunk-lifecycle.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="D" fileName="${sys:product.home}/logs/objmt-btree-dump.log"
                         filePattern="${sys:product.home}/logs/objmt-btree-dump.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t%X{apiRequestId}] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <Syslog name="alertsLogger" host="localhost" port="514" protocol="UDP" facility="LOCAL7"/>
  
            <Async name="asyncR" includeLocation="true">
                <AppenderRef ref="R"/>
            </Async>
            <Async name="asyncE" includeLocation="true">
                <AppenderRef ref="E"/>
            </Async>
            <Async name="asyncP" includeLocation="true">
                <AppenderRef ref="P"/>
            </Async>
            <Async name="asyncM" includeLocation="true">
                <AppenderRef ref="M"/>
            </Async>
            <Async name="asyncO" includeLocation="true">
                <AppenderRef ref="O"/>
            </Async>
            <Async name="asyncG" includeLocation="true">
                <AppenderRef ref="G"/>
            </Async>
            <Async name="asyncN" includeLocation="true">
                <AppenderRef ref="N"/>
            </Async>
            <Async name="asyncB" includeLocation="true">
                <AppenderRef ref="B"/>
            </Async>
            <Async name="asyncL" includeLocation="true">
                <AppenderRef ref="L"/>
            </Async>
            <Async name="asyncD" includeLocation="true">
                <AppenderRef ref="D"/>
            </Async>
  
        </Appenders>
  
        <Loggers>
            <Logger name="org.apache.zookeeper" level="INFO"/>
            <Logger name="org.perf4j.TimingLogger" level="ERROR"/>
  
            <Logger name="com.emc.storageos.objcontrol.object.shared.PerformanceCounter" level="DEBUG" additivity="false">
                <AppenderRef ref="asyncP"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
            <Logger name="com.emc.storageos.data.monitoring.MonitoringWorker" level="INFO">
                <AppenderRef ref="asyncM"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.zkstore" level="INFO">
                <AppenderRef ref="asyncB"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.zkbtree" level="INFO">
                <AppenderRef ref="asyncB"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.ownership.impl" level="INFO" additivity="false">
                <AppenderRef ref="asyncO"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.impl.gc" level="DEBUG" additivity="false">
                <AppenderRef ref="asyncG"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
            <Logger name="com.emc.storageos.data.objmt.journalparser" level="INFO" additivity="false">
                <AppenderRef ref="asyncG"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
            <Logger name="com.emc.storageos.data.objmt.mttable" level="INFO" additivity="false">
                <AppenderRef ref="asyncR"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.bplustree.gc" level="INFO" additivity="false">
                <AppenderRef ref="asyncG"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.impl.geo" level="DEBUG" additivity="false">
                <AppenderRef ref="asyncN"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
            <Logger name="com.emc.storageos.services.util.AlertsLogger" level="WARN" additivity="false">
                <AppenderRef ref="alertsLogger"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
  
            <Logger name="com.emc.storageos.data.object.bplustree" level="INFO" additivity="false">
                <AppenderRef ref="asyncD"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
  
            <Logger name="com.emc.storageos.data.object.impl.file.directoryTable" level="INFO" additivity="false">
                <AppenderRef ref="asyncD"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
  
            <Logger name="org.apache.http" level="WARN" additivity="false">
                <AppenderRef ref="asyncR" level="WARN"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
  
            <Root level="info">
                <AppenderRef ref="asyncR"/>
                <AppenderRef ref="asyncE" level="error"/>
            </Root>
        </Loggers>
  
    </Configuration>
---
# Source: ecs-cluster/templates/svc-configs.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ecs-cluster-rm-log4j2
  namespace: 
  labels:
    app.kubernetes.io/name: ecs-cluster
    app.kubernetes.io/version: 0.69.0
    app.kubernetes.io/instance: ecs-cluster
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: ecs-cluster-0.69.0
    product: objectscale
    release: ecs-cluster

data:
  rm-log4j2.xml: |-
    <?xml version="1.0" encoding="UTF-8"?>
    <Configuration monitorInterval="60" shutdownHook="disable">
        <CustomLevels>
            <CustomLevel name="DEBUG_TREE" intLevel="520"/>
            <CustomLevel name="DEBUG_SYNC" intLevel="540"/>
            <CustomLevel name="DEBUG_PAGE" intLevel="560"/>
            <CustomLevel name="DEBUG_ALL" intLevel="580"/>
        </CustomLevels>
        <Appenders>
            <RollingFile name="R" fileName="${sys:product.home}/logs/rm.log"
                         filePattern="${sys:product.home}/logs/rm.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t%X{apiRequestId}] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="P" fileName="${sys:product.home}/logs/rm-perf-counter.log"
                         filePattern="${sys:product.home}/logs/rm-perf-counter.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="E" fileName="${sys:product.home}/logs/rm-error.log"
                         filePattern="${sys:product.home}/logs/rm-error.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t%X{apiRequestId}] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="M" fileName="${sys:product.home}/logs/rm-stats.log"
                         filePattern="${sys:product.home}/logs/rm-stats.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="B" fileName="${sys:product.home}/logs/rm-zk.log"
                         filePattern="${sys:product.home}/logs/rm-zk.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="O" fileName="${sys:product.home}/logs/rm-ownership.log"
                         filePattern="${sys:product.home}/logs/rm-ownership.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="G" fileName="${sys:product.home}/logs/rm-chunk-reclaim.log"
                         filePattern="${sys:product.home}/logs/rm-chunk-reclaim.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="AKKA_BFW" fileName="${sys:product.home}/logs/rm-akkabfw.log"
                         filePattern="${sys:product.home}/logs/rm-akkabfw.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t%X{apiRequestId}] %X{akkaSource} %5p %c{1} %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="RCC" fileName="${sys:product.home}/logs/rm-refresh-chunk-cache.log"
                         filePattern="${sys:product.home}/logs/rm-refresh-chunk-cache.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t%X{apiRequestId}] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <Syslog name="alertsLogger" host="localhost" port="514" protocol="UDP" facility="LOCAL7"/>
  
            <Async name="asyncR" includeLocation="true">
                <AppenderRef ref="R"/>
            </Async>
            <Async name="asyncE" includeLocation="true">
                <AppenderRef ref="E"/>
            </Async>
            <Async name="asyncP" includeLocation="true">
                <AppenderRef ref="P"/>
            </Async>
            <Async name="asyncM" includeLocation="true">
                <AppenderRef ref="M"/>
            </Async>
            <Async name="asyncO" includeLocation="true">
                <AppenderRef ref="O"/>
            </Async>
            <Async name="asyncG" includeLocation="true">
                <AppenderRef ref="G"/>
            </Async>
            <Async name="asyncB" includeLocation="true">
                <AppenderRef ref="B"/>
            </Async>
            <Async name="asyncAkkaBfw" includeLocation="true">
                <AppenderRef ref="AKKA_BFW"/>
            </Async>
            <Async name="asyncRCC" includeLocation="true">
                <AppenderRef ref="RCC"/>
            </Async>
        </Appenders>
  
        <Loggers>
            <Logger name="org.apache.zookeeper" level="INFO"/>
            <Logger name="org.perf4j.TimingLogger" level="ERROR"/>
  
            <Logger name="com.emc.storageos.data.object.zkstore" level="INFO" additivity="false">
                <AppenderRef ref="asyncB"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.zkbtree" level="INFO" additivity="false">
                <AppenderRef ref="asyncB"/>
            </Logger>
            <Logger name="com.emc.storageos.objcontrol.object.shared.PerformanceCounter" level="DEBUG" additivity="false">
                <AppenderRef ref="asyncP"/>
            </Logger>
            <Logger name="com.emc.storageos.data.monitoring.MonitoringWorker" level="INFO">
                <AppenderRef ref="asyncM"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.ownership.impl" level="INFO" additivity="false">
                <AppenderRef ref="asyncO"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.impl.gc" level="DEBUG" additivity="false">
                <AppenderRef ref="asyncG"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.bplustree.gc" level="INFO" additivity="false">
                <AppenderRef ref="asyncG"/>
            </Logger>
            <Logger name="com.emc.storageos.services.util.AlertsLogger" level="WARN" additivity="false">
                <AppenderRef ref="alertsLogger"/>
            </Logger>
  
            <Logger name="org.apache.http" level="WARN" additivity="false">
                <AppenderRef ref="asyncR" level="WARN"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.client.ReportBlockErrorTask.refreshChunkInfo" level="WARN" additivity="false">
                <AppenderRef ref="asyncRCC"/>
            </Logger>
  
            <Logger name="akka.actor" level="warning" additivity="false">
                <AppenderRef ref="asyncAkkaBfw"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.akkaimpl" level="INFO"  additivity="false">
                <AppenderRef ref="asyncAkkaBfw"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
  
            <Root level="info">
                <AppenderRef ref="asyncR"/>
                <AppenderRef ref="asyncE" level="error"/>
            </Root>
        </Loggers>
  
    </Configuration>
---
# Source: ecs-cluster/templates/svc-configs.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ecs-cluster-resource-log4j2
  namespace: 
  labels:
    app.kubernetes.io/name: ecs-cluster
    app.kubernetes.io/version: 0.69.0
    app.kubernetes.io/instance: ecs-cluster
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: ecs-cluster-0.69.0
    product: objectscale
    release: ecs-cluster

data:
  resourcesvc-log4j2.xml: |-
    <?xml version="1.0" encoding="UTF-8"?>
    <Configuration monitorInterval="60" shutdownHook="disable">
        <CustomLevels>
            <CustomLevel name="DEBUG_TREE" intLevel="520"/>
            <CustomLevel name="DEBUG_SYNC" intLevel="540"/>
            <CustomLevel name="DEBUG_PAGE" intLevel="560"/>
            <CustomLevel name="DEBUG_ALL" intLevel="580"/>
        </CustomLevels>
        <Appenders>
            <RollingFile name="R" fileName="${sys:product.home}/logs/resourcesvc.log"
                         filePattern="${sys:product.home}/logs/resourcesvc.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t%X{apiRequestId}] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="P" fileName="${sys:product.home}/logs/resourcesvc-perf-counter.log"
                         filePattern="${sys:product.home}/logs/resourcesvc-perf-counter.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="E" fileName="${sys:product.home}/logs/resourcesvc-error.log"
                         filePattern="${sys:product.home}/logs/resourcesvc-error.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t%X{apiRequestId}] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="M" fileName="${sys:product.home}/logs/resourcesvc-stats.log"
                         filePattern="${sys:product.home}/logs/resourcesvc-stats.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="O" fileName="${sys:product.home}/logs/resourcesvc-ownership.log"
                         filePattern="${sys:product.home}/logs/resourcesvc-ownership.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="G" fileName="${sys:product.home}/logs/resourcesvc-chunk-reclaim.log"
                         filePattern="${sys:product.home}/logs/resourcesvc-chunk-reclaim.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="AKKA_BFW" fileName="${sys:product.home}/logs/resourcesvc-akkabfw.log"
                         filePattern="${sys:product.home}/logs/resourcesvc-akkabfw.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t%X{apiRequestId}] %X{akkaSource} %5p %c{1} %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <Syslog name="alertsLogger" host="localhost" port="514" protocol="UDP" facility="LOCAL7"/>
  
            <Async name="asyncR" includeLocation="true">
                <AppenderRef ref="R"/>
            </Async>
            <Async name="asyncE" includeLocation="true">
                <AppenderRef ref="E"/>
            </Async>
            <Async name="asyncP" includeLocation="true">
                <AppenderRef ref="P"/>
            </Async>
            <Async name="asyncM" includeLocation="true">
                <AppenderRef ref="M"/>
            </Async>
            <Async name="asyncO" includeLocation="true">
                <AppenderRef ref="O"/>
            </Async>
            <Async name="asyncG" includeLocation="true">
                <AppenderRef ref="G"/>
            </Async>
            <Async name="asyncAkkaBfw" includeLocation="true">
                <AppenderRef ref="AKKA_BFW"/>
            </Async>
        </Appenders>
  
        <Loggers>
            <Logger name="org.apache.zookeeper" level="INFO"/>
            <Logger name="org.perf4j.TimingLogger" level="ERROR"/>
            <Logger name="com.emc.storageos.data.object.directoryService.impl.PaxosClient" level="DEBUG"/>
            <Logger name="com.emc.storageos.data.object.directoryService.impl.PaxosOperations" level="DEBUG"/>
  
            <Logger name="com.emc.storageos.services.util.AlertsLogger" level="WARN" additivity="false">
                <AppenderRef ref="alertsLogger"/>
            </Logger>
            <Logger name="com.emc.storageos.objcontrol.object.shared.PerformanceCounter" level="DEBUG" additivity="false">
                <AppenderRef ref="asyncP"/>
            </Logger>
            <Logger name="com.emc.storageos.data.monitoring.MonitoringWorker" level="INFO">
                <AppenderRef ref="asyncM"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.ownership.impl" level="INFO" additivity="false">
                <AppenderRef ref="asyncO"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.impl.gc" level="DEBUG" additivity="false">
                <AppenderRef ref="asyncG"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.bplustree.gc" level="INFO" additivity="false">
                <AppenderRef ref="asyncG"/>
            </Logger>
            <Logger name="org.apache.http" level="WARN" additivity="false">
                <AppenderRef ref="asyncR" level="WARN"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
  
            <Logger name="org.apache.http.impl.conn.PoolingHttpClientConnectionManager" level="DEBUG" additivity="false">
                <AppenderRef ref="asyncR"/>
            </Logger>
  
            <Logger name="akka.actor" level="warning" additivity="false">
                <AppenderRef ref="asyncAkkaBfw"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.akkaimpl" level="INFO"  additivity="false">
                <AppenderRef ref="asyncAkkaBfw"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
  
            <Root level="info">
                <AppenderRef ref="asyncR"/>
                <AppenderRef ref="asyncE" level="error"/>
            </Root>
        </Loggers>
  
    </Configuration>
---
# Source: ecs-cluster/templates/svc-configs.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ecs-cluster-s3-log4j2
  namespace: 
  labels:
    app.kubernetes.io/name: ecs-cluster
    app.kubernetes.io/version: 0.69.0
    app.kubernetes.io/instance: ecs-cluster
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: ecs-cluster-0.69.0
    product: objectscale
    release: ecs-cluster

data:
  dataheadsvc-log4j2.xml: |
    <?xml version="1.0" encoding="UTF-8"?>
    <Configuration monitorInterval="60" shutdownHook="disable">
        <Appenders>
            <RollingFile name="R" fileName="${sys:product.home}/logs/dataheadsvc.log"
                         filePattern="${sys:product.home}/logs/dataheadsvc.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t%X{apiRequestId}%X{apiHeadType}%X{srcip}] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="P" fileName="${sys:product.home}/logs/dataheadsvc-perf-counter.log"
                         filePattern="${sys:product.home}/logs/dataheadsvc-perf-counter.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="E" fileName="${sys:product.home}/logs/dataheadsvc-error.log"
                         filePattern="${sys:product.home}/logs/dataheadsvc-error.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t%X{apiRequestId}%X{apiHeadType}%X{srcip}] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="M" fileName="${sys:product.home}/logs/dataheadsvc-stats.log"
                         filePattern="${sys:product.home}/logs/dataheadsvc-stats.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="O" fileName="${sys:product.home}/logs/dataheadsvc-ownership.log"
                         filePattern="${sys:product.home}/logs/dataheadsvc-ownership.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="A" fileName="${sys:product.home}/logs/dataheadsvc-access.log"
                         filePattern="${sys:product.home}/logs/dataheadsvc-access.log.%i">
                <PatternLayout>
                    <Pattern>%d{DEFAULT} %m%n%ex</Pattern>
                    <Header>#Version: 1.0${sys:line.separator}#Fields: date time x-request-id s-ip c-ip x-user-name cs(User-Agent) cs-method x-namespace x-bucket x-object cs-uri-query cs-protocol-version sc-status time-taken cs-bytes sc-bytes x-storage-processing-time cs(Range) x-copy x-deep-copy-size $${optionalheaders:all}${sys:line.separator}</Header>
                </PatternLayout>
                <Policies>
                    <CFTriggeringPolicy />
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="CA" fileName="${sys:product.home}/logs/datahead-cas-access.log"
                         filePattern="${sys:product.home}/logs/datahead-cas-access.log.%i">
                <PatternLayout>
                    <Pattern>%d{DEFAULT} %m%n%ex</Pattern>
                    <Header>#Version: 1.0${sys:line.separator}#Fields: date time transaction namespace bucket object error-code response-time bytes $${optionalheaders:all}${sys:line.separator}</Header>
                </PatternLayout>
                <Policies>
                    <CFTriggeringPolicy />
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="RCC" fileName="${sys:product.home}/logs/dataheadsvc-refresh-chunk-cache.log"
                         filePattern="${sys:product.home}/logs/dataheadsvc-refresh-chunk-cache.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t%X{apiRequestId}] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <Syslog name="alertsLogger" host="localhost" port="514" protocol="UDP" facility="LOCAL7"/>
  
            <Async name="asyncR" includeLocation="true">
                <AppenderRef ref="R"/>
            </Async>
            <Async name="asyncE" includeLocation="true">
                <AppenderRef ref="E"/>
            </Async>
            <Async name="asyncP" includeLocation="true">
                <AppenderRef ref="P"/>
            </Async>
            <Async name="asyncM" includeLocation="true">
                <AppenderRef ref="M"/>
            </Async>
            <Async name="asyncO" includeLocation="true">
                <AppenderRef ref="O"/>
            </Async>
            <Async name="asyncA" includeLocation="true">
                <AppenderRef ref="A"/>
            </Async>
            <Async name="asyncCA" includeLocation="false">
                <AppenderRef ref="CA"/>
            </Async>
            <Async name="asyncRCC" includeLocation="true">
                <AppenderRef ref="RCC"/>
            </Async>
        </Appenders>
  
        <Loggers>
            <Logger name="org.apache.zookeeper" level="WARN"/>
            <Logger name="org.perf4j.TimingLogger" level="ERROR"/>
  
            <Logger name="com.emc.vipr.hdfs.fs.RequestProcessor" level="INFO"/>
            <Logger name="com.emc.vipr.hdfs.fs.DataProcessor" level="INFO"/>
            <Logger name="com.emc.vipr.hdfs.fs.ChunkedInputStream" level="INFO"/>
            <Logger name="com.emc.vipr.hdfs.fs.ChunkedOutputStream" level="INFO"/>
            <Logger name="com.emc.vipr.engine" level="INFO"/>
            <Logger name="com.emc.vipr.hdfs.auth" level="INFO"/>
            <Logger name="com.emc.storageos.data.object.utils.RequestTrace" level="INFO"/>
  
            <Logger name="com.emc.storageos.services.util.AlertsLogger" level="WARN" additivity="false">
                <AppenderRef ref="alertsLogger"/>
            </Logger>
            <Logger name="com.emc.storageos.objcontrol.object.shared.PerformanceCounter" level="DEBUG" additivity="false">
                <AppenderRef ref="asyncP"/>
            </Logger>
            <Logger name="com.emc.storageos.objcontrol.object.shared.SensitivePerformanceCounter" level="DEBUG" additivity="false">
                <AppenderRef ref="asyncP"/>
            </Logger>
            <Logger name="com.emc.storageos.data.monitoring.MonitoringWorker" level="INFO">
                <AppenderRef ref="asyncM"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.impl.buffer" level="INFO">
            </Logger>
            <Logger name="org.apache.http" level="WARN" additivity="false">
                <AppenderRef ref="asyncR" level="WARN"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.impl" level="INFO">
            </Logger>
            <Logger name="com.emc.storageos.data.object.client" level="INFO">
            </Logger>
            <Logger name="com.emc.storageos.data.object.controller" level="INFO">
            </Logger>
  
            <Logger name="org.apache.http.impl.conn.PoolingHttpClientConnectionManager" level="INFO" additivity="false">
                <AppenderRef ref="asyncR"/>
            </Logger>
  
            <Logger name="com.emc.storageos.data.api.service.impl.resource.common.log.RequestLogBase" level="INFO" additivity="false">
                <AppenderRef ref="asyncA">
                    <filters>
                        <MarkerFilter marker="ACCESS" onMatch="ACCEPT" onMismatch="DENY"/>
                    </filters>
                </AppenderRef>
                <AppenderRef ref="asyncR">
                    <filters>
                        <MarkerFilter marker="ACCESS" onMatch="DENY" onMismatch="ACCEPT"/>
                    </filters>
                </AppenderRef>
            </Logger>
  
            <Logger name="com.emc.vipr.cashead.storageserver.access.transaction.CasTransactionLogger" level="INFO" additivity="false">
                <AppenderRef ref="asyncCA"/>
            </Logger>
  
            <Logger name="com.emc.storageos.data.object.client.ReportBlockErrorTask.refreshChunkInfo" level="WARN" additivity="false">
                <AppenderRef ref="asyncRCC"/>
            </Logger>
  
            <Root level="info">
                <AppenderRef ref="asyncR"/>
                <AppenderRef ref="asyncE" level="error"/>
            </Root>
        </Loggers>
  
    </Configuration>
---
# Source: ecs-cluster/templates/svc-configs.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ecs-cluster-sr-log4j2
  namespace: 
  labels:
    app.kubernetes.io/name: ecs-cluster
    app.kubernetes.io/version: 0.69.0
    app.kubernetes.io/instance: ecs-cluster
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: ecs-cluster-0.69.0
    product: objectscale
    release: ecs-cluster

data:
  sr-log4j2.xml: "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Configuration monitorInterval=\"60\"
    shutdownHook=\"disable\">\n    <CustomLevels>\n        <CustomLevel name=\"DEBUG_TREE\"
    intLevel=\"520\"/>\n        <CustomLevel name=\"DEBUG_SYNC\" intLevel=\"540\"/>\n
    \       <CustomLevel name=\"DEBUG_PAGE\" intLevel=\"560\"/>\n        <CustomLevel
    name=\"DEBUG_ALL\" intLevel=\"580\"/>\n    </CustomLevels>\n    <Appenders>\n        <RollingFile
    name=\"R\" fileName=\"${sys:product.home}/logs/sr.log\"\n                     filePattern=\"${sys:product.home}/logs/sr.log.%i\">\n
    \           <PatternLayout>\n                <Pattern>%d{ISO8601} [%t] %5p  %F (line
    %L) %m%n%ex</Pattern>\n            </PatternLayout>\n            <Policies>\n                <SizeBasedTriggeringPolicy
    size=\"5 MB\"/>\n            </Policies>\n            <DefaultRolloverStrategy max=\"1\"/>\n
    \       </RollingFile>\n\n        <RollingFile name=\"P\" fileName=\"${sys:product.home}/logs/sr-perf-counter.log\"\n
    \                    filePattern=\"${sys:product.home}/logs/sr-perf-counter.log.%i\">\n
    \           <PatternLayout>\n                <Pattern>%d{ISO8601} %m%n%ex</Pattern>\n
    \           </PatternLayout>\n            <Policies>\n                <SizeBasedTriggeringPolicy
    size=\"5 MB\"/>\n            </Policies>\n            <DefaultRolloverStrategy max=\"1\"/>\n
    \       </RollingFile>\n\n        <RollingFile name=\"E\" fileName=\"${sys:product.home}/logs/sr-error.log\"\n
    \                    filePattern=\"${sys:product.home}/logs/sr-error.log.%i\">\n
    \           <PatternLayout>\n                <Pattern>%d{ISO8601} [%t] %5p  %F (line
    %L) %m%n%ex</Pattern>\n            </PatternLayout>\n            <Policies>\n                <SizeBasedTriggeringPolicy
    size=\"5 MB\"/>\n            </Policies>\n            <DefaultRolloverStrategy max=\"1\"/>\n
    \       </RollingFile>\n\n        <RollingFile name=\"M\" fileName=\"${sys:product.home}/logs/sr-stats.log\"\n
    \                    filePattern=\"${sys:product.home}/logs/sr-stats.log.%i\">\n
    \           <PatternLayout>\n                <Pattern>%d{ISO8601} [%t] %5p  %F (line
    %L) %m%n%ex</Pattern>\n            </PatternLayout>\n            <Policies>\n                <SizeBasedTriggeringPolicy
    size=\"5 MB\"/>\n            </Policies>\n            <DefaultRolloverStrategy max=\"1\"/>\n
    \       </RollingFile>\n\n        <RollingFile name=\"O\" fileName=\"${sys:product.home}/logs/sr-ownership.log\"\n
    \                    filePattern=\"${sys:product.home}/logs/sr-ownership.log.%i\">\n
    \           <PatternLayout>\n                <Pattern>%d{ISO8601} [%t] %5p  %F (line
    %L) %m%n%ex</Pattern>\n            </PatternLayout>\n            <Policies>\n                <SizeBasedTriggeringPolicy
    size=\"5 MB\"/>\n            </Policies>\n            <DefaultRolloverStrategy max=\"1\"/>\n
    \       </RollingFile>\n\n        <RollingFile name=\"N\" fileName=\"${sys:product.home}/logs/sr-georeplayer.log\"\n
    \                    filePattern=\"${sys:product.home}/logs/sr-georeplayer.log.%i\">\n
    \           <PatternLayout>\n                <Pattern>%d{ISO8601} [%t] %5p  %F (line
    %L) %m%n%ex</Pattern>\n            </PatternLayout>\n            <Policies>\n                <SizeBasedTriggeringPolicy
    size=\"5 MB\"/>\n            </Policies>\n            <DefaultRolloverStrategy max=\"1\"/>\n
    \       </RollingFile>\n\n        <RollingFile name=\"G\" fileName=\"${sys:product.home}/logs/sr-chunk-reclaim.log\"\n
    \                    filePattern=\"${sys:product.home}/logs/sr-chunk-reclaim.log.%i\">\n
    \           <PatternLayout>\n                <Pattern>%d{ISO8601} [%t] %5p  %F (line
    %L) %m%n%ex</Pattern>\n            </PatternLayout>\n            <Policies>\n                <SizeBasedTriggeringPolicy
    size=\"5 MB\"/>\n            </Policies>\n            <DefaultRolloverStrategy max=\"1\"/>\n
    \       </RollingFile>\n\n        <RollingFile name=\"B\" fileName=\"${sys:product.home}/logs/sr-zk.log\"\n
    \                    filePattern=\"${sys:product.home}/logs/sr-zk.log.%i\">\n            <PatternLayout>\n
    \               <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>\n
    \           </PatternLayout>\n            <Policies>\n                <SizeBasedTriggeringPolicy
    size=\"5 MB\"/>\n            </Policies>\n            <DefaultRolloverStrategy max=\"1\"/>\n
    \       </RollingFile>\n\n        <RollingFile name=\"L\" fileName=\"${sys:product.home}/logs/sr-chunk-lifecycle.log\"\n
    \                    filePattern=\"${sys:product.home}/logs/sr-chunk-lifecycle.log.%i\">\n
    \           <PatternLayout>\n                <Pattern>%d{ISO8601} %m%n%ex</Pattern>\n
    \           </PatternLayout>\n            <Policies>\n                <SizeBasedTriggeringPolicy
    size=\"5 MB\"/>\n            </Policies>\n            <DefaultRolloverStrategy max=\"1\"/>\n
    \       </RollingFile>\n\n        <RollingFile name=\"ObjectGC\" fileName=\"${sys:product.home}/logs/sr-object-gc.log\"\n
    \                    filePattern=\"${sys:product.home}/logs/sr-object-gc.log.%i\">\n
    \           <PatternLayout>\n                <Pattern>%d{ISO8601} [%t] %5p  %F (line
    %L) %m%n%ex</Pattern>\n            </PatternLayout>\n            <Policies>\n                <SizeBasedTriggeringPolicy
    size=\"5 MB\"/>\n            </Policies>\n            <DefaultRolloverStrategy max=\"1\"/>\n
    \       </RollingFile>\n\n        <RollingFile name=\"ObjectGCIDs\" fileName=\"${sys:product.home}/logs/sr-objectgc-ids.log\"\n
    \                    filePattern=\"${sys:product.home}/logs/sr-objectgc-ids.log.%i\">\n
    \           <PatternLayout>\n                <Pattern>%d{ISO8601} [%t] %5p  %F (line
    %L) %m%n%ex</Pattern>\n            </PatternLayout>\n            <Policies>\n                <SizeBasedTriggeringPolicy
    size=\"5 MB\"/>\n            </Policies>\n            <DefaultRolloverStrategy max=\"1\"/>\n
    \       </RollingFile>\n\n        <RollingFile name=\"D\" fileName=\"${sys:product.home}/logs/sr-btree-dump.log\"\n
    \                    filePattern=\"${sys:product.home}/logs/sr-btree-dump.log.%i\">\n
    \           <PatternLayout>\n                <Pattern>%d{ISO8601} [%t%X{apiRequestId}]
    %5p  %F (line %L) %m%n%ex</Pattern>\n            </PatternLayout>\n            <Policies>\n
    \               <SizeBasedTriggeringPolicy size=\"5 MB\"/>\n            </Policies>\n
    \           <DefaultRolloverStrategy max=\"1\"/>\n        </RollingFile>\n\n        <RollingFile
    name=\"W\" fileName=\"${sys:product.home}/logs/sr-statistics.log\"\n                     filePattern=\"${sys:product.home}/logs/sr-statistics.log.%i\">\n
    \           <PatternLayout>\n                <Pattern>%d{ISO8601} [%t%X{apiRequestId}]
    %5p  %F (line %L) %m%n%ex</Pattern>\n            </PatternLayout>\n            <Policies>\n
    \               <SizeBasedTriggeringPolicy size=\"5 MB\"/>\n            </Policies>\n
    \           <DefaultRolloverStrategy max=\"1\"/>\n        </RollingFile>\n\n        <RollingFile
    name=\"RCC\" fileName=\"${sys:product.home}/logs/sr-refresh-chunk-cache.log\"\n
    \                    filePattern=\"${sys:product.home}/logs/sr-refresh-chunk-cache.log.%i\">\n
    \           <PatternLayout>\n                <Pattern>%d{ISO8601} [%t%X{apiRequestId}]
    %5p  %F (line %L) %m%n%ex</Pattern>\n            </PatternLayout>\n            <Policies>\n
    \               <SizeBasedTriggeringPolicy size=\"5 MB\"/>\n            </Policies>\n
    \           <DefaultRolloverStrategy max=\"1\"/>\n        </RollingFile>\n\n        <RollingFile
    name=\"AKKA_BFW\" fileName=\"${sys:product.home}/logs/sr-akkabfw.log\"\n                     filePattern=\"${sys:product.home}/logs/sr-akkabfw.log.%i\">\n
    \           <PatternLayout>\n                <Pattern>%d{ISO8601} [%t%X{apiRequestId}]
    %X{akkaSource} %5p %c{1} %m%n%ex</Pattern>\n            </PatternLayout>\n            <Policies>\n
    \               <SizeBasedTriggeringPolicy size=\"5 MB\"/>\n            </Policies>\n
    \           <DefaultRolloverStrategy max=\"1\"/>\n        </RollingFile>\n\n        <Syslog
    name=\"alertsLogger\" host=\"localhost\" port=\"514\" protocol=\"UDP\" facility=\"LOCAL7\"/>\n\n
    \       <Async name=\"asyncR\" includeLocation=\"true\">\n            <AppenderRef
    ref=\"R\"/>\n        </Async>\n        <Async name=\"asyncE\" includeLocation=\"true\">\n
    \           <AppenderRef ref=\"E\"/>\n        </Async>\n        <Async name=\"asyncP\"
    includeLocation=\"true\">\n            <AppenderRef ref=\"P\"/>\n        </Async>\n
    \       <Async name=\"asyncM\" includeLocation=\"true\">\n            <AppenderRef
    ref=\"M\"/>\n        </Async>\n        <Async name=\"asyncO\" includeLocation=\"true\">\n
    \           <AppenderRef ref=\"O\"/>\n        </Async>\n        <Async name=\"asyncG\"
    includeLocation=\"true\">\n            <AppenderRef ref=\"G\"/>\n        </Async>\n
    \       <Async name=\"asyncN\" includeLocation=\"true\">\n            <AppenderRef
    ref=\"N\"/>\n        </Async>\n        <Async name=\"asyncB\" includeLocation=\"true\">\n
    \           <AppenderRef ref=\"B\"/>\n        </Async>\n        <Async name=\"asyncL\"
    includeLocation=\"true\">\n            <AppenderRef ref=\"L\"/>\n        </Async>\n
    \       <Async name=\"asyncD\" includeLocation=\"true\">\n            <AppenderRef
    ref=\"D\"/>\n        </Async>\n        <Async name=\"asyncW\" includeLocation=\"true\">\n
    \           <AppenderRef ref=\"W\"/>\n        </Async>\n        <Async name=\"asyncObjectGC\"
    includeLocation=\"true\">\n            <AppenderRef ref=\"ObjectGC\"/>\n        </Async>\n
    \       <Async name=\"asyncObjectGCIDs\" includeLocation=\"true\">\n            <AppenderRef
    ref=\"ObjectGCIDs\"/>\n        </Async>\n        <Async name=\"asyncAkkaBfw\" includeLocation=\"true\">\n
    \           <AppenderRef ref=\"AKKA_BFW\"/>\n        </Async>\n        <Async name=\"asyncRCC\"
    includeLocation=\"true\">\n            <AppenderRef ref=\"RCC\"/>\n        </Async>\n\n
    \   </Appenders>\n\n    <Loggers>\n        <Logger name=\"org.apache.zookeeper\"
    level=\"INFO\"/>\n        <Logger name=\"org.perf4j.TimingLogger\" level=\"ERROR\"/>\n\n
    \       <Logger name=\"com.emc.storageos.data.object.impl.objectgc\" level=\"INFO\"/>\n\n
    \       <Logger name=\"com.emc.storageos.objcontrol.object.shared.PerformanceCounter\"
    level=\"DEBUG\" additivity=\"false\">\n            <AppenderRef ref=\"asyncP\"/>\n
    \           <AppenderRef ref=\"asyncE\" level=\"ERROR\"/>\n        </Logger>\n        <Logger
    name=\"com.emc.storageos.data.monitoring.MonitoringWorker\" level=\"INFO\">\n            <AppenderRef
    ref=\"asyncM\"/>\n        </Logger>\n        <Logger name=\"com.emc.storageos.data.object.zkstore\"
    level=\"INFO\">\n            <AppenderRef ref=\"asyncB\"/>\n        </Logger>\n
    \       <Logger name=\"com.emc.storageos.data.object.zkbtree\" level=\"INFO\">\n
    \           <AppenderRef ref=\"asyncB\"/>\n        </Logger>\n        <Logger name=\"com.emc.storageos.data.object.ownership.impl\"
    level=\"INFO\" additivity=\"false\">\n            <AppenderRef ref=\"asyncO\"/>\n
    \           <AppenderRef ref=\"asyncE\" level=\"ERROR\"/>\n        </Logger>\n        <Logger
    name=\"com.emc.storageos.data.object.impl.gc\" level=\"DEBUG\" additivity=\"false\">\n
    \           <AppenderRef ref=\"asyncG\"/>\n            <AppenderRef ref=\"asyncE\"
    level=\"ERROR\"/>\n        </Logger>\n        <Logger name=\"com.emc.storageos.data.object.impl.gc.reference\"
    level=\"INFO\" additivity=\"false\">\n            <AppenderRef ref=\"asyncG\"/>\n
    \           <AppenderRef ref=\"asyncE\" level=\"ERROR\"/>\n        </Logger>\n        <Logger
    name=\"com.emc.storageos.data.object.impl.gc.RepositoryReferenceTable\" level=\"INFO\"
    additivity=\"false\">\n            <AppenderRef ref=\"asyncG\"/>\n            <AppenderRef
    ref=\"asyncE\" level=\"ERROR\"/>\n        </Logger>\n        <Logger name=\"com.emc.storageos.data.object.impl.journalparser\"
    level=\"INFO\" additivity=\"false\">\n            <AppenderRef ref=\"asyncG\"/>\n
    \           <AppenderRef ref=\"asyncE\" level=\"ERROR\"/>\n        </Logger>\n        <Logger
    name=\"com.emc.storageos.data.object.impl.gc.journalparser\" level=\"INFO\" additivity=\"false\">\n
    \           <AppenderRef ref=\"asyncG\"/>\n            <AppenderRef ref=\"asyncE\"
    level=\"ERROR\"/>\n        </Logger>\n        <Logger name=\"com.emc.storageos.data.spacereclamation.rrtable.bgOps.partialgc\"
    level=\"DEBUG\">\n            <AppenderRef ref=\"asyncG\"/>\n        </Logger>\n
    \       <Logger name=\"com.emc.storageos.data.spacereclamation.rrtable.RRTable\"
    level=\"INFO\">\n            <AppenderRef ref=\"asyncG\"/>\n        </Logger>\n
    \       <Logger name=\"com.emc.storageos.data.object.bplustree.gc\" level=\"INFO\"
    additivity=\"false\">\n            <AppenderRef ref=\"asyncG\"/>\n            <AppenderRef
    ref=\"asyncE\" level=\"ERROR\"/>\n        </Logger>\n        <Logger name=\"com.emc.storageos.data.object.impl.geo\"
    level=\"DEBUG\" additivity=\"false\">\n            <AppenderRef ref=\"asyncN\"/>\n
    \           <AppenderRef ref=\"asyncE\" level=\"ERROR\"/>\n        </Logger>\n        <Logger
    name=\"com.emc.storageos.services.util.AlertsLogger\" level=\"WARN\" additivity=\"false\">\n
    \           <AppenderRef ref=\"alertsLogger\"/>\n            <AppenderRef ref=\"asyncE\"
    level=\"ERROR\"/>\n        </Logger>\n        <Logger name=\"com.emc.storageos.data.object.impl.gc.ChunkLifecycleLogger\"
    level=\"INFO\" additivity=\"false\">\n            <AppenderRef ref=\"asyncL\"/>\n
    \           <AppenderRef ref=\"asyncE\" level=\"ERROR\"/>\n        </Logger>\n        <Logger
    name=\"LoggerObjectGCIDs\" level=\"INFO\" additivity=\"false\">\n            <AppenderRef
    ref=\"asyncObjectGCIDs\"/>\n            <AppenderRef ref=\"asyncE\" level=\"ERROR\"/>\n
    \       </Logger>\n        <Logger name=\"com.emc.storageos.data.object.impl.objectgc\"
    level=\"INFO\" additivity=\"false\">\n            <AppenderRef ref=\"asyncObjectGC\"/>\n
    \           <AppenderRef ref=\"asyncE\" level=\"ERROR\"/>\n        </Logger>\n\n
    \       <Logger name=\"com.emc.storageos.data.object.bplustree\" level=\"INFO\"
    additivity=\"false\">\n            <AppenderRef ref=\"asyncD\"/>\n            <AppenderRef
    ref=\"asyncE\" level=\"ERROR\"/>\n        </Logger>\n\n        <Logger name=\"com.emc.storageos.data.object.impl.file.directoryTable\"
    level=\"INFO\" additivity=\"false\">\n            <AppenderRef ref=\"asyncD\"/>\n
    \           <AppenderRef ref=\"asyncE\" level=\"ERROR\"/>\n        </Logger>\n\n
    \       <Logger name=\"com.emc.storageos.data.spacereclamation.SrStats\" level=\"DEBUG\">\n
    \           <AppenderRef ref=\"asyncW\"/>\n        </Logger>\n\n        <Logger
    name=\"org.apache.http\" level=\"WARN\" additivity=\"false\">\n            <AppenderRef
    ref=\"asyncR\" level=\"WARN\"/>\n            <AppenderRef ref=\"asyncE\" level=\"ERROR\"/>\n
    \       </Logger>\n\n        <Logger name=\"com.emc.storageos.data.object.client.ReportBlockErrorTask.refreshChunkInfo\"
    level=\"WARN\" additivity=\"false\">\n            <AppenderRef ref=\"asyncRCC\"/>\n
    \       </Logger>\n        \n        <Logger name=\"akka.actor\" level=\"warning\"
    additivity=\"false\">\n            <AppenderRef ref=\"asyncAkkaBfw\"/>\n        </Logger>\n
    \       <Logger name=\"com.emc.storageos.data.object.akkaimpl\" level=\"INFO\"  additivity=\"false\">\n
    \           <AppenderRef ref=\"asyncAkkaBfw\"/>\n            <AppenderRef ref=\"asyncE\"
    level=\"ERROR\"/>\n        </Logger>\n\n        <Root level=\"info\">\n            <AppenderRef
    ref=\"asyncR\"/>\n            <AppenderRef ref=\"asyncE\" level=\"error\"/>\n        </Root>\n
    \   </Loggers>\n\n</Configuration>\n"
---
# Source: ecs-cluster/templates/svc-configs.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ecs-cluster-sm-log4j2
  namespace: 
  labels:
    app.kubernetes.io/name: ecs-cluster
    app.kubernetes.io/version: 0.69.0
    app.kubernetes.io/instance: ecs-cluster
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: ecs-cluster-0.69.0
    product: objectscale
    release: ecs-cluster

data:
  storagemanagementsvc-log4j2.xml: |-
    <?xml version="1.0" encoding="UTF-8"?>
    <Configuration monitorInterval="60" shutdownHook="disable">
        <CustomLevels>
            <CustomLevel name="DEBUG_TREE" intLevel="520"/>
            <CustomLevel name="DEBUG_SYNC" intLevel="540"/>
            <CustomLevel name="DEBUG_PAGE" intLevel="560"/>
            <CustomLevel name="DEBUG_ALL" intLevel="580"/>
        </CustomLevels>
        <Appenders>
            <RollingFile name="R" fileName="${sys:product.home}/logs/storagemanagementsvc.log"
                         filePattern="${sys:product.home}/logs/storagemanagementsvc.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t%X{apiRequestId}] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="P" fileName="${sys:product.home}/logs/storagemanagementsvc-perf-counter.log"
                         filePattern="${sys:product.home}/logs/storagemanagementsvc-perf-counter.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="E" fileName="${sys:product.home}/logs/storagemanagementsvc-error.log"
                         filePattern="${sys:product.home}/logs/storagemanagementsvc-error.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t%X{apiRequestId}] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="M" fileName="${sys:product.home}/logs/storagemanagementsvc-stats.log"
                         filePattern="${sys:product.home}/logs/storagemanagementsvc-stats.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="B" fileName="${sys:product.home}/logs/storagemanagementsvc-zk.log"
                         filePattern="${sys:product.home}/logs/storagemanagementsvc-zk.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="O" fileName="${sys:product.home}/logs/storagemanagementsvc-ownership.log"
                         filePattern="${sys:product.home}/logs/storagemanagementsvc-ownership.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="G" fileName="${sys:product.home}/logs/storagemanagementsvc-chunk-reclaim.log"
                         filePattern="${sys:product.home}/logs/storagemanagementsvc-chunk-reclaim.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="C" fileName="${sys:product.home}/logs/storagemanagementsvc-corruption-scan.log"
                         filePattern="${sys:product.home}/logs/storagemanagementsvc-corruption-scan.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="L" fileName="${sys:product.home}/logs/storagemanagementsvc-chunk-lifecycle.log"
                         filePattern="${sys:product.home}/logs/storagemanagementsvc-chunk-lifecycle.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="D" fileName="${sys:product.home}/logs/storagemanagementsvc-typeII-EC-delete.log"
                         filePattern="${sys:product.home}/logs/storagemanagementsvc-typeII-EC-delete.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="T" fileName="${sys:product.home}/logs/storagemanagementsvc-remove-repair-task.log"
                         filePattern="${sys:product.home}/logs/storagemanagementsvc-remove-repair-task.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="L" fileName="${sys:product.home}/logs/storagemanagementsvc-chunk-lifecycle.log"
                         filePattern="${sys:product.home}/logs/storagemanagementsvc-chunk-lifecycle.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="W" fileName="${sys:product.home}/logs/storagemanagementsvc-statistics.log"
                         filePattern="${sys:product.home}/logs/storagemanagementsvc-statistics.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t%X{apiRequestId}] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="TB" fileName="${sys:product.home}/logs/storagemanagementsvc-block-lifecycle.log"
                         filePattern="${sys:product.home}/logs/storagemanagementsvc-block-lifecycle.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="BG" fileName="${sys:product.home}/logs/storagemanagementsvc-bg.log"
                         filePattern="${sys:product.home}/logs/storagemanagementsvc-bg.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="AKKA_BFW" fileName="${sys:product.home}/logs/storagemanagementsvc-akkabfw.log"
                         filePattern="${sys:product.home}/logs/storagemanagementsvc-akkabfw.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t%X{apiRequestId}] %X{akkaSource} %5p %c{1} %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <Syslog name="alertsLogger" host="localhost" port="514" protocol="UDP" facility="LOCAL7"/>
  
            <Async name="asyncR" includeLocation="true">
                <AppenderRef ref="R"/>
            </Async>
            <Async name="asyncE" includeLocation="true">
                <AppenderRef ref="E"/>
            </Async>
            <Async name="asyncP" includeLocation="true">
                <AppenderRef ref="P"/>
            </Async>
            <Async name="asyncM" includeLocation="true">
                <AppenderRef ref="M"/>
            </Async>
            <Async name="asyncB" includeLocation="true">
                <AppenderRef ref="B"/>
            </Async>
            <Async name="asyncO" includeLocation="true">
                <AppenderRef ref="O"/>
            </Async>
            <Async name="asyncG" includeLocation="true">
                <AppenderRef ref="G"/>
            </Async>
            <Async name="asyncC" includeLocation="true">
                <AppenderRef ref="C"/>
            </Async>
            <Async name="asyncL" includeLocation="true">
                <AppenderRef ref="L"/>
            </Async>
            <Async name="asyncD" includeLocation="true">
                <AppenderRef ref="D"/>
            </Async>
            <Async name="asyncT" includeLocation="true">
                <AppenderRef ref="T"/>
            </Async>
            <Async name="asyncW" includeLocation="true">
                <AppenderRef ref="W"/>
            </Async>
            <Async name="asyncTB" includeLocation="true">
                <AppenderRef ref="TB"/>
            </Async>
            <Async name="asyncBG" includeLocation="true">
                <AppenderRef ref="BG"/>
            </Async>
            <Async name="asyncAkkaBfw" includeLocation="true">
                <AppenderRef ref="AKKA_BFW"/>
            </Async>
        </Appenders>
  
        <Loggers>
            <Logger name="org.apache.zookeeper" level="INFO"/>
            <Logger name="org.perf4j.TimingLogger" level="ERROR"/>
            <Logger name="com.emc.storageos.data.chunkmanager" level="DEBUG"/>
            <Logger name="blockLifecycleLogger" level="INFO" additivity="false">
                <AppenderRef ref="asyncTB"/>
            </Logger>
            <Logger name="ssmBGLogger" level="INFO" additivity="false">
                <AppenderRef ref="asyncBG"/>
            </Logger>
            <Logger name="com.emc.storageos.services.util.AlertsLogger" level="WARN" additivity="false">
                <AppenderRef ref="alertsLogger"/>
            </Logger>
            <Logger name="com.emc.storageos.objcontrol.object.shared.PerformanceCounter" level="DEBUG" additivity="false">
                <AppenderRef ref="asyncP"/>
            </Logger>
            <Logger name="com.emc.storageos.data.monitoring.MonitoringWorker" level="INFO">
                <AppenderRef ref="asyncM"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.zkstore" level="INFO" additivity="false">
                <AppenderRef ref="asyncB"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.zkbtree" level="INFO" additivity="false">
                <AppenderRef ref="asyncB"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.ownership.impl" level="INFO" additivity="false">
                <AppenderRef ref="asyncO"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.impl.gc" level="DEBUG" additivity="false">
                <AppenderRef ref="asyncG"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.bplustree.gc" level="INFO" additivity="false">
                <AppenderRef ref="asyncG"/>
            </Logger>
            <Logger name="com.emc.storageos.data.chunkmanager.scanner.bplustree" level="DEBUG" additivity="false">
                <AppenderRef ref="asyncG"/>
            </Logger>
            <Logger name="com.emc.storageos.data.chunkmanager.scanner.BPlusTreeChunkReclaimerScanner" level="INFO" additivity="false">
                <AppenderRef ref="asyncG"/>
            </Logger>
            <Logger name="com.emc.storageos.data.chunkmanager.scanner.BPlusTreeReclaimer" level="INFO" additivity="false">
                <AppenderRef ref="asyncG"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.impl.geoShipping" level="DEBUG">
                <AppenderRef ref="asyncG"/>
            </Logger>
            <Logger name="com.emc.storageos.data.chunkmanager.scanner.ChunkCorruptionScanner" level="INFO" additivity="false">
                <AppenderRef ref="asyncC"/>
            </Logger>
            <Logger name="com.emc.storageos.data.chunkmanager.operations.CorruptionChecker" level="INFO" additivity="false">
                <AppenderRef ref="asyncC"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.impl.gc.ChunkLifecycleLogger" level="INFO" additivity="false">
                <AppenderRef ref="asyncL"/>
            </Logger>
            <Logger name="com.emc.storageos.data.EcDelete" level="WARN" additivity="false">
                <AppenderRef ref="asyncD"/>
            </Logger>
            <Logger name="com.emc.storageos.data.chunkmanager.scanner.remove_repair_task" level="WARN" additivity="false">
                <AppenderRef ref="asyncT"/>
            </Logger>
            <Logger name="com.emc.storageos.data.chunkmanager.CmStats" level="DEBUG">
                <AppenderRef ref="asyncW"/>
            </Logger>
  
            <Logger name="org.apache.http" level="WARN" additivity="false">
                <AppenderRef ref="asyncR" level="WARN"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
  
            <Logger name="org.apache.http.impl.conn.PoolingHttpClientConnectionManager" level="DEBUG" additivity="false">
                <AppenderRef ref="asyncR"/>
            </Logger>
  
            <Logger name="com.emc.storageos.data.object.impl.gc.ChunkLifecycleLogger" level="INFO" additivity="false">
                <AppenderRef ref="asyncL"/>
            </Logger>
  
            <Logger name="com.emc.storageos.data.object.bplustree" level="DEBUG" additivity="false">
                <AppenderRef ref="asyncR"/>
            </Logger>
  
            <Logger name="akka.actor" level="warning" additivity="false">
                <AppenderRef ref="asyncAkkaBfw"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.akkaimpl" level="INFO"  additivity="false">
                <AppenderRef ref="asyncAkkaBfw"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
  
            <Root level="info">
                <AppenderRef ref="asyncR"/>
                <AppenderRef ref="asyncE" level="error"/>
            </Root>
        </Loggers>
  
    </Configuration>
---
# Source: ecs-cluster/templates/svc-configs.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ecs-cluster-ssm-log4j2
  namespace: 
  labels:
    app.kubernetes.io/name: ecs-cluster
    app.kubernetes.io/version: 0.69.0
    app.kubernetes.io/instance: ecs-cluster
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: ecs-cluster-0.69.0
    product: objectscale
    release: ecs-cluster

data:
  ssm-log4j2.xml: |-
    <?xml version="1.0" encoding="UTF-8"?>
    <Configuration monitorInterval="60" shutdownHook="disable">
        <CustomLevels>
            <CustomLevel name="DEBUG_TREE" intLevel="520"/>
            <CustomLevel name="DEBUG_SYNC" intLevel="540"/>
            <CustomLevel name="DEBUG_PAGE" intLevel="560"/>
            <CustomLevel name="DEBUG_ALL" intLevel="580"/>
        </CustomLevels>
        <Appenders>
            <RollingFile name="R" fileName="${sys:product.home}/logs/ssm.log"
                         filePattern="${sys:product.home}/logs/ssm.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t%X{apiRequestId}] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="P" fileName="${sys:product.home}/logs/ssm-perf-counter.log"
                         filePattern="${sys:product.home}/logs/ssm-perf-counter.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="E" fileName="${sys:product.home}/logs/ssm-error.log"
                         filePattern="${sys:product.home}/logs/ssm-error.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t%X{apiRequestId}] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="M" fileName="${sys:product.home}/logs/ssm-stats.log"
                         filePattern="${sys:product.home}/logs/ssm-stats.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="B" fileName="${sys:product.home}/logs/ssm-zk.log"
                         filePattern="${sys:product.home}/logs/ssm-zk.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="O" fileName="${sys:product.home}/logs/ssm-ownership.log"
                         filePattern="${sys:product.home}/logs/ssm-ownership.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="G" fileName="${sys:product.home}/logs/ssm-chunk-reclaim.log"
                         filePattern="${sys:product.home}/logs/ssm-chunk-reclaim.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="T" fileName="${sys:product.home}/logs/ssm-block-lifecycle.log"
                         filePattern="${sys:product.home}/logs/ssm-block-lifecycle.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="BG" fileName="${sys:product.home}/logs/ssm-bg.log"
                         filePattern="${sys:product.home}/logs/ssm-bg.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="D" fileName="${sys:product.home}/logs/ssm-btree-dump.log"
                         filePattern="${sys:product.home}/logs/ssm-btree-dump.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t%X{apiRequestId}] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="S" fileName="${sys:product.home}/logs/ssm-migration-block-lifecycle.log"
                         filePattern="${sys:product.home}/logs/ssm-migration-block-lifecycle.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t%X{apiRequestId}] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="AKKA_BFW" fileName="${sys:product.home}/logs/ssm-akkabfw.log"
                         filePattern="${sys:product.home}/logs/ssm-akkabfw.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t%X{apiRequestId}] %X{akkaSource} %5p %c{1} %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="RCC" fileName="${sys:product.home}/logs/ssm-refresh-chunk-cache.log"
                         filePattern="${sys:product.home}/logs/ssm-refresh-chunk-cache.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t%X{apiRequestId}] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <Syslog name="alertsLogger" host="localhost" port="514" protocol="UDP" facility="LOCAL7"/>
  
            <Async name="asyncR" includeLocation="true">
                <AppenderRef ref="R"/>
            </Async>
            <Async name="asyncE" includeLocation="true">
                <AppenderRef ref="E"/>
            </Async>
            <Async name="asyncP" includeLocation="true">
                <AppenderRef ref="P"/>
            </Async>
            <Async name="asyncM" includeLocation="true">
                <AppenderRef ref="M"/>
            </Async>
            <Async name="asyncO" includeLocation="true">
                <AppenderRef ref="O"/>
            </Async>
            <Async name="asyncG" includeLocation="true">
                <AppenderRef ref="G"/>
            </Async>
            <Async name="asyncB" includeLocation="true">
                <AppenderRef ref="B"/>
            </Async>
            <Async name="asyncT" includeLocation="true">
                <AppenderRef ref="T"/>
            </Async>
            <Async name="asyncBG" includeLocation="true">
                <AppenderRef ref="BG"/>
            </Async>
            <Async name="asyncD" includeLocation="true">
                <AppenderRef ref="D"/>
            </Async>
            <Async name="asyncS" includeLocation="true">
                <AppenderRef ref="S"/>
            </Async>
            <Async name="asyncAkkaBfw" includeLocation="true">
                <AppenderRef ref="AKKA_BFW"/>
            </Async>
            <Async name="asyncRCC" includeLocation="true">
                <AppenderRef ref="RCC"/>
            </Async>
  
        </Appenders>
  
        <Loggers>
            <Logger name="org.apache.zookeeper" level="INFO"/>
            <Logger name="org.perf4j.TimingLogger" level="ERROR"/>
            <Logger name="blockLifecycleLogger" level="INFO" additivity="false">
                <AppenderRef ref="asyncT"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.zkstore" level="INFO" additivity="false">
                <AppenderRef ref="asyncB"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.zkbtree" level="INFO" additivity="false">
                <AppenderRef ref="asyncB"/>
            </Logger>
            <Logger name="com.emc.storageos.objcontrol.object.shared.PerformanceCounter" level="DEBUG" additivity="false">
                <AppenderRef ref="asyncP"/>
            </Logger>
            <Logger name="com.emc.storageos.data.monitoring.MonitoringWorker" level="INFO">
                <AppenderRef ref="asyncM"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.ownership.impl" level="INFO" additivity="false">
                <AppenderRef ref="asyncO"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.impl.gc" level="DEBUG" additivity="false">
                <AppenderRef ref="asyncG"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.bplustree.gc" level="INFO" additivity="false">
                <AppenderRef ref="asyncG"/>
            </Logger>
            <Logger name="ssmBGLogger" level="INFO" additivity="false">
                <AppenderRef ref="asyncBG"/>
            </Logger>
            <Logger name="com.emc.storageos.services.util.AlertsLogger" level="WARN" additivity="false">
                <AppenderRef ref="alertsLogger"/>
            </Logger>
  
            <Logger name="org.apache.http" level="WARN" additivity="false">
                <AppenderRef ref="asyncR" level="WARN"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
  
            <Logger name="org.apache.http.impl.conn.PoolingHttpClientConnectionManager" level="DEBUG" additivity="false">
                <AppenderRef ref="asyncR"/>
            </Logger>
  
            <Logger name="com.emc.storageos.data.object.bplustree" level="INFO" additivity="false">
                <AppenderRef ref="asyncD"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
  
            <Logger name="com.emc.storageos.data.object.impl.file.directoryTable" level="INFO" additivity="false">
                <AppenderRef ref="asyncD"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
  
            <Logger name="com.emc.storageos.data.ssmanager.sstable.task.datamigration.MigrationBlockLifecycleLogger" level="DEBUG" additivity="false">
                <AppenderRef ref="asyncS"/>
            </Logger>
  
            <Logger name="akka.actor" level="warning" additivity="false">
                <AppenderRef ref="asyncAkkaBfw"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.akkaimpl" level="INFO"  additivity="false">
                <AppenderRef ref="asyncAkkaBfw"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
  
            <Logger name="com.emc.storageos.data.object.client.ReportBlockErrorTask.refreshChunkInfo" level="WARN" additivity="false">
                <AppenderRef ref="asyncRCC"/>
            </Logger>
  
            <Root level="info">
                <AppenderRef ref="asyncR"/>
                <AppenderRef ref="asyncE" level="error"/>
            </Root>
        </Loggers>
  
    </Configuration>
---
# Source: ecs-cluster/templates/svc-configs.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ecs-cluster-objectsvc-log4j2
  namespace: 
  labels:
    app.kubernetes.io/name: ecs-cluster
    app.kubernetes.io/version: 0.69.0
    app.kubernetes.io/instance: ecs-cluster
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: ecs-cluster-0.69.0
    product: objectscale
    release: ecs-cluster

data:
  objectsvc-log4j2.xml: |
    <?xml version="1.0" encoding="UTF-8"?>
    <Configuration monitorInterval="60" shutdownHook="disable">
        <CustomLevels>
            <CustomLevel name="DEBUG_TREE" intLevel="520"/>
            <CustomLevel name="DEBUG_SYNC" intLevel="540"/>
            <CustomLevel name="DEBUG_PAGE" intLevel="560"/>
            <CustomLevel name="DEBUG_ALL" intLevel="580"/>
        </CustomLevels>
        <Appenders>
            <RollingFile name="R" fileName="${sys:product.home}/logs/objectsvc.log"
                         filePattern="${sys:product.home}/logs/objectsvc.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t%X{apiRequestId}] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="P" fileName="${sys:product.home}/logs/objectsvc-perf-counter.log"
                         filePattern="${sys:product.home}/logs/objectsvc-perf-counter.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="E" fileName="${sys:product.home}/logs/objectsvc-error.log"
                         filePattern="${sys:product.home}/logs/objectsvc-error.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t%X{apiRequestId}] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="Z" fileName="${sys:product.home}/logs/objectsvc-logbasedmetering.log"
                         filePattern="${sys:product.home}/logs/objectsvc-logbasedmetering.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="M" fileName="${sys:product.home}/logs/objectsvc-stats.log"
                         filePattern="${sys:product.home}/logs/objectsvc-stats.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="O" fileName="${sys:product.home}/logs/objectsvc-ownership.log"
                         filePattern="${sys:product.home}/logs/objectsvc-ownership.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="G" fileName="${sys:product.home}/logs/objectsvc-chunk-reclaim.log"
                         filePattern="${sys:product.home}/logs/objectsvc-chunk-reclaim.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="T" fileName="${sys:product.home}/logs/objectsvc-monitor.log"
                         filePattern="${sys:product.home}/logs/objectsvc-monitor.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="L" fileName="${sys:product.home}/logs/objectsvc-chunk-lifecycle.log"
                         filePattern="${sys:product.home}/logs/objectsvc-chunk-lifecycle.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="D" fileName="${sys:product.home}/logs/objectsvc-btree-dump.log"
                         filePattern="${sys:product.home}/logs/objectsvc-btree-dump.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t%X{apiRequestId}] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="S" fileName="${sys:product.home}/logs/objectsvc-btree-ssd-cache.log"
                         filePattern="${sys:product.home}/logs/objectsvc-btree-ssd-cache.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t%X{apiRequestId}] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="AKKA_BFW" fileName="${sys:product.home}/logs/objectsvc-akkabfw.log"
                         filePattern="${sys:product.home}/logs/objectsvc-akkabfw.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t%X{apiRequestId}] %X{akkaSource} %5p %c{1} %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="RCC" fileName="${sys:product.home}/logs/objectsvc-refresh-chunk-cache.log"
                         filePattern="${sys:product.home}/logs/objectsvc-refresh-chunk-cache.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t%X{apiRequestId}] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <Syslog name="alertsLogger" host="localhost" port="514" protocol="UDP" facility="LOCAL7"/>
  
            <Async name="asyncR" includeLocation="true">
                <AppenderRef ref="R"/>
            </Async>
            <Async name="asyncE" includeLocation="true">
                <AppenderRef ref="E"/>
            </Async>
            <Async name="asyncP" includeLocation="true">
                <AppenderRef ref="P"/>
            </Async>
            <Async name="asyncM" includeLocation="true">
                <AppenderRef ref="M"/>
            </Async>
            <Async name="asyncO" includeLocation="true">
                <AppenderRef ref="O"/>
            </Async>
            <Async name="asyncG" includeLocation="true">
                <AppenderRef ref="G"/>
            </Async>
            <Async name="asyncT" includeLocation="true">
                <AppenderRef ref="T"/>
            </Async>
            <Async name="asyncL" includeLocation="true">
                <AppenderRef ref="L"/>
            </Async>
            <Async name="asyncD" includeLocation="true">
                <AppenderRef ref="D"/>
            </Async>
    <!--        <Async name="asyncC" includeLocation="true">
                <AppenderRef ref="C"/>
            </Async> -->
            <Async name="asyncS" includeLocation="true">
                <AppenderRef ref="S"/>
            </Async>
            <Async name="asyncAkkaBfw" includeLocation="true">
                <AppenderRef ref="AKKA_BFW"/>
            </Async>
            <Async name="asyncRCC" includeLocation="true">
                <AppenderRef ref="RCC"/>
            </Async>
        </Appenders>
  
        <Loggers>
            <Logger name="org.apache.zookeeper" level="INFO"/>
            <Logger name="org.perf4j.TimingLogger" level="ERROR"/>
            <Logger name="com.emc.storageos.data.object.bplustree.BPlusTreeSSDCache" level="INFO">
                <AppenderRef ref="asyncS"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.bplustree.BPlusTreeReadCache" level="INFO">
                <AppenderRef ref="asyncS"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.bplustree.BPlusTreeCache" level="INFO">
                <AppenderRef ref="asyncS"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.bplustree.rocksdb.ColumnFamilies" level="INFO">
                <AppenderRef ref="asyncS"/>
            </Logger>
  
            <Logger name="com.emc.storageos.services.util.AlertsLogger" level="WARN" additivity="false">
                <AppenderRef ref="alertsLogger"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
  
            <Logger name="com.emc.storageos.data.object.impl.TaskScheduler" level="INFO" additivity="false">
                <AppenderRef ref="asyncT"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.utils.ProcessMonitor" level="INFO" additivity="false">
                <AppenderRef ref="asyncT"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.communicator.nioimpl.NioCollectThreadStats" level="INFO" additivity="false">
                <AppenderRef ref="asyncT"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
  
            <Logger name="com.emc.storageos.objcontrol.object.shared.PerformanceCounter" level="DEBUG" additivity="false">
                <AppenderRef ref="asyncP"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
            <Logger name="com.emc.storageos.data.monitoring.MonitoringWorker" level="INFO">
                <AppenderRef ref="asyncM"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.impl.buffer" level="INFO">
                <AppenderRef ref="asyncM"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.ownership.impl" level="INFO" additivity="false">
                <AppenderRef ref="asyncO"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
            <Logger name="com.dell.flex.object.impl.gc" level="DEBUG" additivity="false">
                <AppenderRef ref="asyncG"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.impl.gc" level="DEBUG" additivity="false">
                <AppenderRef ref="asyncG"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.impl.gc.reference" level="INFO" additivity="false">
                <AppenderRef ref="asyncG"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.impl.gc.RepositoryReferenceTable" level="INFO" additivity="false">
                <AppenderRef ref="asyncG"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.LogBasedMetering" level="INFO" additivity="false">
                <AppenderRef ref="Z"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.bplustree.gc" level="INFO" additivity="false">
                <AppenderRef ref="asyncG"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.impl.gc.ChunkLifecycleLogger" level="INFO" additivity="false">
                <AppenderRef ref="asyncL"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
  
            <Logger name="org.apache.http" level="WARN" additivity="false">
                <AppenderRef ref="asyncR" level="WARN"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
  
            <Logger name="org.apache.http.impl.conn.PoolingHttpClientConnectionManager" level="DEBUG" additivity="false">
                <AppenderRef ref="asyncR"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
  
            <!-- BTree dump section -->
            <Logger name="com.emc.storageos.data.object.bplustree" level="INFO" additivity="false">
                <AppenderRef ref="asyncD"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
            <!-- End of BTree dump section -->
  
            <Logger name="akka.actor" level="warning" additivity="false">
                <AppenderRef ref="asyncAkkaBfw"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.akkaimpl" level="INFO"  additivity="false">
                <AppenderRef ref="asyncAkkaBfw"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
  
            <Logger name="com.emc.storageos.data.object.client.ReportBlockErrorTask.refreshChunkInfo" level="WARN" additivity="false">
                <AppenderRef ref="asyncRCC"/>
            </Logger>
  
            <Logger name="com.dell.flex.object.impl.gc.verification" level="DEBUG" additivity="false">
                <AppenderRef ref="asyncG"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
  
            <Root level="info">
                <AppenderRef ref="asyncR"/>
                <AppenderRef ref="asyncE" level="error"/>
            </Root>
        </Loggers>
  
    </Configuration>
---
# Source: ecs-cluster/templates/svc-configs.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ecs-cluster-rep-log4j2
  namespace: 
  labels:
    app.kubernetes.io/name: ecs-cluster
    app.kubernetes.io/version: 0.69.0
    app.kubernetes.io/instance: ecs-cluster
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: ecs-cluster-0.69.0
    product: objectscale
    release: ecs-cluster

data:
  repsvc-log4j2.xml: |
    <?xml version="1.0" encoding="UTF-8"?>
    <Configuration  monitorInterval="60" shutdownHook="disable">
        <Appenders>
            <RollingFile name="R" fileName="${sys:product.home}/logs/repsvc.log"
                         filePattern="${sys:product.home}/logs/repsvc.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="P" fileName="${sys:product.home}/logs/repsvc-perf-counter.log"
                         filePattern="${sys:product.home}/logs/repsvc-perf-counter.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="E" fileName="${sys:product.home}/logs/repsvc-error.log"
                         filePattern="${sys:product.home}/logs/repsvc-error.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="M" fileName="${sys:product.home}/logs/repsvc-stats.log"
                         filePattern="${sys:product.home}/logs/repsvc-stats.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <Syslog name="alertsLogger" host="localhost" port="514" protocol="UDP" facility="LOCAL7"/>
  
            <Async name="asyncR" includeLocation="true">
                <AppenderRef ref="R"/>
            </Async>
            <Async name="asyncE" includeLocation="true">
                <AppenderRef ref="E"/>
            </Async>
            <Async name="asyncP" includeLocation="true">
                <AppenderRef ref="P"/>
            </Async>
            <Async name="asyncM" includeLocation="true">
                <AppenderRef ref="M"/>
            </Async>
        </Appenders>
  
        <Loggers>
            <Logger name="org.perf4j.TimingLogger" level="ERROR"/>
  
            <Logger name="com.emc.storageos.services.util.AlertsLogger" level="WARN" additivity="false">
                <AppenderRef ref="alertsLogger"/>
            </Logger>
            <Logger name="com.emc.storageos.objcontrol.object.shared.PerformanceCounter" level="DEBUG" additivity="false">
                <AppenderRef ref="asyncP"/>
            </Logger>
            <Logger name="com.emc.storageos.data.monitoring.MonitoringWorker" level="INFO">
                <AppenderRef ref="asyncM"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.impl.buffer" level="INFO">
                <AppenderRef ref="asyncM"/>
            </Logger>
  
            <Root level="INFO">
                <AppenderRef ref="asyncR"/>
                <AppenderRef ref="asyncE" level="error"/>
            </Root>
        </Loggers>
    </Configuration>
---
# Source: ecs-cluster/templates/svc-configs.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ecs-cluster-storageserver-log4j2
  namespace: 
  labels:
    app.kubernetes.io/name: ecs-cluster
    app.kubernetes.io/version: 0.69.0
    app.kubernetes.io/instance: ecs-cluster
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: ecs-cluster-0.69.0
    product: objectscale
    release: ecs-cluster

data:
  storageserver.conf: |
    maxMemThresholdKb=0
    logRotationSize=52428800
    maxLogSize=104857600
    partitionroot=/data/storageserver
    verifyPartUuid=false
    useFabric=false
---
# Source: ecs-cluster/templates/svc-configs.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ecs-cluster-ons-log4j2
  namespace: 
  labels:
    app.kubernetes.io/name: ecs-cluster
    app.kubernetes.io/version: 0.69.0
    app.kubernetes.io/instance: ecs-cluster
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: ecs-cluster-0.69.0
    product: objectscale
    release: ecs-cluster

data:
  ons-log4j2.xml: |
    <?xml version="1.0" encoding="UTF-8"?>
    <!--
     * Copyright (c) 2020 Dell EMC
     * All Rights Reserved
     *
     * This software contains the intellectual property of Dell EMC
     * or is licensed to Dell EMC from third parties.  Use of this
     * software and the intellectual property contained therein is expressly
     * limited to the terms and conditions of the License Agreement under which
     * it is provided by or on behalf of Dell EMC.
     -->
    <Configuration monitorInterval="60" shutdownHook="disable">
        <Appenders>
            <RollingFile name="R" fileName="${sys:product.home}/logs/ons.log"
                         filePattern="${sys:product.home}/logs/ons.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t%X{apiRequestId}] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="P" fileName="${sys:product.home}/logs/ons-perf-counter.log"
                         filePattern="${sys:product.home}/logs/ons-perf-counter.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="E" fileName="${sys:product.home}/logs/ons-error.log"
                         filePattern="${sys:product.home}/logs/ons-error.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t%X{apiRequestId}] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="M" fileName="${sys:product.home}/logs/ons-stats.log"
                         filePattern="${sys:product.home}/logs/ons-stats.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="O" fileName="${sys:product.home}/logs/ons-ownership.log"
                         filePattern="${sys:product.home}/logs/ons-ownership.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="T" fileName="${sys:product.home}/logs/ons-monitor.log"
                         filePattern="${sys:product.home}/logs/ons-monitor.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="ST" fileName="${sys:product.home}/logs/ons-stream.log"
                         filePattern="${sys:product.home}/logs/ons-stream.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
            </RollingFile>
  
            <Syslog name="alertsLogger" host="localhost" port="514" protocol="UDP" facility="LOCAL7"/>
  
            <Async name="asyncR" includeLocation="true">
                <AppenderRef ref="R"/>
            </Async>
            <Async name="asyncP" includeLocation="true">
                <AppenderRef ref="P"/>
            </Async>
            <Async name="asyncE" includeLocation="true">
                <AppenderRef ref="E"/>
            </Async>
            <Async name="asyncM" includeLocation="true">
                <AppenderRef ref="M"/>
            </Async>
            <Async name="asyncO" includeLocation="true">
                <AppenderRef ref="O"/>
            </Async>
            <Async name="asyncT" includeLocation="true">
                <AppenderRef ref="T"/>
            </Async>
            <Async name="asyncST" includeLocation="true">
                <AppenderRef ref="ST"/>
            </Async>
        </Appenders>
  
        <Loggers>
            <Logger name="org.apache.zookeeper" level="INFO"/>
            <Logger name="org.perf4j.TimingLogger" level="ERROR"/>
  
            <Logger name="com.emc.storageos.services.util.AlertsLogger" level="WARN" additivity="false">
                <AppenderRef ref="alertsLogger"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
  
            <Logger name="com.emc.storageos.data.object.impl.TaskScheduler" level="INFO" additivity="false">
                <AppenderRef ref="asyncT"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.utils.ProcessMonitor" level="INFO" additivity="false">
                <AppenderRef ref="asyncT"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
  
            <Logger name="com.emc.storageos.objcontrol.object.shared.PerformanceCounter" level="DEBUG" additivity="false">
                <AppenderRef ref="asyncP"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
            <Logger name="com.emc.storageos.data.monitoring.MonitoringWorker" level="INFO">
                <AppenderRef ref="asyncM"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.impl.buffer" level="INFO">
                <AppenderRef ref="asyncM"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.ownership.impl" level="INFO" additivity="false">
                <AppenderRef ref="asyncO"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Logger>
  
            <Logger name="com.emc.storageos.data.stream" level="INFO" additivity="false">
                <AppenderRef ref="asyncR" level="WARN"/>
                <AppenderRef ref="asyncST"/>
            </Logger>
  
            <Logger name="io.pravega.client" level="INFO" additivity="false">
                <AppenderRef ref="asyncR" level="WARN"/>
                <AppenderRef ref="asyncST"/>
            </Logger>
  
            <Logger name="com.dell.objectscale.objmt" level="DEBUG" additivity="false">
                <AppenderRef ref="asyncR"/>
            </Logger>
  
            <Logger name="com.dell.objectscale.replication" level="DEBUG" additivity="false">
                <AppenderRef ref="asyncR"/>
            </Logger>
  
            <Logger name="com.dell.objectscale.nds" level="DEBUG" additivity="false">
                <AppenderRef ref="asyncR"/>
            </Logger>
  
            <Logger name="com.emc.ecs.ons.publisher.PravegaEventPublisher" level="DEBUG" additivity="false">
                <AppenderRef ref="asyncR"/>
            </Logger>
  
            <Root level="INFO">
                <AppenderRef ref="asyncR"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Root>
        </Loggers>
  
    </Configuration>
---
# Source: ecs-cluster/templates/svc-configs.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ecs-cluster-nds-log4j2
  namespace: 
  labels:
    app.kubernetes.io/name: ecs-cluster
    app.kubernetes.io/version: 0.69.0
    app.kubernetes.io/instance: ecs-cluster
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: ecs-cluster-0.69.0
    product: objectscale
    release: ecs-cluster

data:
  nds-log4j2.xml: |
    <?xml version="1.0" encoding="UTF-8"?>
    <Configuration  monitorInterval="60" shutdownHook="disable">
        <Appenders>
            <RollingFile name="R" fileName="${sys:product.home}/logs/nds.log"
                         filePattern="${sys:product.home}/logs/nds.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="P" fileName="${sys:product.home}/logs/nds-perf-counter.log"
                         filePattern="${sys:product.home}/logs/nds-perf-counter.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="E" fileName="${sys:product.home}/logs/nds-error.log"
                         filePattern="${sys:product.home}/logs/nds-error.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="M" fileName="${sys:product.home}/logs/nds-stats.log"
                         filePattern="${sys:product.home}/logs/nds-stats.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <RollingFile name="ST" fileName="${sys:product.home}/logs/nds-stream.log"
                         filePattern="${sys:product.home}/logs/nds-stream.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
                <DefaultRolloverStrategy max="1"/>
            </RollingFile>
  
            <Syslog name="alertsLogger" host="localhost" port="514" protocol="UDP" facility="LOCAL7"/>
  
            <Async name="asyncR" includeLocation="true">
                <AppenderRef ref="R"/>
            </Async>
            <Async name="asyncP" includeLocation="true">
                <AppenderRef ref="P"/>
            </Async>
            <Async name="asyncE" includeLocation="true">
                <AppenderRef ref="E"/>
            </Async>
            <Async name="asyncM" includeLocation="true">
                <AppenderRef ref="M"/>
            </Async>
            <Async name="asyncST" includeLocation="true">
                <AppenderRef ref="ST"/>
            </Async>
        </Appenders>
  
        <Loggers>
            <Logger name="org.apache.zookeeper" level="INFO"/>
            <Logger name="org.perf4j.TimingLogger" level="ERROR"/>
            <Logger name="com.emc.storageos.data.object.utils.RequestTrace" level="INFO"/>
            <Logger name="org.eclipse.jetty.server.RequestLog" level="INFO"/>
  
            <Logger name="com.emc.storageos.services.util.AlertsLogger" level="WARN" additivity="false">
                <AppenderRef ref="alertsLogger"/>
            </Logger>
            <Logger name="com.emc.storageos.objcontrol.object.shared.PerformanceCounter" level="DEBUG" additivity="false">
                <AppenderRef ref="asyncP"/>
            </Logger>
            <Logger name="com.emc.storageos.data.monitoring.MonitoringWorker" level="INFO">
                <AppenderRef ref="asyncM"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.impl.buffer" level="INFO">
                <AppenderRef ref="asyncM"/>
            </Logger>
  
            <Logger name="com.emc.storageos.data.stream" level="INFO" additivity="false">
                <AppenderRef ref="asyncR" level="WARN"/>
                <AppenderRef ref="asyncST"/>
            </Logger>
            <Logger name="io.pravega.client" level="INFO" additivity="false">
                <AppenderRef ref="asyncR" level="WARN"/>
                <AppenderRef ref="asyncST"/>
            </Logger>
  
            <Logger name="com.dell.objectscale.nds.deliverer" level="DEBUG"/>
            <Logger name="com.dell.objectscale.nds.gatherer" level="DEBUG"/>
  
            <Root level="INFO">
                <AppenderRef ref="asyncR"/>
                <AppenderRef ref="asyncE" level="ERROR"/>
            </Root>
        </Loggers>
  
    </Configuration>
---
# Source: ecs-cluster/templates/svc-configs.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ecs-cluster-objectsvc-conf
  namespace: 
  labels:
    app.kubernetes.io/name: ecs-cluster
    app.kubernetes.io/version: 0.69.0
    app.kubernetes.io/instance: ecs-cluster
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: ecs-cluster-0.69.0
    product: objectscale
    release: ecs-cluster

data:
  {}
---
# Source: ecs-cluster/templates/svc-configs.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ecs-cluster-rep-conf
  namespace: 
  labels:
    app.kubernetes.io/name: ecs-cluster
    app.kubernetes.io/version: 0.69.0
    app.kubernetes.io/instance: ecs-cluster
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: ecs-cluster-0.69.0
    product: objectscale
    release: ecs-cluster

data:
  {}
---
# Source: ecs-cluster/templates/svc-configs.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ecs-cluster-resource-conf
  namespace: 
  labels:
    app.kubernetes.io/name: ecs-cluster
    app.kubernetes.io/version: 0.69.0
    app.kubernetes.io/instance: ecs-cluster
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: ecs-cluster-0.69.0
    product: objectscale
    release: ecs-cluster

data:
  {}
---
# Source: ecs-cluster/charts/ecs-monitoring/charts/fluxd/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: ecs-cluster-fluxd
  namespace: default
rules:
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create"]
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["create", "get", "update", "patch", "delete"]
---
# Source: ecs-cluster/charts/ecs-monitoring/charts/telegraf-prom/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: ecs-cluster-telegraf-prom
  namespace: default
rules:
  - apiGroups:
    - ""
    resources:
    - pods
    verbs:
    - get
    - list
    - watch
---
# Source: ecs-cluster/charts/ecs-monitoring/charts/throttler/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: ecs-cluster-throttler
  namespace: default
rules:
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "update"]
---
# Source: ecs-cluster/templates/healthcheck-rbac.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: ecs-cluster-healthchecks
  namespace: default
  labels:
    release: ecs-cluster
rules:
  - apiGroups:
      - ecs.dellemc.com
    resources:
      - '*'
    verbs:
      - get
      - list
  - apiGroups:
      - app.k8s.io
    resources:
      - "*"
    verbs:
      - get
      - list
  - apiGroups:
      - ""
    resources:
      - pods
      - secrets
      - services
      - endpoints
      - events
      - configmaps
      - applications
      - deployments
    verbs:
      - get
      - list
  - apiGroups:
      - apps
    resources:
      - deployments
      - daemonsets
      - replicasets
      - statefulsets
    verbs:
      - get
      - list
---
# Source: ecs-cluster/templates/objectstore-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: ecs-cluster
  namespace: default
  labels:
    app.kubernetes.io/name: ecs-cluster
    app.kubernetes.io/instance: ecs-cluster
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.69.0
    helm.sh/chart: ecs-cluster-0.69.0
    release: ecs-cluster
    operator: objectscale-operator
    product: objectscale
rules:
  - apiGroups:
      - ""
    resources:
      - pods
      - persistentvolumeclaims
    verbs:
      - get
      - list
---
# Source: ecs-cluster/charts/ecs-monitoring/charts/fluxd/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: ecs-cluster-fluxd
subjects:
  - kind: ServiceAccount
    name: ecs-cluster-fluxd
    namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ecs-cluster-fluxd
---
# Source: ecs-cluster/charts/ecs-monitoring/charts/telegraf-prom/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: ecs-cluster-telegraf-prom
subjects:
  - kind: ServiceAccount
    name: ecs-cluster-telegraf-prom
    namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ecs-cluster-telegraf-prom
---
# Source: ecs-cluster/charts/ecs-monitoring/charts/throttler/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: ecs-cluster-throttler
subjects:
  - kind: ServiceAccount
    name: ecs-cluster-throttler
    namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ecs-cluster-throttler
---
# Source: ecs-cluster/templates/healthcheck-rbac.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: ecs-cluster-healthchecks
  namespace: default
  labels:
    release: ecs-cluster
subjects:
  - kind: ServiceAccount
    name: ecs-cluster-healthchecks
    namespace: default
roleRef:
  kind: Role
  name: ecs-cluster-healthchecks
  apiGroup: rbac.authorization.k8s.io
---
# Source: ecs-cluster/templates/objectstore-rbac.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: ecs-cluster
  namespace: default
  labels:
    app.kubernetes.io/name: ecs-cluster
    app.kubernetes.io/instance: ecs-cluster
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.69.0
    helm.sh/chart: ecs-cluster-0.69.0
    release: ecs-cluster
    operator: objectscale-operator
    product: objectscale
subjects:
  - kind: ServiceAccount
    name: ecs-cluster
    namespace: default
roleRef:
  kind: Role
  name: ecs-cluster
  apiGroup: rbac.authorization.k8s.io
---
# Source: ecs-cluster/charts/ecs-monitoring/charts/fluxd/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "ecs-cluster-fluxd"
  labels:
    app.kubernetes.io/name: "ecs-cluster-fluxd"
    chart: "fluxd-0.54.0"
    release: "ecs-cluster"
    heritage: "Helm"
spec:
  type: ClusterIP
  ports:
  - name: api
    port: 8093
    targetPort: 8093
  selector:
    app.kubernetes.io/name: ecs-cluster-fluxd
---
# Source: ecs-cluster/charts/ecs-monitoring/charts/grafana/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "ecs-cluster-grafana"
  labels:
    app.kubernetes.io/name: "ecs-cluster-grafana"
    chart: "grafana-0.54.0"
    release: "ecs-cluster"
    heritage: "Helm"
spec:
  type: ClusterIP
  ports:
  - name: api
    port: 3000
    targetPort: 3000
  selector:
    app.kubernetes.io/name: ecs-cluster-grafana
---
# Source: ecs-cluster/charts/ecs-monitoring/charts/influxdb/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "ecs-cluster-influxdb"
  labels:
    app.kubernetes.io/name: "ecs-cluster-influxdb"
    chart: "influxdb-0.54.0"
    release: "ecs-cluster"
    heritage: "Helm"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - name: api
    port: 8086
    targetPort: 8086
  - name: rpc
    port: 8088
    targetPort: 8088
  selector:
    app.kubernetes.io/name: ecs-cluster-influxdb
---
# Source: ecs-cluster/charts/ecs-monitoring/charts/telegraf-prom/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "ecs-cluster-telegraf-prom"
  labels:
    app.kubernetes.io/name: "ecs-cluster-telegraf-prom"
    chart: "telegraf-prom-0.54.0"
    release: "ecs-cluster"
    heritage: "Helm"
spec:
  type: ClusterIP
  ports:
  - name: api
    port: 11002
    targetPort: 11002
  selector:
    app.kubernetes.io/name: ecs-cluster-telegraf-prom
---
# Source: ecs-cluster/charts/ecs-monitoring/charts/telegraf/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "ecs-cluster-telegraf"
  labels:
    app.kubernetes.io/name: "ecs-cluster-telegraf"
    chart: "telegraf-0.54.0"
    release: "ecs-cluster"
    heritage: "Helm"
spec:
  type: ClusterIP
  ports:
  - name: api
    port: 11002
    targetPort: 11002
  selector:
    app.kubernetes.io/name: ecs-cluster-telegraf
---
# Source: ecs-cluster/charts/ecs-monitoring/charts/throttler/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "ecs-cluster-throttler"
  labels:
    app.kubernetes.io/name: "ecs-cluster-throttler"
    chart: "throttler-0.54.0"
    release: "ecs-cluster"
    heritage: "Helm"
spec:
  type: ClusterIP
  ports:
  - name: api
    port: 8094
    targetPort: 8094
  selector:
    app.kubernetes.io/name: ecs-cluster-throttler
---
# Source: ecs-cluster/charts/ecs-monitoring/charts/fluxd/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ecs-cluster-fluxd
  labels:
    app.kubernetes.io/name: ecs-cluster-fluxd
    app.kubernetes.io/instance: ecs-cluster
    helm.sh/chart: fluxd-0.54.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: ecs-cluster-fluxd
      app.kubernetes.io/instance: ecs-cluster
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ecs-cluster-fluxd
        app.kubernetes.io/instance: ecs-cluster
        release: ecs-cluster
        
        objectscale.dellemc.com/logging-inject: "true"
        objectscale.dellemc.com/logging-release-name: "ecs-cluster"
        app.kubernetes.io/namespace: "default"
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/scheme: HTTP
        prometheus.io/port: "8093"
    spec:
      shareProcessNamespace: true
      serviceAccountName: ecs-cluster-fluxd
      initContainers:
      - name: confd-init
        image: "emccorp/confd-sidecar:3.7.0.0-1146.a692701d"
        imagePullPolicy: "IfNotPresent"
        command: ["bash"]
        args: ["-c", "echo /crash-dump/core-%e > /proc/sys/kernel/core_pattern; ulimit -c unlimited; GOTRACEBACK=crash /confd -onetime -sync-only -backend file -file /etc/fluxd-ext/influxdb-replicas/replicas.json -confdir /etc/confd_flex"]
        volumeMounts:
        - mountPath: /etc/fluxd-ext/influxdb-replicas
          name: influxdb-replicas-config
        - mountPath: /etc/confd_flex/templates
          name: configs-template
        - mountPath: /etc/confd_flex/conf.d
          name: configs-confd-template
        - mountPath: /etc/fluxd
          name: config
        - mountPath: /crash-dump
          name: crash-dump
        env:
        - name: NODE_ID
          valueFrom:
            fieldRef:
              # use pod name as node id
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: INFLUXDB_REPLICAS_PER_PARTITION
          value: "3"
        - name: RELEASE_NAME
          value: "ecs-cluster"
        - name: RELEASE_NAMESPACE
          value: "default"
        - name: TLS_ENABLED
          value: "false"
        - name: GRAPHQL_ENDPOINT
          value: "http://objectscale-graphql.default.svc.cluster.local:8080/graphql"
      containers:
      - name: fluxd
        image: "emccorp/fluxd:3.7.0.0-1146.a692701d"
        imagePullPolicy: "IfNotPresent"
        command: ["bash"]
        args: ["-c", "echo /crash-dump/core-%e > /proc/sys/kernel/core_pattern; ulimit -c unlimited; GOTRACEBACK=crash source /etc/fluxd/fluxd.env && fluxd --disable-lb --disable-cache --cf-disabled --disable-zk --node-id $NODE_ID --storage-hosts $STORAGE_HOSTS --store-namespace default --port 8093 --logger-config /non_existing"]
        resources:
          requests:
            memory: 350Mi
            ephemeral-storage: 950Mi
          limits:
            memory: 350Mi
            ephemeral-storage: 950Mi
        ports:
        - name: api
          containerPort: 8093
        env:
        - name: NODE_ID
          valueFrom:
            fieldRef:
              # use pod name as node id
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: INFLUXDB_REPLICAS_PER_PARTITION
          value: "3"
        - name: RELEASE_NAME
          value: "ecs-cluster"
        - name: RELEASE_NAMESPACE
          value: "default"
        - name: TLS_ENABLED
          value: "false"
        - name: GRAPHQL_ENDPOINT
          value: "http://objectscale-graphql.default.svc.cluster.local:8080/graphql"
        volumeMounts:
        - mountPath: /etc/fluxd/logger.json
          name: fluxd-logger-config
          subPath: logger.json
        - mountPath: /etc/fluxd
          name: config
        - mountPath: /crash-dump
          name: crash-dump
        - name: log
          mountPath: /var/log
        livenessProbe:
          httpGet:
            path: /metrics
            port: api
            scheme: HTTP
          initialDelaySeconds: 30
          timeoutSeconds: 30
          periodSeconds: 60
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /metrics
            port: api
            scheme: HTTP
          initialDelaySeconds: 5
          timeoutSeconds: 30
          periodSeconds: 60
          failureThreshold: 3
      - name: confd
        image: "emccorp/confd-sidecar:3.7.0.0-1146.a692701d"
        imagePullPolicy: "IfNotPresent"
        command: [ "bash" ]
        args: [ "-c", "echo /crash-dump/core-%e > /proc/sys/kernel/core_pattern; ulimit -c unlimited; GOTRACEBACK=crash /confd -backend file -file /etc/fluxd-ext/influxdb-replicas/replicas.json -confdir /etc/confd_flex -interval 300"]
        volumeMounts:
        - mountPath: /etc/fluxd-ext/influxdb-replicas
          name: influxdb-replicas-config
        - mountPath: /etc/confd_flex/templates
          name: configs-template
        - mountPath: /etc/confd_flex/conf.d
          name: configs-confd-template
        - mountPath: /etc/fluxd
          name: config
        - mountPath: /crash-dump
          name: crash-dump
        env:
        - name: NODE_ID
          valueFrom:
            fieldRef:
              # use pod name as node id
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: INFLUXDB_REPLICAS_PER_PARTITION
          value: "3"
        - name: RELEASE_NAME
          value: "ecs-cluster"
        - name: RELEASE_NAMESPACE
          value: "default"
        - name: TLS_ENABLED
          value: "false"
        - name: GRAPHQL_ENDPOINT
          value: "http://objectscale-graphql.default.svc.cluster.local:8080/graphql"
      volumes:
      - name: configs-template
        configMap:
          name: ecs-cluster-fluxd-configs-templates
      - name: configs-confd-template
        configMap:
          name: ecs-cluster-fluxd-confd-template
      - name: fluxd-logger-config
        configMap:
          name: ecs-cluster-fluxd-logger-config
      - name: config
        emptyDir: {}
      - name: crash-dump
        emptyDir: {}
      - name: log
        emptyDir: {}
      - name: influxdb-replicas-config
        configMap:
          name: ecs-cluster-influxdb-replicas
---
# Source: ecs-cluster/charts/ecs-monitoring/charts/grafana/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ecs-cluster-grafana
  labels:
    app.kubernetes.io/name: ecs-cluster-grafana
    helm.sh/chart: grafana-0.54.0
    app.kubernetes.io/instance: ecs-cluster
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: ecs-cluster-grafana
      app.kubernetes.io/instance: ecs-cluster
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ecs-cluster-grafana
        app.kubernetes.io/instance: ecs-cluster
        release: ecs-cluster
        
        objectscale.dellemc.com/logging-inject: "true"
        objectscale.dellemc.com/logging-release-name: "ecs-cluster"
        app.kubernetes.io/namespace: "default"
        
        objectscale.dellemc.com/logging-inject-logrotate: "true"
      annotations:
        
        objectscale.dellemc.com/logging-release-name: "ecs-cluster"
    spec:
      shareProcessNamespace: true
      initContainers:
      - name: confd-init
        image: "emccorp/confd-sidecar:3.7.0.0-1146.a692701d"
        imagePullPolicy: "IfNotPresent"
        command: ["bash"]
        args: ["-c", "echo /crash-dump/core-%e > /proc/sys/kernel/core_pattern; ulimit -c unlimited; GOTRACEBACK=crash /confd -onetime -sync-only -backend file -file /etc/fluxd-ext/influxdb-replicas/replicas.json -confdir /etc/confd_flex"]
        volumeMounts:
        - mountPath: /etc/fluxd-ext/influxdb-replicas
          name: influxdb-replicas-config
        - mountPath: /etc/confd_flex/templates
          name: configs-template
        - mountPath: /etc/confd_flex/conf.d
          name: configs-confd-template
        - mountPath: /etc/fluxd
          name: config
        - mountPath: /crash-dump
          name: crash-dump
        env:
        - name: NODE_ID
          valueFrom:
            fieldRef:
              # use pod name as node id
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: INFLUXDB_REPLICAS_PER_PARTITION
          value: "3"
        - name: RELEASE_NAME
          value: "ecs-cluster"
        - name: RELEASE_NAMESPACE
          value: "default"
        - name: TLS_ENABLED
          value: "false"
        - name: GRAPHQL_ENDPOINT
          value: "http://objectscale-graphql.default.svc.cluster.local:8080/graphql"
      containers:
      - name: grafana
        image: "emccorp/grafana:3.7.0.0-1146.a692701d"
        imagePullPolicy: "IfNotPresent"
        command: ["bash"]
        args: ["-c", "echo /crash-dump/core-%e > /proc/sys/kernel/core_pattern; ulimit -c unlimited; GOTRACEBACK=crash /entrypoint.sh"]
        resources:
          requests:
            memory: 300Mi
            ephemeral-storage: 850Mi
          limits:
            memory: 300Mi
            ephemeral-storage: 850Mi
        ports:
        - name: api
          containerPort: 3000
        env:
        - name: K8S_FLUXD
          value: "127.0.0.1"
        volumeMounts:
        - mountPath: /dashboards_flex/internal
          name: dashboards-internal
        - mountPath: /dashboards_flex/internal_oe
          name: dashboards-internal-oe
        - mountPath: /etc/grafana/profile.conf
          name: provision-profile
          subPath: profile.conf
        - mountPath: /etc/grafana/grafana_flex.ini
          name: config-grafana-ini
          subPath: grafana.ini
        - name: log
          mountPath: /var/log
        - mountPath: /crash-dump
          name: crash-dump
        # nginx logs to stdout, no need to mount log
        livenessProbe:
          httpGet:
            path: /api/health
            port: api
            scheme: HTTP
          initialDelaySeconds: 30
          timeoutSeconds: 30
          periodSeconds: 60
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/health
            port: api
            scheme: HTTP
          initialDelaySeconds: 5
          timeoutSeconds: 30
          periodSeconds: 60
          failureThreshold: 3
      - name: fluxd
        image: "emccorp/fluxd:3.7.0.0-1146.a692701d"
        imagePullPolicy: "IfNotPresent"
        command: ["bash"]
        args: ["-c", "echo /crash-dump/core-%e > /proc/sys/kernel/core_pattern; ulimit -c unlimited; GOTRACEBACK=crash source /etc/fluxd/fluxd.env && fluxd --disable-lb --cf-disabled --disable-zk --node-id $NODE_ID --storage-hosts $STORAGE_HOSTS --store-namespace default --port 8093 --logger-config /non_existing"]
        resources:
        ports:
        - name: api
          containerPort: 8093
        env:
        - name: NODE_ID
          valueFrom:
            fieldRef:
              # use pod name as node id
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: INFLUXDB_REPLICAS_PER_PARTITION
          value: "3"
        - name: RELEASE_NAME
          value: "ecs-cluster"
        - name: RELEASE_NAMESPACE
          value: "default"
        - name: TLS_ENABLED
          value: "false"
        - name: GRAPHQL_ENDPOINT
          value: "http://objectscale-graphql.default.svc.cluster.local:8080/graphql"
        volumeMounts:
        - mountPath: /etc/fluxd/logger.json
          name: fluxd-logger-config
          subPath: logger.json
        - mountPath: /etc/fluxd
          name: config
        - mountPath: /crash-dump
          name: crash-dump
        - name: log
          mountPath: /var/log
      
      - name: confd
        image: "emccorp/confd-sidecar:3.7.0.0-1146.a692701d"
        imagePullPolicy: "IfNotPresent"
        command: [ "bash" ]
        args: [ "-c", "echo /crash-dump/core-%e > /proc/sys/kernel/core_pattern; ulimit -c unlimited; GOTRACEBACK=crash /confd -backend file -file /etc/fluxd-ext/influxdb-replicas/replicas.json -confdir /etc/confd_flex -interval 300"]
        volumeMounts:
        - mountPath: /etc/fluxd-ext/influxdb-replicas
          name: influxdb-replicas-config
        - mountPath: /etc/confd_flex/templates
          name: configs-template
        - mountPath: /etc/confd_flex/conf.d
          name: configs-confd-template
        - mountPath: /etc/fluxd
          name: config
        - mountPath: /crash-dump
          name: crash-dump
        env:
        - name: NODE_ID
          valueFrom:
            fieldRef:
              # use pod name as node id
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: INFLUXDB_REPLICAS_PER_PARTITION
          value: "3"
        - name: RELEASE_NAME
          value: "ecs-cluster"
        - name: RELEASE_NAMESPACE
          value: "default"
        - name: TLS_ENABLED
          value: "false"
        - name: GRAPHQL_ENDPOINT
          value: "http://objectscale-graphql.default.svc.cluster.local:8080/graphql"
      volumes:
      - name: dashboards-internal
        configMap:
          name: ecs-cluster-grafana-dashboards-internal
      - name: dashboards-internal-oe
        configMap:
          name: ecs-cluster-grafana-dashboards-internal-oe
      - name: provision-profile
        configMap:
          name: ecs-cluster-grafana-profile
      - name: config-grafana-ini
        configMap:
          name: ecs-cluster-grafana-grafana-ini
      
      - name: configs-template
        configMap:
          name: ecs-cluster-fluxd-configs-templates
      - name: configs-confd-template
        configMap:
          name: ecs-cluster-fluxd-confd-template
      - name: fluxd-logger-config
        configMap:
          name: ecs-cluster-fluxd-logger-config
      - name: config
        emptyDir: {}
      - name: crash-dump
        emptyDir: {}
      - name: log
        emptyDir: {}
      - name: influxdb-replicas-config
        configMap:
          name: ecs-cluster-influxdb-replicas
---
# Source: ecs-cluster/charts/ecs-monitoring/charts/telegraf-prom/templates/deployment.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ecs-cluster-telegraf-prom
  labels:
    app.kubernetes.io/name: ecs-cluster-telegraf-prom
    helm.sh/chart: telegraf-prom-0.54.0
    app.kubernetes.io/instance: ecs-cluster
spec:
  replicas:  1
  selector:
    matchLabels:
      app.kubernetes.io/name: ecs-cluster-telegraf-prom
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ecs-cluster-telegraf-prom
        release: ecs-cluster
        
        objectscale.dellemc.com/logging-inject: "true"
        objectscale.dellemc.com/logging-release-name: "ecs-cluster"
        app.kubernetes.io/namespace: "default"
      annotations:
        # Include a hash of the configmap in the pod template
        # This means that if the configmap changes, the deployment will be rolled
        checksum/config: 5ce49ddced3aff00dd1b22e26e3b683f42fb8ea7dc1965fa3c7058b9d192194b
    spec:
      shareProcessNamespace: true
      serviceAccountName: ecs-cluster-telegraf-prom
      initContainers:
      - name: confd-init
        image: "emccorp/confd-sidecar:3.7.0.0-1146.a692701d"
        imagePullPolicy: "IfNotPresent"
        command: ["bash"]
        args: ["-c", "echo /crash-dump/core-%e > /proc/sys/kernel/core_pattern; ulimit -c unlimited; GOTRACEBACK=crash /confd -onetime -sync-only -backend file -file /etc/telegraf-ext/influxdb-replicas/replicas.json -confdir /etc/confd_flex"]
        volumeMounts:
        - mountPath: /etc/telegraf-ext/influxdb-replicas
          name: influxdb-replicas-config
        - mountPath: /etc/confd_flex/templates
          name: configs-template
        - mountPath: /etc/confd_flex/conf.d
          name: configs-confd-template
        - mountPath: /etc/telegraf
          name: config
        - mountPath: /crash-dump
          name: crash-dump
        env:
        - name: INFLUXDB_REPLICAS_PER_PARTITION
          value: "3"
        - name: RELEASE_NAME
          value: "ecs-cluster"
        - name: RELEASE_NAMESPACE
          value: "default"
        - name: SCHEME
          value: "http"
      containers:
      - name: telegraf
        image: "emccorp/telegraf:3.7.0.0-1146.a692701d"
        imagePullPolicy: "IfNotPresent"
        command: ["bash"]
        args: ["-c", "echo /crash-dump/core-%e > /proc/sys/kernel/core_pattern; ulimit -c unlimited; GOTRACEBACK=crash telegraf --config /etc/telegraf/telegraf.conf --config-directory /etc/telegraf-prom/telegraf.d/"]
        resources:
          requests:
            memory: 200Mi
            ephemeral-storage: 650Mi
          limits:
            memory: 200Mi
            ephemeral-storage: 650Mi
        env:
        - name: COLLECTION_INTERVAL
          value: 300s
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        volumeMounts:
        - mountPath: /etc/telegraf
          name: config
        - name: additional-configs
          mountPath: /etc/telegraf/telegraf.d
        - mountPath: /crash-dump
          name: crash-dump
      - name: confd
        image: "emccorp/confd-sidecar:3.7.0.0-1146.a692701d"
        imagePullPolicy: "IfNotPresent"
        command: [ "bash" ]
        args: [ "-c", "echo /crash-dump/core-%e > /proc/sys/kernel/core_pattern; ulimit -c unlimited; GOTRACEBACK=crash /confd -backend file -file /etc/telegraf-ext/influxdb-replicas/replicas.json -confdir /etc/confd_flex -interval 300"]
        volumeMounts:
        - mountPath: /etc/telegraf-ext/influxdb-replicas
          name: influxdb-replicas-config
        - mountPath: /etc/confd_flex/templates
          name: configs-template
        - mountPath: /etc/confd_flex/conf.d
          name: configs-confd-template
        - mountPath: /etc/telegraf
          name: config
        - mountPath: /crash-dump
          name: crash-dump
        env:
        - name: INFLUXDB_REPLICAS_PER_PARTITION
          value: "3"
        - name: RELEASE_NAME
          value: "ecs-cluster"
        - name: RELEASE_NAMESPACE
          value: "default"
        - name: SCHEME
          value: "http"
      
      volumes:
      - name: config
        emptyDir: {}
      - name: configs-template
        configMap:
          name: ecs-cluster-telegraf-prom-config-template
      - name: configs-confd-template
        configMap:
          name: ecs-cluster-telegraf-prom-confd-template
      - name: additional-configs
        configMap:
          name: telegraf-external-monitoring-endpoint
          optional: true
      - name: crash-dump
        emptyDir: {}
      - name: log
        emptyDir: {}
      - name: influxdb-replicas-config
        configMap:
          name: ecs-cluster-influxdb-replicas
---
# Source: ecs-cluster/charts/ecs-monitoring/charts/telegraf/templates/deployment.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ecs-cluster-telegraf
  labels:
    app.kubernetes.io/name: ecs-cluster-telegraf
    helm.sh/chart: telegraf-0.54.0
    app.kubernetes.io/instance: ecs-cluster
spec:
  replicas:  1
  selector:
    matchLabels:
      app.kubernetes.io/name: ecs-cluster-telegraf
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ecs-cluster-telegraf
        release: ecs-cluster
        
        objectscale.dellemc.com/logging-inject: "true"
        objectscale.dellemc.com/logging-release-name: "ecs-cluster"
        app.kubernetes.io/namespace: "default"
      annotations:
        # Include a hash of the configmap in the pod template
        # This means that if the configmap changes, the deployment will be rolled
        checksum/config: 073b19d20dd6a6d66e1b25b887d1c6c957176bf30680ab4c955c5e92c98636b0
    spec:
      shareProcessNamespace: true
      serviceAccountName: default
      initContainers:
      - name: confd-init
        image: "emccorp/confd-sidecar:3.7.0.0-1146.a692701d"
        imagePullPolicy: "IfNotPresent"
        command: ["bash"]
        args: ["-c", "echo /crash-dump/core-%e > /proc/sys/kernel/core_pattern; ulimit -c unlimited; GOTRACEBACK=crash /confd -onetime -sync-only -backend file -file /etc/telegraf-ext/influxdb-replicas/replicas.json -confdir /etc/confd_flex"]
        volumeMounts:
        - mountPath: /etc/telegraf-ext/influxdb-replicas
          name: influxdb-replicas-config
        - mountPath: /etc/confd_flex/templates
          name: configs-template
        - mountPath: /etc/confd_flex/conf.d
          name: configs-confd-template
        - mountPath: /etc/telegraf
          name: config
        - mountPath: /crash-dump
          name: crash-dump
        env:
        - name: INFLUXDB_REPLICAS_PER_PARTITION
          value: "3"
        - name: RELEASE_NAME
          value: "ecs-cluster"
        - name: RELEASE_NAMESPACE
          value: "default"
        - name: SCHEME
          value: "http"
      containers:
      - name: telegraf
        image: "emccorp/telegraf:3.7.0.0-1146.a692701d"
        imagePullPolicy: "IfNotPresent"
        command: ["bash"]
        args: ["-c", "echo /crash-dump/core-%e > /proc/sys/kernel/core_pattern; ulimit -c unlimited; GOTRACEBACK=crash telegraf --config /etc/telegraf/telegraf.conf --config-directory /etc/telegraf/telegraf.d/"]
        resources:
          requests:
            memory: 200Mi
            ephemeral-storage: 650Mi
          limits:
            memory: 200Mi
            ephemeral-storage: 650Mi
        env:
        - name: COLLECTION_INTERVAL
          value: 300s
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        volumeMounts:
        - mountPath: /etc/telegraf
          name: config
        - name: additional-configs
          mountPath: /etc/telegraf/telegraf.d
        - mountPath: /crash-dump
          name: crash-dump
      - name: confd
        image: "emccorp/confd-sidecar:3.7.0.0-1146.a692701d"
        imagePullPolicy: "IfNotPresent"
        command: [ "bash" ]
        args: [ "-c", "echo /crash-dump/core-%e > /proc/sys/kernel/core_pattern; ulimit -c unlimited; GOTRACEBACK=crash /confd -backend file -file /etc/telegraf-ext/influxdb-replicas/replicas.json -confdir /etc/confd_flex -interval 300"]
        volumeMounts:
        - mountPath: /etc/telegraf-ext/influxdb-replicas
          name: influxdb-replicas-config
        - mountPath: /etc/confd_flex/templates
          name: configs-template
        - mountPath: /etc/confd_flex/conf.d
          name: configs-confd-template
        - mountPath: /etc/telegraf
          name: config
        - mountPath: /crash-dump
          name: crash-dump
        env:
        - name: INFLUXDB_REPLICAS_PER_PARTITION
          value: "3"
        - name: RELEASE_NAME
          value: "ecs-cluster"
        - name: RELEASE_NAMESPACE
          value: "default"
        - name: SCHEME
          value: "http"
      
      volumes:
      - name: config
        emptyDir: {}
      - name: configs-template
        configMap:
          name: ecs-cluster-telegraf-config-template
      - name: configs-confd-template
        configMap:
          name: ecs-cluster-telegraf-confd-template
      - name: additional-configs
        configMap:
          name: telegraf-external-monitoring-endpoint
          optional: true
      - name: crash-dump
        emptyDir: {}
      - name: log
        emptyDir: {}
      - name: influxdb-replicas-config
        configMap:
          name: ecs-cluster-influxdb-replicas
---
# Source: ecs-cluster/charts/ecs-monitoring/charts/throttler/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ecs-cluster-throttler
  labels:
    app.kubernetes.io/name: ecs-cluster-throttler
    app.kubernetes.io/instance: ecs-cluster
    helm.sh/chart: throttler-0.54.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: ecs-cluster-throttler
      app.kubernetes.io/instance: ecs-cluster
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ecs-cluster-throttler
        app.kubernetes.io/instance: ecs-cluster
        release: ecs-cluster
        
        objectscale.dellemc.com/logging-inject: "true"
        objectscale.dellemc.com/logging-release-name: "ecs-cluster"
        app.kubernetes.io/namespace: "default"
      annotations:
    spec:
      serviceAccountName: ecs-cluster-throttler
      containers:
      - name: throttler
        image: "emccorp/throttler:3.7.0.0-1146.a692701d"
        imagePullPolicy: "IfNotPresent"
        command: ["bash"]
        args: ["-c", "echo /crash-dump/core-%e > /proc/sys/kernel/core_pattern; ulimit -c unlimited; GOTRACEBACK=crash throttler --logger-config /etc/throttler/logger.json --port 8094"]
        resources:
          requests:
            memory: 200Mi
            ephemeral-storage: 650Mi
          limits:
            memory: 200Mi
            ephemeral-storage: 650Mi
        ports:
          - name: api
            containerPort: 8094
        env:
        - name: K8S_NAMESPACE
          value: "default"
        - name: THROTTLER_APP_NAME
          value: "ecs-cluster"
        volumeMounts:
        - mountPath: /etc/throttler/throttler.conf
          name: throttler-config
          subPath: throttler.conf
        - mountPath: /etc/cq_flex
          name: cq
        - mountPath: /etc/throttler/logger.json
          name: logger-config
          subPath: logger.json
        - mountPath: /etc/fluxd-alerter/
          name: fluxd-alerter
        - mountPath: /crash-dump
          name: crash-dump
        - name: log
          mountPath: /var/log
        livenessProbe:
          httpGet:
            path: /metrics
            port: api
            scheme: HTTP
          initialDelaySeconds: 30
          timeoutSeconds: 30
          periodSeconds: 60
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /metrics
            port: api
            scheme: HTTP
          initialDelaySeconds: 5
          timeoutSeconds: 30
          periodSeconds: 60
          failureThreshold: 3
      
      volumes:
      - name: throttler-config
        configMap:
          name: ecs-cluster-throttler-config
      - name: cq
        configMap:
          name: ecs-cluster-throttler-cq
      - name: logger-config
        configMap:
          name: ecs-cluster-throttler-logger-config
      - name: fluxd-alerter
        configMap:
          name: ecs-cluster-throttler-fluxd-alerter
      - name: crash-dump
        emptyDir: {}
      - name: log
        emptyDir: {}
---
# Source: ecs-cluster/charts/ecs-monitoring/charts/fluxd/templates/deployment.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
---
# Source: ecs-cluster/charts/ecs-monitoring/charts/grafana/templates/dashboards.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
---
# Source: ecs-cluster/charts/ecs-monitoring/charts/grafana/templates/deployment.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
---
# Source: ecs-cluster/charts/ecs-monitoring/charts/grafana/templates/nginx-config.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
---
# Source: ecs-cluster/charts/ecs-monitoring/charts/influxdb/templates/influxdb-lib.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
---
# Source: ecs-cluster/charts/ecs-monitoring/charts/influxdb/templates/influxdb.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
---
# Source: ecs-cluster/charts/ecs-monitoring/charts/influxdb/templates/nginx-config-context.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
---
# Source: ecs-cluster/charts/ecs-monitoring/charts/influxdb/templates/nginx-config.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
---
# Source: ecs-cluster/charts/ecs-monitoring/charts/telegraf-prom/templates/service.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
---
# Source: ecs-cluster/charts/ecs-monitoring/charts/telegraf/templates/service.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
---
# Source: ecs-cluster/charts/ecs-monitoring/charts/throttler/templates/alerter.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
---
# Source: ecs-cluster/charts/ecs-monitoring/charts/throttler/templates/alerter_app_config.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
---
# Source: ecs-cluster/charts/ecs-monitoring/charts/throttler/templates/application.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
---
# Source: ecs-cluster/charts/ecs-monitoring/charts/throttler/templates/config_throttler.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
---
# Source: ecs-cluster/charts/ecs-monitoring/charts/throttler/templates/cq.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
---
# Source: ecs-cluster/charts/ecs-monitoring/charts/throttler/templates/deployment.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
---
# Source: ecs-cluster/charts/ecs-monitoring/charts/throttler/templates/logger.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
---
# Source: ecs-cluster/charts/ecs-monitoring/charts/throttler/templates/nginx-config.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
---
# Source: ecs-cluster/charts/rsyslog-client/templates/rbac_role.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
---
# Source: ecs-cluster/charts/rsyslog-client/templates/rbac_rolebinding.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
---
# Source: ecs-cluster/templates/svc_common_vars.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
---
# Source: ecs-cluster/templates/objectstore-app.yaml
apiVersion: app.k8s.io/v1beta1
kind: Application
metadata:
  name: ecs-cluster
  namespace: default
  labels:
    app.kubernetes.io/name: ecs-cluster
    app.kubernetes.io/version: 0.69.0
    app.kubernetes.io/instance: ecs-cluster
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: ecs-cluster-0.69.0
    product: objectscale
    release: ecs-cluster
  annotations:
    com.dellemc.kahm.subscribed: "true"
    nautilus.dellemc.com/chart-name: ecs-cluster
    nautilus.dellemc.com/chart-version: 0.69.0
    nautilus.dellemc.com/chart-values: "{\"atlas\":{\"image\":{\"pullPolicy\":\"IfNotPresent\",\"repository\":\"atlas\",\"tag\":\"1.1.3\"},\"persistence\":{\"size\":\"32Gi\"}},\"blob\":{\"image\":{\"repository\":\"blob-service\"}},\"bookkeeper\":{\"autoRecovery\":true,\"blockOwnerDeletion\":false,\"image\":{\"pullPolicy\":\"IfNotPresent\"},\"options\":{\"log\":{\"level\":\"INFO\"}},\"probes\":{\"liveness\":{\"failureThreshold\":4,\"initialDelaySeconds\":60,\"periodSeconds\":15,\"successThreshold\":1,\"timeoutSeconds\":5},\"readiness\":{\"failureThreshold\":9,\"initialDelaySeconds\":20,\"periodSeconds\":120,\"successThreshold\":1,\"timeoutSeconds\":45}},\"storage\":{\"index\":{\"volumeSize\":\"5Gi\"},\"journal\":{\"volumeSize\":\"10Gi\"},\"ledger\":{\"volumeSize\":\"10Gi\"}},\"version\":\"0.9.0-2725.77b13981a\"},\"bookkeeperRepository\":\"bookkeeper\",\"chunkManager\":{\"image\":{\"repository\":\"chunk-manager\"}},\"cmfswitch\":{\"image\":{\"repository\":\"cmf-switch\"}},\"control\":{\"image\":{\"repository\":\"object-control\"}},\"controlPlane\":{\"image\":{\"repository\":\"control-service\"}},\"createApplicationResource\":true,\"deos_hc\":{\"image\":{\"repository\":\"deos-hc\"}},\"deploymentDeadlineSeconds\":2400,\"diagnostic\":{\"image\":{\"repository\":\"diagnostic-service\"},\"service\":{\"ports\":[{\"name\":\"diag\",\"port\":9100,\"targetPort\":9100},{\"name\":\"diagweb\",\"port\":9101,\"targetPort\":9101}],\"type\":\"ClusterIP\"}},\"ecs-monitoring\":{\"cert\":{\"enabled\":false,\"global\":{\"communication_scheme\":\"http\",\"enableHealthcheck\":true,\"graphql_plugin_enabled\":true,\"graphql_release_name\":\"objectscale-graphql\",\"internal_dns\":\"kube-dns.kube-system.svc.cluster.local\",\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"monitoring_tag\":\"3.7.0.0-1146.a692701d\",\"objectscale_release_name\":\"objectscale-manager\",\"performanceProfile\":\"Small\",\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"rsyslog_uds_dir\":\"/var/run/rsyslog\",\"rsyslog_uds_filename\":\"rsyslog.socket\",\"started\":true,\"telegraf_tls_enabled\":false,\"tls_enabled\":false,\"use_vault_for_ssl\":false}},\"fluxd\":{\"common-monitoring-lib\":{\"exports\":{\"default\":{\"rsyslog_client_image_pull_policy\":\"IfNotPresent\"}},\"global\":{\"communication_scheme\":\"http\",\"enableHealthcheck\":true,\"graphql_plugin_enabled\":true,\"graphql_release_name\":\"objectscale-graphql\",\"internal_dns\":\"kube-dns.kube-system.svc.cluster.local\",\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"monitoring_tag\":\"3.7.0.0-1146.a692701d\",\"objectscale_release_name\":\"objectscale-manager\",\"performanceProfile\":\"Small\",\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"rsyslog_uds_dir\":\"/var/run/rsyslog\",\"rsyslog_uds_filename\":\"rsyslog.socket\",\"started\":true,\"telegraf_tls_enabled\":false,\"tls_enabled\":false,\"use_vault_for_ssl\":false}},\"config\":{\"http\":{\"bind_address\":8093}},\"global\":{\"communication_scheme\":\"http\",\"enableHealthcheck\":true,\"graphql_plugin_enabled\":true,\"graphql_release_name\":\"objectscale-graphql\",\"internal_dns\":\"kube-dns.kube-system.svc.cluster.local\",\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"monitoring_tag\":\"3.7.0.0-1146.a692701d\",\"objectscale_release_name\":\"objectscale-manager\",\"performanceProfile\":\"Small\",\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"rsyslog_uds_dir\":\"/var/run/rsyslog\",\"rsyslog_uds_filename\":\"rsyslog.socket\",\"started\":true,\"telegraf_tls_enabled\":false,\"tls_enabled\":false,\"use_vault_for_ssl\":false},\"image\":{\"pullPolicy\":\"IfNotPresent\",\"repository\":\"fluxd\"},\"livenessProbe\":{\"probePath\":\"/metrics\"},\"rbac\":{\"create\":true},\"readinessProbe\":{\"probePath\":\"/metrics\"},\"resources\":{\"limits\":{},\"requests\":{}},\"service\":{\"bind_address\":8093},\"serviceAccount\":{\"create\":true},\"startupProbe\":{\"enabled\":false,\"probePath\":\"/ping\"},\"tolerations\":[]},\"global\":{\"communication_scheme\":\"http\",\"enableHealthcheck\":true,\"graphql_plugin_enabled\":true,\"graphql_release_name\":\"objectscale-graphql\",\"internal_dns\":\"kube-dns.kube-system.svc.cluster.local\",\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"monitoring_tag\":\"3.7.0.0-1146.a692701d\",\"objectscale_release_name\":\"objectscale-manager\",\"performanceProfile\":\"Small\",\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"rsyslog_uds_dir\":\"/var/run/rsyslog\",\"rsyslog_uds_filename\":\"rsyslog.socket\",\"started\":true,\"telegraf_tls_enabled\":false,\"tls_enabled\":false,\"use_vault_for_ssl\":false},\"grafana\":{\"common-monitoring-lib\":{\"exports\":{\"default\":{\"rsyslog_client_image_pull_policy\":\"IfNotPresent\"}},\"global\":{\"communication_scheme\":\"http\",\"enableHealthcheck\":true,\"graphql_plugin_enabled\":true,\"graphql_release_name\":\"objectscale-graphql\",\"internal_dns\":\"kube-dns.kube-system.svc.cluster.local\",\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"monitoring_tag\":\"3.7.0.0-1146.a692701d\",\"objectscale_release_name\":\"objectscale-manager\",\"performanceProfile\":\"Small\",\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"rsyslog_uds_dir\":\"/var/run/rsyslog\",\"rsyslog_uds_filename\":\"rsyslog.socket\",\"started\":true,\"telegraf_tls_enabled\":false,\"tls_enabled\":false,\"use_vault_for_ssl\":false}},\"config\":{\"dashboards_dir\":\"dashboards/ecs\",\"home_dashboard\":\"ObjectStore Overview\",\"http\":{\"bind_address\":3000},\"limitedUsers\":[{\"password\":\"ChangeMe\",\"username\":\"root\"}],\"oauth\":{\"api_url\":\"\",\"auth_url\":\"\",\"auto_login\":true,\"client_id\":\"\",\"client_secret\":\"\",\"enabled\":false,\"signout_url\":\"\",\"token_url\":\"\"},\"reverse_proxy\":{\"domain\":\"localhost\",\"enabled\":true,\"protocol\":\"http\",\"subpath\":\"grafana/{{ .Release.Namespace }}/{{ .Release.Name }}\"},\"users\":[{\"password\":\"ChangeMe\",\"username\":\"emcmonitor\"},{\"password\":\"ChangeMe\",\"username\":\"emcservice\"}]},\"global\":{\"communication_scheme\":\"http\",\"enableHealthcheck\":true,\"graphql_plugin_enabled\":true,\"graphql_release_name\":\"objectscale-graphql\",\"internal_dns\":\"kube-dns.kube-system.svc.cluster.local\",\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"monitoring_tag\":\"3.7.0.0-1146.a692701d\",\"objectscale_release_name\":\"objectscale-manager\",\"performanceProfile\":\"Small\",\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"rsyslog_uds_dir\":\"/var/run/rsyslog\",\"rsyslog_uds_filename\":\"rsyslog.socket\",\"started\":true,\"telegraf_tls_enabled\":false,\"tls_enabled\":false,\"use_vault_for_ssl\":false},\"image\":{\"pullPolicy\":\"IfNotPresent\",\"repository\":\"grafana\"},\"livenessProbe\":{\"probePath\":\"/api/health\"},\"readinessProbe\":{\"probePath\":\"/api/health\"},\"replicas\":1,\"resources\":{\"limits\":{\"memory\":\"300Mi\"},\"requests\":{\"memory\":\"300Mi\"}},\"service\":{\"bind_address\":3000,\"type\":\"ClusterIP\"},\"tolerations\":[]},\"influxdb\":{\"common-monitoring-lib\":{\"exports\":{\"default\":{\"rsyslog_client_image_pull_policy\":\"IfNotPresent\"}},\"global\":{\"communication_scheme\":\"http\",\"enableHealthcheck\":true,\"graphql_plugin_enabled\":true,\"graphql_release_name\":\"objectscale-graphql\",\"internal_dns\":\"kube-dns.kube-system.svc.cluster.local\",\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"monitoring_tag\":\"3.7.0.0-1146.a692701d\",\"objectscale_release_name\":\"objectscale-manager\",\"performanceProfile\":\"Small\",\"product\":\"objectscale\",\"registry\":\"emccorp\",\"registrySecret\":\"dockerhub-registry-secret\",\"rsyslog_enabled\":true,\"rsyslog_uds_dir\":\"/var/run/rsyslog\",\"rsyslog_uds_filename\":\"rsyslog.socket\",\"started\":true,\"telegraf_tls_enabled\":false,\"tls_enabled\":false,\"use_vault_for_ssl\":false,\"watchNamespace\":\"\"}},\"config\":{\"admin\":{\"bind_address\":8083,\"enabled\":false,\"https_certificate\":\"/etc/ssl/influxdb.pem\",\"https_enabled\":false},\"coordinator\":{\"log_queries_after\":\"0s\",\"max_concurrent_queries\":0,\"max_select_buckets\":0,\"max_select_point\":0,\"max_select_series\":0,\"query_timeout\":\"0s\",\"write_timeout\":\"10s\"},\"data\":{\"cache_max_memory_size\":1073741824,\"cache_snapshot_memory_size\":26214400,\"cache_snapshot_write_cold_duration\":\"10m0s\",\"compact_full_write_cold_duration\":\"4h0m0s\",\"index_version\":\"tsi1\",\"max_series_per_database\":1000000,\"max_values_per_tag\":100000,\"query_log_enabled\":true,\"trace_logging_enabled\":false},\"http\":{\"auth_enabled\":false,\"bind_address\":8086,\"bind_socket\":\"/var/run/influxdb.sock\",\"enabled\":true,\"flux_enabled\":true,\"https_certificate\":\"/etc/ssl/influxdb.pem\",\"https_enabled\":false,\"https_private_key\":\"\",\"log_enabled\":true,\"max_connection_limit\":0,\"max_row_limit\":10000,\"pprof_enabled\":true,\"realm\":\"InfluxDB\",\"shared_secret\":\"beetlejuicebeetlejuicebeetlejuice\",\"unix_socket_enabled\":false,\"write_tracing\":false},\"logging\":{\"format\":\"auto\",\"level\":\"info\",\"supress_logo\":false},\"meta\":{\"logging_enabled\":true,\"retention_autocreate\":true},\"monitor\":{\"store_database\":\"_internal\",\"store_enabled\":false,\"store_interval\":\"10s\"},\"reporting_disabled\":true,\"retention\":{\"check_interval\":\"30m0s\",\"enabled\":true},\"rpc\":{\"bind_address\":8088,\"enabled\":true},\"shard_precreation\":{\"advance_period\":\"30m0s\",\"check_interval\":\"10m0s\",\"enabled\":true},\"storage_directory\":\"/data/influxdb\",\"subscriber\":{\"ca_certs\":\"\",\"enabled\":true,\"http_timeout\":\"30s\",\"insecure_skip_verify\":false,\"write_buffer_size\":1000,\"write_concurrency\":40}},\"disable_recovery\":false,\"global\":{\"communication_scheme\":\"http\",\"enableHealthcheck\":true,\"graphql_plugin_enabled\":true,\"graphql_release_name\":\"objectscale-graphql\",\"internal_dns\":\"kube-dns.kube-system.svc.cluster.local\",\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"monitoring_tag\":\"3.7.0.0-1146.a692701d\",\"objectscale_release_name\":\"objectscale-manager\",\"performanceProfile\":\"Small\",\"product\":\"objectscale\",\"registry\":\"emccorp\",\"registrySecret\":\"dockerhub-registry-secret\",\"rsyslog_enabled\":true,\"rsyslog_uds_dir\":\"/var/run/rsyslog\",\"rsyslog_uds_filename\":\"rsyslog.socket\",\"started\":true,\"telegraf_tls_enabled\":false,\"tls_enabled\":false,\"use_vault_for_ssl\":false,\"watchNamespace\":\"\"},\"image\":{\"pullPolicy\":\"IfNotPresent\",\"repository\":\"influxdb\"},\"initScripts\":{\"enabled\":true,\"scripts\":{\"init.iql\":\"CREATE DATABASE \\\"monitoring_main\\\" WITH DURATION 60d SHARD DURATION 10d NAME \\\"default\\\"\\nCREATE DATABASE \\\"monitoring_op\\\" WITH DURATION 5d SHARD DURATION 5d NAME \\\"default\\\"\\nCREATE DATABASE \\\"monitoring_last\\\" WITH DURATION 1d SHARD DURATION 1d NAME \\\"default\\\"\\nCREATE DATABASE \\\"monitoring_vdc\\\" WITH DURATION 60d SHARD DURATION 10d NAME \\\"default\\\"\\nCREATE DATABASE \\\"monitoring_meta\\\" WITH DURATION 60d SHARD DURATION 10d NAME \\\"default\\\"\\nCREATE DATABASE \\\"monitoring_rt\\\" WITH DURATION 1h SHARD DURATION 1h NAME \\\"default\\\"\\n\"}},\"livenessProbe\":{\"probePath\":\"/ping\"},\"persistence\":{\"accessMode\":\"ReadWriteOnce\",\"enabled\":true,\"size\":\"20Gi\"},\"readinessProbe\":{\"probePath\":\"/ping\"},\"resources\":{\"limits\":{},\"requests\":{}},\"service\":{\"bind_address\":8086,\"clusterIP\":\"None\",\"rpc\":{\"bind_address\":8088},\"type\":\"ClusterIP\"},\"startupProbe\":{\"enabled\":false,\"probePath\":\"/ping\"}},\"telegraf\":{\"common-monitoring-lib\":{\"exports\":{\"default\":{\"rsyslog_client_image_pull_policy\":\"IfNotPresent\"}},\"global\":{\"communication_scheme\":\"http\",\"enableHealthcheck\":true,\"graphql_plugin_enabled\":true,\"graphql_release_name\":\"objectscale-graphql\",\"internal_dns\":\"kube-dns.kube-system.svc.cluster.local\",\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"monitoring_tag\":\"3.7.0.0-1146.a692701d\",\"objectscale_release_name\":\"objectscale-manager\",\"performanceProfile\":\"Small\",\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"rsyslog_uds_dir\":\"/var/run/rsyslog\",\"rsyslog_uds_filename\":\"rsyslog.socket\",\"started\":true,\"telegraf_tls_enabled\":false,\"tls_enabled\":false,\"use_vault_for_ssl\":false,\"watchAllNamespaces\":false}},\"config\":{\"agent\":{\"collection_jitter\":\"0s\",\"debug\":false,\"flush_interval\":\"10s\",\"flush_jitter\":\"0s\",\"interval\":\"10s\",\"logfile\":\"\",\"metric_batch_size\":1000,\"metric_buffer_limit\":10000,\"omit_hostname\":true,\"precision\":\"\",\"quiet\":false,\"round_interval\":true},\"collection_interval\":\"300s\",\"ext_outputs\":[{\"influxdb\":{\"insecure_skip_verify\":true,\"namedrop\":[\"cq_*_metadata\"],\"namepass\":[\"cq_performance_transaction\",\"cq_performance_throughput\",\"cq_performance_error\",\"cq_performance_latency\",\"cq_capacity_vdc\",\"cq_recover_status_summary\",\"cq_node_rebalancing_summary\",\"cq_capacity_ec\",\"cq_capacity_ec_rate\",\"cq_disk_bandwidth\",\"cq_gc_data\",\"cq_capacity_used_elements\",\"cq_hardware_health_nodes_counter\",\"cq_hardware_health_disks_counter\",\"cq_capacity_data_being_processed\"],\"skip_database_creation\":true,\"timeout\":\"30s\",\"urls\":[\"http://{{ .Values.global.objectscale_release_name }}-telegraf.{{ include \\\"common-monitoring-lib.rsyslog_svc_namespace\\\" . }}.svc.cluster.local:11002\"]}}],\"global_tags\":{\"release_name\":\"{{ .Release.Name }}\"},\"http\":{\"bind_address\":11002},\"influxdb_inputs_enabled\":false,\"inputs\":[{\"influxdb_listener\":{\"read_timeout\":\"30s\",\"service_address\":\":11002\",\"write_timeout\":\"30s\"}},{\"internal\":{\"collect_memstats\":true,\"interval\":\"300s\",\"name_prefix\":\"tsdb_telegraf_\",\"tags\":{\"host\":\"$HOSTNAME\",\"tag\":\"system\"}}}],\"outputs\":[{\"influxdb\":{\"database\":\"monitoring_main\",\"fielddrop\":[\"*Timestamp\"],\"insecure_skip_verify\":true,\"namepass\":[\"*_IO_Statistics_data_*\",\"cm_BTREE_GC_Statistics\",\"cm_BTREE_GC_Statistics_CoS_StorageTier_StoragePolicy\",\"cm_Chunk_Statistics\",\"cm_Chunk_Statistics_CoS_StorageTier_StoragePolicy\",\"cm_Chunk_Statistics_CoS_StorageTier_StoragePolicy_Source\",\"cm_EC_Statistics\",\"cm_EC_Statistics_CoS_StorageTier_StoragePolicy\",\"cm_EC_Statistics_CoS_StorageTier_StoragePolicy_Source\",\"cm_REPO_GC_Statistics\",\"cm_REPO_GC_Statistics_CoS_StorageTier_StoragePolicy\",\"sr_REPO_GC_Statistics\",\"cm_Recover_Statistics\",\"cm_Recover_Statistics_CoS_StorageTier_StoragePolicy\",\"cm_Rebalance_Statistics\",\"cm_Rebalance_Statistics_CoS_StorageTier_StoragePolicy\",\"ssm_sstable_SSTable_SS\",\"ssm_sstable_SSTable_SS_partitions_PD\",\"ssm_sstable_SSTable_SS_partitions_PD_status\",\"statDataHead_performance_internal_*\",\"blob_SSDReadCache_Stats\"],\"retention_policy\":\"default\",\"skip_database_creation\":true,\"tagexclude\":[\"vdc\",\"storage_pool\",\"cluster\",\"release_name\"],\"tagpasscoordinated\":{\"limit\":25,\"namespace\":[\"*\"]},\"timeout\":\"30s\"}},{\"influxdb\":{\"database\":\"monitoring_op\",\"fielddrop\":[\"*Timestamp\"],\"insecure_skip_verify\":true,\"namepass\":[\"dtquery_dt_status\",\"dtquery_dt_status_detailed_type\",\"dtquery_dt_dist_dt_node_id_type\",\"dtquery_dt_dist_host_dt_node_id\",\"dtquery_dt_dist_type_type\",\"*_stat_client_performance\",\"tsdb_telegraf_internal_gather\",\"tsdb_telegraf_internal_write\",\"disk\",\"procstat\",\"object_operations*\",\"*_Stream_Stats_Scope_Group_Scope*\",\"pravega_*\",\"ons_Stream_Stats_Scope_Group_Scope\",\"ons_Stream_Stats_Scope_Group_Scope_Stream\",\"ons_clients_external\",\"ons_clients_objmt\",\"ons_clients_replication\",\"ons_manager\",\"ons_parsing_task\"],\"retention_policy\":\"default\",\"skip_database_creation\":true,\"tagexclude\":[\"vdc\",\"storage_pool\",\"cluster\",\"release_name\"],\"timeout\":\"30s\"}},{\"influxdb\":{\"database\":\"monitoring_last\",\"fielddrop\":[\"*Timestamp\"],\"insecure_skip_verify\":true,\"namepass\":[\"*_Process_status\",\"resource_EKM_EKMServer\",\"dtquery_cmf\",\"mm_topn_bucket_by_obj_size_place\",\"mm_topn_bucket_by_obj_count_place\"],\"retention_policy\":\"default\",\"skip_database_creation\":true,\"tagexclude\":[\"vdc\",\"storage_pool\",\"cluster\",\"release_name\"],\"timeout\":\"30s\"}},{\"influxdb\":{\"database\":\"monitoring_vdc\",\"insecure_skip_verify\":true,\"namepass\":[\"cq_*\"],\"retention_policy\":\"default\",\"skip_database_creation\":true,\"tagexclude\":[\"host\",\"node_id\",\"vdc\",\"storage_pool\",\"cluster\",\"release_name\"],\"timeout\":\"30s\"}},{\"influxdb\":{\"database\":\"monitoring_rt\",\"fielddrop\":[\"*Timestamp\"],\"insecure_skip_verify\":true,\"namepass\":[\"statDataHead_realtime_*\"],\"retention_policy\":\"default\",\"skip_database_creation\":true,\"tagexclude\":[\"vdc\",\"storage_pool\",\"cluster\",\"release_name\"],\"timeout\":\"30s\"}}],\"processors\":[{\"override\":{\"namepass\":[\"dtquery_dt_status\",\"dtquery_dt_status_detailed_type\",\"dtquery_dt_dist_dt_node_id_type\",\"dtquery_dt_dist_host_dt_node_id\",\"dtquery_dt_dist_type_type\",\"dtquery_cmf\",\"resource_EKM_EKMServer\",\"ssm_sstable_SSTable_SS*\",\"mm_topn_bucket_by_obj_size_place\",\"mm_topn_bucket_by_obj_count_place\"],\"tagexclude\":[\"host\",\"node_id\",\"ip\"]}},{\"rename\":{\"namepass\":[\"filestat\"],\"replace\":{\"dest\":\"size_bytes_i\",\"field\":\"size_bytes\"}}}]},\"extra_files\":{},\"global\":{\"communication_scheme\":\"http\",\"enableHealthcheck\":true,\"graphql_plugin_enabled\":true,\"graphql_release_name\":\"objectscale-graphql\",\"internal_dns\":\"kube-dns.kube-system.svc.cluster.local\",\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"monitoring_tag\":\"3.7.0.0-1146.a692701d\",\"objectscale_release_name\":\"objectscale-manager\",\"performanceProfile\":\"Small\",\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"rsyslog_uds_dir\":\"/var/run/rsyslog\",\"rsyslog_uds_filename\":\"rsyslog.socket\",\"started\":true,\"telegraf_tls_enabled\":false,\"tls_enabled\":false,\"use_vault_for_ssl\":false,\"watchAllNamespaces\":false},\"image\":{\"pullPolicy\":\"IfNotPresent\",\"repository\":\"telegraf\"},\"rbac\":{\"create\":false},\"resources\":{\"limits\":{},\"requests\":{}},\"service\":{\"bind_address\":11002,\"extra_bindings\":[],\"type\":\"ClusterIP\"},\"serviceAccount\":{\"create\":false},\"tolerations\":[]},\"telegraf-prom\":{\"common-monitoring-lib\":{\"exports\":{\"default\":{\"rsyslog_client_image_pull_policy\":\"IfNotPresent\"}},\"global\":{\"communication_scheme\":\"http\",\"enableHealthcheck\":true,\"graphql_plugin_enabled\":true,\"graphql_release_name\":\"objectscale-graphql\",\"internal_dns\":\"kube-dns.kube-system.svc.cluster.local\",\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"monitoring_tag\":\"3.7.0.0-1146.a692701d\",\"objectscale_release_name\":\"objectscale-manager\",\"performanceProfile\":\"Small\",\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"rsyslog_uds_dir\":\"/var/run/rsyslog\",\"rsyslog_uds_filename\":\"rsyslog.socket\",\"started\":true,\"telegraf_tls_enabled\":false,\"tls_enabled\":false,\"use_vault_for_ssl\":false,\"watchAllNamespaces\":false}},\"config\":{\"agent\":{\"collection_jitter\":\"0s\",\"debug\":false,\"flush_interval\":\"10s\",\"flush_jitter\":\"0s\",\"interval\":\"10s\",\"logfile\":\"\",\"metric_batch_size\":1000,\"metric_buffer_limit\":10000,\"omit_hostname\":true,\"precision\":\"\",\"quiet\":false,\"round_interval\":true},\"collection_interval\":\"300s\",\"global_tags\":{\"release_name\":\"{{ .Release.Name }}\"},\"http\":{\"bind_address\":11002},\"influxdb_inputs_enabled\":true,\"inputs\":[{\"internal\":{\"collect_memstats\":true,\"interval\":\"$COLLECTION_INTERVAL\",\"name_prefix\":\"tsdb_telegraf_\",\"tags\":{\"host\":\"$HOSTNAME\",\"tag\":\"system\"}}},{\"prometheus\":{\"bearer_token\":\"/var/run/secrets/kubernetes.io/serviceaccount/token\",\"insecure_skip_verify\":true,\"interval\":\"$COLLECTION_INTERVAL\",\"kubernetes_label_selector\":\"app.kubernetes.io/name={{ .Release.Name }}-fluxd\",\"monitor_kubernetes_pods\":true,\"monitor_kubernetes_pods_namespace\":\"{{ .Release.Namespace }}\",\"name_prefix\":\"tsdb_fluxd_\",\"tags\":{\"tag\":\"system\"}}},{\"prometheus\":{\"insecure_skip_verify\":true,\"interval\":\"$COLLECTION_INTERVAL\",\"kubernetes_services\":[\"{{ .Values.global.communication_scheme }}://{{ .Release.Name }}-throttler.{{ .Release.Namespace }}.svc.cluster.local:8094/metrics\"],\"monitor_kubernetes_pods\":false,\"tags\":{\"host\":\"throttler\",\"tag\":\"system\"}}}],\"outputs\":[{\"influxdb\":{\"database\":\"monitoring_op\",\"insecure_skip_verify\":true,\"namepass\":[\"tsdb_fluxd_http_api_request_duration_seconds\",\"tsdb_fluxd_http_api_requests_total\",\"tsdb_fluxd_host_state_change_total\",\"tsdb_fluxd_host_state\",\"tsdb_fluxd_host_selected\",\"tsdb_fluxd_host_selection_failed\",\"tsdb_fluxd_hl_*\",\"tsdb_fluxd_query_control_executing_duration_seconds\",\"tsdb_fluxd_http_lb_request_forwarded\",\"tsdb_fluxd_query_control_panics_total\",\"tsdb_influxdb\",\"tsdb_influxdb_database\",\"tsdb_influxdb_queryExecutor\",\"tsdb_telegraf_internal_gather\",\"tsdb_telegraf_internal_write\",\"cquerier_*\"],\"retention_policy\":\"default\",\"skip_database_creation\":true,\"tagexclude\":[\"vdc\",\"storage_pool\",\"cluster\",\"release_name\"],\"timeout\":\"30s\"}}],\"processors\":[{\"override\":{\"namepass\":[\"tsdb_influxdb_httpd\"],\"tagexclude\":[\"node_id\",\"ip\"]}}]},\"extra_files\":{},\"global\":{\"communication_scheme\":\"http\",\"enableHealthcheck\":true,\"graphql_plugin_enabled\":true,\"graphql_release_name\":\"objectscale-graphql\",\"internal_dns\":\"kube-dns.kube-system.svc.cluster.local\",\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"monitoring_tag\":\"3.7.0.0-1146.a692701d\",\"objectscale_release_name\":\"objectscale-manager\",\"performanceProfile\":\"Small\",\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"rsyslog_uds_dir\":\"/var/run/rsyslog\",\"rsyslog_uds_filename\":\"rsyslog.socket\",\"started\":true,\"telegraf_tls_enabled\":false,\"tls_enabled\":false,\"use_vault_for_ssl\":false,\"watchAllNamespaces\":false},\"image\":{\"pullPolicy\":\"IfNotPresent\",\"repository\":\"telegraf\"},\"rbac\":{\"clusterWide\":false,\"create\":true,\"rules\":[{\"apiGroups\":[\"\"],\"resources\":[\"pods\"],\"verbs\":[\"get\",\"list\",\"watch\"]}]},\"replicas\":1,\"resources\":{\"limits\":{},\"requests\":{}},\"service\":{\"bind_address\":11002,\"extra_bindings\":[],\"type\":\"ClusterIP\"},\"serviceAccount\":{\"create\":true},\"tolerations\":[]},\"telegraf-sidecar\":{\"common-monitoring-lib\":{\"exports\":{\"default\":{\"rsyslog_client_image_pull_policy\":\"IfNotPresent\"}},\"global\":{\"communication_scheme\":\"http\",\"enableHealthcheck\":true,\"graphql_plugin_enabled\":true,\"graphql_release_name\":\"objectscale-graphql\",\"internal_dns\":\"kube-dns.kube-system.svc.cluster.local\",\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"monitoring_tag\":\"3.7.0.0-1146.a692701d\",\"objectscale_release_name\":\"objectscale-manager\",\"performanceProfile\":\"Small\",\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"rsyslog_uds_dir\":\"/var/run/rsyslog\",\"rsyslog_uds_filename\":\"rsyslog.socket\",\"started\":true,\"telegraf_tls_enabled\":false,\"tls_enabled\":false,\"use_vault_for_ssl\":false}},\"global\":{\"communication_scheme\":\"http\",\"enableHealthcheck\":true,\"graphql_plugin_enabled\":true,\"graphql_release_name\":\"objectscale-graphql\",\"internal_dns\":\"kube-dns.kube-system.svc.cluster.local\",\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"monitoring_tag\":\"3.7.0.0-1146.a692701d\",\"objectscale_release_name\":\"objectscale-manager\",\"performanceProfile\":\"Small\",\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"rsyslog_uds_dir\":\"/var/run/rsyslog\",\"rsyslog_uds_filename\":\"rsyslog.socket\",\"started\":true,\"telegraf_tls_enabled\":false,\"tls_enabled\":false,\"use_vault_for_ssl\":false}},\"throttler\":{\"application_enabled\":false,\"common-monitoring-lib\":{\"exports\":{\"default\":{\"rsyslog_client_image_pull_policy\":\"IfNotPresent\"}},\"global\":{\"communication_scheme\":\"http\",\"enableHealthcheck\":true,\"graphql_plugin_enabled\":true,\"graphql_release_name\":\"objectscale-graphql\",\"internal_dns\":\"kube-dns.kube-system.svc.cluster.local\",\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"monitoring_tag\":\"3.7.0.0-1146.a692701d\",\"objectscale_release_name\":\"objectscale-manager\",\"performanceProfile\":\"Small\",\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"rsyslog_uds_dir\":\"/var/run/rsyslog\",\"rsyslog_uds_filename\":\"rsyslog.socket\",\"started\":true,\"telegraf_tls_enabled\":false,\"tls_enabled\":false,\"use_vault_for_ssl\":false}},\"config\":{\"alerter\":{\"component\":\"\",\"dir\":\"\",\"enabled\":false,\"interval\":\"5m\"},\"cq_dir\":\"cq/ecs\",\"fluxd_alerter\":{\"enabled\":true,\"prefix\":\"OBJST-MON\",\"symptoms\":{\"Critical\":4020},\"threshold\":6},\"http\":{\"bind_address\":8094}},\"global\":{\"communication_scheme\":\"http\",\"enableHealthcheck\":true,\"graphql_plugin_enabled\":true,\"graphql_release_name\":\"objectscale-graphql\",\"internal_dns\":\"kube-dns.kube-system.svc.cluster.local\",\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"monitoring_tag\":\"3.7.0.0-1146.a692701d\",\"objectscale_release_name\":\"objectscale-manager\",\"performanceProfile\":\"Small\",\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"rsyslog_uds_dir\":\"/var/run/rsyslog\",\"rsyslog_uds_filename\":\"rsyslog.socket\",\"started\":true,\"telegraf_tls_enabled\":false,\"tls_enabled\":false,\"use_vault_for_ssl\":false},\"image\":{\"pullPolicy\":\"IfNotPresent\",\"repository\":\"throttler\"},\"livenessProbe\":{\"probePath\":\"/metrics\"},\"rbac\":{\"create\":true},\"readinessProbe\":{\"probePath\":\"/metrics\"},\"replicas\":1,\"resources\":{\"limits\":{},\"requests\":{}},\"service\":{\"bind_address\":8094},\"serviceAccount\":{\"create\":true},\"startupProbe\":{\"enabled\":false,\"probePath\":\"/ping\"},\"tolerations\":[]}},\"event\":{\"image\":{\"repository\":\"event-service\"}},\"expandsp\":{\"image\":{\"repository\":\"provision\"}},\"fabricProxy\":{\"image\":{\"repository\":\"fabric-proxy\"},\"interface\":\"eth0\"},\"features\":{\"enableCRR\":false,\"enableNotification\":false,\"enableObjectStoreMetering\":false,\"enablePravega\":false,\"enableRRDriven\":true,\"enableRRDrivenPartialSR\":true,\"objectType\":\"objectSVC\"},\"fluentbitAgent\":{\"image\":{\"repository\":\"fluent-bit\"}},\"geoReceiver\":{\"image\":{\"repository\":\"geo-receiver\"},\"service\":{\"ports\":[{\"name\":\"geo\",\"port\":9094},{\"name\":\"external\",\"port\":12002,\"targetPort\":12002}]}},\"geoService\":{\"image\":{\"repository\":\"geoservice\"}},\"global\":{\"enableHealthcheck\":true,\"monitoring\":{\"enabled\":true},\"objectscale_release_name\":\"objectscale-manager\",\"product\":\"objectscale\",\"registry\":\"emccorp\",\"started\":true},\"healthChecks\":{\"connectivity\":{\"image\":{\"repository\":\"objectstore-connectivity\"}},\"preUpdate\":{\"image\":{\"repository\":\"objectstore-pre-update\"}}},\"managementGateway\":{\"image\":{\"repository\":\"management-gateway\"},\"service\":{\"ports\":[{\"name\":\"api\",\"port\":4443,\"targetPort\":4443}],\"type\":\"ClusterIP\"},\"tls\":{\"certificate\":{},\"certificateType\":\"SelfSigned\",\"signingRequest\":{\"keyAlgorithm\":\"RSA\",\"keySize\":2048,\"names\":{\"country\":\"USA\",\"locality\":\"Hopkinton\",\"organization\":\"Dell EMC\",\"organizationalUnit\":\"ObjectScale\",\"state\":\"MA\"}}}},\"metering\":{\"image\":{\"repository\":\"metering\"}},\"nds\":{\"image\":{\"repository\":\"nds\"}},\"objectStoreMetering\":{\"image\":{\"repository\":\"objmt\"}},\"objectsvc\":{\"extraConfig\":{},\"image\":{\"repository\":\"object-service\"}},\"ons\":{\"image\":{\"repository\":\"ons\"}},\"performanceProfile\":\"Small\",\"pravega\":{\"controller\":{\"service\":{\"type\":\"ClusterIP\"}},\"debugLogging\":false,\"externalAccess\":{\"enabled\":false},\"image\":{\"tag\":\"0.10.0-2824.d61af504c-SLTS_FEB_21_FLEX\"},\"options\":{\"metrics\":{\"influxDBName\":\"pravega\"}},\"segmentStore\":{\"service\":{\"type\":\"ClusterIP\"}}},\"pravegaRepository\":\"pravega\",\"product\":\"objectscale\",\"provision\":{\"enabled\":true,\"image\":{\"repository\":\"provision\"},\"newProvisionAPI\":false},\"pullPolicy\":\"IfNotPresent\",\"recordManager\":{\"image\":{\"repository\":\"record-manager\"}},\"rep\":{\"extraConfig\":{},\"image\":{\"repository\":\"rep\"}},\"resource\":{\"extraConfig\":{},\"image\":{\"repository\":\"resource-service\"}},\"rsyslog-client\":{\"common-monitoring-lib\":{\"exports\":{\"default\":{\"rsyslog_client_image_pull_policy\":\"IfNotPresent\",\"rsyslog_client_tag\":null}},\"global\":{\"enableHealthcheck\":true,\"monitoring\":{\"enabled\":true},\"objectscale_release_name\":\"objectscale-manager\",\"product\":\"objectscale\",\"registry\":\"emccorp\",\"started\":true}},\"config\":{\"logs_size_high_watermark\":\"_204800\",\"logs_size_low_watermark\":\"_153600\",\"maxage\":30,\"output\":{\"port\":10514,\"queue\":{\"size\":10000,\"type\":\"linkedList\"},\"resumeRetryCount\":100}},\"createLogrotateConfigs\":true,\"createRBAC\":false,\"global\":{\"enableHealthcheck\":true,\"monitoring\":{\"enabled\":true},\"objectscale_release_name\":\"objectscale-manager\",\"product\":\"objectscale\",\"registry\":\"emccorp\",\"started\":true}},\"s3\":{\"image\":{\"repository\":\"object-heads\"},\"service\":{\"ports\":[{\"name\":\"secure\",\"port\":443,\"targetPort\":9021},{\"name\":\"insecure\",\"port\":80,\"targetPort\":9020}],\"type\":\"ClusterIP\"},\"tls\":{\"certificate\":{},\"certificateType\":\"SelfSigned\",\"signingRequest\":{\"keyAlgorithm\":\"RSA\",\"keySize\":2048,\"names\":{\"country\":\"USA\",\"locality\":\"Hopkinton\",\"organization\":\"Dell EMC\",\"organizationalUnit\":\"ObjectScale\",\"state\":\"MA\"}}}},\"serviceDiscovery\":\"FabricProxySidecar\",\"spaceReclaimer\":{\"image\":{\"repository\":\"space-reclaimer\"}},\"started\":true,\"storageManagement\":{\"image\":{\"repository\":\"storagemanagement-service\"}},\"storageServer\":{\"image\":{\"repository\":\"storageserver\"},\"persistence\":{\"collocated\":false,\"erasureCoding\":null,\"protected\":true,\"size\":\"200Gi\"}},\"storageServerManager\":{\"image\":{\"repository\":\"storageserver-manager\"}},\"syslogAgent\":{\"image\":{\"repository\":\"rsyslog\"}},\"tag\":\"0.69.0\",\"topology\":null,\"zookeeper\":{\"image\":{\"repository\":\"zookeeper\",\"tag\":\"0.2.9\"},\"persistence\":{\"size\":\"20Gi\"}}}"
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: ecs-cluster
  componentKinds:
    - group: core
      kind: Service
    - group: core
      kind: Pod
    - group: apps
      kind: Deployment
    - group: apps
      kind: ReplicaSet
    - group: apps
      kind: StatefulSet
    - group: core
      kind: ConfigMap
    - group: core
      kind: Secret
    - group: core
      kind: PersistentVolumeClaim
    - group: rbac.authorization.k8s.io
      kind: Role
    - group: rbac.authorization.k8s.io
      kind: RoleBinding
    - group: core
      kind: ServiceAccount
    - group: ecs.dellemc.com
      kind: ECSCluster
    - group: influxdata.com
      kind: Influxdb
    - group: influxdata.com
      kind: Backup
    - group: influxdata.com
      kind: Restore
    - group: batch
      kind: Job
    - group: batch
      kind: CronJob
    - group: zookeeper.pravega.io
      kind: Zookeeper
  assemblyPhase: "Pending"
  descriptor:
    type: objectstore
    version: 0.69.0
    description: >
      Dell EMC ObjectScale Object Store
    keywords:
      - "deos"
      - "objectscale"
      - "object store"
      - "flex"
      - "ecs"
      - "s3"
    info:
      - "Copyright Â© 2019 Dell Inc. or its subsidiaries. All Rights Reserved."
---
# Source: ecs-cluster/templates/ecs-cluster.yaml
apiVersion: "ecs.dellemc.com/v1beta1"
kind: "ECSCluster"
metadata:
  name: ecs-cluster
  namespace: default
  labels:
    app.kubernetes.io/name: ecs-cluster
    app.kubernetes.io/instance: ecs-cluster
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.69.0
    app.kubernetes.io/part-of: ecs-cluster
    helm.sh/chart: ecs-cluster-0.69.0
    operator: objectscale-operator
    product: objectscale
    release: ecs-cluster
spec:
  performanceProfile: Small

  atlas:
    replicas: 1
    labels:
      release: ecs-cluster
    image:
      repository: emccorp/atlas
      tag: 1.1.3
      pullPolicy: IfNotPresent
    persistence:
      spec:
        storageClassName: 
        resources:
          requests:
            storage: 32Gi

  chunkManager:
    labels:
      app.kubernetes.io/namespace: default
      objectscale.dellemc.com/logging-inject: "true"
      objectscale.dellemc.com/logging-release-name: "ecs-cluster"
    image:
      repository: emccorp/chunk-manager
      tag: 0.69.0
      pullPolicy: IfNotPresent

  blob:
    labels:
      app.kubernetes.io/namespace: default
      objectscale.dellemc.com/logging-inject: "true"
      objectscale.dellemc.com/logging-release-name: "ecs-cluster"
    image:
      repository: emccorp/blob-service
      tag: 0.69.0
      pullPolicy: IfNotPresent

  objectsvc:
    labels:
      app.kubernetes.io/namespace: default
      objectscale.dellemc.com/logging-inject: "true"
      objectscale.dellemc.com/logging-release-name: "ecs-cluster"
    image:
      repository: emccorp/object-service
      tag: 0.69.0
      pullPolicy: IfNotPresent

  ons:
    labels:
      app.kubernetes.io/namespace: default
      objectscale.dellemc.com/logging-inject: "true"
      objectscale.dellemc.com/logging-release-name: "ecs-cluster"
    image:
      repository: emccorp/ons
      tag: 0.69.0
      pullPolicy: IfNotPresent

  nds:
    labels:
      app.kubernetes.io/namespace: default
      objectscale.dellemc.com/logging-inject: "true"
      objectscale.dellemc.com/logging-release-name: "ecs-cluster"
    image:
      repository: emccorp/nds
      tag: 0.69.0
      pullPolicy: IfNotPresent

  objectStoreMetering:
    labels:
      app.kubernetes.io/namespace: default
      objectscale.dellemc.com/logging-inject: "true"
      objectscale.dellemc.com/logging-release-name: "ecs-cluster"
    image:
      repository: emccorp/objmt
      tag: 0.69.0
      pullPolicy: IfNotPresent


  rep:
    labels:
      app.kubernetes.io/namespace: default
      objectscale.dellemc.com/logging-inject: "true"
      objectscale.dellemc.com/logging-release-name: "ecs-cluster"
    image:
      repository: emccorp/rep
      tag: 0.69.0
      pullPolicy: IfNotPresent

  zookeeper:
    labels:
      app: zookeeper
      component: zk
      release: ecs-cluster
    image:
      repository: emccorp/zookeeper
      tag: 0.2.9
      pullPolicy: IfNotPresent
    persistence:
      spec:
        resources:
          requests:
            storage: 20Gi

  bookkeeper:
    image:
      imageSpec:
        repository: "emccorp/bookkeeper"
        pullPolicy: IfNotPresent
    version:  0.9.0-2725.77b13981a
    blockOwnerDeletion:  false
    autoRecovery: true
    probes:
      readinessProbe:
        initialDelaySeconds: 20
        periodSeconds: 120
        failureThreshold: 9
        successThreshold: 1
        timeoutSeconds: 45
      livenessProbe:
        initialDelaySeconds: 60
        periodSeconds: 15
        failureThreshold: 4
        successThreshold: 1
        timeoutSeconds: 5
    storage:
      ledgerVolumeClaimTemplate:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 10Gi
      journalVolumeClaimTemplate:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 10Gi
      indexVolumeClaimTemplate:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 5Gi
    options:
      log.level: INFO

  pravega:
    version: 0.10.0-2824.d61af504c-SLTS_FEB_21_FLEX
    externalAccess:
      enabled: false
      
      
    pravega:
      controllerExtServiceType: ClusterIP
      segmentStoreExtServiceType: ClusterIP
      image:
        repository: "emccorp/pravega"
        pullPolicy: IfNotPresent
      options:
        controller.metrics.influxDB.connect.db.name: pravega
        metrics.influxDB.connect.db.name: pravega
        metrics.influxDB.reporter.enable: "true"
        metrics.statistics.enable: "true"
        controller.metrics.influxDB.reporter.enable: "true"
        controller.metrics.statistics.enable: "true"
      debugLogging: false

  storageServer:
    serviceAccount: ecs-cluster
    labels:
      app.kubernetes.io/namespace: default
      objectscale.dellemc.com/logging-inject: "true"
      objectscale.dellemc.com/logging-release-name: "ecs-cluster"

    image:
      repository: emccorp/storageserver
      tag: 0.69.0
      pullPolicy: IfNotPresent

    volumes:
      protected: true
      volumesCount: 
      resources:
        requests:
          storage: 200Gi

  storageServerManager:
    labels:
      app.kubernetes.io/namespace: default
      objectscale.dellemc.com/logging-inject: "true"
      objectscale.dellemc.com/logging-release-name: "ecs-cluster"

    image:
      repository: emccorp/storageserver-manager
      tag: 0.69.0
      pullPolicy: IfNotPresent

  recordManager:
    labels:
      app.kubernetes.io/namespace: default
      objectscale.dellemc.com/logging-inject: "true"
      objectscale.dellemc.com/logging-release-name: "ecs-cluster"

    image:
      repository: emccorp/record-manager
      tag: 0.69.0
      pullPolicy: IfNotPresent

  storageManagement:
    labels:
      app.kubernetes.io/namespace: default
      objectscale.dellemc.com/logging-inject: "true"
      objectscale.dellemc.com/logging-release-name: "ecs-cluster"

    image:
      repository: emccorp/storagemanagement-service
      tag: 0.69.0
      pullPolicy: IfNotPresent

  metering:
    labels:
      app.kubernetes.io/namespace: default
      objectscale.dellemc.com/logging-inject: "true"
      objectscale.dellemc.com/logging-release-name: "ecs-cluster"

    image:
      repository: emccorp/metering
      tag: 0.69.0
      pullPolicy: IfNotPresent

  event:
    labels:
      app.kubernetes.io/namespace: default
      objectscale.dellemc.com/logging-inject: "true"
      objectscale.dellemc.com/logging-release-name: "ecs-cluster"

    image:
      repository: emccorp/event-service
      tag: 0.69.0
      pullPolicy: IfNotPresent
    pod:
      env:
        - name: "EVENTSVC_APP_NAME"
          value: "ecs-cluster"
        - name: "NAMESPACE"
          value: "default"

  resource:
    labels:
      app.kubernetes.io/namespace: default
      objectscale.dellemc.com/logging-inject: "true"
      objectscale.dellemc.com/logging-release-name: "ecs-cluster"

    image:
      repository: emccorp/resource-service
      tag: 0.69.0
      pullPolicy: IfNotPresent


  controlPlane:
    labels:
      app.kubernetes.io/namespace: default
      objectscale.dellemc.com/logging-inject: "true"
      objectscale.dellemc.com/logging-release-name: "ecs-cluster"

    image:
      repository: emccorp/control-service
      tag: 0.69.0
      pullPolicy: IfNotPresent

  diagnostic:
    labels:
      app.kubernetes.io/namespace: default
      objectscale.dellemc.com/logging-inject: "true"
      objectscale.dellemc.com/logging-release-name: "ecs-cluster"

    image:
      repository: emccorp/diagnostic-service
      tag: 0.69.0
      pullPolicy: IfNotPresent
    service:
      ports:
      - name: diag
        port: 9100
        targetPort: 9100
      - name: diagweb
        port: 9101
        targetPort: 9101
      type: ClusterIP

  geoService:
    labels:
      app.kubernetes.io/namespace: default
      objectscale.dellemc.com/logging-inject: "true"
      objectscale.dellemc.com/logging-release-name: "ecs-cluster"
    image:
      repository: emccorp/geoservice
      tag: 0.69.0
      pullPolicy: IfNotPresent

  geoReceiver:
    labels:
      app.kubernetes.io/namespace: default
      objectscale.dellemc.com/logging-inject: "true"
      objectscale.dellemc.com/logging-release-name: "ecs-cluster"

    image:
      repository: emccorp/geo-receiver
      tag: 0.69.0
      pullPolicy: IfNotPresent
    service:
      ports:
      - name: geo
        port: 9094
      - name: external
        port: 12002
        targetPort: 12002

  spaceReclaimer:
    labels:
      app.kubernetes.io/namespace: default
      objectscale.dellemc.com/logging-inject: "true"
      objectscale.dellemc.com/logging-release-name: "ecs-cluster"

    image:
      repository: emccorp/space-reclaimer
      tag: 0.69.0
      pullPolicy: IfNotPresent

  control:
    labels:
      app.kubernetes.io/namespace: default
      objectscale.dellemc.com/logging-inject: "true"
      objectscale.dellemc.com/logging-release-name: "ecs-cluster"

    image:
      repository: emccorp/object-control
      tag: 0.69.0
      pullPolicy: IfNotPresent

  s3:
    labels:
      app.kubernetes.io/namespace: default
      objectscale.dellemc.com/logging-inject: "true"
      objectscale.dellemc.com/logging-release-name: "ecs-cluster"
    replicas: 

    image:
      repository: emccorp/object-heads
      tag: 0.69.0
      pullPolicy: IfNotPresent
    service:
      ports:
      - name: secure
        port: 443
        targetPort: 9021
      - name: insecure
        port: 80
        targetPort: 9020
      type: ClusterIP
    tls:
      certificate: {}
      certificateType: SelfSigned
      signingRequest:
        keyAlgorithm: RSA
        keySize: 2048
        names:
          country: USA
          locality: Hopkinton
          organization: Dell EMC
          organizationalUnit: ObjectScale
          state: MA

  managementGateway:
    labels:
      app.kubernetes.io/namespace: default
      objectscale.dellemc.com/logging-inject: "true"
      objectscale.dellemc.com/logging-release-name: "ecs-cluster"
      objectscale.dellemc.com/logging-inject-logrotate: "true"
    image:
      repository: emccorp/management-gateway
      tag: 0.69.0
      pullPolicy: IfNotPresent
    service:
      ports:
      - name: api
        port: 4443
        targetPort: 4443
      type: ClusterIP
    tls:
      certificate: {}
      certificateType: SelfSigned
      signingRequest:
        keyAlgorithm: RSA
        keySize: 2048
        names:
          country: USA
          locality: Hopkinton
          organization: Dell EMC
          organizationalUnit: ObjectScale
          state: MA

  provision:
    enabled: true
    newProvisionAPI: false
    image:
      repository: emccorp/provision
      tag: 0.69.0
      pullPolicy: IfNotPresent

  expandsp:
    image:
      repository: emccorp/provision
      tag: 0.69.0
      pullPolicy: IfNotPresent

  cmfswitch:
    image:
      repository: emccorp/cmf-switch
      tag: 0.69.0
      pullPolicy: IfNotPresent

  syslogAgent:
    image:
      repository: emccorp/rsyslog
      tag: 0.69.0
      pullPolicy: IfNotPresent

  fluentbitAgent:
    image:
      repository: emccorp/fluent-bit
      tag: 0.69.0
      pullPolicy: IfNotPresent

  fabricProxy:
    interface: eth0
    image:
      repository: emccorp/fabric-proxy
      tag: 0.69.0
      pullPolicy: IfNotPresent

  enableCRR: false

  enableObjectStoreMetering: false

  enablePravega: false

  enableNotification: false

  enableRRDriven: true
  enableRRDrivenPartialSR: true

  objectType: objectSVC

  deploymentDeadlineSeconds: 2400
---
# Source: ecs-cluster/charts/ecs-monitoring/charts/influxdb/templates/influxdb.yaml
apiVersion: db.ecs.dellemc.com/v1
kind: Influxdb
metadata:
  name: "ecs-cluster-influxdb"
  labels:
    app.kubernetes.io/name: "ecs-cluster-influxdb"
    chart: "influxdb-0.54.0"
    release: "ecs-cluster"
    heritage: "Helm"
spec:
  podManagementPolicy: Parallel
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: ecs-cluster-influxdb
  serviceName: "ecs-cluster-influxdb"
  serviceAddressTemplate: "ecs-cluster-influxdb-%d.ecs-cluster-influxdb.default.svc.cluster.local"
  replicasConfigMapName: ecs-cluster-influxdb-replicas
  replicasConfigName: replicas.json
  replicasPerPartition: 3
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ecs-cluster-influxdb
        release: "ecs-cluster"
        
        objectscale.dellemc.com/logging-inject: "true"
        objectscale.dellemc.com/logging-release-name: "ecs-cluster"
        app.kubernetes.io/namespace: "default"
        
        objectscale.dellemc.com/logging-inject-logrotate: "true"
      annotations:
        
        objectscale.dellemc.com/logging-release-name: "ecs-cluster"
    spec:
      shareProcessNamespace: true
      affinity:
        # Use pod anti-affinity rules to deploy statefulset pods one-per-node.
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: "app.kubernetes.io/name"
                operator: In
                values:
                - ecs-cluster-influxdb
            topologyKey: "kubernetes.io/hostname"
      initContainers:
      - name: influxdb-init
        image: "emccorp/influxdb:3.7.0.0-1146.a692701d"
        imagePullPolicy: "IfNotPresent"
        resources:
          requests:
            memory: 300Mi
            ephemeral-storage: 850Mi
          limits:
            memory: 300Mi
            ephemeral-storage: 850Mi
        ports:
        - name: api
          containerPort: 8086
        env:
        - name: INIT_CTNR
          value: "1"
        - name: INFLUXDB_HTTP_PORT_DEFAULT
          value: "8086"
        - name: INFLUXDB_RPC_PORT
          value: "8088"
        volumeMounts:
        - name: ecs-cluster-influxdb-data
          mountPath: /data/influxdb
        - name: config
          mountPath: /data/influxdb/conf/
        - name: init
          mountPath: /docker-entrypoint-initdb.d
        - name: log
          mountPath: /var/log
        - mountPath: /crash-dump
          name: crash-dump
      containers:
      - name: influxdb
        image: "emccorp/influxdb:3.7.0.0-1146.a692701d"
        imagePullPolicy: "IfNotPresent"
        command: ["bash"]
        args: ["-c", "echo /crash-dump/core-%e > /proc/sys/kernel/core_pattern; ulimit -c unlimited; GOTRACEBACK=crash /entrypoint.sh influxd"]
        resources:
          requests:
            memory: 460Mi
            ephemeral-storage: 1170Mi
          limits:
            memory: 460Mi
            ephemeral-storage: 1170Mi
        ports:
        - name: api
          containerPort: 8086
        env:
        - name: INFLUXDB_HTTP_PORT_DEFAULT
          value: "8086"
        - name: INFLUXDB_RPC_PORT
          value: "8088"
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        
        volumeMounts:
        - name: ecs-cluster-influxdb-data
          mountPath: /data/influxdb
        - name: config
          mountPath: /data/influxdb/conf/
        - name: log
          mountPath: /var/log
        - mountPath: /crash-dump
          name: crash-dump
        livenessProbe:
          httpGet:
            path: /ping
            port: api
            scheme: HTTP
          timeoutSeconds: 30
          periodSeconds: 60
          initialDelaySeconds: 180
          failureThreshold: 360
        readinessProbe:
          httpGet:
            path: /ping
            port: api
            scheme: HTTP
          periodSeconds: 60
          timeoutSeconds: 30
          initialDelaySeconds: 120
          failureThreshold: 360
      
      - name: telegraf
        image: "emccorp/telegraf:3.7.0.0-1146.a692701d"
        imagePullPolicy: "IfNotPresent"
        command: ["bash"]
        args: ["-c", "echo /crash-dump/core-%e > /proc/sys/kernel/core_pattern; ulimit -c unlimited; GOTRACEBACK=crash HOST_PROC=/proc telegraf --config  /etc/telegraf/telegraf.conf --config-directory /etc/telegraf/telegraf.d/"]
        volumeMounts:
        - name: ecs-cluster-influxdb-data
          mountPath: /pv
        - name: telegraf-sidecar-config
          mountPath: /etc/telegraf
        - name: additional-configs
          mountPath: /etc/telegraf/telegraf.d
        env:
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
      
      - name: cron
        image: "emccorp/influxdb:3.7.0.0-1146.a692701d"
        imagePullPolicy: "IfNotPresent"
        command: ["bash"]
        args: ["-c", "echo /crash-dump/core-%e > /proc/sys/kernel/core_pattern; ulimit -c unlimited; GOTRACEBACK=crash env >> /etc/environment; cron -n "]
        env:
        - name: INFLUXDB_HTTP_PORT_DEFAULT
          value: "8086"
        - name: INFLUXDB_RPC_PORT
          value: "8088"
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        volumeMounts:
        - name: ecs-cluster-influxdb-data
          mountPath: /data/influxdb
        - name: config
          mountPath: /data/influxdb/conf/
        - name: log
          mountPath: /var/log
        - name: restore-ranges-cron-config
          mountPath: /etc/cron.d
        - mountPath: /crash-dump
          name: crash-dump
      volumes:
      - name: config
        configMap:
          name: ecs-cluster-influxdb
      - name: init
        configMap:
          name: ecs-cluster-influxdb-init
      
      - name: telegraf-sidecar-config
        configMap:
          name: ecs-cluster-telegraf-sidecar
      - name: additional-configs
        configMap:
          name: ecs-cluster-influxdb-telegraf-sidecar-custom-config
      - name: log
        emptyDir: {}
      - name: restore-ranges-cron-config
        configMap:
          name: ecs-cluster-influxdb-cron-config
      - name: crash-dump
        emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: ecs-cluster-influxdb-data
        annotations:
        labels:
          release: ecs-cluster
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "20Gi"
---
# Source: ecs-cluster/templates/initial-user-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: ecs-cluster-initial-user
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-delete-policy": "before-hook-creation"
  labels:
    app.kubernetes.io/name: ecs-cluster
    app.kubernetes.io/version: 0.69.0
    app.kubernetes.io/instance: ecs-cluster
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: ecs-cluster-0.69.0
    product: objectscale
    release: ecs-cluster
  namespace: default
stringData:
  # TODO JIRA-4281 Migrate usage to standardize on upper cased field formats
  accessKey:  jjekempg89l5wtli
  secretKey:  jg4o0vidnd37wwd3
  managementKey:  spsizppwcxix8wpi
  # new format
  ACCESS_KEY_ID:  jjekempg89l5wtli
  SECRET_KEY:  jg4o0vidnd37wwd3
  MANAGEMENT_KEY:  spsizppwcxix8wpi
---
# Source: ecs-cluster/templates/pravega-user-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: ecs-cluster-pravega-user
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-delete-policy": "before-hook-creation"
  labels:
    app.kubernetes.io/name: ecs-cluster
    app.kubernetes.io/version: 0.69.0
    app.kubernetes.io/instance: ecs-cluster
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: ecs-cluster-0.69.0
    product: objectscale
    release: ecs-cluster
  namespace: default
type: Opaque
stringData:
  ACCESS_KEY_ID:  ""
  SECRET_KEY:  ""
---
# Source: ecs-cluster/templates/vdc-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: ecs-cluster-vdc
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-delete-policy": "before-hook-creation"
  labels:
    app.kubernetes.io/name: ecs-cluster
    app.kubernetes.io/version: 0.69.0
    app.kubernetes.io/instance: ecs-cluster
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: ecs-cluster-0.69.0
    product: objectscale
    release: ecs-cluster
  namespace: default
stringData:
  ecs-cluster: bXY2em54Z3Nmd2hwY24wNA==
---
# Source: ecs-cluster/templates/test/deos-objectstore-test.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "ecs-cluster-deos-hc"
  annotations:
    "helm.sh/hook": test-success
  labels:
    release: "ecs-cluster"
  namespace: "default"
spec:
  containers:
  - command: ["sh", "/run-deos-hc.sh"]
    env:
    - name: POD_NAMESPACE
      value: "default"
    - name: RELEASE_NAME
      value: "ecs-cluster"
    - name: POD_NAME
      valueFrom:
        fieldRef:
          fieldPath: metadata.name
    image: emccorp/deos-hc:0.69.0
    imagePullPolicy: IfNotPresent
    name: hc-container
  restartPolicy: Never
---
# Source: objectscale-manager/charts/atlas-operator/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: atlas-operator
  namespace: default
  labels:
    app.kubernetes.io/name: atlas-operator
    helm.sh/chart: atlas-operator-0.31.0
    app.kubernetes.io/instance: objectscale-manager
    app.kubernetes.io/version: "0.13.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: objectscale-manager/charts/federation/templates/federation-rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: federation
  namespace: default
  labels:
    app.kubernetes.io/name: "federation"
    app.kubernetes.io/version: 0.68.2
    app.kubernetes.io/instance: objectscale-manager
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: federation-0.68.2
    release: objectscale-manager
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/fluxd/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: objectscale-manager-fluxd
  labels:
    app.kubernetes.io/name: objectscale-manager-fluxd
    app.kubernetes.io/instance: objectscale-manager
    app.kubernetes.io/managed-by: Helm
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/influxdb-operator/templates/service_account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: objectscale-manager-influxdb-operator
  labels:
    app.kubernetes.io/name: objectscale-manager-influxdb-operator
    app.kubernetes.io/instance: objectscale-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.68.2"
    app.kubernetes.io/part-of: objectscale-manager
    helm.sh/chart: influxdb-operator-0.68.2
    release: objectscale-manager
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/prometheus-alerts/templates/serviceaccount.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
apiVersion: v1
kind: ServiceAccount
metadata:
  name: objectscale-manager-prometheus-alerts
  labels:
    app.kubernetes.io/name: objectscale-manager-prometheus-alerts
    app.kubernetes.io/instance: objectscale-manager
    app.kubernetes.io/managed-by: Helm
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/statefuldaemonset-operator/templates/service_account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: objectscale-manager-statefuldaemonset-operator
  labels:
    app.kubernetes.io/name: objectscale-manager-statefuldaemonset-operator
    app.kubernetes.io/instance: objectscale-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.68.2"
    app.kubernetes.io/part-of: objectscale-manager
    helm.sh/chart: statefuldaemonset-operator-0.68.2
    release: objectscale-manager
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/telegraf/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: objectscale-manager-telegraf
  labels:
    app.kubernetes.io/name: objectscale-manager-telegraf
    app.kubernetes.io/instance: objectscale-manager
    app.kubernetes.io/managed-by: Helm
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/throttler/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: objectscale-manager-throttler
  labels:
    app.kubernetes.io/name: objectscale-manager-throttler
    app.kubernetes.io/instance: objectscale-manager
    app.kubernetes.io/managed-by: Helm
---
# Source: objectscale-manager/charts/service-pod/templates/rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: objectscale-manager-service-pod-sa
  namespace: default
  labels:
    release: objectscale-manager
    product: objectscale
---
# Source: objectscale-manager/templates/healthcheck-rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: objectscale-manager-healthchecks
  namespace: default
---
# Source: objectscale-manager/templates/operator-rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: objectscale-operator
  namespace: default
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/instance: objectscale-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.69.0
    app.kubernetes.io/component: objectscale-operator
    app.kubernetes.io/part-of: objectscale-manager
    helm.sh/chart: objectscale-manager-0.69.0
    release: objectscale-manager
    operator: objectscale-operator
    product: objectscale
---
# Source: objectscale-manager/charts/service-pod/templates/creds_secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: objectscale-manager-service-pod-secrets
  namespace: default
  labels:
    release: objectscale-manager
    product: objectscale
    app: objectscale-manager-service-pod
type: Opaque
stringData:
  credentials.conf: |-
    remoteUserCredentials:
      user: root
      group: adm
      password: ChangeMe
---
# Source: objectscale-manager/charts/federation/templates/fedsvc-local-objectstores-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
    name: fedsvc-local-objectstores
    namespace: default
    labels:
      app.kubernetes.io/name: fedsvc
      app.kubernetes.io/instance: objectscale-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/version: 0.68.2
      app.kubernetes.io/part-of: objectscale-manager
      helm.sh/chart: federation-0.68.2
      release: objectscale-manager
      operator: objectscale-operator
      product: objectscale
    annotations:
        com.dellemc.kahm.subscribed: "true"
data:
---
# Source: objectscale-manager/charts/federation/templates/fedsvc-local-services-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
    name: fedsvc-local-services
    namespace: default
    labels:
      app.kubernetes.io/name: fedsvc
      app.kubernetes.io/instance: objectscale-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/version: 0.68.2
      app.kubernetes.io/part-of: objectscale-manager
      helm.sh/chart: federation-0.68.2
      release: objectscale-manager
      operator: objectscale-operator
      product: objectscale
    annotations:
        com.dellemc.kahm.subscribed: "true"
data:
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/fluxd/templates/configs-confd-template.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#

apiVersion: v1
kind: ConfigMap
metadata:
  name: objectscale-manager-fluxd-confd-template
  labels:
    app.kubernetes.io/name: objectscale-manager-fluxd
    app.kubernetes.io/instance: objectscale-manager
    app.kubernetes.io/managed-by: Helm
data:
  fluxd_flex.hl.json.toml: |+
    [template]
    src = "fluxd_flex.hl.json.tmpl"
    dest = "/etc/fluxd/hl.json"
    keys = [
        "/replicas",
    ]
    reload_cmd = "pkill fluxd"
  fluxd_flex.env.toml: |+
    [template]
    src = "fluxd_flex.env.tmpl"
    dest = "/etc/fluxd/fluxd.env"
    keys = [
        "/replicas",
    ]
    reload_cmd = "pkill fluxd"
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/fluxd/templates/configs-template.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: objectscale-manager-fluxd-configs-templates
  labels:
    app: "objectscale-manager-fluxd"
    chart: "fluxd-0.54.0"
    release: objectscale-manager
data:
  fluxd_flex.hl.json.tmpl: |-
    {
      "range-selection-enabled": true,
      "store-sync-enabled": true,
      "store-type": "k8s",
      "root-store-location": "fluxd-hostlookup-influxdb",
      "start-sleep-max": "30s",
      "update-interval": "5m",
      "check-interval": "5m",
      "writer-check-interval": "200s",
      "history-duration": "120h",
      "init-retry-interval": "20s",
      "request-timeout": "30s",
      "startup-ranges-fill-timeout": "3m",
      "startup-ping-timeout": "20s",
      "online-ping-interval": "30s",
      "online-ping-retries": 3,{{- $replicas := atoi (getv "/replicas" "1") }}
    {{- $replicas_per_partition := atoi (getenv "INFLUXDB_REPLICAS_PER_PARTITION" "3") }}
      {{- $partitions_count := div $replicas $replicas_per_partition }}
      "scale-partitions-count": {{ $partitions_count }},
      "scale-replicas-per-partition": {{ $replicas_per_partition }}
    }
  fluxd_flex.env.tmpl: |-
    {{- $release_name := getenv "RELEASE_NAME" "" -}}
    {{- $release_namespace := getenv "RELEASE_NAMESPACE" "" -}}
    {{- $tls_enabled := getenv "TLS_ENABLED" "" -}}
    {{- $replicas := atoi (getv "/replicas" "1") -}}STORAGE_HOSTS=
    {{- range $i, $e := seq 1 ($replicas) -}}
    {{- if $i}},{{end -}}
    {{- if eq $tls_enabled "true" -}}127.0.0.1{{$i}}:8{{$i}}86
    {{- else -}}{{- $release_name }}-influxdb-{{$i}}.{{ $release_name }}-influxdb.{{ $release_namespace }}.svc.cluster.local:8086
    {{- end -}}
    {{- end }}
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/fluxd/templates/logger-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: objectscale-manager-fluxd-logger-config
  labels:
    app: "objectscale-manager-fluxd"
    chart: "fluxd-0.54.0"
    release: objectscale-manager
data:
  logger.json: |-
    {
      "maxsize": 50,
      "maxbackups": 1,
      "maxage": 60,
      "compress": false
    }
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/grafana/templates/dashboards.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "objectscale-manager-grafana-dashboards-internal"
  labels:
    release: objectscale-manager
data:
  capacity_ec.json: |-
    {
      "__inputs": [],
      "__requires": [
        {
          "type": "grafana",
          "id": "grafana",
          "name": "Grafana",
          "version": "6.2.5ecs"
        },
        {
          "type": "panel",
          "id": "graph",
          "name": "Graph",
          "version": ""
        },
        {
          "type": "panel",
          "id": "table",
          "name": "Table",
          "version": ""
        }
      ],
      "annotations": {
        "list": [
          {
            "builtIn": 1,
            "datasource": "-- Grafana --",
            "enable": true,
            "hide": true,
            "iconColor": "rgba(0, 211, 255, 1)",
            "name": "Annotations & Alerts",
            "type": "dashboard"
          }
        ]
      },
      "editable": true,
      "gnetId": null,
      "graphTooltip": 0,
      "id": null,
      "links": [],
      "panels": [
        {
          "columns": [],
          "fontSize": "100%",
          "gridPos": {
            "h": 3,
            "w": 24,
            "x": 0,
            "y": 0
          },
          "id": 2,
          "links": [],
          "options": {},
          "pageSize": null,
          "scroll": true,
          "showHeader": true,
          "sort": {
            "col": 0,
            "desc": true
          },
          "styles": [
            {
              "alias": "Time",
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "pattern": "Time",
              "type": "hidden"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "decimals": 2,
              "pattern": "Field",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Measurement",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Value",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "Coding Rate",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "coding_rate",
              "thresholds": [],
              "type": "number",
              "unit": "Bps"
            },
            {
              "alias": "Coded (%)",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "coded_ratio",
              "thresholds": [],
              "type": "number",
              "unit": "percentunit"
            },
            {
              "alias": "Total Coded Data",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "total_coded_data",
              "thresholds": [],
              "type": "number",
              "unit": "bytes"
            },
            {
              "alias": "Total Coding Data",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "total_coding_data",
              "thresholds": [],
              "type": "number",
              "unit": "bytes"
            },
            {
              "alias": "Est. Time to Complete",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 1,
              "mappingType": 1,
              "pattern": "est_time",
              "thresholds": [],
              "type": "number",
              "unit": "s"
            }
          ],
          "targets": [
            {
              "query": "import \"csv\"\ndefault = csv.from(csv:\"#datatype,string,long,string,double\n#group,false,false,true,false\n#default,_result,,,\n,result,table,_field,_value\n,,100,total_coding_data,0\")\n\ndata = from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_ec_region\"\r and r._field == \"total_coding_data\")\r\n|> range($range)\r\n|> last()\r\n|> keep(columns: [\"_field\", \"_value\"])\n\nunion(tables: [default, data])\n\r\n\r\r\r\n|> pivot(rowKey:[], columnKey: [\"_field\"], valueColumn: \"_value\")\n",
              "refId": "B",
              "resultFormat": "table"
            },
            {
              "query": "import \"csv\"\ndefault = csv.from(csv:\"#datatype,string,long,string,double\n#group,false,false,true,false\n#default,_result,,,\n,result,table,_field,_value\n,,100,total_coded_data,0\")\n\ndata = from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_ec_region\"\r and r._field == \"total_coded_data\")\r\n|> range($range)\r\n|> last()\r\n|> keep(columns: [\"_field\", \"_value\"])\n\nunion(tables: [default, data])\n\r\n\r\r\r\n\r\n|> pivot(rowKey:[], columnKey: [\"_field\"], valueColumn: \"_value\")",
              "refId": "A",
              "resultFormat": "table"
            },
            {
              "query": "import \"csv\"\ndefault = csv.from(csv:\"#datatype,string,long,string,double\n#group,false,false,true,false\n#default,_result,,,\n,result,table,_field,_value\n,,100,total_coding_data,0\n,,101,total_coded_data,0\")\n\ndata = from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_ec_region\"\r and (r._field == \"total_coding_data\" or r._field == \"total_coded_data\"))\r\n|> range($range)\r\n|> last()\r\n|> keep(columns: [\"_field\", \"_value\"])\n\nunion(tables: [default, data])\n\r\n\r\r\r\n\r\n|> pivot(rowKey:[], columnKey: [\"_field\"], valueColumn: \"_value\")\n|> map(fn: (r) => ({\n    coded_ratio:if r.total_coding_data <= 0 then 0.0\n                else if r.total_coded_data > r.total_coding_data then 1.0\n                else r.total_coded_data / r.total_coding_data\n}))\n",
              "refId": "D",
              "resultFormat": "table"
            },
            {
              "query": "import \"csv\"\ndefault = csv.from(csv:\"#datatype,string,long,string,double\n#group,false,false,true,false\n#default,_result,,,\n,result,table,_field,_value\n,,100,coding_rate,0\")\n\ndata = from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_ec_rate_region\"\r and r._field == \"coding_rate\")\r\n|> range($range)\r\n|> last()\n\r\n|> keep(columns: [\"_field\", \"_value\"])\n\nunion(tables: [default, data])\n\r\n\r\r\r\n\r\n|> pivot(rowKey:[], columnKey: [\"_field\"], valueColumn: \"_value\")",
              "refId": "C",
              "resultFormat": "table"
            },
            {
              "query": "import \"csv\"\ndefault = csv.from(csv:\"#datatype,string,long,string,double\n#group,false,false,true,false\n#default,_result,,,\n,result,table,_field,_value\n,,100,total_coding_data,0\n,,101,total_coded_data,0\n,,102,coding_rate,0\")\n\ndata = from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => (r._measurement == \"cq_capacity_ec_region\"\r and (r._field == \"total_coding_data\" or r._field == \"total_coded_data\")) or (r._measurement == \"cq_capacity_ec_rate_region\"\r and r._field == \"coding_rate\"))\r\n|> range($range)\r\n|> last()\r\n|> keep(columns: [\"_field\", \"_value\"])\n\nunion(tables: [default, data])\n\r\n|> pivot(rowKey:[], columnKey: [\"_field\"], valueColumn: \"_value\")\n|> map(fn: (r) => ({\n       pending_data: r.total_coding_data - r.total_coded_data,\n       coding_rate: r.coding_rate\n       }))\n|> map(fn: (r) => ({\n       est_time: if r.pending_data > 0 then r.pending_data / (r.coding_rate) else 0.0\n       }))",
              "refId": "E",
              "resultFormat": "table"
            }
          ],
          "timeFrom": null,
          "timeShift": null,
          "title": "Erasure Encoding",
          "transform": "table",
          "type": "table"
        },
        {
          "collapsed": true,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 3
          },
          "id": 4,
          "panels": [
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "fill": 1,
              "gridPos": {
                "h": 8,
                "w": 12,
                "x": 0,
                "y": 4
              },
              "id": 6,
              "legend": {
                "avg": false,
                "current": true,
                "max": false,
                "min": false,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_ec_region\"\r and r._field == \"total_coding_data\")\r\n|> range($range)\r\n|> keep(columns: [\"_value\", \"_time\"])\n|> map(fn: (r) => ({_value: if r._value < 0 then 0.0 else r._value, _time: r._time}))",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Total Coding Data",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "bytes",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "fill": 1,
              "gridPos": {
                "h": 8,
                "w": 12,
                "x": 12,
                "y": 4
              },
              "id": 7,
              "legend": {
                "avg": false,
                "current": true,
                "max": false,
                "min": false,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_ec_region\"\r and r._field == \"total_coded_data\")\r\n|> range($range)\r\n|> keep(columns: [\"_value\", \"_time\"])\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Total Coded Data",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "bytes",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "fill": 1,
              "gridPos": {
                "h": 8,
                "w": 12,
                "x": 0,
                "y": 12
              },
              "id": 9,
              "legend": {
                "avg": false,
                "current": true,
                "max": false,
                "min": false,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_ec_region\"\r and (r._field == \"total_coding_data\" or r._field == \"total_coded_data\"))\r\n|> range($range)\r\n|> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n|> map(fn: (r) => ({_value:\n   if r.total_coding_data <= 0 then 0.0\n   else if r.total_coded_data > r.total_coding_data then 1.0\n   else r.total_coded_data / r.total_coding_data,\n   _time: r._time}))\n|> keep(columns: [\"_value\", \"_time\"])\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Coded (%)",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 2,
                  "format": "percentunit",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "fill": 1,
              "gridPos": {
                "h": 8,
                "w": 12,
                "x": 12,
                "y": 12
              },
              "id": 8,
              "legend": {
                "avg": false,
                "current": true,
                "max": false,
                "min": false,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_ec_rate_region\"\r and r._field == \"coding_rate\")\r\n|> range($range)\r\n|> keep(columns: [\"_value\", \"_time\"])\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Coding Rate (per second)",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "Bps",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            }
          ],
          "title": "History",
          "type": "row"
        }
      ],
      "refresh": false,
      "schemaVersion": 18,
      "style": "dark",
      "tags": [],
      "templating": {
        "list": []
      },
      "time": {
        "from": "now-24h",
        "to": "now"
      },
      "timepicker": {
        "refresh_intervals": [
          "5s",
          "10s",
          "30s",
          "1m",
          "5m",
          "15m",
          "30m",
          "1h",
          "2h",
          "1d"
        ],
        "time_options": [
          "5m",
          "15m",
          "1h",
          "6h",
          "12h",
          "24h",
          "2d",
          "7d",
          "30d"
        ]
      },
      "timezone": "",
      "title": "Erasure Encoding",
      "uid": "V1uHcOKWk",
      "version": 5
    }
  capacity_overview.json: |-
    {
      "__inputs": [
        {
          "name": "DS_FLUX",
          "label": "Flux",
          "description": "",
          "type": "datasource",
          "pluginId": "grafana-influxdb-flux-datasource",
          "pluginName": "Flux (InfluxDB) [BETA]"
        }
      ],
      "__requires": [
        {
          "type": "grafana",
          "id": "grafana",
          "name": "Grafana",
          "version": "6.2.5ecs"
        },
        {
          "type": "datasource",
          "id": "grafana-influxdb-flux-datasource",
          "name": "Flux (InfluxDB) [BETA]",
          "version": "5.2.11"
        },
        {
          "type": "panel",
          "id": "graph",
          "name": "Graph",
          "version": ""
        },
        {
          "type": "panel",
          "id": "table",
          "name": "Table",
          "version": ""
        }
      ],
      "annotations": {
        "list": [
          {
            "builtIn": 1,
            "datasource": "-- Grafana --",
            "enable": true,
            "hide": true,
            "iconColor": "rgba(0, 211, 255, 1)",
            "name": "Annotations & Alerts",
            "type": "dashboard"
          }
        ]
      },
      "editable": true,
      "gnetId": null,
      "graphTooltip": 0,
      "id": null,
      "iteration": 1594925974683,
      "links": [
        {
          "asDropdown": true,
          "icon": "external link",
          "tags": [
            "Capacity"
          ],
          "title": "Related dashboards",
          "type": "dashboards"
        }
      ],
      "panels": [
        {
          "columns": [],
          "description": "Summary  by all Object Stores,  shows last values.",
          "fontSize": "100%",
          "gridPos": {
            "h": 3,
            "w": 24,
            "x": 0,
            "y": 0
          },
          "id": 17,
          "links": [],
          "options": {},
          "pageSize": null,
          "scroll": true,
          "showHeader": true,
          "sort": {
            "col": 0,
            "desc": true
          },
          "styles": [
            {
              "alias": "Time",
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "pattern": "Time",
              "type": "hidden"
            },
            {
              "alias": "$1",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "/vl[0-3]_(.*)/",
              "thresholds": [],
              "type": "number",
              "unit": "bytes"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Measurement",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Field",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Value",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "decimals": 2,
              "pattern": "/.*/",
              "thresholds": [],
              "type": "number",
              "unit": "short"
            }
          ],
          "targets": [
            {
              "query": "from(bucket: \"monitoring_vdc\")\n  |> filter(fn: (r) => r._measurement == \"cq_capacity_region\"\n                       and (r._field == \"total_i\" or r._field == \"used\"\n                            or r._field == \"available\" or r._field == \"reserved\"\n                            or r._field == \"offline\"))\n  |> range($range)\n  |> last()\n  |> keep(columns: [\"_time\", \"_field\", \"_value\"])\n  |> pivot(rowKey:[\"_time\"],columnKey: [\"_field\"],valueColumn: \"_value\")\n  |> map(fn: (r) => ({\"vl0_Total\": r.total_i, \"vl1_Used\": r.used, \"vl2_Available\": r.available, \"vl3_Reserved\": r.reserved}))\n",
              "refId": "A",
              "resultFormat": "table"
            }
          ],
          "timeFrom": null,
          "timeShift": null,
          "title": "Capacity",
          "transform": "table",
          "type": "table"
        },
        {
          "collapsed": true,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 3
          },
          "id": 19,
          "panels": [
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "Summary  by all Object Stores for Total available capacity",
              "fill": 1,
              "gridPos": {
                "h": 8,
                "w": 8,
                "x": 0,
                "y": 4
              },
              "id": 11,
              "legend": {
                "avg": false,
                "current": false,
                "max": false,
                "min": false,
                "show": true,
                "total": false,
                "values": false
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_capacity_region\" and r._field == \"total_i\")\n|> range($range)\n|> group()\n|> keep(columns: [\"_time\", \"_value\", \"_field\"])\n|> set(key: \"_field\", value: \"Total\")",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Total",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 2,
                  "format": "bytes",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "Summary  by all Object Stores for total Used capacity",
              "fill": 1,
              "gridPos": {
                "h": 8,
                "w": 8,
                "x": 8,
                "y": 4
              },
              "id": 12,
              "legend": {
                "avg": false,
                "current": false,
                "max": false,
                "min": false,
                "show": true,
                "total": false,
                "values": false
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_capacity_region\" and r._field == \"used\")\n|> range($range)\n|> group()\n|> keep(columns: [\"_time\", \"_value\", \"_field\"])\n|> set(key: \"_field\", value: \"Used\")\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Used",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 2,
                  "format": "bytes",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "Summary  by all Object Stores for total Available(free) capacity",
              "fill": 1,
              "gridPos": {
                "h": 8,
                "w": 8,
                "x": 16,
                "y": 4
              },
              "id": 13,
              "legend": {
                "avg": false,
                "current": false,
                "max": false,
                "min": false,
                "show": true,
                "total": false,
                "values": false
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_capacity_region\" and r._field == \"available\")\n|> range($range)\n|> group()\n|> keep(columns: [\"_time\", \"_value\", \"_field\"])\n|> set(key: \"_field\", value: \"Available\")\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Available",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 2,
                  "format": "bytes",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            }
          ],
          "title": "Capacity History",
          "type": "row"
        },
        {
          "collapsed": true,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 4
          },
          "id": 21,
          "panels": [
            {
              "columns": [],
              "description": "Info  by each Object Store separately,  shows last values.",
              "fontSize": "100%",
              "gridPos": {
                "h": 7,
                "w": 24,
                "x": 0,
                "y": 5
              },
              "id": 15,
              "links": [],
              "options": {},
              "pageSize": 8,
              "scroll": true,
              "showHeader": true,
              "sort": {
                "col": 3,
                "desc": false
              },
              "styles": [
                {
                  "alias": "Time",
                  "dateFormat": "YYYY-MM-DD HH:mm:ss",
                  "pattern": "Time",
                  "type": "hidden"
                },
                {
                  "alias": "$1",
                  "colorMode": null,
                  "colors": [
                    "rgba(245, 54, 54, 0.9)",
                    "rgba(237, 129, 40, 0.89)",
                    "rgba(50, 172, 45, 0.97)"
                  ],
                  "dateFormat": "YYYY-MM-DD HH:mm:ss",
                  "decimals": 2,
                  "mappingType": 1,
                  "pattern": "/vl[1-5]_(.*)/",
                  "thresholds": [],
                  "type": "number",
                  "unit": "bytes"
                },
                {
                  "alias": "",
                  "colorMode": null,
                  "colors": [
                    "rgba(245, 54, 54, 0.9)",
                    "rgba(237, 129, 40, 0.89)",
                    "rgba(50, 172, 45, 0.97)"
                  ],
                  "dateFormat": "YYYY-MM-DD HH:mm:ss",
                  "decimals": 2,
                  "mappingType": 1,
                  "pattern": "Time",
                  "thresholds": [],
                  "type": "hidden",
                  "unit": "short"
                },
                {
                  "alias": "",
                  "colorMode": null,
                  "colors": [
                    "rgba(245, 54, 54, 0.9)",
                    "rgba(237, 129, 40, 0.89)",
                    "rgba(50, 172, 45, 0.97)"
                  ],
                  "dateFormat": "YYYY-MM-DD HH:mm:ss",
                  "decimals": 2,
                  "mappingType": 1,
                  "pattern": "Measurement",
                  "thresholds": [],
                  "type": "hidden",
                  "unit": "short"
                },
                {
                  "alias": "",
                  "colorMode": null,
                  "colors": [
                    "rgba(245, 54, 54, 0.9)",
                    "rgba(237, 129, 40, 0.89)",
                    "rgba(50, 172, 45, 0.97)"
                  ],
                  "dateFormat": "YYYY-MM-DD HH:mm:ss",
                  "decimals": 2,
                  "mappingType": 1,
                  "pattern": "Field",
                  "thresholds": [],
                  "type": "hidden",
                  "unit": "short"
                },
                {
                  "alias": "Release Name",
                  "colorMode": null,
                  "colors": [
                    "rgba(245, 54, 54, 0.9)",
                    "rgba(237, 129, 40, 0.89)",
                    "rgba(50, 172, 45, 0.97)"
                  ],
                  "dateFormat": "YYYY-MM-DD HH:mm:ss",
                  "decimals": 2,
                  "mappingType": 1,
                  "pattern": "release_name",
                  "thresholds": [],
                  "type": "string",
                  "unit": "short"
                },
                {
                  "alias": "",
                  "colorMode": null,
                  "colors": [
                    "rgba(245, 54, 54, 0.9)",
                    "rgba(237, 129, 40, 0.89)",
                    "rgba(50, 172, 45, 0.97)"
                  ],
                  "dateFormat": "YYYY-MM-DD HH:mm:ss",
                  "decimals": 2,
                  "mappingType": 1,
                  "pattern": "Value",
                  "thresholds": [],
                  "type": "hidden",
                  "unit": "short"
                },
                {
                  "alias": "",
                  "colorMode": null,
                  "colors": [
                    "rgba(245, 54, 54, 0.9)",
                    "rgba(237, 129, 40, 0.89)",
                    "rgba(50, 172, 45, 0.97)"
                  ],
                  "decimals": 2,
                  "pattern": "/.*/",
                  "thresholds": [],
                  "type": "number",
                  "unit": "short"
                }
              ],
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_vdc\")\n  |> filter(fn: (r) => r._measurement == \"cq_capacity_vdc\"\n                       and (r._field == \"total_i\" or r._field == \"used\"\n                            or r._field == \"available\" or r._field == \"reserved\"\n                            or r._field == \"offline\" or r._field == \"used\"))\n  |> range($range)\n  |> last()\n  |> keep(columns: [\"_time\", \"_field\", \"_value\", \"release_name\"])\n  |> pivot(rowKey:[\"_time\"],columnKey: [\"_field\"],valueColumn: \"_value\")\n  |> map(fn: (r) => ({\"vl1_Total\": r.total_i, \"vl2_Used\": r.used, \"vl3_Available\": r.available, \"vl4_Reserved\": r.reserved, \"vl5_Offline\":  r.offline}))\n",
                  "refId": "A",
                  "resultFormat": "table"
                }
              ],
              "timeFrom": null,
              "timeShift": null,
              "title": "",
              "transform": "table",
              "type": "table"
            }
          ],
          "title": "ObjectStores",
          "type": "row"
        },
        {
          "collapsed": true,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 5
          },
          "id": 10,
          "panels": [
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "Info by selected Object Store in filter for Total available capacity",
              "fill": 1,
              "gridPos": {
                "h": 8,
                "w": 8,
                "x": 0,
                "y": 14
              },
              "id": 6,
              "legend": {
                "avg": false,
                "current": false,
                "max": false,
                "min": false,
                "show": true,
                "total": false,
                "values": false
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_capacity_vdc\"\nand r.release_name == \"$release_name\"\nand r._field == \"total_i\")\n|> range($range)\n|> keep(columns: [\"_time\", \"_value\", \"_field\", \"release_name\"])\n|> set(key: \"_field\", value: \"Total\")\n|> rename(columns: {release_name: \"ObjectStore\"})",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Total",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 2,
                  "format": "bytes",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "Info by selected Object Store in filter for total Used capacity",
              "fill": 1,
              "gridPos": {
                "h": 8,
                "w": 8,
                "x": 8,
                "y": 14
              },
              "id": 7,
              "legend": {
                "avg": false,
                "current": false,
                "max": false,
                "min": false,
                "show": true,
                "total": false,
                "values": false
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_capacity_vdc\"\nand r.release_name == \"$release_name\"\nand r._field == \"used\")\n|> range($range)\n|> keep(columns: [\"_time\", \"_value\", \"_field\", \"release_name\"])\n|> set(key: \"_field\", value: \"Used\")\n|> rename(columns: {release_name: \"ObjectStore\"})",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Used",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 2,
                  "format": "bytes",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "Info by selected Object Store in filter for total Available(free) capacity",
              "fill": 1,
              "gridPos": {
                "h": 8,
                "w": 8,
                "x": 16,
                "y": 14
              },
              "id": 8,
              "legend": {
                "avg": false,
                "current": false,
                "max": false,
                "min": false,
                "show": true,
                "total": false,
                "values": false
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_capacity_vdc\"\nand r.release_name == \"$release_name\"\nand r._field == \"available\")\n|> range($range)\n|> keep(columns: [\"_time\", \"_value\", \"_field\", \"release_name\"])\n|> set(key: \"_field\", value: \"Available\")\n|> rename(columns: {release_name: \"ObjectStore\"})",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Available",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 2,
                  "format": "bytes",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            }
          ],
          "title": "Capacity History by ObjectStore ($release_name)",
          "type": "row"
        }
      ],
      "refresh": false,
      "schemaVersion": 18,
      "style": "dark",
      "tags": [
        "Capacity"
      ],
      "templating": {
        "list": [
          {
            "allValue": null,
            "current": {},
            "datasource": "${DS_FLUX}",
            "definition": "from(bucket:\"monitoring_vdc\")|> range(start: -24h)|> filter(fn:(r) => r._measurement == \"cq_capacity_vdc\")|> keep(columns: [\"release_name\"])|> group(columns:[\"release_name\"])|> distinct(column:\"release_name\")",
            "hide": 0,
            "includeAll": false,
            "label": "Object Store",
            "multi": false,
            "name": "release_name",
            "options": [],
            "query": "from(bucket:\"monitoring_vdc\")|> range(start: -24h)|> filter(fn:(r) => r._measurement == \"cq_capacity_vdc\")|> keep(columns: [\"release_name\"])|> group(columns:[\"release_name\"])|> distinct(column:\"release_name\")",
            "refresh": 1,
            "regex": "",
            "skipUrlSync": false,
            "sort": 0,
            "tagValuesQuery": "",
            "tags": [],
            "tagsQuery": "",
            "type": "query",
            "useTags": false
          }
        ]
      },
      "time": {
        "from": "now-24h",
        "to": "now"
      },
      "timepicker": {
        "refresh_intervals": [
          "5s",
          "10s",
          "30s",
          "1m",
          "5m",
          "15m",
          "30m",
          "1h",
          "2h",
          "1d"
        ],
        "time_options": [
          "5m",
          "15m",
          "1h",
          "6h",
          "12h",
          "24h",
          "2d",
          "7d",
          "30d"
        ]
      },
      "timezone": "",
      "title": "Capacity - Overview",
      "uid": "6e2ZkHtWk",
      "version": 1
    }
  capacity_used.json: |-
    {
      "__inputs": [],
      "__requires": [
        {
          "type": "grafana",
          "id": "grafana",
          "name": "Grafana",
          "version": "6.2.5ecs"
        },
        {
          "type": "panel",
          "id": "singlestat",
          "name": "Singlestat",
          "version": ""
        }
      ],
      "annotations": {
        "list": [
          {
            "builtIn": 1,
            "datasource": "-- Grafana --",
            "enable": true,
            "hide": true,
            "iconColor": "rgba(0, 211, 255, 1)",
            "name": "Annotations & Alerts",
            "type": "dashboard"
          }
        ]
      },
      "description": "",
      "editable": true,
      "gnetId": 1375,
      "graphTooltip": 0,
      "id": null,
      "links": [
        {
          "asDropdown": true,
          "icon": "external link",
          "keepTime": true,
          "tags": [
            "Capacity"
          ],
          "title": "Related dashboards",
          "type": "dashboards"
        }
      ],
      "panels": [
        {
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 0
          },
          "id": 96,
          "title": "Total",
          "type": "row"
        },
        {
          "cacheTimeout": null,
          "colorBackground": false,
          "colorPostfix": false,
          "colorPrefix": false,
          "colorValue": false,
          "colors": [
            "#299c46",
            "rgba(237, 129, 40, 0.89)",
            "#d44a3a"
          ],
          "decimals": 2,
          "description": "Total physical capacity assigned for this Object Scale",
          "format": "bytes",
          "gauge": {
            "maxValue": 100,
            "minValue": 0,
            "show": false,
            "thresholdLabels": false,
            "thresholdMarkers": true
          },
          "gridPos": {
            "h": 4,
            "w": 24,
            "x": 0,
            "y": 1
          },
          "id": 83,
          "interval": null,
          "links": [],
          "mappingType": 1,
          "mappingTypes": [
            {
              "name": "value to text",
              "value": 1
            },
            {
              "name": "range to text",
              "value": 2
            }
          ],
          "maxDataPoints": 100,
          "nullPointMode": "connected",
          "nullText": null,
          "options": {},
          "postfix": "",
          "postfixFontSize": "80%",
          "prefix": "",
          "prefixFontSize": "50%",
          "rangeMaps": [
            {
              "from": "null",
              "text": "N/A",
              "to": "null"
            }
          ],
          "sparkline": {
            "fillColor": "rgba(31, 118, 189, 0.18)",
            "full": false,
            "lineColor": "rgb(31, 120, 193)",
            "show": true
          },
          "tableColumn": "",
          "targets": [
            {
              "query": "from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_region\" and r._field == \"total_i\")\n|> range($range)\r\n|> last()\r",
              "refId": "B"
            }
          ],
          "thresholds": "",
          "title": "Total Capacity",
          "type": "singlestat",
          "valueFontSize": "80%",
          "valueMaps": [
            {
              "op": "=",
              "text": "N/A",
              "value": "null"
            }
          ],
          "valueName": "current"
        },
        {
          "cacheTimeout": null,
          "colorBackground": false,
          "colorPostfix": false,
          "colorPrefix": false,
          "colorValue": false,
          "colors": [
            "#299c46",
            "rgba(237, 129, 40, 0.89)",
            "#d44a3a"
          ],
          "decimals": 2,
          "description": "Physical disk space used",
          "format": "bytes",
          "gauge": {
            "maxValue": 100,
            "minValue": 0,
            "show": false,
            "thresholdLabels": false,
            "thresholdMarkers": true
          },
          "gridPos": {
            "h": 4,
            "w": 6,
            "x": 0,
            "y": 5
          },
          "id": 84,
          "interval": null,
          "links": [],
          "mappingType": 1,
          "mappingTypes": [
            {
              "name": "value to text",
              "value": 1
            },
            {
              "name": "range to text",
              "value": 2
            }
          ],
          "maxDataPoints": 100,
          "nullPointMode": "connected",
          "nullText": null,
          "options": {},
          "postfix": "",
          "postfixFontSize": "80%",
          "prefix": "",
          "prefixFontSize": "50%",
          "rangeMaps": [
            {
              "from": "null",
              "text": "N/A",
              "to": "null"
            }
          ],
          "sparkline": {
            "fillColor": "rgba(31, 118, 189, 0.18)",
            "full": false,
            "lineColor": "rgb(31, 120, 193)",
            "show": true
          },
          "tableColumn": "",
          "targets": [
            {
              "query": "from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_region\" and r._field == \"used\")\n|> range($range)\r\n|> last()\r",
              "refId": "B"
            }
          ],
          "thresholds": "",
          "title": "Used",
          "type": "singlestat",
          "valueFontSize": "80%",
          "valueMaps": [
            {
              "op": "=",
              "text": "N/A",
              "value": "null"
            }
          ],
          "valueName": "current"
        },
        {
          "cacheTimeout": null,
          "colorBackground": false,
          "colorPostfix": false,
          "colorPrefix": false,
          "colorValue": false,
          "colors": [
            "#299c46",
            "rgba(237, 129, 40, 0.89)",
            "#d44a3a"
          ],
          "decimals": 2,
          "description": "Free physical capacity ",
          "format": "bytes",
          "gauge": {
            "maxValue": 100,
            "minValue": 0,
            "show": false,
            "thresholdLabels": false,
            "thresholdMarkers": true
          },
          "gridPos": {
            "h": 4,
            "w": 6,
            "x": 6,
            "y": 5
          },
          "id": 89,
          "interval": null,
          "links": [],
          "mappingType": 1,
          "mappingTypes": [
            {
              "name": "value to text",
              "value": 1
            },
            {
              "name": "range to text",
              "value": 2
            }
          ],
          "maxDataPoints": 100,
          "nullPointMode": "connected",
          "nullText": null,
          "options": {},
          "postfix": "",
          "postfixFontSize": "80%",
          "prefix": "",
          "prefixFontSize": "50%",
          "rangeMaps": [
            {
              "from": "null",
              "text": "N/A",
              "to": "null"
            }
          ],
          "sparkline": {
            "fillColor": "rgba(31, 118, 189, 0.18)",
            "full": false,
            "lineColor": "rgb(31, 120, 193)",
            "show": true
          },
          "tableColumn": "",
          "targets": [
            {
              "query": "from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_region\" and r._field == \"available\")\n|> range($range)\r\n|> last()\r",
              "refId": "B"
            }
          ],
          "thresholds": "",
          "title": "Free",
          "type": "singlestat",
          "valueFontSize": "80%",
          "valueMaps": [
            {
              "op": "=",
              "text": "N/A",
              "value": "null"
            }
          ],
          "valueName": "current"
        },
        {
          "cacheTimeout": null,
          "colorBackground": false,
          "colorPostfix": false,
          "colorPrefix": false,
          "colorValue": false,
          "colors": [
            "#299c46",
            "rgba(237, 129, 40, 0.89)",
            "#d44a3a"
          ],
          "decimals": 2,
          "description": "Reserved physical capacity in case user used-up all capacity",
          "format": "bytes",
          "gauge": {
            "maxValue": 100,
            "minValue": 0,
            "show": false,
            "thresholdLabels": false,
            "thresholdMarkers": true
          },
          "gridPos": {
            "h": 4,
            "w": 6,
            "x": 12,
            "y": 5
          },
          "id": 85,
          "interval": null,
          "links": [],
          "mappingType": 1,
          "mappingTypes": [
            {
              "name": "value to text",
              "value": 1
            },
            {
              "name": "range to text",
              "value": 2
            }
          ],
          "maxDataPoints": 100,
          "nullPointMode": "connected",
          "nullText": null,
          "options": {},
          "postfix": "",
          "postfixFontSize": "80%",
          "prefix": "",
          "prefixFontSize": "50%",
          "rangeMaps": [
            {
              "from": "null",
              "text": "N/A",
              "to": "null"
            }
          ],
          "sparkline": {
            "fillColor": "rgba(31, 118, 189, 0.18)",
            "full": false,
            "lineColor": "rgb(31, 120, 193)",
            "show": true
          },
          "tableColumn": "",
          "targets": [
            {
              "query": "from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_region\" and r._field == \"reserved\")\n|> range($range)\r\n|> last()\r",
              "refId": "B"
            }
          ],
          "thresholds": "",
          "title": "Reserved",
          "type": "singlestat",
          "valueFontSize": "80%",
          "valueMaps": [
            {
              "op": "=",
              "text": "N/A",
              "value": "null"
            }
          ],
          "valueName": "current"
        },
        {
          "cacheTimeout": null,
          "colorBackground": false,
          "colorPostfix": false,
          "colorPrefix": false,
          "colorValue": false,
          "colors": [
            "#299c46",
            "rgba(237, 129, 40, 0.89)",
            "#d44a3a"
          ],
          "decimals": 2,
          "description": "Offline capacity in Object Scale",
          "format": "bytes",
          "gauge": {
            "maxValue": 100,
            "minValue": 0,
            "show": false,
            "thresholdLabels": false,
            "thresholdMarkers": true
          },
          "gridPos": {
            "h": 4,
            "w": 6,
            "x": 18,
            "y": 5
          },
          "id": 88,
          "interval": null,
          "links": [],
          "mappingType": 1,
          "mappingTypes": [
            {
              "name": "value to text",
              "value": 1
            },
            {
              "name": "range to text",
              "value": 2
            }
          ],
          "maxDataPoints": 100,
          "nullPointMode": "connected",
          "nullText": null,
          "options": {},
          "postfix": "",
          "postfixFontSize": "80%",
          "prefix": "",
          "prefixFontSize": "50%",
          "rangeMaps": [
            {
              "from": "null",
              "text": "N/A",
              "to": "null"
            }
          ],
          "sparkline": {
            "fillColor": "rgba(31, 118, 189, 0.18)",
            "full": false,
            "lineColor": "rgb(31, 120, 193)",
            "show": true
          },
          "tableColumn": "",
          "targets": [
            {
              "query": "from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_region\" and r._field == \"offline\")\n|> range($range)\r\n|> last()\r",
              "refId": "B"
            }
          ],
          "thresholds": "",
          "title": "Offline",
          "type": "singlestat",
          "valueFontSize": "80%",
          "valueMaps": [
            {
              "op": "=",
              "text": "N/A",
              "value": "null"
            }
          ],
          "valueName": "current"
        },
        {
          "collapsed": true,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 9
          },
          "id": 93,
          "panels": [
            {
              "cacheTimeout": null,
              "colorBackground": false,
              "colorPostfix": false,
              "colorPrefix": false,
              "colorValue": false,
              "colors": [
                "#299c46",
                "rgba(237, 129, 40, 0.89)",
                "#d44a3a"
              ],
              "decimals": 2,
              "description": "Physical disk space used",
              "format": "bytes",
              "gauge": {
                "maxValue": 100,
                "minValue": 0,
                "show": false,
                "thresholdLabels": false,
                "thresholdMarkers": true
              },
              "gridPos": {
                "h": 4,
                "w": 24,
                "x": 0,
                "y": 10
              },
              "id": 94,
              "interval": null,
              "links": [],
              "mappingType": 1,
              "mappingTypes": [
                {
                  "name": "value to text",
                  "value": 1
                },
                {
                  "name": "range to text",
                  "value": 2
                }
              ],
              "maxDataPoints": 100,
              "nullPointMode": "connected",
              "nullText": null,
              "options": {},
              "postfix": "",
              "postfixFontSize": "80%",
              "prefix": "",
              "prefixFontSize": "50%",
              "rangeMaps": [
                {
                  "from": "null",
                  "text": "N/A",
                  "to": "null"
                }
              ],
              "sparkline": {
                "fillColor": "rgba(31, 118, 189, 0.18)",
                "full": false,
                "lineColor": "rgb(31, 120, 193)",
                "show": true
              },
              "tableColumn": "",
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_region\" and r._field == \"used\")\n|> range($range)\r\n|> last()\r",
                  "refId": "B"
                }
              ],
              "thresholds": "",
              "title": "Used",
              "type": "singlestat",
              "valueFontSize": "80%",
              "valueMaps": [
                {
                  "op": "=",
                  "text": "N/A",
                  "value": "null"
                }
              ],
              "valueName": "current"
            },
            {
              "cacheTimeout": null,
              "colorBackground": false,
              "colorPostfix": false,
              "colorPrefix": false,
              "colorValue": false,
              "colors": [
                "#299c46",
                "rgba(237, 129, 40, 0.89)",
                "#d44a3a"
              ],
              "decimals": 2,
              "description": "Physical space used for user injected data",
              "format": "bytes",
              "gauge": {
                "maxValue": 100,
                "minValue": 0,
                "show": false,
                "thresholdLabels": false,
                "thresholdMarkers": true
              },
              "gridPos": {
                "h": 4,
                "w": 6,
                "x": 0,
                "y": 14
              },
              "id": 90,
              "interval": null,
              "links": [],
              "mappingType": 1,
              "mappingTypes": [
                {
                  "name": "value to text",
                  "value": 1
                },
                {
                  "name": "range to text",
                  "value": 2
                }
              ],
              "maxDataPoints": 100,
              "nullPointMode": "connected",
              "nullText": null,
              "options": {},
              "postfix": "",
              "postfixFontSize": "80%",
              "prefix": "",
              "prefixFontSize": "50%",
              "rangeMaps": [
                {
                  "from": "null",
                  "text": "N/A",
                  "to": "null"
                }
              ],
              "sparkline": {
                "fillColor": "rgba(31, 118, 189, 0.18)",
                "full": false,
                "lineColor": "rgb(31, 120, 193)",
                "show": true
              },
              "tableColumn": "",
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_used_region\" and r._field == \"user_data\")\n|> range($range)\r\n|> last()\r",
                  "refId": "B"
                }
              ],
              "thresholds": "",
              "title": "User Data",
              "type": "singlestat",
              "valueFontSize": "80%",
              "valueMaps": [
                {
                  "op": "=",
                  "text": "N/A",
                  "value": "null"
                }
              ],
              "valueName": "current"
            },
            {
              "cacheTimeout": null,
              "colorBackground": false,
              "colorPostfix": false,
              "colorPrefix": false,
              "colorValue": false,
              "colors": [
                "#299c46",
                "rgba(237, 129, 40, 0.89)",
                "#d44a3a"
              ],
              "decimals": 2,
              "description": "Metadata size (without overhead)",
              "format": "bytes",
              "gauge": {
                "maxValue": 100,
                "minValue": 0,
                "show": false,
                "thresholdLabels": false,
                "thresholdMarkers": true
              },
              "gridPos": {
                "h": 4,
                "w": 6,
                "x": 6,
                "y": 14
              },
              "id": 91,
              "interval": null,
              "links": [],
              "mappingType": 1,
              "mappingTypes": [
                {
                  "name": "value to text",
                  "value": 1
                },
                {
                  "name": "range to text",
                  "value": 2
                }
              ],
              "maxDataPoints": 100,
              "nullPointMode": "connected",
              "nullText": null,
              "options": {},
              "postfix": "",
              "postfixFontSize": "80%",
              "prefix": "",
              "prefixFontSize": "50%",
              "rangeMaps": [
                {
                  "from": "null",
                  "text": "N/A",
                  "to": "null"
                }
              ],
              "sparkline": {
                "fillColor": "rgba(31, 118, 189, 0.18)",
                "full": false,
                "lineColor": "rgb(31, 120, 193)",
                "show": true
              },
              "tableColumn": "",
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_used_region\" and r._field == \"meta_data\")\n|> range($range)\r\n|> last()\r",
                  "refId": "B"
                }
              ],
              "thresholds": "",
              "title": "Metadata",
              "type": "singlestat",
              "valueFontSize": "80%",
              "valueMaps": [
                {
                  "op": "=",
                  "text": "N/A",
                  "value": "null"
                }
              ],
              "valueName": "current"
            },
            {
              "cacheTimeout": null,
              "colorBackground": false,
              "colorPostfix": false,
              "colorPrefix": false,
              "colorValue": false,
              "colors": [
                "#299c46",
                "rgba(237, 129, 40, 0.89)",
                "#d44a3a"
              ],
              "decimals": 2,
              "description": "User data protection overhead",
              "format": "bytes",
              "gauge": {
                "maxValue": 100,
                "minValue": 0,
                "show": false,
                "thresholdLabels": false,
                "thresholdMarkers": true
              },
              "gridPos": {
                "h": 4,
                "w": 6,
                "x": 12,
                "y": 14
              },
              "id": 100,
              "interval": null,
              "links": [],
              "mappingType": 1,
              "mappingTypes": [
                {
                  "name": "value to text",
                  "value": 1
                },
                {
                  "name": "range to text",
                  "value": 2
                }
              ],
              "maxDataPoints": 100,
              "nullPointMode": "connected",
              "nullText": null,
              "options": {},
              "postfix": "",
              "postfixFontSize": "80%",
              "prefix": "",
              "prefixFontSize": "50%",
              "rangeMaps": [
                {
                  "from": "null",
                  "text": "N/A",
                  "to": "null"
                }
              ],
              "sparkline": {
                "fillColor": "rgba(31, 118, 189, 0.18)",
                "full": false,
                "lineColor": "rgb(31, 120, 193)",
                "show": true
              },
              "tableColumn": "",
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_used_region\" and r._field == \"protection_overhead_user\")\n|> range($range)\r\n|> last()\r",
                  "refId": "B"
                }
              ],
              "thresholds": "",
              "title": "Protection Overhead User Data",
              "type": "singlestat",
              "valueFontSize": "80%",
              "valueMaps": [
                {
                  "op": "=",
                  "text": "N/A",
                  "value": "null"
                }
              ],
              "valueName": "current"
            },
            {
              "cacheTimeout": null,
              "colorBackground": false,
              "colorPostfix": false,
              "colorPrefix": false,
              "colorValue": false,
              "colors": [
                "#299c46",
                "rgba(237, 129, 40, 0.89)",
                "#d44a3a"
              ],
              "decimals": 2,
              "description": "Metadata protection overhead",
              "format": "bytes",
              "gauge": {
                "maxValue": 100,
                "minValue": 0,
                "show": false,
                "thresholdLabels": false,
                "thresholdMarkers": true
              },
              "gridPos": {
                "h": 4,
                "w": 6,
                "x": 18,
                "y": 14
              },
              "id": 101,
              "interval": null,
              "links": [],
              "mappingType": 1,
              "mappingTypes": [
                {
                  "name": "value to text",
                  "value": 1
                },
                {
                  "name": "range to text",
                  "value": 2
                }
              ],
              "maxDataPoints": 100,
              "nullPointMode": "connected",
              "nullText": null,
              "options": {},
              "postfix": "",
              "postfixFontSize": "80%",
              "prefix": "",
              "prefixFontSize": "50%",
              "rangeMaps": [
                {
                  "from": "null",
                  "text": "N/A",
                  "to": "null"
                }
              ],
              "sparkline": {
                "fillColor": "rgba(31, 118, 189, 0.18)",
                "full": false,
                "lineColor": "rgb(31, 120, 193)",
                "show": true
              },
              "tableColumn": "",
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_used_region\" and r._field == \"protection_overhead_metadata\")\n|> range($range)\r\n|> last()\r",
                  "refId": "B"
                }
              ],
              "thresholds": "",
              "title": "Protection Overhead Metadata",
              "type": "singlestat",
              "valueFontSize": "80%",
              "valueMaps": [
                {
                  "op": "=",
                  "text": "N/A",
                  "value": "null"
                }
              ],
              "valueName": "current"
            }
          ],
          "title": "Used",
          "type": "row"
        },
        {
          "collapsed": true,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 10
          },
          "id": 98,
          "panels": [
            {
              "cacheTimeout": null,
              "colorBackground": false,
              "colorPostfix": false,
              "colorPrefix": false,
              "colorValue": false,
              "colors": [
                "#299c46",
                "rgba(237, 129, 40, 0.89)",
                "#d44a3a"
              ],
              "decimals": 2,
              "description": "Offline capacity in Object Scale",
              "format": "bytes",
              "gauge": {
                "maxValue": 100,
                "minValue": 0,
                "show": false,
                "thresholdLabels": false,
                "thresholdMarkers": true
              },
              "gridPos": {
                "h": 4,
                "w": 24,
                "x": 0,
                "y": 11
              },
              "id": 99,
              "interval": null,
              "links": [],
              "mappingType": 1,
              "mappingTypes": [
                {
                  "name": "value to text",
                  "value": 1
                },
                {
                  "name": "range to text",
                  "value": 2
                }
              ],
              "maxDataPoints": 100,
              "nullPointMode": "connected",
              "nullText": null,
              "options": {},
              "postfix": "",
              "postfixFontSize": "80%",
              "prefix": "",
              "prefixFontSize": "50%",
              "rangeMaps": [
                {
                  "from": "null",
                  "text": "N/A",
                  "to": "null"
                }
              ],
              "sparkline": {
                "fillColor": "rgba(31, 118, 189, 0.18)",
                "full": false,
                "lineColor": "rgb(31, 120, 193)",
                "show": true
              },
              "tableColumn": "",
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_region\" and r._field == \"offline\")\n|> range($range)\r\n|> last()\r",
                  "refId": "B"
                }
              ],
              "thresholds": "",
              "title": "Offline",
              "type": "singlestat",
              "valueFontSize": "80%",
              "valueMaps": [
                {
                  "op": "=",
                  "text": "N/A",
                  "value": "null"
                }
              ],
              "valueName": "current"
            },
            {
              "cacheTimeout": null,
              "colorBackground": false,
              "colorPostfix": false,
              "colorPrefix": false,
              "colorValue": false,
              "colors": [
                "#299c46",
                "rgba(237, 129, 40, 0.89)",
                "#d44a3a"
              ],
              "decimals": 2,
              "description": "Recovered or not used capacity for offline node/disk",
              "format": "bytes",
              "gauge": {
                "maxValue": 100,
                "minValue": 0,
                "show": false,
                "thresholdLabels": false,
                "thresholdMarkers": true
              },
              "gridPos": {
                "h": 4,
                "w": 12,
                "x": 0,
                "y": 15
              },
              "id": 87,
              "interval": null,
              "links": [],
              "mappingType": 1,
              "mappingTypes": [
                {
                  "name": "value to text",
                  "value": 1
                },
                {
                  "name": "range to text",
                  "value": 2
                }
              ],
              "maxDataPoints": 100,
              "nullPointMode": "connected",
              "nullText": null,
              "options": {},
              "postfix": "",
              "postfixFontSize": "80%",
              "prefix": "",
              "prefixFontSize": "50%",
              "rangeMaps": [
                {
                  "from": "null",
                  "text": "N/A",
                  "to": "null"
                }
              ],
              "sparkline": {
                "fillColor": "rgba(31, 118, 189, 0.18)",
                "full": false,
                "lineColor": "rgb(31, 120, 193)",
                "show": true
              },
              "tableColumn": "",
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_region\" and r._field == \"offline_recovered\")\n|> range($range)\r\n|> last()\r",
                  "refId": "B"
                }
              ],
              "thresholds": "",
              "title": "Recovered",
              "type": "singlestat",
              "valueFontSize": "80%",
              "valueMaps": [
                {
                  "op": "=",
                  "text": "N/A",
                  "value": "null"
                }
              ],
              "valueName": "current"
            },
            {
              "cacheTimeout": null,
              "colorBackground": false,
              "colorPostfix": false,
              "colorPrefix": false,
              "colorValue": false,
              "colors": [
                "#299c46",
                "rgba(237, 129, 40, 0.89)",
                "#d44a3a"
              ],
              "decimals": 2,
              "description": "Unrecovered capacity for offline node/disk (which is not removed from system yet)",
              "format": "bytes",
              "gauge": {
                "maxValue": 100,
                "minValue": 0,
                "show": false,
                "thresholdLabels": false,
                "thresholdMarkers": true
              },
              "gridPos": {
                "h": 4,
                "w": 12,
                "x": 12,
                "y": 15
              },
              "id": 86,
              "interval": null,
              "links": [],
              "mappingType": 1,
              "mappingTypes": [
                {
                  "name": "value to text",
                  "value": 1
                },
                {
                  "name": "range to text",
                  "value": 2
                }
              ],
              "maxDataPoints": 100,
              "nullPointMode": "connected",
              "nullText": null,
              "options": {},
              "postfix": "",
              "postfixFontSize": "80%",
              "prefix": "",
              "prefixFontSize": "50%",
              "rangeMaps": [
                {
                  "from": "null",
                  "text": "N/A",
                  "to": "null"
                }
              ],
              "sparkline": {
                "fillColor": "rgba(31, 118, 189, 0.18)",
                "full": false,
                "lineColor": "rgb(31, 120, 193)",
                "show": true
              },
              "tableColumn": "",
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_region\" and r._field == \"offline_unrecovered\")\n|> range($range)\r\n|> last()\r",
                  "refId": "B"
                }
              ],
              "thresholds": "",
              "title": "Unrecovered",
              "type": "singlestat",
              "valueFontSize": "80%",
              "valueMaps": [
                {
                  "op": "=",
                  "text": "N/A",
                  "value": "null"
                }
              ],
              "valueName": "current"
            }
          ],
          "title": "Offline",
          "type": "row"
        }
      ],
      "refresh": false,
      "schemaVersion": 18,
      "style": "dark",
      "tags": [
        "Capacity"
      ],
      "templating": {
        "list": []
      },
      "time": {
        "from": "now-24h",
        "to": "now"
      },
      "timepicker": {
        "refresh_intervals": [
          "5s",
          "10s",
          "30s",
          "1m",
          "5m",
          "15m",
          "30m",
          "1h",
          "2h",
          "1d"
        ],
        "time_options": [
          "5m",
          "15m",
          "1h",
          "6h",
          "12h",
          "24h",
          "2d",
          "7d",
          "30d"
        ]
      },
      "timezone": "",
      "title": "Capacity Utilization: Used Capacity",
      "uid": "cuuci-cUEkca5W2",
      "version": 2
    }
  data_access_performance_overview.json: |-
    {
      "__inputs": [
        {
          "name": "DS_FLUX",
          "label": "Flux",
          "description": "",
          "type": "datasource",
          "pluginId": "grafana-influxdb-flux-datasource",
          "pluginName": "Flux (InfluxDB) [BETA]"
        }
      ],
      "__requires": [
        {
          "type": "grafana",
          "id": "grafana",
          "name": "Grafana",
          "version": "5.3.3"
        },
        {
          "type": "datasource",
          "id": "grafana-influxdb-flux-datasource",
          "name": "Flux (InfluxDB) [BETA]",
          "version": "5.2.11"
        },
        {
          "type": "panel",
          "id": "graph",
          "name": "Graph",
          "version": "5.0.0"
        },
        {
          "type": "panel",
          "id": "table",
          "name": "Table",
          "version": "5.0.0"
        }
      ],
      "annotations": {
        "list": [
          {
            "builtIn": 1,
            "datasource": "-- Grafana --",
            "enable": true,
            "hide": true,
            "iconColor": "rgba(0, 211, 255, 1)",
            "name": "Annotations & Alerts",
            "type": "dashboard"
          }
        ]
      },
      "editable": true,
      "gnetId": null,
      "graphTooltip": 0,
      "id": null,
      "links": [
        {
          "asDropdown": true,
          "icon": "external link",
          "keepTime": true,
          "tags": [
            "Data Access Performance"
          ],
          "title": "Related dashboards",
          "type": "dashboards"
        }
      ],
      "panels": [
        {
          "columns": [],
          "datasource": "${DS_FLUX}",
          "fontSize": "110%",
          "gridPos": {
            "h": 3,
            "w": 24,
            "x": 0,
            "y": 0
          },
          "id": 157,
          "links": [],
          "pageSize": null,
          "scroll": false,
          "showHeader": true,
          "sort": {
            "col": 3,
            "desc": true
          },
          "styles": [
            {
              "alias": "Time",
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "pattern": "Time",
              "type": "hidden"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Measurement",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Field",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "System Failures",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": null,
              "mappingType": 1,
              "pattern": "b_system_errors",
              "thresholds": [],
              "type": "number",
              "unit": "locale"
            },
            {
              "alias": "Successful requests",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": null,
              "mappingType": 1,
              "pattern": "a_succeed_request_counter",
              "thresholds": [],
              "type": "number",
              "unit": "locale"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Value",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "User Failures",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": null,
              "mappingType": 1,
              "pattern": "c_user_errors",
              "thresholds": [],
              "type": "number",
              "unit": "locale"
            },
            {
              "alias": "Failures % Rate",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 3,
              "mappingType": 1,
              "pattern": "d_error_rate",
              "thresholds": [],
              "type": "number",
              "unit": "percentunit"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "decimals": 2,
              "pattern": "/.*/",
              "thresholds": [],
              "type": "number",
              "unit": "short"
            }
          ],
          "targets": [
            {
              "query": "// need this 'default' table to substitute possibly missing sys_errors table if errors were not registered by ECS service\nimport \"csv\"\ndefault_sys_errors = csv.from(csv:\"#datatype,string,long,string,long\n#group,false,false,true,false\n#default,_result,,,\n,result,table,_field,_value\n,,100,succeed_request_counter_i,0\n,,101,system_errors_i,0\n,,102,user_errors_i,0\")\n\ntotals = from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_performance_transaction_delta\")\n|> range($range)\n|> keep(columns:[\"_time\", \"_field\", \"_value\"])\n|> sum()\n|> fill(column: \"_value\", value: 0)\n\nsys_errors = from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_performance_error_delta\")\n|> range($range)\n|> keep(columns:[\"_time\", \"_field\", \"_value\"])\n|> sum()\n|> fill(column: \"_value\", value: 0)\n\nunion(tables: [default_sys_errors, totals, sys_errors])\n|> pivot(rowKey:[], columnKey: [\"_field\"], valueColumn: \"_value\")\n// map does not save non-group columns\n|> map(fn:(r) => ({\na_succeed_request_counter: r.succeed_request_counter_i,\nb_system_errors: r.system_errors_i,\nc_user_errors: r.user_errors_i,\nd_error_rate: float(v:r.system_errors_i+r.user_errors_i)/\nfloat(v:r.system_errors_i+r.user_errors_i+r.succeed_request_counter_i\n// this trick is needed because failed+succeed can be 0, avoid printing NaN in this case\n+int(v:bool(v:(r.system_errors_i+r.user_errors_i+r.succeed_request_counter_i)==0)))}))\n\n",
              "refId": "A",
              "resultFormat": "table"
            }
          ],
          "title": "Transaction Summary",
          "transform": "table",
          "type": "table"
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": "${DS_FLUX}",
          "decimals": null,
          "description": "Rate of successful requests and failures per second",
          "fill": 1,
          "gridPos": {
            "h": 9,
            "w": 12,
            "x": 0,
            "y": 3
          },
          "id": 147,
          "legend": {
            "alignAsTable": false,
            "avg": true,
            "current": false,
            "max": true,
            "min": true,
            "rightSide": false,
            "show": true,
            "sortDesc": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 2,
          "links": [],
          "nullPointMode": "null",
          "percentage": false,
          "pointradius": 2,
          "points": true,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "time_int = int(v:$__range_to_s) - int(v:$__range_from_s)\nmin_window = 300\nmax_windows = 200\nsec_in_ns = 1000000000\nwindow_len = time_int / max_windows / min_window * min_window\nis_min_window = window_len < min_window\nwindow_len = (int(v:(is_min_window)) * min_window) + (int(v:(not is_min_window)) * window_len)\nwl_dur = duration(v:window_len * sec_in_ns)\nstart_dt = time(v:((int(v:$__range_from_s)/window_len) - 2) * window_len * sec_in_ns)\nend_dt = time(v:((int(v:$__range_to_s)/window_len) + 1) * window_len * sec_in_ns)\n\nfrom(bucket: \"monitoring_vdc\") |> filter(fn: (r) => r._measurement == \"cq_performance_transaction\" )\n  |> range(start: start_dt, stop: end_dt)  \n  |> keep(columns:[\"_time\", \"_field\", \"_value\"])  \n  |> window(every:wl_dur)\n  |> mean()\n  |> group(columns:[\"_field\"]) \n  |> rename(columns: {_start: \"_time\"})\n",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeShift": null,
          "title": "TPS (success/failure)",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "transparent": false,
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "decimals": null,
              "format": "short",
              "label": "",
              "logBase": 1,
              "max": null,
              "min": "0",
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {
            " total_read_requests_size": "#6ed0e0",
            " total_write_requests_size": "#e24d42"
          },
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": "${DS_FLUX}",
          "decimals": null,
          "description": "Data access bandwidth of successful requests per second",
          "fill": 4,
          "gridPos": {
            "h": 9,
            "w": 12,
            "x": 12,
            "y": 3
          },
          "id": 155,
          "legend": {
            "alignAsTable": false,
            "avg": true,
            "current": true,
            "max": true,
            "min": true,
            "rightSide": false,
            "show": true,
            "sortDesc": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 2,
          "links": [],
          "nullPointMode": "null",
          "percentage": false,
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": true,
          "steppedLine": false,
          "targets": [
            {
              "query": "time_int = int(v:$__range_to_s) - int(v:$__range_from_s)\nmin_window = 300\nmax_windows = 200\nsec_in_ns = 1000000000\nwindow_len = time_int / max_windows / min_window * min_window\nis_min_window = window_len < min_window\nwindow_len = (int(v:(is_min_window)) * min_window) + (int(v:(not is_min_window)) * window_len)\nwl_dur = duration(v:window_len * sec_in_ns)\nstart_dt = time(v:((int(v:$__range_from_s)/window_len) - 2) * window_len * sec_in_ns)\nend_dt = time(v:((int(v:$__range_to_s)/window_len) + 1) * window_len * sec_in_ns)\n\nfrom(bucket: \"monitoring_vdc\") |> filter(fn: (r) => r._measurement == \"cq_performance_throughput\" )\n|> range(start: start_dt, stop: end_dt) \n|> keep(columns:[\"_time\", \"_field\", \"_value\"]) \n|> window(every:wl_dur)\n|> mean()\n|> group(columns:[\"_field\"]) \n|> rename(columns: {_start: \"_time\"})\n\n",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeShift": null,
          "title": "Bandwidth (read/write)",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "transparent": false,
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "decimals": null,
              "format": "Bps",
              "label": "",
              "logBase": 1,
              "max": null,
              "min": "0",
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": "${DS_FLUX}",
          "decimals": null,
          "description": "Rate of failed requests per second, split by error type (user/system)",
          "fill": 9,
          "gridPos": {
            "h": 9,
            "w": 12,
            "x": 0,
            "y": 12
          },
          "id": 144,
          "legend": {
            "alignAsTable": false,
            "avg": true,
            "current": false,
            "hideEmpty": true,
            "hideZero": true,
            "max": true,
            "min": true,
            "rightSide": false,
            "show": true,
            "sortDesc": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 0,
          "links": [],
          "nullPointMode": "null",
          "percentage": false,
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": true,
          "steppedLine": true,
          "targets": [
            {
              "query": "time_int = int(v:$__range_to_s) - int(v:$__range_from_s)\nmin_window = 300\nmax_windows = 200\nsec_in_ns = 1000000000\nwindow_len = time_int / max_windows / min_window * min_window\nis_min_window = window_len < min_window\nwindow_len = (int(v:(is_min_window)) * min_window) + (int(v:(not is_min_window)) * window_len)\nwl_dur = duration(v:window_len * sec_in_ns)\nstart_dt = time(v:((int(v:$__range_from_s)/window_len) - 2) * window_len * sec_in_ns)\nend_dt = time(v:((int(v:$__range_to_s)/window_len) + 1) * window_len * sec_in_ns)\n\n\nfrom(bucket: \"monitoring_vdc\") |> filter(fn: (r) => r._measurement == \"cq_performance_error\" )\n|> range(start: start_dt, stop: end_dt) \n|> keep(columns:[\"_time\", \"_field\", \"_value\"]) \n|> window(every:wl_dur)\n|> mean()\n|> group(columns:[\"_field\"]) \n|> rename(columns: {_start: \"_time\"})\n",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeShift": null,
          "title": "Failed Requests/s by error type (user/system)",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": "0",
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": "${DS_FLUX}",
          "decimals": null,
          "description": "Latency of read/write requests",
          "fill": 1,
          "gridPos": {
            "h": 9,
            "w": 12,
            "x": 12,
            "y": 12
          },
          "id": 152,
          "legend": {
            "alignAsTable": false,
            "avg": true,
            "current": true,
            "max": true,
            "min": true,
            "rightSide": false,
            "show": true,
            "sortDesc": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 2,
          "links": [],
          "nullPointMode": "null",
          "percentage": false,
          "pointradius": 0.5,
          "points": true,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "time_int = int(v:$__range_to_s) - int(v:$__range_from_s)\nmin_window = 300\nmax_windows = 200\nsec_in_ns = 1000000000\nwindow_len = time_int / max_windows / min_window * min_window\nis_min_window = window_len < min_window\nwindow_len = (int(v:(is_min_window)) * min_window) + (int(v:(not is_min_window)) * window_len)\nwl_dur = duration(v:window_len * sec_in_ns)\nstart_dt = time(v:((int(v:$__range_from_s)/window_len) - 2) * window_len * sec_in_ns)\nend_dt = time(v:((int(v:$__range_to_s)/window_len) + 1) * window_len * sec_in_ns)\n\n\nall = from(bucket: \"monitoring_vdc\") \n    |> filter(fn: (r) => r._measurement == \"cq_performance_latency\" )  \n    |> range(start: start_dt, stop: end_dt)  \n    |> window(every:wl_dur)\n    |> mean()\n    |> group(columns:[\"_field\",\"id\"])\n\n// can't simple rename ttfb_read to Read, ti... and similarly for ttlb_write\n// when they are in same stream\n// TODO think about possible optimizations:\n// 1. use function? didn't work at first approach, flux can't see it\n// 2. use join with another table created from CSV\n\nreads = all |> filter(fn: (r) => r.id == \"ttfb_read\" )\n    |> set(key: \"id\", value: \"Read, time to first byte\")\n\nwrites = all |> filter(fn: (r) => r.id == \"ttlb_write\" )\n    |> set(key: \"id\", value: \"Write, time to last byte\")\n\nunion(tables: [reads, writes])|> map(fn:(r) => ({_time: r._start, _value: r._value, _field: r.id + \", \" + r._field })) |>drop(columns:[\"id\"])\n\n\n    \n\n\n",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeShift": null,
          "title": "Latency",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "transparent": false,
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "decimals": null,
              "format": "ms",
              "label": "",
              "logBase": 1,
              "max": null,
              "min": "0",
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "collapsed": true,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 21
          },
          "id": 149,
          "panels": [
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "datasource": "${DS_FLUX}",
              "decimals": null,
              "description": "Rate of successful requests per second, by method",
              "fill": 9,
              "gridPos": {
                "h": 9,
                "w": 12,
                "x": 0,
                "y": 22
              },
              "id": 143,
              "legend": {
                "alignAsTable": true,
                "avg": true,
                "current": false,
                "hideEmpty": true,
                "hideZero": true,
                "max": true,
                "min": true,
                "rightSide": true,
                "show": true,
                "sort": null,
                "sortDesc": null,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 0,
              "links": [],
              "nullPointMode": "null",
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": true,
              "steppedLine": false,
              "targets": [
                {
                  "query": "time_int = int(v:$__range_to_s) - int(v:$__range_from_s)\nmin_window = 300\nmax_windows = 200\nsec_in_ns = 1000000000\nwindow_len = time_int / max_windows / min_window * min_window\nis_min_window = window_len < min_window\nwindow_len = (int(v:(is_min_window)) * min_window) + (int(v:(not is_min_window)) * window_len)\nwl_dur = duration(v:window_len * sec_in_ns)\nstart_dt = time(v:((int(v:$__range_from_s)/window_len) - 2) * window_len * sec_in_ns)\nend_dt = time(v:((int(v:$__range_to_s)/window_len) + 1) * window_len * sec_in_ns)\n\n\nfrom(bucket: \"monitoring_vdc\") |> filter(fn: (r) => r._measurement == \"cq_performance_transaction_method\" and r._field == \"succeed_request_counter\" )\n|> range(start: start_dt, stop: end_dt) \n|> keep(columns:[\"_time\", \"_value\", \"method\"]) \n|> window(every:wl_dur)\n|> mean()\n|> group(columns:[\"_field\", \"method\"]) \n|> rename(columns: {_start: \"_time\"})\n\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeShift": null,
              "title": "Successful Requests/s by Method",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": null,
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "datasource": "${DS_FLUX}",
              "decimals": null,
              "description": "Rate of successful requests per second, by node",
              "fill": 9,
              "gridPos": {
                "h": 9,
                "w": 12,
                "x": 12,
                "y": 22
              },
              "id": 141,
              "legend": {
                "alignAsTable": true,
                "avg": true,
                "current": false,
                "max": true,
                "min": true,
                "rightSide": true,
                "show": true,
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": true,
              "steppedLine": false,
              "targets": [
                {
                  "query": "time_int = int(v:$__range_to_s) - int(v:$__range_from_s)\nmin_window = 300\nmax_windows = 200\nsec_in_ns = 1000000000\nwindow_len = time_int / max_windows / min_window * min_window\nis_min_window = window_len < min_window\nwindow_len = (int(v:(is_min_window)) * min_window) + (int(v:(not is_min_window)) * window_len)\nwl_dur = duration(v:window_len * sec_in_ns)\nstart_dt = time(v:((int(v:$__range_from_s)/window_len) - 2) * window_len * sec_in_ns)\nend_dt = time(v:((int(v:$__range_to_s)/window_len) + 1) * window_len * sec_in_ns)\n\n\nfrom(bucket: \"monitoring_main\") |> filter(fn: (r) => r._measurement == \"statDataHead_performance_internal_transactions\" and r._field == \"succeed_request_counter\"  )\n\n|> range(start: start_dt, stop: end_dt) \n|> keep(columns:[\"_time\", \"_value\", \"host\"]) \n|> derivative(nonNegative: true)\n// see MONITORING-194 for details about next 2 lines\n|> window(every:wl_dur)\n|> mean()\n|> group(columns:[\"_field\", \"host\"]) \n|> rename(columns: {_start: \"_time\", host: \"node\"})\n\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeShift": null,
              "title": "Successful Requests/s by Node",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "datasource": "${DS_FLUX}",
              "decimals": null,
              "description": "Rate of successful requests per second, by Protocol",
              "fill": 9,
              "gridPos": {
                "h": 9,
                "w": 12,
                "x": 0,
                "y": 31
              },
              "id": 153,
              "legend": {
                "alignAsTable": true,
                "avg": true,
                "current": false,
                "hideEmpty": true,
                "hideZero": true,
                "max": true,
                "min": true,
                "rightSide": true,
                "show": true,
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 0,
              "links": [],
              "nullPointMode": "null",
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": true,
              "steppedLine": false,
              "targets": [
                {
                  "query": "time_int = int(v:$__range_to_s) - int(v:$__range_from_s)\nmin_window = 300\nmax_windows = 200\nsec_in_ns = 1000000000\nwindow_len = time_int / max_windows / min_window * min_window\nis_min_window = window_len < min_window\nwindow_len = (int(v:(is_min_window)) * min_window) + (int(v:(not is_min_window)) * window_len)\nwl_dur = duration(v:window_len * sec_in_ns)\nstart_dt = time(v:((int(v:$__range_from_s)/window_len) - 2) * window_len * sec_in_ns)\nend_dt = time(v:((int(v:$__range_to_s)/window_len) + 1) * window_len * sec_in_ns)\n\nfrom(bucket: \"monitoring_vdc\") |> filter(fn: (r) => r._measurement == \"cq_performance_transaction_head\" and r._field == \"succeed_request_counter\" )\n|> range(start: start_dt, stop: end_dt) \n|> keep(columns:[\"_time\", \"_value\", \"head\"]) \n|> window(every:wl_dur)\n|> mean()\n|> group(columns:[\"_field\", \"head\"]) \n|> rename(columns: {_start: \"_time\", head: \"protocol\"})\n\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeShift": null,
              "title": "Successful Requests/s by Protocol",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": null,
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            }
          ],
          "title": "Successful requests drill down",
          "type": "row"
        },
        {
          "collapsed": true,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 22
          },
          "id": 151,
          "panels": [
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "datasource": "${DS_FLUX}",
              "decimals": null,
              "description": "Rate of failed requests per second, split by method",
              "fill": 9,
              "gridPos": {
                "h": 9,
                "w": 12,
                "x": 0,
                "y": 41
              },
              "id": 146,
              "legend": {
                "alignAsTable": true,
                "avg": true,
                "current": false,
                "hideEmpty": true,
                "hideZero": true,
                "max": true,
                "min": true,
                "rightSide": true,
                "show": true,
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 0,
              "links": [],
              "nullPointMode": "null",
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": true,
              "steppedLine": true,
              "targets": [
                {
                  "query": "time_int = int(v:$__range_to_s) - int(v:$__range_from_s)\nmin_window = 300\nmax_windows = 200\nsec_in_ns = 1000000000\nwindow_len = time_int / max_windows / min_window * min_window\nis_min_window = window_len < min_window\nwindow_len = (int(v:(is_min_window)) * min_window) + (int(v:(not is_min_window)) * window_len)\nwl_dur = duration(v:window_len * sec_in_ns)\nstart_dt = time(v:((int(v:$__range_from_s)/window_len) - 2) * window_len * sec_in_ns)\nend_dt = time(v:((int(v:$__range_to_s)/window_len) + 1) * window_len * sec_in_ns)\n\n\nfrom(bucket: \"monitoring_vdc\") |> filter(fn: (r) => r._measurement == \"cq_performance_transaction_method\" and r._field == \"failed_request_counter\" )\n|> range(start: start_dt, stop: end_dt) \n|> keep(columns:[\"_time\", \"_value\", \"method\"]) \n|> window(every:wl_dur)\n|> mean()\n|> group(columns:[\"_field\", \"method\"]) \n|> rename(columns: {_start: \"_time\"})\n\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeShift": null,
              "title": "Failed Requests/s by Method",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "datasource": "${DS_FLUX}",
              "decimals": null,
              "description": "Rate of failed requests per second, split by node",
              "fill": 9,
              "gridPos": {
                "h": 9,
                "w": 12,
                "x": 12,
                "y": 41
              },
              "id": 142,
              "legend": {
                "alignAsTable": true,
                "avg": true,
                "current": false,
                "hideEmpty": true,
                "hideZero": true,
                "max": true,
                "min": true,
                "rightSide": true,
                "show": true,
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 0,
              "links": [],
              "nullPointMode": "null",
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": true,
              "steppedLine": true,
              "targets": [
                {
                  "query": "time_int = int(v:$__range_to_s) - int(v:$__range_from_s)\nmin_window = 300\nmax_windows = 200\nsec_in_ns = 1000000000\nwindow_len = time_int / max_windows / min_window * min_window\nis_min_window = window_len < min_window\nwindow_len = (int(v:(is_min_window)) * min_window) + (int(v:(not is_min_window)) * window_len)\nwl_dur = duration(v:window_len * sec_in_ns)\nstart_dt = time(v:((int(v:$__range_from_s)/window_len) - 2) * window_len * sec_in_ns)\nend_dt = time(v:((int(v:$__range_to_s)/window_len) + 1) * window_len * sec_in_ns)\n\n\nfrom(bucket: \"monitoring_main\") |> filter(fn: (r) => r._measurement == \"statDataHead_performance_internal_transactions\" and r._field == \"failed_request_counter\"  )\n|> range(start: start_dt, stop: end_dt) \n|> keep(columns:[\"_time\", \"_value\", \"host\"]) \n|> derivative(nonNegative: true)\n// see MONITORING-194 for details about next 2 lines\n|> window(every:wl_dur)\n|> mean()\n|> group(columns:[\"_field\", \"host\"]) \n|> rename(columns: {_start: \"_time\", host: \"node\"})",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeShift": null,
              "title": "Failed Requests/s by Node",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "datasource": "${DS_FLUX}",
              "decimals": null,
              "description": "Rate of failed requests per second, split by Protocol",
              "fill": 9,
              "gridPos": {
                "h": 9,
                "w": 12,
                "x": 0,
                "y": 50
              },
              "id": 154,
              "legend": {
                "alignAsTable": true,
                "avg": true,
                "current": false,
                "hideEmpty": true,
                "hideZero": true,
                "max": true,
                "min": true,
                "rightSide": true,
                "show": true,
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 0,
              "links": [],
              "nullPointMode": "null",
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": true,
              "steppedLine": true,
              "targets": [
                {
                  "query": "time_int = int(v:$__range_to_s) - int(v:$__range_from_s)\nmin_window = 300\nmax_windows = 200\nsec_in_ns = 1000000000\nwindow_len = time_int / max_windows / min_window * min_window\nis_min_window = window_len < min_window\nwindow_len = (int(v:(is_min_window)) * min_window) + (int(v:(not is_min_window)) * window_len)\nwl_dur = duration(v:window_len * sec_in_ns)\nstart_dt = time(v:((int(v:$__range_from_s)/window_len) - 2) * window_len * sec_in_ns)\nend_dt = time(v:((int(v:$__range_to_s)/window_len) + 1) * window_len * sec_in_ns)\n\n\nfrom(bucket: \"monitoring_vdc\") |> filter(fn: (r) => r._measurement == \"cq_performance_transaction_head\" and r._field == \"failed_request_counter\" )\n|> range(start: start_dt, stop: end_dt) \n|> keep(columns:[\"_time\", \"_value\", \"head\"]) \n|> window(every:wl_dur)\n|> mean()\n|> group(columns:[\"_field\", \"head\"]) \n|> rename(columns: {_start: \"_time\", head: \"protocol\"})\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeShift": null,
              "title": "Failed Requests/s by Protocol",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "datasource": "${DS_FLUX}",
              "decimals": null,
              "description": "Rate of failed requests per second, split by error code",
              "fill": 10,
              "gridPos": {
                "h": 9,
                "w": 12,
                "x": 12,
                "y": 50
              },
              "id": 145,
              "legend": {
                "alignAsTable": true,
                "avg": true,
                "current": false,
                "hideEmpty": true,
                "hideZero": true,
                "max": true,
                "min": true,
                "rightSide": true,
                "show": true,
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 0,
              "links": [],
              "nullPointMode": "null",
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": true,
              "steppedLine": true,
              "targets": [
                {
                  "query": "time_int = int(v:$__range_to_s) - int(v:$__range_from_s)\nmin_window = 300\nmax_windows = 200\nsec_in_ns = 1000000000\nwindow_len = time_int / max_windows / min_window * min_window\nis_min_window = window_len < min_window\nwindow_len = (int(v:(is_min_window)) * min_window) + (int(v:(not is_min_window)) * window_len)\nwl_dur = duration(v:window_len * sec_in_ns)\nstart_dt = time(v:((int(v:$__range_from_s)/window_len) - 2) * window_len * sec_in_ns)\nend_dt = time(v:((int(v:$__range_to_s)/window_len) + 1) * window_len * sec_in_ns)\n\n\nfrom(bucket: \"monitoring_vdc\") |> filter(fn: (r) => r._measurement == \"cq_performance_error_code\" and r._field == \"error_counter\" )\n|> range(start: start_dt, stop: end_dt) \n|> keep(columns:[\"_time\", \"_value\", \"code\"]) \n|> window(every:wl_dur)\n|> mean()\n|> group(columns:[\"_field\", \"code\"]) \n|> rename(columns: {_start: \"_time\"})\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeShift": null,
              "title": "Failed Requests/s by error code",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            }
          ],
          "title": "Failures drill down",
          "type": "row"
        }
      ],
      "refresh": false,
      "schemaVersion": 16,
      "style": "dark",
      "tags": [
        "Data Access Performance"
      ],
      "templating": {
        "list": []
      },
      "time": {
        "from": "now-24h",
        "to": "now"
      },
      "timepicker": {
        "refresh_intervals": [
          "5s",
          "10s",
          "30s",
          "1m",
          "5m",
          "15m",
          "30m",
          "1h",
          "2h",
          "1d"
        ],
        "time_options": [
          "5m",
          "15m",
          "1h",
          "6h",
          "12h",
          "24h",
          "2d",
          "7d",
          "30d"
        ]
      },
      "timezone": "",
      "title": "Data Access Performance - Overview",
      "uid": "JXFhFS6mz",
      "version": 5
    }
  gc_capacity_reclaimed.json: |-
    {
      "__inputs": [
        {
          "name": "DS_FLUX",
          "label": "Flux",
          "description": "",
          "type": "datasource",
          "pluginId": "grafana-influxdb-flux-datasource",
          "pluginName": "Flux (InfluxDB) [BETA]"
        }
      ],
      "__requires": [
        {
          "type": "grafana",
          "id": "grafana",
          "name": "Grafana",
          "version": "6.2.5"
        },
        {
          "type": "datasource",
          "id": "grafana-influxdb-flux-datasource",
          "name": "Flux (InfluxDB) [BETA]",
          "version": "5.2.11"
        },
        {
          "type": "panel",
          "id": "graph",
          "name": "Graph",
          "version": ""
        },
        {
          "type": "panel",
          "id": "table",
          "name": "Table",
          "version": ""
        }
      ],
      "annotations": {
        "list": [
          {
            "builtIn": 1,
            "datasource": "-- Grafana --",
            "enable": true,
            "hide": true,
            "iconColor": "rgba(0, 211, 255, 1)",
            "name": "Annotations & Alerts",
            "type": "dashboard"
          }
        ]
      },
      "editable": true,
      "gnetId": null,
      "graphTooltip": 0,
      "id": null,
      "links": [
        {
          "asDropdown": true,
          "icon": "external link",
          "keepTime": true,
          "tags": [
            "Garbage Collection"
          ],
          "title": "Related dashboards",
          "type": "dashboards"
        }
      ],
      "panels": [
        {
          "columns": [],
          "fontSize": "100%",
          "gridPos": {
            "h": 3,
            "w": 24,
            "x": 0,
            "y": 0
          },
          "id": 100,
          "links": [],
          "options": {},
          "pageSize": null,
          "scroll": true,
          "showHeader": true,
          "sort": {
            "col": null,
            "desc": false
          },
          "styles": [
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Capacity Reclaimed",
              "thresholds": [],
              "type": "number",
              "unit": "bytes"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "User Data Reclaimed",
              "thresholds": [],
              "type": "number",
              "unit": "bytes"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "System Metadata Reclaimed",
              "thresholds": [],
              "type": "number",
              "unit": "bytes"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "decimals": 2,
              "pattern": "/.*/",
              "thresholds": [],
              "type": "hidden",
              "unit": "bytes"
            }
          ],
          "targets": [
            {
              "query": "userReclaimed = from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_gc_data_region\" and r._field == \"user_gc_reclaimed\")\n|> range($range\r)\n|> last()\n|> keep(columns: [\"_time\", \"_value\"]) \n\nsystemReclaimed = from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_gc_data_region\" and r._field == \"system_gc_reclaimed\")\n|> range($range\r)\n|> last()\n|> keep(columns: [\"_time\", \"_value\"]) \n  \nunion(tables: [userReclaimed,systemReclaimed])\n|>sum()\n|> rename(columns:{_value: \"Capacity Reclaimed\"})",
              "refId": "A",
              "resultFormat": "table"
            },
            {
              "query": "\nfrom(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_gc_data_region\" and r._field == \"user_gc_reclaimed\")\n|> range($range\r)\n|> last()\n|> keep(columns: [\"_time\", \"_value\"]) \n|> rename(columns:{_value: \"User Data Reclaimed\"})",
              "refId": "B",
              "resultFormat": "table"
            },
            {
              "query": "from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_gc_data_region\" and r._field == \"system_gc_reclaimed\")\n|> range($range\r)\n|> last()\n|> keep(columns: [\"_time\", \"_value\"]) \n|> rename(columns:{_value: \"System Metadata Reclaimed\"})",
              "refId": "C",
              "resultFormat": "table"
            }
          ],
          "timeFrom": null,
          "timeShift": null,
          "title": "Capacity Reclaimed",
          "transform": "table",
          "type": "table"
        },
        {
          "collapsed": true,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 3
          },
          "id": 90,
          "panels": [
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "datasource": "${DS_FLUX}",
              "fill": 1,
              "gridPos": {
                "h": 8,
                "w": 12,
                "x": 0,
                "y": 4
              },
              "id": 99,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "total": true,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "extended_range_start = int(v:$__range_from_s) - 7200\nsafe_range_start = int(v:$__range_from_s) - 3600\nfrom(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_gc_data_region\" and r._field == \"user_gc_reclaimed\")\n|> range(start: extended_range_start,stop:int(v:$__range_to_s)\r)\n|> difference(nonNegative: true)\n|> fill(column: \"_value\", value: 0)\n|> range(start: safe_range_start,stop:int(v:$__range_to_s)\r)",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "User Data Reclaimed",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "bits",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "datasource": "${DS_FLUX}",
              "fill": 1,
              "gridPos": {
                "h": 8,
                "w": 12,
                "x": 12,
                "y": 4
              },
              "id": 98,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": false,
                "max": false,
                "min": false,
                "show": true,
                "total": true,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "extended_range_start = int(v:$__range_from_s) - 7200\nsafe_range_start = int(v:$__range_from_s) - 3600\nfrom(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_gc_data_region\" and r._field == \"system_gc_reclaimed\")\n|> range(start: extended_range_start,stop:int(v:$__range_to_s)\r)\n|> difference(nonNegative: true)\n|> fill(column: \"_value\", value: 0)\n|> range(start: safe_range_start,stop:int(v:$__range_to_s)\r)\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "System Metadata Reclaimed",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "bits",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            }
          ],
          "title": "History Capacity Reclaimed",
          "type": "row"
        }
      ],
      "refresh": false,
      "schemaVersion": 18,
      "style": "dark",
      "tags": [
        "Garbage Collection"
      ],
      "templating": {
        "list": []
      },
      "time": {
        "from": "now-24h",
        "to": "now"
      },
      "timepicker": {
        "hidden": false,
        "refresh_intervals": [
          "5s",
          "10s",
          "30s",
          "1m",
          "5m",
          "15m",
          "30m",
          "1h",
          "2h",
          "1d"
        ],
        "time_options": [
          "5m",
          "15m",
          "1h",
          "6h",
          "12h",
          "24h",
          "2d",
          "7d",
          "30d"
        ]
      },
      "timezone": "utc",
      "title": "Garbage Collection: Capacity Reclaimed",
      "uid": "CRRPA51QMZzc",
      "version": 1
    }
  gc_garbage_detected.json: |-
    {
      "__inputs": [],
      "__requires": [
        {
          "type": "grafana",
          "id": "grafana",
          "name": "Grafana",
          "version": "6.2.5"
        },
        {
          "type": "panel",
          "id": "table",
          "name": "Table",
          "version": ""
        }
      ],
      "annotations": {
        "list": [
          {
            "builtIn": 1,
            "datasource": "-- Grafana --",
            "enable": true,
            "hide": true,
            "iconColor": "rgba(0, 211, 255, 1)",
            "name": "Annotations & Alerts",
            "type": "dashboard"
          }
        ]
      },
      "editable": true,
      "gnetId": null,
      "graphTooltip": 0,
      "id": null,
      "links": [
        {
          "asDropdown": true,
          "icon": "external link",
          "keepTime": true,
          "tags": [
            "Garbage Collection"
          ],
          "title": "Related dashboards",
          "type": "dashboards"
        }
      ],
      "panels": [
        {
          "columns": [],
          "fontSize": "100%",
          "gridPos": {
            "h": 4,
            "w": 24,
            "x": 0,
            "y": 0
          },
          "id": 95,
          "links": [],
          "options": {},
          "pageSize": null,
          "scroll": true,
          "showHeader": true,
          "sort": {
            "col": null,
            "desc": false
          },
          "styles": [
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Total Garbage Detected",
              "thresholds": [],
              "type": "number",
              "unit": "bytes"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Capacity Reclaimed",
              "thresholds": [],
              "type": "number",
              "unit": "bytes"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Capacity Pending Reclamation",
              "thresholds": [],
              "type": "number",
              "unit": "bytes"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Un-Reclaimable Garbage",
              "thresholds": [],
              "type": "number",
              "unit": "bytes"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "/.*/",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            }
          ],
          "targets": [
            {
              "query": "userReclaimed = from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_gc_data_region\" and r._field == \"user_gc_reclaimed\")\n|> range($range\r)\n|> last()\n|> keep(columns: [\"_time\", \"_value\"]) \n\nsystemReclaimed = from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_gc_data_region\" and r._field == \"system_gc_reclaimed\")\n|> range($range\r)\n|> last()\n|> keep(columns: [\"_time\", \"_value\"])\n\nuserPending = from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_gc_data_region\" and r._field == \"user_gc_pending\")\n|> range($range\r)\n|> last()\n|> keep(columns: [\"_time\", \"_value\"]) \n\nsystemPending = from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_gc_data_region\" and r._field == \"system_gc_pending\")\n|> range($range\r)\n|> last()\n|> keep(columns: [\"_time\", \"_value\"])\n\nuserUnReclaimed = from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_gc_data_region\" and r._field == \"user_gc_unreclaim\")\n|> range($range\r)\n|> last()\n|> keep(columns: [\"_time\", \"_value\"]) \n\nsystemUnReclaimed = from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_gc_data_region\" and r._field == \"system_gc_unreclaim\")\n|> range($range\r)\n|> last()\n|> keep(columns: [\"_time\", \"_value\"]) \n\n\nunion(tables: [userPending,systemPending,userUnReclaimed,systemUnReclaimed,userReclaimed,systemReclaimed ])\n|>sum()\n|> rename(columns:{_value: \"Total Garbage Detected\"})\n\n",
              "refId": "A",
              "resultFormat": "table"
            },
            {
              "query": "userReclaimed = from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_gc_data_region\" and r._field == \"user_gc_reclaimed\")\n|> range($range\r)\n|> last()\n|> keep(columns: [\"_time\", \"_value\"]) \n\nsystemReclaimed = from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_gc_data_region\" and r._field == \"system_gc_reclaimed\")\n|> range($range\r)\n|> last()\n|> keep(columns: [\"_time\", \"_value\"]) \n\nunion(tables: [userReclaimed,systemReclaimed])\n|>sum()\n|> rename(columns:{_value: \"Capacity Reclaimed\"})",
              "refId": "B",
              "resultFormat": "table"
            },
            {
              "query": "userPending = from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_gc_data_region\" and r._field == \"user_gc_pending\")\n|> range($range\r)\n|> last()\n|> keep(columns: [\"_time\", \"_value\"]) \n\nsystemPending = from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_gc_data_region\" and r._field == \"system_gc_pending\")\n|> range($range\r)\n|> last()\n|> keep(columns: [\"_time\", \"_value\"]) \n  \nunion(tables: [userPending,systemPending])\n|>sum()\n|> rename(columns:{_value: \"Capacity Pending Reclamation\"})",
              "refId": "C",
              "resultFormat": "table"
            },
            {
              "query": "userUnReclaimed = from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_gc_data_region\" and r._field == \"user_gc_unreclaim\")\n|> range($range\r)\n|> last()\n|> keep(columns: [\"_time\", \"_value\"]) \n\nsystemUnReclaimed = from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_gc_data_region\" and r._field == \"system_gc_unreclaim\")\n|> range($range\r)\n|> last()\n|> keep(columns: [\"_time\", \"_value\"]) \n\nunion(tables: [userUnReclaimed,systemUnReclaimed])\n|>sum()\n|> rename(columns:{_value: \"Un-Reclaimable Garbage\"})",
              "refId": "D",
              "resultFormat": "table"
            }
          ],
          "timeFrom": null,
          "timeShift": null,
          "title": "Garbage Detected",
          "transform": "table",
          "type": "table"
        }
      ],
      "refresh": false,
      "schemaVersion": 18,
      "style": "dark",
      "tags": [
        "Garbage Collection"
      ],
      "templating": {
        "list": []
      },
      "time": {
        "from": "now-24h",
        "to": "now"
      },
      "timepicker": {
        "hidden": false,
        "refresh_intervals": [
          "5s",
          "10s",
          "30s",
          "1m",
          "5m",
          "15m",
          "30m",
          "1h",
          "2h",
          "1d"
        ],
        "time_options": [
          "5m",
          "15m",
          "1h",
          "6h",
          "12h",
          "24h",
          "2d",
          "7d",
          "30d"
        ]
      },
      "timezone": "utc",
      "title": "Garbage Collection: Garbage Detected",
      "uid": "GCRPA51QMZzc",
      "version": 1
    }
  node_rebalancing.json: |-
    {
      "__inputs": [],
      "__requires": [
        {
          "type": "grafana",
          "id": "grafana",
          "name": "Grafana",
          "version": "6.2.5"
        },
        {
          "type": "panel",
          "id": "graph",
          "name": "Graph",
          "version": ""
        },
        {
          "type": "panel",
          "id": "table",
          "name": "Table",
          "version": ""
        }
      ],
      "annotations": {
        "list": [
          {
            "builtIn": 1,
            "datasource": "-- Grafana --",
            "enable": true,
            "hide": true,
            "iconColor": "rgba(0, 211, 255, 1)",
            "name": "Annotations & Alerts",
            "type": "dashboard"
          }
        ]
      },
      "editable": true,
      "gnetId": null,
      "graphTooltip": 0,
      "id": null,
      "links": [],
      "panels": [
        {
          "columns": [],
          "description": "The table displays the lastest values for the selected time range.",
          "fontSize": "100%",
          "gridPos": {
            "h": 3,
            "w": 24,
            "x": 0,
            "y": 0
          },
          "id": 8,
          "links": [],
          "options": {},
          "pageSize": null,
          "scroll": true,
          "showHeader": true,
          "sort": {
            "col": 3,
            "desc": true
          },
          "styles": [
            {
              "alias": "Time",
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "pattern": "Time",
              "type": "hidden"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Measurement",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Field",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Value",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Data Rebalanced",
              "thresholds": [],
              "type": "number",
              "unit": "bytes"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Pending Rebalancing",
              "thresholds": [],
              "type": "number",
              "unit": "bytes"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "/Rate of Rebalance./",
              "thresholds": [],
              "type": "number",
              "unit": "bytes"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "decimals": 2,
              "pattern": "/.*/",
              "thresholds": [],
              "type": "number",
              "unit": "short"
            }
          ],
          "targets": [
            {
              "query": "from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_rebalancing_region\" and r._field == \"data_rebalanced\")\n|> range($range)\n|> last()\n|> keep(columns: [\"_value\"])\n|> rename(columns:{_value:\"Data Rebalanced\"})",
              "refId": "A",
              "resultFormat": "table"
            },
            {
              "query": "from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_rebalancing_region\" and r._field == \"pending_rebalance\")\n|> range($range)\n|> last()\n|> keep(columns: [\"_value\"])\n|> rename(columns:{_value:\"Pending Rebalancing\"})",
              "refId": "B",
              "resultFormat": "table"
            },
            {
              "query": "\nfrom(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_rebalancing_region\" and r._field == \"data_rebalanced\")\n|> range($range)\n|> derivative(unit:24h, nonNegative: true, columns: [\"_value\"])\n|> range($range)\n|> last()\n|> keep(columns: [\"_value\"])\n|> rename(columns:{_value:\"Rate of Rebalance (per day)\"})",
              "refId": "C",
              "resultFormat": "table"
            }
          ],
          "title": "Node Rebalancing Overview",
          "transform": "table",
          "type": "table"
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "description": "History of the amount of data that has been rebalanced.",
          "fill": 1,
          "gridPos": {
            "h": 9,
            "w": 12,
            "x": 0,
            "y": 3
          },
          "id": 10,
          "legend": {
            "alignAsTable": true,
            "avg": false,
            "current": true,
            "max": true,
            "min": true,
            "show": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "null",
          "options": {},
          "percentage": false,
          "pointradius": 5,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_rebalancing_region\" and r._field == \"data_rebalanced\")\n|> range($range)\n|> drop(columns: [\"_measurement\"])\n|> set(key: \"_field\", value: \"Data Rebalanced\")",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Data Rebalanced",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "bytes",
              "label": "",
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": "",
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "description": "History of the amount of data that is in the rebalance queue but has not been rebalanced yet.",
          "fill": 1,
          "gridPos": {
            "h": 9,
            "w": 12,
            "x": 12,
            "y": 3
          },
          "id": 11,
          "legend": {
            "alignAsTable": true,
            "avg": false,
            "current": true,
            "max": true,
            "min": true,
            "show": true,
            "sortDesc": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "null",
          "options": {},
          "percentage": false,
          "pointradius": 5,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_rebalancing_region\" and r._field == \"pending_rebalance\")\n|> range($range)\n|> drop(columns: [\"_measurement\"])\n|> set(key: \"_field\", value: \"Pending Rebalancing\")",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Pending Rebalancing",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "bytes",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "description": "History of the incremental amount of data that was rebalanced for 24 hours.",
          "fill": 1,
          "gridPos": {
            "h": 9,
            "w": 24,
            "x": 0,
            "y": 12
          },
          "id": 13,
          "legend": {
            "alignAsTable": true,
            "avg": false,
            "current": true,
            "max": true,
            "min": true,
            "show": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "null",
          "options": {},
          "percentage": false,
          "pointradius": 5,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_rebalancing_region\" and r._field == \"data_rebalanced\")\n|> range($range)\n|> drop(columns: [\"_measurement\"])\n|> derivative(unit:24h, nonNegative: true, columns: [\"_value\"])\n|> range($range)\n|> set(key: \"_field\", value: \"Rate\")",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Rate of Rebalance (per day)",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "bytes",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        }
      ],
      "refresh": false,
      "schemaVersion": 18,
      "style": "dark",
      "tags": [],
      "templating": {
        "list": []
      },
      "time": {
        "from": "now-24h",
        "to": "now"
      },
      "timepicker": {
        "refresh_intervals": [
          "5s",
          "10s",
          "30s",
          "1m",
          "5m",
          "15m",
          "30m",
          "1h",
          "2h",
          "1d"
        ],
        "time_options": [
          "5m",
          "15m",
          "1h",
          "6h",
          "12h",
          "24h",
          "2d",
          "7d",
          "30d"
        ]
      },
      "timezone": "",
      "title": "Node Rebalancing",
      "uid": "hVVoixVZz",
      "version": 1
    }
  objectstore_availability.json: |-
    {
      "__inputs": [],
      "__requires": [
        {
          "type": "grafana",
          "id": "grafana",
          "name": "Grafana",
          "version": "6.2.5ecs"
        },
        {
          "type": "panel",
          "id": "table",
          "name": "Table",
          "version": ""
        }
      ],
      "annotations": {
        "list": [
          {
            "builtIn": 1,
            "datasource": "-- Grafana --",
            "enable": true,
            "hide": true,
            "iconColor": "rgba(0, 211, 255, 1)",
            "name": "Annotations & Alerts",
            "type": "dashboard"
          }
        ]
      },
      "editable": true,
      "gnetId": null,
      "graphTooltip": 0,
      "id": null,
      "links": [],
      "panels": [
        {
          "columns": [],
          "fontSize": "100%",
          "gridPos": {
            "h": 8,
            "w": 14,
            "x": 0,
            "y": 0
          },
          "id": 2,
          "links": [],
          "options": {},
          "pageSize": null,
          "scroll": true,
          "showHeader": true,
          "sort": {
            "col": 0,
            "desc": true
          },
          "styles": [
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "decimals": 2,
              "pattern": "Measurement",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Time",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Field",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "Object Store",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "release_name",
              "thresholds": [],
              "type": "number",
              "unit": "short"
            },
            {
              "alias": "Status",
              "colorMode": "value",
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "#C4162A",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Value",
              "thresholds": [
                "0",
                "1"
              ],
              "type": "string",
              "unit": "short",
              "valueMaps": [
                {
                  "text": "Stopped",
                  "value": "0"
                },
                {
                  "text": "Running",
                  "value": "1"
                }
              ]
            }
          ],
          "targets": [
            {
              "query": "// get all known release names for 30 days(TODO: make correction of this period)\nknown=from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_disk_bandwidth\")\n|> range(start: -30d)\n|> last()\n|> keep(columns: [\"release_name\", \"_value\", \"_time\"])\n//mark all known by old impossible date\n|> timeShift(duration: -99999d)\n//mark all known by unique date\n//|> set(key: \"_time\", value: \"\")\n//|> fill(column: \"_time\", value: 1970-01-01 04:00:00)\n\n// get only \"live\" relese names for last day\nactual=from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_disk_bandwidth\")\n|> range(start: -30m)\n|> last()\n|> keep(columns: [\"release_name\", \"_time\", \"_value\"])\n\nunion(tables: [known, actual])\n// separate unique release names\n|> group(columns: [\"release_name\"])\n|> sort(columns:[\"_time\"])\n//after this, release names with impossible old timestamp are suggested as disabled\n|> last()\n|> map(fn: (r) => ({\r\n      release_name: r.release_name,\r\n      _value:\r\n         if r._time <= 1870-01-01 04:00:00 then 0\r\n         else 1\n    }))",
              "refId": "A",
              "resultFormat": "table"
            }
          ],
          "timeFrom": null,
          "timeShift": null,
          "title": "Object Store Status",
          "transform": "table",
          "type": "table"
        }
      ],
      "schemaVersion": 18,
      "style": "dark",
      "tags": [],
      "templating": {
        "list": []
      },
      "time": {
        "from": "now-30d",
        "to": "now"
      },
      "timepicker": {
        "refresh_intervals": [
          "15m",
          "30m",
          "1h",
          "2h",
          "1d"
        ],
        "time_options": [
          "15m",
          "1h",
          "6h",
          "12h",
          "24h",
          "2d",
          "7d",
          "30d"
        ]
      },
      "timezone": "",
      "title": "Object Store Availability Status",
      "uid": "ZjIv-pfGk",
      "version": 12
    }
  recovery_status.json: |
    {
      "__inputs": [],
      "__requires": [
        {
          "type": "grafana",
          "id": "grafana",
          "name": "Grafana",
          "version": "6.2.5"
        },
        {
          "type": "panel",
          "id": "graph",
          "name": "Graph",
          "version": ""
        },
        {
          "type": "panel",
          "id": "table",
          "name": "Table",
          "version": ""
        }
      ],
      "annotations": {
        "list": [
          {
            "builtIn": 1,
            "datasource": "-- Grafana --",
            "enable": true,
            "hide": true,
            "iconColor": "rgba(0, 211, 255, 1)",
            "name": "Annotations & Alerts",
            "type": "dashboard"
          }
        ]
      },
      "editable": true,
      "gnetId": null,
      "graphTooltip": 0,
      "id": null,
      "links": [],
      "panels": [
        {
          "columns": [],
          "description": "The table displays the latest values of the logical size of the data yet to be recovered, the rate at which data is being recovered and time to recovery completion in the selected time range.",
          "fontSize": "100%",
          "gridPos": {
            "h": 3,
            "w": 24,
            "x": 0,
            "y": 0
          },
          "id": 10,
          "links": [],
          "options": {},
          "pageSize": null,
          "scroll": true,
          "showHeader": true,
          "sort": {
            "col": 0,
            "desc": true
          },
          "styles": [
            {
              "alias": " Amount of Data to be Recovered ",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "data",
              "thresholds": [],
              "type": "number",
              "unit": "bytes"
            },
            {
              "alias": "Recovery Rate (per second)",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "rate",
              "thresholds": [],
              "type": "number",
              "unit": "bytes"
            },
            {
              "alias": "Time to Completion",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "ETC",
              "preserveFormat": false,
              "rangeMaps": [
                {
                  "from": "",
                  "text": "",
                  "to": ""
                }
              ],
              "sanitize": false,
              "thresholds": [],
              "type": "number",
              "unit": "s",
              "valueMaps": [
                {
                  "text": "N/A",
                  "value": "0"
                }
              ]
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Time",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Measurement",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Field",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Value",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            }
          ],
          "targets": [
            {
              "query": "a = from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_recover_status_region\" and r._field == \"data_to_recover\")\n|> range($range)\n|> keep(columns: [\"_time\", \"_value\"])\n|> last()\n|> keep(columns: [\"_value\"])\n|> rename(columns:{_value:\"data\"})\n|> yield(name: \"1\")\n\noffset = 21600\r\nextended_range_start = int(v:$__range_to_s) - offset\r\nextended_range_stop = int(v:$__range_to_s)\nb = from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_recover_status_region\" and r._field == \"data_recovered\")\n|> range(start: extended_range_start, stop: extended_range_stop)\n|> window(every: 15m)\n|> last()\n|> keep(columns: [\"_time\", \"_value\"])\n|> derivative(nonNegative: true, columns: [\"_value\"])\n|> mean()\n|> rename(columns: {_value: \"rate\"})\n|> yield(name: \"2\")\n\njoin(tables: {aa: a, bb: b})\n|> map(fn: (r) => ({\"ETC\": \n                    if (r.data > 0 and r.rate > 0) then string(v:float(v:r.data)/r.rate) else \"-\",\n                    \"range\": \"$range\"}))\n|> map(fn: (r) => ({ETC: if ((r.range =~ /stop/)) then \"-\" else r.ETC})",
              "refId": "A",
              "resultFormat": "table"
            }
          ],
          "timeFrom": null,
          "timeShift": null,
          "title": "Recovery Status",
          "transform": "table",
          "type": "table"
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "description": "History of the amount of data pending recovery in the selected time range.",
          "fill": 1,
          "gridPos": {
            "h": 9,
            "w": 12,
            "x": 0,
            "y": 3
          },
          "id": 4,
          "legend": {
            "alignAsTable": true,
            "avg": false,
            "current": true,
            "hideEmpty": false,
            "hideZero": false,
            "max": true,
            "min": true,
            "show": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "null",
          "options": {},
          "percentage": false,
          "pointradius": 1,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_recover_status_region\" and r._field == \"data_to_recover\")\n|> range($range)\n|> keep(columns: [\"_time\", \"_value\"])\n|> set(key: \"_field\", value: \"Amount of Data to be Recovered\")",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Amount of Data to be Recovered",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "decimals": 1,
              "format": "bytes",
              "label": "",
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "bytes",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": false
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "description": "History of the rate at which data was recovered.",
          "fill": 1,
          "gridPos": {
            "h": 9,
            "w": 12,
            "x": 12,
            "y": 3
          },
          "id": 6,
          "legend": {
            "alignAsTable": true,
            "avg": false,
            "current": true,
            "max": true,
            "min": true,
            "rightSide": false,
            "show": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "null",
          "options": {},
          "percentage": false,
          "pointradius": 5,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "offset = 300\r\nextended_range_start = int(v:$__range_from_s) - offset\r\nextended_range_stop = int(v:$__range_to_s)\nfrom(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_recover_status_region\" and r._field == \"data_recovered\")\n|> range(start: extended_range_start, stop: extended_range_stop)\n|> keep(columns: [\"_time\", \"_value\"])\n|> derivative(nonNegative: true, columns: [\"_value\"])\n|> range($range)\n|> set(key: \"_field\", value: \"Recovery Rate\")",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Recovery Rate (per second)",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "bytes",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": false
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        }
      ],
      "refresh": false,
      "schemaVersion": 18,
      "style": "dark",
      "tags": [],
      "templating": {
        "list": []
      },
      "time": {
        "from": "now-24h",
        "to": "now"
      },
      "timepicker": {
        "refresh_intervals": [
          "5s",
          "10s",
          "30s",
          "1m",
          "5m",
          "15m",
          "30m",
          "1h",
          "2h",
          "1d"
        ],
        "time_options": [
          "5m",
          "15m",
          "1h",
          "6h",
          "12h",
          "24h",
          "2d",
          "7d",
          "30d"
        ]
      },
      "timezone": "",
      "title": "Recovery Status",
      "uid": "9t61eCnZk",
      "version": 1
    }
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/grafana/templates/dashboards.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "objectscale-manager-grafana-dashboards-internal-oe"
  labels:
    release: objectscale-manager
data:
  baremetal-csi.json: |-
    {
      "__inputs": [
        {
          "name": "DS_FLUX",
          "label": "Flux",
          "description": "",
          "type": "datasource",
          "pluginId": "grafana-influxdb-flux-datasource",
          "pluginName": "Flux (InfluxDB) [BETA]"
        }
      ],
      "__requires": [
        {
          "type": "grafana",
          "id": "grafana",
          "name": "Grafana",
          "version": "6.2.5ecs"
        },
        {
          "type": "datasource",
          "id": "grafana-influxdb-flux-datasource",
          "name": "Flux (InfluxDB) [BETA]",
          "version": "5.2.12"
        },
        {
          "type": "panel",
          "id": "graph",
          "name": "Graph",
          "version": ""
        },
        {
          "type": "panel",
          "id": "table",
          "name": "Table",
          "version": ""
        }
      ],
      "annotations": {
        "list": [
          {
            "builtIn": 1,
            "datasource": "-- Grafana --",
            "enable": true,
            "hide": true,
            "iconColor": "rgba(0, 211, 255, 1)",
            "name": "Annotations & Alerts",
            "type": "dashboard"
          }
        ]
      },
      "editable": true,
      "gnetId": null,
      "graphTooltip": 0,
      "id": null,
      "iteration": 1612835412958,
      "links": [],
      "panels": [
        {
          "columns": [],
          "fontSize": "130%",
          "gridPos": {
            "h": 3,
            "w": 24,
            "x": 0,
            "y": 0
          },
          "id": 42,
          "links": [],
          "options": {},
          "pageSize": 1,
          "scroll": false,
          "showHeader": true,
          "sort": {
            "col": 0,
            "desc": true
          },
          "styles": [
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Time",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Measurement",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Field",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Value",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            }
          ],
          "targets": [
            {
              "query": "from(bucket: \"monitoring_op\")\n  |> filter(fn: (r) => r._measurement == \"csi_build_info\")   \n  |> range($range)\n  |> keep(columns: [\"branch\",\"revision\",\"version\"])\n  |> unique(column: \"version\")\n  \n",
              "refId": "A",
              "resultFormat": "table"
            }
          ],
          "timeFrom": null,
          "timeShift": null,
          "title": "Baremetal CSI build information",
          "transform": "table",
          "transparent": true,
          "type": "table"
        },
        {
          "collapsed": true,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 3
          },
          "id": 13,
          "panels": [
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "fill": 1,
              "gridPos": {
                "h": 7,
                "w": 12,
                "x": 0,
                "y": 4
              },
              "id": 7,
              "legend": {
                "alignAsTable": false,
                "avg": false,
                "current": false,
                "hideEmpty": false,
                "hideZero": false,
                "max": true,
                "min": true,
                "rightSide": false,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")\n  |> filter(fn: (r) => r._measurement == \"csi_go_goroutines\" and r.app==\"baremetal-csi-controller\" )   \n  |> range($range)\n  |> keep(columns:[\"_time\", \"_value\", \"pod_name\"])\n  |> rename(columns: {pod_name: \"_measurement\"})",
                  "refId": "A",
                  "resultFormat": "time_series"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Goroutines - Controller",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "decimals": null,
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "fill": 1,
              "gridPos": {
                "h": 7,
                "w": 12,
                "x": 12,
                "y": 4
              },
              "id": 2,
              "legend": {
                "alignAsTable": false,
                "avg": false,
                "current": false,
                "hideEmpty": false,
                "hideZero": false,
                "max": true,
                "min": true,
                "rightSide": false,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")\n  |> filter(fn: (r) => r._measurement == \"csi_go_goroutines\" and r.app==\"baremetal-csi-node\" )   \n  |> range($range)\n  |> keep(columns:[\"_time\", \"_value\", \"pod_name\"])\n  |> rename(columns: {pod_name: \"_measurement\"})",
                  "refId": "A",
                  "resultFormat": "time_series"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Goroutines - Nodes",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "decimals": null,
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "",
              "fill": 1,
              "gridPos": {
                "h": 7,
                "w": 12,
                "x": 0,
                "y": 11
              },
              "id": 8,
              "legend": {
                "avg": false,
                "current": false,
                "max": true,
                "min": true,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")\n  |> filter(fn: (r) => r._measurement == \"csi_process_open_fds\" and r.app==\"baremetal-csi-controller\" )   \n  |> range($range)\n  |> keep(columns:[\"_time\", \"_value\", \"pod_name\"])\n  |> rename(columns: {pod_name: \"_measurement\"})",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Open file descriptors - Controller",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "",
              "fill": 1,
              "gridPos": {
                "h": 7,
                "w": 12,
                "x": 12,
                "y": 11
              },
              "id": 4,
              "legend": {
                "avg": false,
                "current": false,
                "max": true,
                "min": true,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")\n  |> filter(fn: (r) => r._measurement == \"csi_process_open_fds\" and r.app==\"baremetal-csi-node\" )   \n  |> range($range)\n  |> keep(columns:[\"_time\", \"_value\", \"pod_name\"])\n  |> rename(columns: {pod_name: \"_measurement\"})",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Open file descriptors - Nodes",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "",
              "fill": 1,
              "gridPos": {
                "h": 7,
                "w": 12,
                "x": 0,
                "y": 18
              },
              "id": 10,
              "legend": {
                "avg": false,
                "current": false,
                "max": true,
                "min": true,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")\n  |> filter(fn: (r) => r._measurement == \"csi_process_virtual_memory_bytes\" and r.app==\"baremetal-csi-controller\" )   \n  |> range($range)\n  |> keep(columns:[\"_time\", \"_value\", \"pod_name\"])\n  |> rename(columns: {pod_name: \"_measurement\"})",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Virtual Memory - Controller",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "",
              "fill": 1,
              "gridPos": {
                "h": 7,
                "w": 12,
                "x": 12,
                "y": 18
              },
              "id": 9,
              "legend": {
                "avg": false,
                "current": false,
                "max": true,
                "min": true,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")\n  |> filter(fn: (r) => r._measurement == \"csi_process_virtual_memory_bytes\" and r.app==\"baremetal-csi-node\" )   \n  |> range($range)\n  |> keep(columns:[\"_time\", \"_value\", \"pod_name\"])\n  |> rename(columns: {pod_name: \"_measurement\"})",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Virtual Memory - Nodes",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "",
              "fill": 1,
              "gridPos": {
                "h": 7,
                "w": 12,
                "x": 0,
                "y": 25
              },
              "id": 27,
              "legend": {
                "avg": false,
                "current": false,
                "max": true,
                "min": true,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")\n  |> filter(fn: (r) => r._measurement == \"csi_process_resident_memory_bytes\" and r.app==\"baremetal-csi-controller\" )   \n  |> range($range)\n  |> keep(columns:[\"_time\", \"_value\", \"pod_name\"])\n  |> rename(columns: {pod_name: \"_measurement\"})",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Resident Memory - Controller",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "",
              "fill": 1,
              "gridPos": {
                "h": 7,
                "w": 12,
                "x": 12,
                "y": 25
              },
              "id": 28,
              "legend": {
                "avg": false,
                "current": false,
                "max": true,
                "min": true,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")\n  |> filter(fn: (r) => r._measurement == \"csi_process_resident_memory_bytes\" and r.app==\"baremetal-csi-node\" )   \n  |> range($range)\n  |> keep(columns:[\"_time\", \"_value\", \"pod_name\"])\n  |> rename(columns: {pod_name: \"_measurement\"})",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Resident Memory - Nodes",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            }
          ],
          "title": "Process metrics",
          "type": "row"
        },
        {
          "collapsed": true,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 4
          },
          "id": 15,
          "panels": [
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "",
              "fill": 1,
              "gridPos": {
                "h": 7,
                "w": 12,
                "x": 0,
                "y": 5
              },
              "id": 17,
              "legend": {
                "avg": false,
                "current": false,
                "hideZero": true,
                "max": true,
                "min": true,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")  \n|> filter(fn: (r) => r._measurement == \"csi_grpc_server_handling_seconds\" and r.app==\"baremetal-csi-controller\" and r._field!=\"sum\" and r._field!=\"count\")\n|> range($range)\n|> keep(columns:[\"_time\", \"_value\",\"_field\", \"pod_name\",\"_measurement\",\"grpc_method\"])\n|> difference(nonNegative: true)\n|> group(columns: [\"_time\", \"pod_name\",\"grpc_method\"])\n|> map(fn:(r) => ({le: float(v:r._field), _value: float(v:r._value)})) \n|> histogramQuantile(quantile: 0.9)\n|> group(columns: [\"pod_name\",\"grpc_method\"])\n|> rename(columns: {pod_name: \"_measurement\"})",
                  "refId": "A",
                  "resultFormat": "time_series"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "90%-tile latency of all requests - Controller",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 3,
                  "format": "s",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "",
              "fill": 1,
              "gridPos": {
                "h": 7,
                "w": 12,
                "x": 12,
                "y": 5
              },
              "id": 18,
              "legend": {
                "avg": false,
                "current": false,
                "hideEmpty": false,
                "hideZero": true,
                "max": true,
                "min": true,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")  \n|> filter(fn: (r) => r._measurement == \"csi_grpc_server_handling_seconds\" and r.app==\"baremetal-csi-node\" and r._field!=\"sum\" and r._field!=\"count\")\n|> range($range)\n|> keep(columns:[\"_time\", \"_value\",\"_field\", \"pod_name\",\"_measurement\",\"grpc_method\"])\n|> difference(nonNegative: true)\n|> group(columns: [\"_time\", \"pod_name\",\"grpc_method\"])\n|> map(fn:(r) => ({le: float(v:r._field), _value: float(v:r._value)})) \n|> histogramQuantile(quantile: 0.9)\n|> group(columns: [\"pod_name\",\"grpc_method\"])\n|> rename(columns: {pod_name: \"_measurement\"})",
                  "refId": "A",
                  "resultFormat": "time_series"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "90%-tile latency of all requests - Node",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 3,
                  "format": "s",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "",
              "fill": 1,
              "gridPos": {
                "h": 7,
                "w": 12,
                "x": 0,
                "y": 12
              },
              "id": 22,
              "legend": {
                "avg": false,
                "current": false,
                "hideZero": true,
                "max": true,
                "min": true,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")  \n|> filter(fn: (r) => r._measurement == \"csi_grpc_server_handling_seconds\" and r.app==\"baremetal-csi-controller\" and (r._field==\"sum\" or r._field==\"count\"))\n|> range($range)\n|> keep(columns:[\"_time\", \"_value\",\"_field\", \"pod_name\",\"grpc_method\"])\n|> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n|> map(fn:(r) => ({_time:r._time, _value : r.sum/r.count})) \n|> difference(nonNegative: true)",
                  "refId": "A",
                  "resultFormat": "time_series"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Average duration of requests - Controller",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 3,
                  "format": "s",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "",
              "fill": 1,
              "gridPos": {
                "h": 7,
                "w": 12,
                "x": 12,
                "y": 12
              },
              "id": 23,
              "legend": {
                "avg": false,
                "current": false,
                "hideZero": true,
                "max": true,
                "min": true,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")  \n|> filter(fn: (r) => r._measurement == \"csi_grpc_server_handling_seconds\" and r.app==\"baremetal-csi-node\" and (r._field==\"sum\" or r._field==\"count\"))\n|> range($range)\n|> keep(columns:[\"_time\", \"_value\",\"_field\", \"pod_name\",\"grpc_method\"])\n|> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n|> map(fn:(r) => ({_time:r._time, _value : r.sum/r.count})) \n|> difference(nonNegative: true)",
                  "refId": "A",
                  "resultFormat": "time_series"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Average duration of requests - Node",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 3,
                  "format": "s",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "fill": 1,
              "gridPos": {
                "h": 8,
                "w": 12,
                "x": 0,
                "y": 19
              },
              "id": 26,
              "legend": {
                "avg": false,
                "current": false,
                "hideZero": true,
                "max": false,
                "min": false,
                "show": true,
                "total": false,
                "values": false
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")  \n|> filter(fn: (r) => r._measurement == \"csi_grpc_server_started_total\" and r.app==\"baremetal-csi-controller\")\n|> range($range)\n|> keep(columns:[\"_time\", \"_value\",\"_field\", \"pod_name\",\"_measurement\",])\n|> group(columns: [\"_time\", \"pod_name\"])\n|> sum()\n|> group(columns: [\"pod_name\"])\n|> difference(nonNegative: true)\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Number of requests per pod - Controller",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "fill": 1,
              "gridPos": {
                "h": 8,
                "w": 12,
                "x": 12,
                "y": 19
              },
              "id": 21,
              "legend": {
                "avg": false,
                "current": false,
                "hideZero": true,
                "max": false,
                "min": false,
                "show": true,
                "total": false,
                "values": false
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")  \n|> filter(fn: (r) => r._measurement == \"csi_grpc_server_started_total\" and r.app==\"baremetal-csi-node\")\n|> range($range)\n|> keep(columns:[\"_time\", \"_value\",\"_field\", \"pod_name\",\"_measurement\",])\n|> group(columns: [\"_time\", \"pod_name\"])\n|> sum()\n|> group(columns: [\"pod_name\"])\n|> difference(nonNegative: true)\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Number of requests per pod - Node",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "fill": 1,
              "gridPos": {
                "h": 8,
                "w": 12,
                "x": 0,
                "y": 27
              },
              "id": 20,
              "legend": {
                "avg": false,
                "current": false,
                "hideZero": true,
                "max": false,
                "min": false,
                "show": true,
                "total": false,
                "values": false
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")  \n|> filter(fn: (r) => r._measurement == \"csi_grpc_server_started_total\" and r.app==\"baremetal-csi-controller\")\n|> range($range)\n|> keep(columns:[\"_time\", \"_value\", \"pod_name\",\"grpc_method\"])\n|> group(columns: [\"pod_name\",\"grpc_method\"])\n|> difference(nonNegative: true)\n\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Number of requests per pod by method - Controller",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "fill": 1,
              "gridPos": {
                "h": 8,
                "w": 12,
                "x": 12,
                "y": 27
              },
              "id": 24,
              "legend": {
                "avg": false,
                "current": false,
                "hideZero": true,
                "max": false,
                "min": false,
                "show": true,
                "total": false,
                "values": false
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")  \n|> filter(fn: (r) => r._measurement == \"csi_grpc_server_started_total\" and r.app==\"baremetal-csi-node\")\n|> range($range)\n|> keep(columns:[\"_time\", \"_value\", \"pod_name\",\"grpc_method\"])\n|> group(columns: [\"pod_name\",\"grpc_method\"])\n|> difference(nonNegative: true)\n\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Number of requests per pod by method - Node",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            }
          ],
          "repeat": null,
          "title": "GRPC metrics - Overview",
          "type": "row"
        },
        {
          "collapsed": true,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 5
          },
          "id": 30,
          "panels": [
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "",
              "fill": 1,
              "gridPos": {
                "h": 7,
                "w": 12,
                "x": 0,
                "y": 6
              },
              "id": 31,
              "legend": {
                "avg": false,
                "current": false,
                "hideZero": true,
                "max": true,
                "min": true,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")  \n|> filter(fn: (r) => r._measurement == \"csi_grpc_server_handling_seconds\" and r.app==\"baremetal-csi-controller\" and r._field!=\"sum\" and r._field!=\"count\" and r.grpc_method==\"${controller_method}\")\n|> range($range)\n|> keep(columns:[\"_time\", \"_value\",\"_field\", \"pod_name\",\"_measurement\",\"grpc_method\"])\n|> difference(nonNegative: true)\n|> group(columns: [\"_time\", \"pod_name\",\"grpc_method\"])\n|> map(fn:(r) => ({le: float(v:r._field), _value: float(v:r._value)})) \n|> histogramQuantile(quantile: 0.9)\n|> group(columns: [\"pod_name\",\"grpc_method\"])\n|> rename(columns: {pod_name: \"_measurement\"})",
                  "refId": "A",
                  "resultFormat": "time_series"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "90%-tile latency of method - Controller",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 3,
                  "format": "s",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "",
              "fill": 1,
              "gridPos": {
                "h": 7,
                "w": 12,
                "x": 12,
                "y": 6
              },
              "id": 32,
              "legend": {
                "avg": false,
                "current": false,
                "hideZero": true,
                "max": true,
                "min": true,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")  \n|> filter(fn: (r) => r._measurement == \"csi_grpc_server_handling_seconds\" and r.app==\"baremetal-csi-controller\" and (r._field==\"sum\" or r._field==\"count\") and r.grpc_method==\"${controller_method}\")\n|> range($range)\n|> keep(columns:[\"_time\", \"_value\",\"_field\", \"pod_name\",\"grpc_method\"])\n|> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n|> map(fn:(r) => ({_time:r._time, _value : r.sum/r.count})) \n|> difference(nonNegative: true)",
                  "refId": "A",
                  "resultFormat": "time_series"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Average duration of requests of method - Controller",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 3,
                  "format": "s",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "fill": 1,
              "gridPos": {
                "h": 8,
                "w": 12,
                "x": 0,
                "y": 13
              },
              "id": 35,
              "legend": {
                "avg": false,
                "current": false,
                "hideZero": true,
                "max": false,
                "min": false,
                "show": true,
                "total": false,
                "values": false
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")  \n|> filter(fn: (r) => r._measurement == \"csi_grpc_server_started_total\" and r.app==\"baremetal-csi-controller\" and r.grpc_method==\"${controller_method}\")\n|> range($range)\n|> keep(columns:[\"_time\", \"_value\",\"_field\", \"pod_name\",\"_measurement\",])\n|> group(columns: [\"_time\", \"pod_name\"])\n|> sum()\n|> group(columns: [\"pod_name\"])\n|> difference(nonNegative: true)\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Number of requests of method - Controller",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "fill": 1,
              "gridPos": {
                "h": 8,
                "w": 12,
                "x": 12,
                "y": 13
              },
              "id": 37,
              "legend": {
                "avg": false,
                "current": false,
                "hideZero": true,
                "max": false,
                "min": false,
                "show": true,
                "total": false,
                "values": false
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")  \n|> filter(fn: (r) => r._measurement == \"csi_grpc_server_started_total\" and r.app==\"baremetal-csi-controller\" and r.grpc_method==\"${controller_method}\")\n|> range($range)\n|> keep(columns:[\"_time\", \"_value\", \"pod_name\",\"grpc_method\"])\n|> group(columns: [\"pod_name\",\"grpc_method\"])\n|> difference(nonNegative: true)\n\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Number of requests of method- Controller",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "",
              "fill": 1,
              "gridPos": {
                "h": 7,
                "w": 12,
                "x": 0,
                "y": 21
              },
              "id": 33,
              "legend": {
                "avg": false,
                "current": false,
                "hideEmpty": false,
                "hideZero": true,
                "max": true,
                "min": true,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")  \n|> filter(fn: (r) => r._measurement == \"csi_grpc_server_handling_seconds\" and r.app==\"baremetal-csi-node\" and r._field!=\"sum\" and r._field!=\"count\" and r.grpc_method==\"${node_method}\")\n|> range($range)\n|> keep(columns:[\"_time\", \"_value\",\"_field\", \"pod_name\",\"_measurement\",\"grpc_method\"])\n|> difference(nonNegative: true)\n|> group(columns: [\"_time\", \"pod_name\",\"grpc_method\"])\n|> map(fn:(r) => ({le: float(v:r._field), _value: float(v:r._value)})) \n|> histogramQuantile(quantile: 0.9)\n|> group(columns: [\"pod_name\",\"grpc_method\"])\n|> rename(columns: {pod_name: \"_measurement\"})",
                  "refId": "A",
                  "resultFormat": "time_series"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "90%-tile latency of method by pods - Node",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 3,
                  "format": "s",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "",
              "fill": 1,
              "gridPos": {
                "h": 7,
                "w": 12,
                "x": 12,
                "y": 21
              },
              "id": 34,
              "legend": {
                "avg": false,
                "current": false,
                "hideZero": true,
                "max": true,
                "min": true,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")  \n|> filter(fn: (r) => r._measurement == \"csi_grpc_server_handling_seconds\" and r.app==\"baremetal-csi-node\" and (r._field==\"sum\" or r._field==\"count\") and r.grpc_method==\"${node_method}\")\n|> range($range)\n|> keep(columns:[\"_time\", \"_value\",\"_field\", \"pod_name\",\"grpc_method\"])\n|> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n|> map(fn:(r) => ({_time:r._time, _value : r.sum/r.count})) \n|> difference(nonNegative: true)",
                  "refId": "A",
                  "resultFormat": "time_series"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Average duration of method by pods - Node",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 3,
                  "format": "s",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "",
              "fill": 1,
              "gridPos": {
                "h": 7,
                "w": 12,
                "x": 0,
                "y": 28
              },
              "id": 39,
              "legend": {
                "avg": false,
                "current": false,
                "hideEmpty": false,
                "hideZero": true,
                "max": true,
                "min": true,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")  \n|> filter(fn: (r) => r._measurement == \"csi_grpc_server_handling_seconds\" and r.app==\"baremetal-csi-node\" and r._field!=\"sum\" and r._field!=\"count\" and r.pod_name==\"${node_pod}\")\n|> range($range)\n|> keep(columns:[\"_time\", \"_value\",\"_field\", \"pod_name\",\"_measurement\",\"grpc_method\"])\n|> difference(nonNegative: true)\n|> group(columns: [\"_time\", \"pod_name\",\"grpc_method\"])\n|> map(fn:(r) => ({le: float(v:r._field), _value: float(v:r._value)})) \n|> histogramQuantile(quantile: 0.9)\n|> group(columns: [\"pod_name\",\"grpc_method\"])\n|> rename(columns: {pod_name: \"_measurement\"})",
                  "refId": "A",
                  "resultFormat": "time_series"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "90%-tile latency on pod by methods - Node",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 3,
                  "format": "s",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "",
              "fill": 1,
              "gridPos": {
                "h": 7,
                "w": 12,
                "x": 12,
                "y": 28
              },
              "id": 40,
              "legend": {
                "avg": false,
                "current": false,
                "hideZero": true,
                "max": true,
                "min": true,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")  \n|> filter(fn: (r) => r._measurement == \"csi_grpc_server_handling_seconds\" and r.app==\"baremetal-csi-node\" and (r._field==\"sum\" or r._field==\"count\") and r.grpc_method==\"${node_method}\" and r.pod_name==\"${node_pod}\")\n|> range($range)\n|> keep(columns:[\"_time\", \"_value\",\"_field\", \"pod_name\",\"grpc_method\"])\n|> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n|> map(fn:(r) => ({_time:r._time, _value : r.sum/r.count})) \n|> difference(nonNegative: true)",
                  "refId": "A",
                  "resultFormat": "time_series"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Average duration on pod by method - Node",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 3,
                  "format": "s",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "fill": 1,
              "gridPos": {
                "h": 8,
                "w": 12,
                "x": 0,
                "y": 35
              },
              "id": 36,
              "legend": {
                "avg": false,
                "current": false,
                "hideZero": true,
                "max": false,
                "min": false,
                "show": true,
                "total": false,
                "values": false
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")  \n|> filter(fn: (r) => r._measurement == \"csi_grpc_server_started_total\" and r.app==\"baremetal-csi-node\" and r.pod_name==\"${node_pod}\")\n|> range($range)\n|> keep(columns:[\"_time\", \"_value\",\"_field\", \"pod_name\",\"_measurement\",])\n|> group(columns: [\"_time\", \"pod_name\"])\n|> sum()\n|> group(columns: [\"pod_name\"])\n|> difference(nonNegative: true)\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Number of requests on pod - Node",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "fill": 1,
              "gridPos": {
                "h": 8,
                "w": 12,
                "x": 12,
                "y": 35
              },
              "id": 38,
              "legend": {
                "avg": false,
                "current": false,
                "hideZero": true,
                "max": false,
                "min": false,
                "show": true,
                "total": false,
                "values": false
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")  \n|> filter(fn: (r) => r._measurement == \"csi_grpc_server_started_total\" and r.app==\"baremetal-csi-node\" and r.pod_name==\"${node_pod}\" and r.grpc_method==\"${node_method}\" )\n|> range($range)\n|> keep(columns:[\"_time\", \"_value\", \"pod_name\",\"grpc_method\"])\n|> group(columns: [\"pod_name\",\"grpc_method\"])\n|> difference(nonNegative: true)\n\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Number of requests per pod by method - Node",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            }
          ],
          "title": "GRPC metrics - Detailed",
          "type": "row"
        },
        {
          "collapsed": true,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 6
          },
          "id": 62,
          "panels": [
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "",
              "fill": 1,
              "gridPos": {
                "h": 7,
                "w": 12,
                "x": 0,
                "y": 7
              },
              "id": 60,
              "legend": {
                "avg": false,
                "current": false,
                "hideZero": true,
                "max": true,
                "min": true,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")  \n|> filter(fn: (r) => r._measurement == \"csi_reconcile_duration_seconds\" and r.app==\"baremetal-csi-node\" and r._field!=\"sum\" and r._field!=\"count\")\n|> range($range)\n|> keep(columns:[\"_time\", \"_value\",\"_field\", \"pod_name\",\"_measurement\",\"type\"])\n|> difference(nonNegative: true)\n|> group(columns: [\"_time\", \"pod_name\",\"type\"])\n|> map(fn:(r) => ({le: float(v:r._field), _value: float(v:r._value)})) \n|> histogramQuantile(quantile: 0.9)\n|> group(columns: [\"pod_name\",\"type\"])\n|> rename(columns: {pod_name: \"_measurement\"})",
                  "refId": "A",
                  "resultFormat": "time_series"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "90%-tile latency of all reconcile methods ",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 3,
                  "format": "s",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "",
              "fill": 1,
              "gridPos": {
                "h": 7,
                "w": 12,
                "x": 12,
                "y": 7
              },
              "id": 66,
              "legend": {
                "avg": false,
                "current": false,
                "hideZero": true,
                "max": true,
                "min": true,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")  \n|> filter(fn: (r) => r._measurement == \"csi_reconcile_duration_seconds\" and r.app==\"baremetal-csi-node\" and r._field!=\"sum\" and r._field!=\"count\" and r.pod_name==\"${node_pod}\")\n|> range($range)\n|> keep(columns:[\"_time\", \"_value\",\"_field\", \"pod_name\",\"_measurement\",\"type\"])\n|> difference(nonNegative: true)\n|> group(columns: [\"_time\", \"pod_name\",\"type\"])\n|> map(fn:(r) => ({le: float(v:r._field), _value: float(v:r._value)})) \n|> histogramQuantile(quantile: 0.9)\n|> group(columns: [\"pod_name\",\"type\"])\n|> rename(columns: {pod_name: \"_measurement\"})",
                  "refId": "A",
                  "resultFormat": "time_series"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "90%-tile latency of all reconcile methods on pod",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 3,
                  "format": "s",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            }
          ],
          "repeat": null,
          "title": "Reconcile",
          "type": "row"
        },
        {
          "collapsed": true,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 7
          },
          "id": 44,
          "panels": [
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "",
              "fill": 1,
              "gridPos": {
                "h": 7,
                "w": 24,
                "x": 0,
                "y": 8
              },
              "id": 45,
              "legend": {
                "avg": false,
                "current": false,
                "hideZero": true,
                "max": true,
                "min": true,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "hide": true,
                  "query": "from(bucket: \"monitoring_op\")  \n|> filter(fn: (r) => r._measurement == \"csi_kubeclient_execution_duration_seconds\" and r.app==\"baremetal-csi-controller\" and r._field!=\"sum\" and r._field!=\"count\")\n|> range($range)\n|> keep(columns:[\"_time\", \"_value\",\"_field\", \"pod_name\",\"_measurement\",\"method\"])\n|> difference(nonNegative: true)\n|> group(columns: [\"_time\", \"pod_name\",\"method\"])\n|> map(fn:(r) => ({le: float(v:r._field), _value: float(v:r._value)})) \n|> histogramQuantile(quantile: 0.9)\n|> group(columns: [\"pod_name\",\"method\"])\n|> rename(columns: {pod_name: \"_measurement\"})",
                  "refId": "A",
                  "resultFormat": "time_series"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "90%-tile latency of all requests - Controller",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 3,
                  "format": "s",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "",
              "fill": 1,
              "gridPos": {
                "h": 7,
                "w": 24,
                "x": 0,
                "y": 15
              },
              "id": 46,
              "legend": {
                "avg": false,
                "current": false,
                "hideZero": true,
                "max": true,
                "min": true,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "hide": true,
                  "query": "from(bucket: \"monitoring_op\")  \n|> filter(fn: (r) => r._measurement == \"csi_kubeclient_execution_duration_seconds\" and r.app==\"baremetal-csi-node\" and r._field!=\"sum\" and r._field!=\"count\")\n|> range($range)\n|> keep(columns:[\"_time\", \"_value\",\"_field\", \"pod_name\",\"_measurement\",\"method\"])\n|> difference(nonNegative: true)\n|> group(columns: [\"_time\", \"pod_name\",\"method\"])\n|> map(fn:(r) => ({le: float(v:r._field), _value: float(v:r._value)})) \n|> histogramQuantile(quantile: 0.9)\n|> group(columns: [\"pod_name\",\"method\"])\n|> rename(columns: {pod_name: \"_measurement\"})",
                  "refId": "A",
                  "resultFormat": "time_series"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "90%-tile latency of all requests - Node",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 3,
                  "format": "s",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "",
              "fill": 1,
              "gridPos": {
                "h": 7,
                "w": 12,
                "x": 0,
                "y": 22
              },
              "id": 69,
              "legend": {
                "avg": false,
                "current": false,
                "hideZero": true,
                "max": true,
                "min": true,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "hide": true,
                  "query": "from(bucket: \"monitoring_op\")  \n|> filter(fn: (r) => r._measurement == \"csi_kubeclient_execution_duration_seconds\" and r.app==\"baremetal-csi-node\" and r._field!=\"sum\" and r._field!=\"count\" and r.pod_name==\"${node_pod}\")\n|> range($range)\n|> keep(columns:[\"_time\", \"_value\",\"_field\", \"pod_name\",\"_measurement\",\"method\"])\n|> difference(nonNegative: true)\n|> group(columns: [\"_time\", \"pod_name\",\"method\"])\n|> map(fn:(r) => ({le: float(v:r._field), _value: float(v:r._value)})) \n|> histogramQuantile(quantile: 0.9)\n|> group(columns: [\"pod_name\",\"method\"])\n|> rename(columns: {pod_name: \"_measurement\"})",
                  "refId": "A",
                  "resultFormat": "time_series"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "90%-tile latency of all requests on pod - Node",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 3,
                  "format": "s",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "",
              "fill": 1,
              "gridPos": {
                "h": 7,
                "w": 12,
                "x": 12,
                "y": 22
              },
              "id": 68,
              "legend": {
                "avg": false,
                "current": false,
                "hideZero": true,
                "max": true,
                "min": true,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "hide": true,
                  "query": "from(bucket: \"monitoring_op\")  \n|> filter(fn: (r) => r._measurement == \"csi_kubeclient_execution_duration_seconds\" and r.app==\"baremetal-csi-node\" and r._field!=\"sum\" and r._field!=\"count\" and r.method==\"${kubeclient_method}\")\n|> range($range)\n|> keep(columns:[\"_time\", \"_value\",\"_field\", \"pod_name\",\"_measurement\",\"method\"])\n|> difference(nonNegative: true)\n|> group(columns: [\"_time\", \"pod_name\",\"method\"])\n|> map(fn:(r) => ({le: float(v:r._field), _value: float(v:r._value)})) \n|> histogramQuantile(quantile: 0.9)\n|> group(columns: [\"pod_name\",\"method\"])\n|> rename(columns: {pod_name: \"_measurement\"})",
                  "refId": "A",
                  "resultFormat": "time_series"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "90%-tile latency of all requests on pods by method - Node",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 3,
                  "format": "s",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            }
          ],
          "title": "Kube client",
          "type": "row"
        },
        {
          "collapsed": true,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 8
          },
          "id": 51,
          "panels": [
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "",
              "fill": 1,
              "gridPos": {
                "h": 7,
                "w": 12,
                "x": 0,
                "y": 9
              },
              "id": 57,
              "legend": {
                "avg": false,
                "current": false,
                "hideZero": true,
                "max": true,
                "min": true,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")  \n|> filter(fn: (r) => r._measurement == \"csi_partition_operations_duration\" and r.app==\"baremetal-csi-node\" and r._field!=\"sum\" and r._field!=\"count\")\n|> range($range)\n|> keep(columns:[\"_time\", \"_value\",\"_field\", \"pod_name\",\"_measurement\",\"method\"])\n|> difference(nonNegative: true)\n|> group(columns: [\"_time\", \"pod_name\",\"method\"])\n|> map(fn:(r) => ({le: float(v:r._field), _value: float(v:r._value)})) \n|> histogramQuantile(quantile: 0.9)\n|> group(columns: [\"pod_name\",\"method\"])\n|> rename(columns: {pod_name: \"_measurement\"})",
                  "refId": "A",
                  "resultFormat": "time_series"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "90%-tile latency of all partition methods - Node",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 3,
                  "format": "s",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "",
              "fill": 1,
              "gridPos": {
                "h": 7,
                "w": 12,
                "x": 12,
                "y": 9
              },
              "id": 65,
              "legend": {
                "avg": false,
                "current": false,
                "hideZero": true,
                "max": true,
                "min": true,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")  \n|> filter(fn: (r) => r._measurement == \"csi_volume_operations_duration\" and r.app==\"baremetal-csi-controller\" and r._field!=\"sum\" and r._field!=\"count\")\n|> range($range)\n|> keep(columns:[\"_time\", \"_value\",\"_field\", \"pod_name\",\"_measurement\",\"method\"])\n|> difference(nonNegative: true)\n|> group(columns: [\"_time\", \"pod_name\",\"method\"])\n|> map(fn:(r) => ({le: float(v:r._field), _value: float(v:r._value)})) \n|> histogramQuantile(quantile: 0.9)\n|> group(columns: [\"pod_name\",\"method\"])\n|> rename(columns: {pod_name: \"_measurement\"})",
                  "refId": "A",
                  "resultFormat": "time_series"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "90%-tile latency of all volume methods - Controller",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 3,
                  "format": "s",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "",
              "fill": 1,
              "gridPos": {
                "h": 7,
                "w": 12,
                "x": 0,
                "y": 16
              },
              "id": 70,
              "legend": {
                "avg": false,
                "current": false,
                "hideZero": true,
                "max": true,
                "min": true,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")  \n|> filter(fn: (r) => r._measurement == \"csi_partition_operations_duration\" and r.app==\"baremetal-csi-node\" and r._field!=\"sum\" and r._field!=\"count\" and r.method==\"${partition_method}\")\n|> range($range)\n|> keep(columns:[\"_time\", \"_value\",\"_field\", \"pod_name\",\"_measurement\",\"method\"])\n|> difference(nonNegative: true)\n|> group(columns: [\"_time\", \"pod_name\",\"method\"])\n|> map(fn:(r) => ({le: float(v:r._field), _value: float(v:r._value)})) \n|> histogramQuantile(quantile: 0.9)\n|> group(columns: [\"pod_name\",\"method\"])\n|> rename(columns: {pod_name: \"_measurement\"})",
                  "refId": "A",
                  "resultFormat": "time_series"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "90%-tile latency of partition method on nodes by method - Node",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 3,
                  "format": "s",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "",
              "fill": 1,
              "gridPos": {
                "h": 7,
                "w": 12,
                "x": 12,
                "y": 16
              },
              "id": 71,
              "legend": {
                "avg": false,
                "current": false,
                "hideZero": true,
                "max": true,
                "min": true,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")  \n|> filter(fn: (r) => r._measurement == \"csi_volume_operations_duration\" and r.app==\"baremetal-csi-controller\" and r._field!=\"sum\" and r._field!=\"count\"  and r.method==\"${volume_method}\")\n|> range($range)\n|> keep(columns:[\"_time\", \"_value\",\"_field\", \"pod_name\",\"_measurement\",\"method\"])\n|> difference(nonNegative: true)\n|> group(columns: [\"_time\", \"pod_name\",\"method\"])\n|> map(fn:(r) => ({le: float(v:r._field), _value: float(v:r._value)})) \n|> histogramQuantile(quantile: 0.9)\n|> group(columns: [\"pod_name\",\"method\"])\n|> rename(columns: {pod_name: \"_measurement\"})",
                  "refId": "A",
                  "resultFormat": "time_series"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "90%-tile latency of  volume method on nodes by methods - Controller",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 3,
                  "format": "s",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            }
          ],
          "title": "Partition and Volume operations",
          "type": "row"
        },
        {
          "collapsed": true,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 9
          },
          "id": 48,
          "panels": [
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "",
              "fill": 1,
              "gridPos": {
                "h": 7,
                "w": 12,
                "x": 0,
                "y": 10
              },
              "id": 49,
              "legend": {
                "avg": false,
                "current": false,
                "hideZero": false,
                "max": true,
                "min": true,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")  \n|> filter(fn: (r) => r._measurement == \"csi_ac_reservation_duration\" and r._field!=\"sum\" and r._field!=\"count\")\n|> range($range)\n|> keep(columns:[\"_time\", \"_value\",\"_field\", \"pod_name\",\"_measurement\",\"method\"])\n|> difference(nonNegative: true)\n|> group(columns: [\"_time\", \"pod_name\",\"method\"])\n|> map(fn:(r) => ({le: float(v:r._field), _value: float(v:r._value)})) \n|> histogramQuantile(quantile: 0.9)\n|> group(columns: [\"pod_name\",\"method\"])\n|> rename(columns: {pod_name: \"_measurement\"})",
                  "refId": "A",
                  "resultFormat": "time_series"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "90%-tile latency of ac reservation",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 3,
                  "format": "s",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "",
              "fill": 1,
              "gridPos": {
                "h": 7,
                "w": 12,
                "x": 12,
                "y": 10
              },
              "id": 72,
              "legend": {
                "avg": false,
                "current": false,
                "hideZero": false,
                "max": true,
                "min": true,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")  \n|> filter(fn: (r) => r._measurement == \"csi_ac_reservation_duration\" and r._field!=\"sum\" and r._field!=\"count\")\n|> range($range)",
                  "refId": "A",
                  "resultFormat": "time_series"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "90%-tile latency of ac reservation",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 3,
                  "format": "s",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            }
          ],
          "title": "Extender",
          "type": "row"
        },
        {
          "collapsed": true,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 10
          },
          "id": 55,
          "panels": [
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "",
              "fill": 1,
              "gridPos": {
                "h": 7,
                "w": 12,
                "x": 0,
                "y": 11
              },
              "id": 58,
              "legend": {
                "avg": false,
                "current": false,
                "hideZero": true,
                "max": true,
                "min": true,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")  \n|> filter(fn: (r) => r._measurement == \"csi_discovery_duration_seconds\" and r.app==\"baremetal-csi-node\" and r._field!=\"sum\" and r._field!=\"count\")\n|> range($range)\n|> keep(columns:[\"_time\", \"_value\",\"_field\", \"pod_name\",\"_measurement\"])\n|> difference(nonNegative: true)\n|> group(columns: [\"_time\", \"pod_name\"])\n|> map(fn:(r) => ({le: float(v:r._field), _value: float(v:r._value)})) \n|> histogramQuantile(quantile: 0.9)\n|> group(columns: [\"pod_name\"])\n|> rename(columns: {pod_name: \"_measurement\"})",
                  "refId": "A",
                  "resultFormat": "time_series"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "90%-tile latency of discovery method",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 3,
                  "format": "s",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": 0,
              "description": "",
              "fill": 1,
              "gridPos": {
                "h": 7,
                "w": 12,
                "x": 12,
                "y": 11
              },
              "id": 59,
              "legend": {
                "alignAsTable": false,
                "avg": false,
                "current": false,
                "hideZero": false,
                "max": true,
                "min": true,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")  \n|> filter(fn: (r) => r._measurement == \"csi_discovery_drive_count\")\n|> range($range)\n|> keep(columns:[\"_time\", \"_value\", \"pod_name\"])",
                  "refId": "A",
                  "resultFormat": "time_series"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Drive count",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "decimals": null,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            }
          ],
          "title": "Drive manager",
          "type": "row"
        }
      ],
      "refresh": false,
      "schemaVersion": 18,
      "style": "dark",
      "tags": [],
      "templating": {
        "list": [
          {
            "allValue": null,
            "current": {},
            "datasource": "${DS_FLUX}",
            "definition": "from(bucket: \"monitoring_op\") |> filter(fn: (r) => r._measurement == \"csi_grpc_server_started_total\" and r.app==\"baremetal-csi-controller\")     |> range($range)     |> group(columns:[\"pod_name\"])     |> distinct(column:\"pod_name\")",
            "hide": 0,
            "includeAll": false,
            "label": null,
            "multi": false,
            "name": "controller_pod",
            "options": [],
            "query": "from(bucket: \"monitoring_op\") |> filter(fn: (r) => r._measurement == \"csi_grpc_server_started_total\" and r.app==\"baremetal-csi-controller\")     |> range($range)     |> group(columns:[\"pod_name\"])     |> distinct(column:\"pod_name\")",
            "refresh": 2,
            "regex": "",
            "skipUrlSync": false,
            "sort": 0,
            "tagValuesQuery": "",
            "tags": [],
            "tagsQuery": "",
            "type": "query",
            "useTags": false
          },
          {
            "allValue": null,
            "current": {},
            "datasource": "${DS_FLUX}",
            "definition": "from(bucket: \"monitoring_op\") |> filter(fn: (r) => r._measurement == \"csi_grpc_server_started_total\" and  r.app==\"baremetal-csi-controller\" )     |> range($range)     |> group(columns:[\"grpc_method\"])     |> distinct(column:\"grpc_method\")",
            "hide": 0,
            "includeAll": false,
            "label": null,
            "multi": false,
            "name": "controller_method",
            "options": [],
            "query": "from(bucket: \"monitoring_op\") |> filter(fn: (r) => r._measurement == \"csi_grpc_server_started_total\" and  r.app==\"baremetal-csi-controller\" )     |> range($range)     |> group(columns:[\"grpc_method\"])     |> distinct(column:\"grpc_method\")",
            "refresh": 2,
            "regex": "",
            "skipUrlSync": false,
            "sort": 0,
            "tagValuesQuery": "",
            "tags": [],
            "tagsQuery": "",
            "type": "query",
            "useTags": false
          },
          {
            "allValue": null,
            "current": {},
            "datasource": "${DS_FLUX}",
            "definition": "from(bucket: \"monitoring_op\") |> filter(fn: (r) => r._measurement == \"csi_grpc_server_started_total\" and r.app==\"baremetal-csi-node\")     |> range($range)     |> group(columns:[\"pod_name\"])     |> distinct(column:\"pod_name\")",
            "hide": 0,
            "includeAll": false,
            "label": null,
            "multi": false,
            "name": "node_pod",
            "options": [],
            "query": "from(bucket: \"monitoring_op\") |> filter(fn: (r) => r._measurement == \"csi_grpc_server_started_total\" and r.app==\"baremetal-csi-node\")     |> range($range)     |> group(columns:[\"pod_name\"])     |> distinct(column:\"pod_name\")",
            "refresh": 2,
            "regex": "",
            "skipUrlSync": false,
            "sort": 0,
            "tagValuesQuery": "",
            "tags": [],
            "tagsQuery": "",
            "type": "query",
            "useTags": false
          },
          {
            "allValue": null,
            "current": {},
            "datasource": "${DS_FLUX}",
            "definition": "from(bucket: \"monitoring_op\") |> filter(fn: (r) => r._measurement == \"csi_grpc_server_started_total\" and  r.app==\"baremetal-csi-node\")     |> range($range)     |> group(columns:[\"grpc_method\"])     |> distinct(column:\"grpc_method\")",
            "hide": 0,
            "includeAll": false,
            "label": null,
            "multi": false,
            "name": "node_method",
            "options": [],
            "query": "from(bucket: \"monitoring_op\") |> filter(fn: (r) => r._measurement == \"csi_grpc_server_started_total\" and  r.app==\"baremetal-csi-node\")     |> range($range)     |> group(columns:[\"grpc_method\"])     |> distinct(column:\"grpc_method\")",
            "refresh": 2,
            "regex": "",
            "skipUrlSync": false,
            "sort": 0,
            "tagValuesQuery": "",
            "tags": [],
            "tagsQuery": "",
            "type": "query",
            "useTags": false
          },
          {
            "allValue": null,
            "current": {},
            "datasource": "${DS_FLUX}",
            "definition": "from(bucket: \"monitoring_op\") |> filter(fn: (r) => r._measurement == \"csi_kubeclient_execution_duration_seconds\" and  r.app==\"baremetal-csi-node\")     |> range($range)     |> group(columns:[\"method\"])     |> distinct(column:\"method\")",
            "hide": 0,
            "includeAll": false,
            "label": null,
            "multi": false,
            "name": "kubeclient_method",
            "options": [],
            "query": "from(bucket: \"monitoring_op\") |> filter(fn: (r) => r._measurement == \"csi_kubeclient_execution_duration_seconds\" and  r.app==\"baremetal-csi-node\")     |> range($range)     |> group(columns:[\"method\"])     |> distinct(column:\"method\")",
            "refresh": 2,
            "regex": "",
            "skipUrlSync": false,
            "sort": 0,
            "tagValuesQuery": "",
            "tags": [],
            "tagsQuery": "",
            "type": "query",
            "useTags": false
          },
          {
            "allValue": null,
            "current": {},
            "datasource": "${DS_FLUX}",
            "definition": "from(bucket: \"monitoring_op\") |> filter(fn: (r) => r._measurement == \"csi_partition_operations_duration\")     |> range($range)     |> group(columns:[\"method\"])     |> distinct(column:\"method\")",
            "hide": 0,
            "includeAll": false,
            "label": null,
            "multi": false,
            "name": "partition_method",
            "options": [],
            "query": "from(bucket: \"monitoring_op\") |> filter(fn: (r) => r._measurement == \"csi_partition_operations_duration\")     |> range($range)     |> group(columns:[\"method\"])     |> distinct(column:\"method\")",
            "refresh": 2,
            "regex": "",
            "skipUrlSync": false,
            "sort": 0,
            "tagValuesQuery": "",
            "tags": [],
            "tagsQuery": "",
            "type": "query",
            "useTags": false
          },
          {
            "allValue": null,
            "current": {},
            "datasource": "${DS_FLUX}",
            "definition": "from(bucket: \"monitoring_op\") |> filter(fn: (r) => r._measurement == \"csi_volume_operations_duration\")     |> range($range)     |> group(columns:[\"method\"])     |> distinct(column:\"method\")",
            "hide": 0,
            "includeAll": false,
            "label": null,
            "multi": false,
            "name": "volume_method",
            "options": [],
            "query": "from(bucket: \"monitoring_op\") |> filter(fn: (r) => r._measurement == \"csi_volume_operations_duration\")     |> range($range)     |> group(columns:[\"method\"])     |> distinct(column:\"method\")",
            "refresh": 2,
            "regex": "",
            "skipUrlSync": false,
            "sort": 0,
            "tagValuesQuery": "",
            "tags": [],
            "tagsQuery": "",
            "type": "query",
            "useTags": false
          }
        ]
      },
      "time": {
        "from": "now-24h",
        "to": "now"
      },
      "timepicker": {
        "refresh_intervals": [
          "15m",
          "30m",
          "1h",
          "2h",
          "1d"
        ],
        "time_options": [
          "15m",
          "1h",
          "6h",
          "12h",
          "24h",
          "2d",
          "7d",
          "30d"
        ]
      },
      "timezone": "",
      "title": "Baremetal CSI",
      "uid": "W1AYHhBGz",
      "version": 9
    }
  internal_monitoring_health.json: |-
    {
      "__inputs": [
        {
          "name": "DS_FLUX",
          "label": "Flux",
          "description": "",
          "type": "datasource",
          "pluginId": "grafana-influxdb-flux-datasource",
          "pluginName": "Flux (InfluxDB) [BETA]"
        }
      ],
      "__requires": [
        {
          "type": "grafana",
          "id": "grafana",
          "name": "Grafana",
          "version": "6.2.5ecs"
        },
        {
          "type": "datasource",
          "id": "grafana-influxdb-flux-datasource",
          "name": "Flux (InfluxDB) [BETA]",
          "version": "5.2.12"
        },
        {
          "type": "panel",
          "id": "graph",
          "name": "Graph",
          "version": ""
        }
      ],
      "annotations": {
        "list": [
          {
            "builtIn": 1,
            "datasource": "-- Grafana --",
            "enable": true,
            "hide": true,
            "iconColor": "rgba(0, 211, 255, 1)",
            "name": "Annotations & Alerts",
            "type": "dashboard"
          }
        ]
      },
      "description": "(\"server single\")",
      "editable": true,
      "gnetId": 1375,
      "graphTooltip": 0,
      "id": null,
      "links": [],
      "panels": [
        {
          "collapsed": true,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 0
          },
          "id": 23,
          "panels": [
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 1,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 0,
                "y": 1
              },
              "id": 31,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"procstat\" and r.host =~ /${host:pipe}/ and r._field == \"memory_rss\" and r.process_name == \"telegraf\")\n  |> range($range)\n  |> keep(columns: [\"_time\", \"_value\", \"host\"])",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "RSS Memory, OS View",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": null,
                  "format": "bytes",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 0,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 8,
                "y": 1
              },
              "id": 32,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"procstat\" and r.host =~ /${host:pipe}/ and r._field == \"cpu_usage\" and r.process_name == \"telegraf\")\n  |> range($range)\n  |> keep(columns: [\"_time\", \"_value\", \"host\"])",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "CPU Usage",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 1,
                  "format": "percent",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 0,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 16,
                "y": 1
              },
              "id": 33,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"procstat\" and r.host =~ /${host:pipe}/ and r._field == \"num_fds\" and r.process_name == \"telegraf\")\n  |> range($range)\n  |> keep(columns: [\"_time\", \"_value\", \"host\"])",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Number of File Handles",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 1,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 0,
                "y": 11
              },
              "id": 10,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": true,
              "renderer": "flot",
              "repeat": null,
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"tsdb_telegraf_internal_gather\" and r.input == \"influxdb_listener\" and r._field == \"metrics_gathered\")\n  |> range($range)\n  |> derivative(nonNegative: true, unit:5m)\n  |> keep(columns: [\"_time\", \"tag\", \"_value\", \"host\", \"input\"])",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Metrics Received in 5 minutes",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 1,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 8,
                "y": 11
              },
              "id": 16,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": true,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"tsdb_telegraf_internal_write\" and r.output == \"influxdb\" and r._field == \"metrics_written\" and r.output == \"influxdb\")\n  |> range($range)\n  |> derivative(nonNegative: true, unit:5m)\n  |> keep(columns: [\"_time\", \"tag\", \"_value\", \"host\"])",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Metrics Sent to InfluxDB in 5 mintues",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 1,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 16,
                "y": 11
              },
              "id": 66,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": true,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"tsdb_telegraf_internal_write\" and r.output == \"influxdb\" and r._field == \"metrics_dropped\" and r.output == \"influxdb\")\n  |> range($range)\n  |> derivative(nonNegative: true, unit:5m)\n  |> keep(columns: [\"_time\", \"tag\", \"_value\", \"host\"])",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Metrics Dropped in 5 mintues",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 1,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 0,
                "y": 21
              },
              "id": 18,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"tsdb_telegraf_internal_gather\" and r.input == \"influxdb\" and r._field == \"gather_time_ns\")\n  |> range($range)\n  |> derivative(nonNegative: true, unit:5m)\n  |> keep(columns: [\"_time\", \"tag\", \"_value\", \"host\", \"input\"])",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Maximum Time to Gather Metrics",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": null,
                  "format": "ns",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 1,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 8,
                "y": 21
              },
              "id": 19,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"tsdb_telegraf_internal_write\" and r.output == \"influxdb\" and r._field == \"write_time_ns\")\n  |> range($range)\n  |> derivative(nonNegative: true, unit:5m)\n  |> keep(columns: [\"_time\", \"tag\", \"_value\", \"host\", \"output\"])",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Time to Write Metrics to InfluxDB",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": null,
                  "format": "ns",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 1,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 16,
                "y": 21
              },
              "id": 17,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": true,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"tsdb_telegraf_internal_write\" and r._field == \"buffer_size\" and r.output == \"influxdb\")\n  |> range($range)\n  |> keep(columns: [\"_time\", \"tag\", \"_value\", \"host\"])",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Buffer Size",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            }
          ],
          "title": "Telegraf Instances",
          "type": "row"
        },
        {
          "collapsed": true,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 1
          },
          "id": 21,
          "panels": [
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 1,
              "gridPos": {
                "h": 9,
                "w": 8,
                "x": 0,
                "y": 12
              },
              "id": 34,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"procstat\" and r._field == \"memory_rss\" and r.process_name == \"influxd\")\n  |> range($range)\n  |> keep(columns: [\"_time\", \"_value\", \"host\"])",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "RSS Memory, OS View",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": null,
                  "format": "bytes",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 0,
              "gridPos": {
                "h": 9,
                "w": 8,
                "x": 8,
                "y": 12
              },
              "id": 35,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"procstat\" and r._field == \"cpu_usage\" and r.process_name == \"influxd\")\n  |> range($range)\n  |> keep(columns: [\"_time\", \"_value\", \"host\"])",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "CPU Usage",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 1,
                  "format": "percent",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 0,
              "gridPos": {
                "h": 9,
                "w": 8,
                "x": 16,
                "y": 12
              },
              "id": 36,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"procstat\" and r._field == \"num_fds\" and r.process_name == \"influxd\")\n  |> range($range)\n  |> keep(columns: [\"_time\", \"_value\", \"host\"])",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Number of File Handles",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 1,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 0,
                "y": 21
              },
              "id": 24,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": true,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"tsdb_influxdb_database\" and r._field == \"numMeasurements\")\n  |> range($range)\n  |> keep(columns: [\"_time\", \"_value\", \"host\", \"database\"])\n",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Number of Measurements",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": null,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 1,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 8,
                "y": 21
              },
              "id": 25,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": true,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"tsdb_influxdb_database\" and r._field == \"numSeries\")\n  |> range($range)\n  |> keep(columns: [\"_time\", \"_value\", \"host\", \"database\"])",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Number of Series",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": null,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "description": "Size of /opt/emc/caspian/fabric/agent/services/object/data/influxdb/",
              "editable": true,
              "error": false,
              "fill": 1,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 16,
                "y": 21
              },
              "id": 26,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": false,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": true,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"disk\" and (r._field == \"used\" or r._field == \"free\") and r.host =~ /influxdb/ and r.path == \"/pv\")\n  |> range($range)\n  |> keep(columns: [\"_start\", \"_stop\", \"_time\", \"_value\", \"host\", \"_field\"])",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Storage Disk Space",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": null,
                  "format": "bytes",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 1,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 0,
                "y": 31
              },
              "id": 27,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": true,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_main\")\r\n  |> filter(fn: (r) => r._measurement == \"tsdb_influxdb_httpd\" and r._field == \"pointsWrittenOK\")\n  |> range($range)\n  |> derivative(nonNegative: true, unit:1s)\n  |> keep(columns: [\"_time\", \"_value\", \"host\"])  \n  \n",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Points Written per second",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": null,
                  "format": "wps",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 1,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 8,
                "y": 31
              },
              "id": 40,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"procstat\" and r._field == \"read_bytes\" and r.process_name == \"influxd\")\n  |> range($range)\n  |> derivative(nonNegative: true, unit:1s)\n  |> keep(columns: [\"_time\", \"_value\", \"host\", \"_field\"])\n  \n",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                },
                {
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"procstat\" and r._field == \"write_bytes\" and r.process_name == \"influxd\")\n  |> range($range)\n  |> derivative(nonNegative: true, unit:1s)\n  |> keep(columns: [\"_time\", \"_value\", \"host\", \"_field\"])\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Disk IO rate (bytes per second)",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "Bps",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 1,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 16,
                "y": 31
              },
              "id": 28,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": true,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": true,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"tsdb_influxdb_queryExecutor\" and r._field == \"queriesExecuted\")\n  |> range($range)\n  |> derivative(nonNegative: true, unit:5m)\n  |> keep(columns: [\"_time\", \"_value\", \"host\"])\n  \n  \n",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "SQL Queries Executed in 5 minutes",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 1,
              "gridPos": {
                "h": 9,
                "w": 8,
                "x": 0,
                "y": 41
              },
              "id": 50,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": true,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_main\")\r\n  |> filter(fn: (r) => r._measurement == \"tsdb_influxdb_httpd\" and r._field == \"writeReqBytes\")\n  |> range($range)\n  |> keep(columns: [\"_time\", \"_value\", \"host\"])\n\n\n  \n  \n",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Data Ingest Rate over HTTP, bytes per second",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "Bps",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            }
          ],
          "title": "InfluxDB Instances",
          "type": "row"
        },
        {
          "collapsed": true,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 2
          },
          "id": 15,
          "panels": [
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 1,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 0,
                "y": 3
              },
              "id": 37,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"procstat\" and r.host =~ /${host:pipe}/ and r._field == \"memory_rss\" and r.process_name == \"fluxd\")\n  |> range($range)\n  |> keep(columns: [\"_time\", \"_value\", \"host\"])",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "RSS Memory, OS View",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": null,
                  "format": "bytes",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 0,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 8,
                "y": 3
              },
              "id": 38,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"procstat\" and r.host =~ /${host:pipe}/ and r._field == \"cpu_usage\" and r.process_name == \"fluxd\")\n  |> range($range)\n  |> keep(columns: [\"_time\", \"_value\", \"host\"])",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "CPU Usage",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 1,
                  "format": "percent",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 0,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 16,
                "y": 3
              },
              "id": 39,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"procstat\" and r.host =~ /${host:pipe}/ and r._field == \"num_fds\" and r.process_name == \"fluxd\")\n  |> range($range)\n  |> keep(columns: [\"_time\", \"_value\", \"host\"])",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Number of File Handles",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 10,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 0,
                "y": 13
              },
              "id": 29,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 0,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": true,
              "steppedLine": true,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"tsdb_fluxd_http_api_requests_total\" and r.path =~ /query/)\n  |> range($range)\n  |> keep(columns: [\"_time\", \"_value\", \"address\", \"status\", \"path\"])\n  |> derivative(nonNegative: true, unit:5m)\n  |> drop(columns: [\"path\"])\n  |> window(every:5m)\n  |> sum()\n  |> rename(columns: {_start: \"_time\"})\n  |> group(columns:[\"address\", \"status\"])\n  \n  \n",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Number of Requests in 5 minutes",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": true,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 0,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 8,
                "y": 13
              },
              "id": 30,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": true,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "max",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": false,
              "linewidth": 2,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 3,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": true,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "sum = from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"tsdb_fluxd_http_api_request_duration_seconds\" and r._field == \"sum\" and r.path == \"/query\")\n  |> range($range)\n  |> derivative(nonNegative: true, unit:5m)\n  |> keep(columns: [\"_time\", \"_start\", \"_stop\", \"address\", \"status\", \"_value\"])\n  \ncount = from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"tsdb_fluxd_http_api_request_duration_seconds\" and r._field == \"count\" and r.path == \"/query\")\n  |> range($range)\n  |> derivative(nonNegative: true, unit:5m)\n  |> keep(columns: [\"_time\", \"_start\", \"_stop\", \"address\", \"status\", \"_value\"])\n\njoin(tables: {sum:sum, count:count}, on: [\"_time\", \"_start\", \"_stop\", \"address\", \"status\"])\r\n  |> map(fn: (r) => ({_value: r._value_sum / r._value_count, _time: r._time}))\n  ",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Response Time by result",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "s",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 0,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 16,
                "y": 13
              },
              "id": 67,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": true,
                "rightSide": false,
                "show": true,
                "sort": "min",
                "sortDesc": false,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 0.5,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "        \nfrom(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"tsdb_fluxd_host_state\")\n  |> range($range)\n  |> group(columns: [\"_time\",\"address\"], mode:\"by\")\n  |> sum()\n  |> group(columns: [\"address\"], mode:\"by\")\n",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Number of connected InfluxDB",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 10,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 0,
                "y": 23
              },
              "id": 68,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": true,
                "max": true,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": false,
              "linewidth": 0,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 3,
              "points": true,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": true,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"tsdb_fluxd_host_state_change_total\" and r.status ==\"DISCONNECTED\")\n  |> range($range)\n  |> keep(columns: [\"_time\",\"_start\", \"_stop\",\"_value\", \"address\",\"hostport\"])\n  |> difference()\n  |> filter(fn: (r) => r[\"_value\"] > 0)\n  \n  \n  \n  \n",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Number of Disconnects",
              "tooltip": {
                "msResolution": false,
                "shared": false,
                "sort": 1,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "description": "- Number of single InfluxDB selections in 5 minutes\n- Number of failed selections caused by expired host selection data",
              "editable": true,
              "error": false,
              "fill": 0,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 8,
                "y": 23
              },
              "id": 86,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": true,
                "rightSide": false,
                "show": true,
                "sort": "min",
                "sortDesc": false,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 0.5,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\n\r|> filter(fn: (r) => r._measurement == \"tsdb_fluxd_host_selected\" and r._field == \"counter\")\r\n\r|> range($range)\n\r|> keep(columns: [\"_time\", \"_value\", \"address\", \"hostport\"])\r\n\r|> difference(nonNegative: true)\r\n\r|> fill(column: \"_value\", value: 0)\r\n\r|> drop(columns: [\"hostport\"])\r\n|> window(every:5m)\n|> sum()\r\n|> rename(columns: {_start: \"_time\"})\r\n|> group(columns: [\"address\"])\n\r\r|> set(key: \"_field\", value: \"Successful\")\n\n",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                },
                {
                  "query": "from(bucket: \"monitoring_op\")\n\r|> filter(fn: (r) => r._measurement == \"tsdb_fluxd_hl_expired_detected\" and r._field == \"counter\" and r.host =~ /${host:pipe}/)\r\n\r|> range($range)\n\r|> keep(columns: [\"_time\", \"_value\", \"address\"])\r\n\r|> difference(nonNegative: true)\r\n\r|> fill(column: \"_value\", value: 0)\r\n\r\r|> set(key: \"_field\", value: \"Failed due to expired data\")\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Number of InfluxDB Selections in 5 Minutes",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "description": "Number of queries executed on local Flux engine",
              "editable": true,
              "error": false,
              "fill": 10,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 16,
                "y": 23
              },
              "id": 87,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 0,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": true,
              "steppedLine": true,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"tsdb_fluxd_query_control_executing_duration_seconds\" and r._field =~ /count/)\n  |> range($range)\n  |> keep(columns: [\"_time\", \"_value\", \"address\"])\n  |> derivative(nonNegative: true, unit:5m)\n",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Number of Queries Executed in 5 minutes",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "description": "Number of queries forwarded and executed on remote Fluxd instances",
              "editable": true,
              "error": false,
              "fill": 10,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 0,
                "y": 33
              },
              "id": 88,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 0,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": true,
              "steppedLine": true,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"tsdb_fluxd_http_lb_request_forwarded\" and r._field =~ /count/)\n  |> range($range)\n  |> keep(columns: [\"_time\", \"_value\", \"address\"])\n  |> derivative(nonNegative: true, unit:5m)",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Number of Queries Forwarded in 5 minutes",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "Total number of internal fluxd errors (internal panics counter)",
              "fill": 1,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 8,
                "y": 33
              },
              "id": 90,
              "legend": {
                "avg": false,
                "current": false,
                "max": false,
                "min": false,
                "show": true,
                "total": false,
                "values": false
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\") \n   |> filter(fn: (r) => r._measurement == \"tsdb_fluxd_query_control_panics_total\" and r._field == \"counter\")\n   |> range($range)\n   |> keep(columns: [\"_time\", \"_value\", \"address\"])",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Flux Internal Errors",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            }
          ],
          "title": "Fluxd Instances",
          "type": "row"
        },
        {
          "collapsed": true,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 3
          },
          "id": 53,
          "panels": [
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 1,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 0,
                "y": 44
              },
              "id": 55,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"procstat\" and r.host =~ /${host:pipe}/ and r._field == \"memory_rss\" and (r.process_name == \"throttler\" or r.process_name == \"grafana-server\"))\n  |> range($range)\n  |> keep(columns: [\"_time\", \"_value\", \"host\", \"process_name\"])",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "RSS Memory, OS View",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": null,
                  "format": "bytes",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 0,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 8,
                "y": 44
              },
              "id": 57,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"procstat\" and r.host =~ /${host:pipe}/ and r._field == \"cpu_usage\" and (r.process_name == \"throttler\" or r.process_name == \"grafana-server\"))\n  |> range($range)\n  |> keep(columns: [\"_time\", \"_value\", \"host\", \"process_name\"])",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "CPU Usage",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 1,
                  "format": "percent",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 0,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 16,
                "y": 44
              },
              "id": 59,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"procstat\" and r.host =~ /${host:pipe}/ and r._field == \"num_fds\" and (r.process_name == \"throttler\" or r.process_name == \"grafana-server\"))\n  |> range($range)\n  |> keep(columns: [\"_time\", \"_value\", \"host\", \"process_name\"])",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Number of File Handles",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 0,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 0,
                "y": 54
              },
              "id": 76,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": true,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 1,
              "points": true,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"cquerier_fluxd_requests_total\")\n  |> range($range)\n  |> difference(nonNegative:true)\n  |> keep(columns: [\"_time\", \"_value\", \"type\", \"host\", \"status\"])\n",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Total CQ processing rate",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 0,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 8,
                "y": 54
              },
              "id": 78,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": true,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 1,
              "points": true,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"cquerier_telegraf_requests_total\")\n  |> range($range)\n  |> difference(nonNegative:true)\n  |> keep(columns: [\"_time\", \"_value\", \"type\", \"host\", \"status\"])\n",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "CQ Telegraf requests rate",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 0,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 16,
                "y": 54
              },
              "id": 80,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": true,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": true,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": true,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_vdc\")\r\n  |> filter(fn: (r) => r._measurement =~ /^cq_.*_metadata$/ and r._field == \"_done\")\n  |> range($range)\n  |> keep(columns: [\"_time\", \"_value\", \"_measurement\"])\n",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "CQ progress done status by name",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 0,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 0,
                "y": 64
              },
              "id": 82,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": true,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 1,
              "points": true,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"cquerier_succeeded_cq_total\" and r.type == \"current\")\n  |> range($range)\n  |> difference(nonNegative:true)\n  |> keep(columns: [\"_time\", \"_value\", \"cqname\"])\n",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Number of successfully processed \"current\" CQ by name",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 0,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 8,
                "y": 64
              },
              "id": 84,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": true,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 1,
              "points": true,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"cquerier_succeeded_cq_total\" and r.type == \"history\")\n  |> range($range)\n  |> difference(nonNegative:true)\n  |> keep(columns: [\"_time\", \"_value\", \"cqname\", \"type\"])\n",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Number of successfully processed \"history\" CQ by name",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 0,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 16,
                "y": 64
              },
              "id": 74,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": true,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": true,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"cquerier_exceeded_maxretry_total\")\n  |> range($range)\n  |> keep(columns: [\"_time\",\"_value\", \"host\", \"cqname\"]) \n  |> derivative(nonNegative: true, unit: 5m)\n  |> filter(fn: (r) => r[\"_value\"] > 0)\n  \n  \n  \n  \n",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Number of CQ exceeded max-retry count per 5 min, per query",
              "tooltip": {
                "msResolution": false,
                "shared": false,
                "sort": 1,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 0,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 0,
                "y": 74
              },
              "id": 69,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": true,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"cquerier_fluxd_requests_total\" and r.status!=\"ok\")\n  |> range($range)\n  |> difference()\n  |> keep(columns: [\"_time\", \"_value\", \"host\", \"status\", \"type\"])\n  |> filter(fn: (r) => r[\"_value\"] > 0)\n",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "CQ number of bad requests to Fluxd",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 0,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 8,
                "y": 74
              },
              "id": 70,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": true,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 1,
              "points": true,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"cquerier_exceeded_maxretry_common_total\")\n  |> range($range)\n  |> keep(columns: [\"_time\",\"_value\", \"host\"])\n  |> derivative(nonNegative: true, unit: 5m)\n  |> filter(fn: (r) => r[\"_value\"] > 0)\n  \n  \n  \n  \n",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Number of CQ exceeded max-retry count per 5 min",
              "tooltip": {
                "msResolution": false,
                "shared": false,
                "sort": 1,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 0,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 16,
                "y": 74
              },
              "id": 85,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": true,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"cquerier_non_completed_history_cq_total\")\n  |> range($range)\n  |> difference(nonNegative:true)\n  |> keep(columns: [\"_time\", \"_value\", \"host\"])\n",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "CQ number of  non completed history processing",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            }
          ],
          "title": "Throttler and Grafana instances",
          "type": "row"
        },
        {
          "collapsed": true,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 4
          },
          "id": 61,
          "panels": [
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "datasource": "${DS_FLUX}",
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 1,
              "gridPos": {
                "h": 8,
                "w": 12,
                "x": 0,
                "y": 15
              },
              "id": 62,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "percentage": false,
              "pointradius": 2,
              "points": true,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement =~ /_stat_client_performance$/ and r._field == \"primitives_count\" and r.host =~ /${host:pipe}/)\n  |> range($range)\n  |> drop(columns: [\"_measurement\", \"_field\", \"node_id\", \"tag\", \"host\", \"_start\", \"_stop\"])\n\n",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeShift": null,
              "title": "Number of Primitives per Service",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": null,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "datasource": "${DS_FLUX}",
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 1,
              "gridPos": {
                "h": 8,
                "w": 12,
                "x": 12,
                "y": 15
              },
              "id": 63,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "percentage": false,
              "pointradius": 2,
              "points": true,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement =~ /_stat_client_performance$/ and r._field == \"exported_points\" and r.host =~ /${host:pipe}/)\n  |> range($range)\n  |> drop(columns: [\"_measurement\", \"_field\", \"node_id\", \"tag\", \"host\", \"_start\", \"_stop\"])\n  |> derivative(nonNegative: true)\n",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeShift": null,
              "title": "Exported Points (lines) per second",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": null,
                  "format": "wps",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "datasource": "${DS_FLUX}",
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 1,
              "gridPos": {
                "h": 8,
                "w": 12,
                "x": 0,
                "y": 23
              },
              "id": 64,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": false,
                "hideEmpty": true,
                "hideZero": true,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": true,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "percentage": false,
              "pointradius": 2,
              "points": true,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": true,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement =~ /_stat_client_performance$/ and r._field == \"influxdb_buffer_loss\" and r.host =~ /${host:pipe}/)\n  |> range($range)\n  |> drop(columns: [\"_measurement\", \"_field\", \"node_id\", \"tag\", \"host\", \"_start\", \"_stop\"])\n  |> difference(nonNegative:true)\n\n",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeShift": null,
              "title": "Events of InfluxDB buffer loss",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": null,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "datasource": "${DS_FLUX}",
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 1,
              "gridPos": {
                "h": 8,
                "w": 12,
                "x": 12,
                "y": 23
              },
              "id": 65,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "percentage": false,
              "pointradius": 2,
              "points": true,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement =~ /_stat_client_performance$/ and r._field == \"push_interval_sec\" and r.host =~ /${host:pipe}/)\n  |> range($range)\n  |> keep(columns: [\"_time\", \"_value\", \"process\"])\n",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeShift": null,
              "title": "Maximum Push Interval in seconds",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": null,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            }
          ],
          "title": "Statclient meta-monitoring",
          "type": "row"
        },
        {
          "collapsed": true,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 5
          },
          "id": 93,
          "panels": [
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 1,
              "gridPos": {
                "h": 9,
                "w": 8,
                "x": 0,
                "y": 6
              },
              "id": 94,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"procstat\" and r._field == \"memory_rss\" and r.process_name == \"rsyslogd\")\n  |> range($range)\n  |> keep(columns: [\"_time\", \"_value\", \"host\"])",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "RSS Memory, OS View",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": null,
                  "format": "bytes",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 0,
              "gridPos": {
                "h": 9,
                "w": 8,
                "x": 8,
                "y": 6
              },
              "id": 95,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"procstat\" and r._field == \"cpu_usage\" and r.process_name == \"rsyslogd\")\n  |> range($range)\n  |> keep(columns: [\"_time\", \"_value\", \"host\"])",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "CPU Usage",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 1,
                  "format": "percent",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 0,
              "gridPos": {
                "h": 9,
                "w": 8,
                "x": 16,
                "y": 6
              },
              "id": 96,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"procstat\" and r._field == \"num_fds\" and r.process_name == \"rsyslogd\")\n  |> range($range)\n  |> keep(columns: [\"_time\", \"_value\", \"host\"])",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Number of File Handles",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 1,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 0,
                "y": 15
              },
              "id": 97,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"procstat\" and r._field == \"read_bytes\" and r.process_name == \"rsyslogd\")\n  |> range($range)\n  |> derivative(nonNegative: true, unit:1s)\n  |> keep(columns: [\"_time\", \"_value\", \"host\", \"_field\"])\n  \n",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                },
                {
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"procstat\" and r._field == \"write_bytes\" and r.process_name == \"rsyslogd\")\n  |> range($range)\n  |> derivative(nonNegative: true, unit:1s)\n  |> keep(columns: [\"_time\", \"_value\", \"host\", \"_field\"])\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Disk IO rate (bytes per second)",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "Bps",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "description": "Size of /opt/emc/caspian/fabric/agent/services/object/data/influxdb/",
              "editable": true,
              "error": false,
              "fill": 1,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 8,
                "y": 15
              },
              "id": 92,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": false,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": true,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"disk\" and (r._field == \"used\" or r._field == \"free\") and r.host =~ /rsyslog/ and r.path == \"/pv\")\n  |> range($range)\n  |> keep(columns: [\"_start\", \"_stop\", \"_time\", \"_value\", \"host\", \"_field\"])",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Storage Disk Space",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": null,
                  "format": "bytes",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            }
          ],
          "title": "Rsyslog",
          "type": "row"
        }
      ],
      "refresh": false,
      "schemaVersion": 18,
      "style": "dark",
      "tags": [],
      "templating": {
        "list": []
      },
      "time": {
        "from": "now-24h",
        "to": "now"
      },
      "timepicker": {
        "refresh_intervals": [
          "5s",
          "10s",
          "30s",
          "1m",
          "5m",
          "15m",
          "30m",
          "1h",
          "2h",
          "1d"
        ],
        "time_options": [
          "5m",
          "15m",
          "1h",
          "6h",
          "12h",
          "24h",
          "2d",
          "7d",
          "30d"
        ]
      },
      "timezone": "",
      "title": "(OE) Internal Monitoring Health",
      "uid": "o5ijgcIWz",
      "version": 1
    }
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/grafana/templates/grafana-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: objectscale-manager-grafana-grafana-ini
  labels:
    app: "objectscale-manager-grafana"
    chart: "grafana-0.54.0"
    release: objectscale-manager
data:
  grafana.ini: |+
    ##################### Grafana Configuration #####################
    # possible values : production, development
    app_mode = production

    # instance name, defaults to HOSTNAME environment variable value or hostname if HOSTNAME var is empty
    instance_name = ${HOSTNAME}

    #################################### Paths ###############################
    [paths]
    # Path to where grafana can store temp files, sessions, and the sqlite3 db (if that is used)
    # we use /data/grafana
    ;data = /var/lib/grafana

    # Temporary files in `data` directory older than given duration will be removed
    temp_data_lifetime = 24h

    # Directory where grafana can store logs
    logs = /var/log/grafana

    # Directory where grafana will automatically scan and look for plugins
    plugins = /plugins

    # folder that contains provisioning config files that grafana will apply on startup and while running.
    ;provisioning = conf/provisioning

    #################################### Server ##############################
    [server]
    # Protocol (http, https, socket)
    ;protocol = http

    # The ip address to bind to, empty will bind to all interfaces
    ;http_addr =

    # The http port to use
    ;http_port = 3000

    # Redirect to correct domain if host header does not match domain
    # Prevents DNS rebinding attacks
    ;enforce_domain = false
    # The public facing domain name used to access grafana from a browser
    ;domain = localhost

    # The full public facing url
    root_url = %(protocol)s://%(domain)s

    # Log web requests
    ## Set to true for Grafana to log all HTTP requests (not just errors). These are logged as Info level events to grafana log.
    router_logging = true

    # the path relative working path
    static_root_path = /grafana/public

    # enable gzip
    ;enable_gzip = false

    # https certs & key file
    ;cert_file =
    ;cert_key =

    # Unix socket path
    ;socket = /tmp/grafana.sock

    #################################### Database ############################
    [database]
    # You can configure the database connection by specifying type, host, name, user and password
    # as separate properties or as on string using the url property.

    # Either "mysql", "postgres" or "sqlite3", it's your choice
    ;type = sqlite3
    ;host = 127.0.0.1:3306
    ;name = grafana
    ;user = root
    # If the password contains # or ; you have to wrap it with triple quotes. Ex """#password;"""
    ;password =
    # Use either URL or the previous fields to configure the database
    # Example: mysql://user:secret@host:port/database
    ;url =

    # Max idle conn setting default is 2
    ;max_idle_conn = 2

    # Max conn setting default is 0 (mean not set)
    ;max_open_conn =

    # Connection Max Lifetime default is 14400 (means 14400 seconds or 4 hours)
    ;conn_max_lifetime = 14400

    # Set to true to log the sql calls and execution times.
    ;log_queries =

    # For "postgres", use either "disable", "require" or "verify-full"
    # For "mysql", use either "true", "false", or "skip-verify".
    ;ssl_mode = disable

    ;ca_cert_path =
    ;client_key_path =
    ;client_cert_path =
    ;server_cert_name =

    # For "sqlite3" only, path relative to data_path setting
    ;path = grafana.db

    # For "sqlite3" only. cache mode setting used for connecting to the database
    ;cache_mode = private

    #################################### Cache server #############################
    [remote_cache]
    # Either "redis", "memcached" or "database" default is "database"
    ;type = database

    # cache connectionstring options
    # database: will use Grafana primary database.
    # redis: config like redis server e.g. `addr=127.0.0.1:6379,pool_size=100,db=0`. Only addr is required.
    # memcache: 127.0.0.1:11211
    ;connstr =

    #################################### Data proxy ###########################
    [dataproxy]

    # This enables data proxy logging, default is false
    ;logging = false

    # How long the data proxy should wait before timing out default is 30 (seconds)
    ;timeout = 30

    # If enabled and user is not anonymous, data proxy will add X-Grafana-User header with username into the request, default is false.
    ;send_user_header = false

    #################################### Analytics ###########################
    [analytics]
    # Server reporting, sends usage counters to stats.grafana.org every 24 hours.
    # No ip addresses are being tracked, only simple counters to track
    # running instances, dashboard and error counts. It is very helpful to us.
    # Change this option to false to disable reporting.
    reporting_enabled = false

    # Set to false to disable all checks to https://grafana.com
    # for new versions (grafana itself and plugins), check is used
    # in some UI views to notify that grafana or plugin update exists
    # This option does not cause any auto updates, nor send any information
    # only a GET request to https://grafana.com to get latest versions
    check_for_updates = false

    # Google Analytics universal tracking code, only enabled if you specify an id here
    ;google_analytics_ua_id =

    # Google Tag Manager ID, only enabled if you specify an id here
    ;google_tag_manager_id =

    #################################### Security ############################
    [security]
    # default admin user, created on startup
    admin_user = grafana_admin

    # default admin password, can be changed before first start of grafana, or in profile settings
    admin_password = grafana_admin

    # used for signing
    ;secret_key =

    # disable gravatar profile images
    disable_gravatar = true

    # data source proxy whitelist (ip_or_domain:port separated by spaces)
    ;data_source_proxy_whitelist =

    # disable protection against brute force login attempts
    ;disable_brute_force_login_protection = false

    # set to true if you host Grafana behind HTTPS. default is false.
    cookie_secure = false

    # set cookie SameSite attribute. defaults to `lax`. can be set to "lax", "strict" and "none"
    ;cookie_samesite = lax

    # When false, the HTTP header X-Frame-Options: deny will be set in Grafana HTTP responses which
    # will instruct browsers to not allow rendering Grafana in a <frame>, <iframe>, <embed> or <object>.
    # The main goal is to mitigate the risk of Clickjacking. Default is false.
    allow_embedding = true

    # Set to true if you want to enable http strict transport security (HSTS) response header.
    # This is only sent when HTTPS is enabled in this configuration.
    # HSTS tells browsers that the site should only be accessed using HTTPS.
    # The default will change to true in the next minor release, 6.3.
    ;strict_transport_security = false

    # Sets how long a browser should cache HSTS. Only applied if strict_transport_security is enabled.
    ;strict_transport_security_max_age_seconds = 86400

    # Set to true if to enable HSTS preloading option. Only applied if strict_transport_security is enabled.
    ;strict_transport_security_preload = false

    # Set to true if to enable the HSTS includeSubDomains option. Only applied if strict_transport_security is enabled.
    ;strict_transport_security_subdomains = false

    # Set to true to enable the X-Content-Type-Options response header.
    # The X-Content-Type-Options response HTTP header is a marker used by the server to indicate that the MIME types advertised
    # in the Content-Type headers should not be changed and be followed. The default will change to true in the next minor release, 6.3.
    ;x_content_type_options = false

    # Set to true to enable the X-XSS-Protection header, which tells browsers to stop pages from loading
    # when they detect reflected cross-site scripting (XSS) attacks. The default will change to true in the next minor release, 6.3.
    ;x_xss_protection = false


    #################################### Snapshots ###########################
    [snapshots]
    # snapshot sharing options
    external_enabled = false
    external_snapshot_url =
    ;external_snapshot_name = Publish to snapshot.raintank.io

    # remove expired snapshot
    ;snapshot_remove_expired = true

    #################################### Dashboards ##################

    [dashboards]
    # Number dashboard versions to keep (per dashboard). Default: 20, Minimum: 1
    ;versions_to_keep = 20

    #################################### Users ###############################
    [users]
    # disable user signup / registration
    allow_sign_up = false

    # Allow non admin users to create organizations
    ;allow_org_create = false

    # Set to true to automatically assign new users to the default organization (id 1)
    ;auto_assign_org = true

    # Set this value to automatically add new users to the provided organization (if auto_assign_org above is set to true)
    auto_assign_org_id = 1

    # Default role new users will be automatically assigned (if auto_assign_org above is set to true)
    auto_assign_org_role = Viewer

    # Require email validation before sign up completes
    ;verify_email_enabled = false

    # Background text for the user field on the login page
    ;login_hint = email or username
    ;password_hint = password

    # Default UI theme ("dark" or "light")
    default_theme = dark

    # External user management
    ;external_manage_link_url =
    ;external_manage_link_name =
    ;external_manage_info =

    # Viewers can edit/inspect dashboard settings in the browser. But not save the dashboard.
    ;viewers_can_edit = false

    # Editors can administrate dashboard, folders and teams they create
    ;editors_can_admin = false

    [auth]
    # Login cookie name
    login_cookie_name = grafana_session

    # The lifetime (days) an authenticated user can be inactive before being required to login at next visit. Default is 7 days.
    login_maximum_inactive_lifetime_days = 1

    # The maximum lifetime (days) an authenticated user can be logged in since login time before being required to login. Default is 30 days.
    login_maximum_lifetime_days = 1

    # How often should auth tokens be rotated for authenticated users when being active. The default is each 10 minutes.
    token_rotation_interval_minutes = 10

    # Set to true to disable (hide) the login form, useful if you use OAuth
    disable_login_form = false

    # Set to true to disable the signout link in the side menu. useful if you use auth.proxy
    disable_signout_menu = false

    # URL to redirect the user to after sign out
    signout_redirect_url =

    # Set to true to attempt login with OAuth automatically, skipping the login screen.
    # This setting is ignored if multiple OAuth providers are configured.
    oauth_auto_login = false

    #################################### Anonymous Auth ######################
    [auth.anonymous]
    # enable anonymous access
    ;enabled = false

    # specify organization name that should be used for unauthenticated users
    ;org_name = Main Org.

    # specify role for unauthenticated users
    ;org_role = Viewer

    #################################### Github Auth #########################
    [auth.github]
    ;enabled = false
    ;allow_sign_up = true
    ;client_id = some_id
    ;client_secret = some_secret
    ;scopes = user:email,read:org
    auth_url =
    token_url =
    api_url =
    ;team_ids =
    ;allowed_organizations =

    #################################### GitLab Auth #########################
    [auth.gitlab]
    ;enabled = false
    ;allow_sign_up = true
    ;client_id = some_id
    ;client_secret = some_secret
    ;scopes = api
    auth_url =
    token_url =
    api_url =
    ;allowed_groups =

    #################################### Google Auth #########################
    [auth.google]
    ;enabled = false
    ;allow_sign_up = true
    ;client_id = some_client_id
    ;client_secret = some_client_secret
    scopes =
    auth_url =
    token_url =
    api_url =
    ;allowed_domains =
    ;hosted_domain =

    #################################### Grafana.com Auth ####################
    # legacy key names (so they work in env variables)
    [auth.grafananet]
    ;enabled = false
    ;allow_sign_up = true
    ;client_id = some_id
    ;client_secret = some_secret
    ;scopes = user:email
    ;allowed_organizations =

    [auth.grafana_com]
    ;enabled = false
    ;allow_sign_up = true
    ;client_id = some_id
    ;client_secret = some_secret
    ;scopes = user:email
    ;allowed_organizations =

    #################################### Generic OAuth #######################
    [auth.generic_oauth]
    ;name = OAuth
    ;enabled = false
    ;allow_sign_up = true
    ;client_id = some_id
    ;client_secret = some_secret
    ;scopes = user:email
    ;email_attribute_name = email:primary
    auth_url =
    token_url =
    api_url =
    ;team_ids =
    ;allowed_organizations =
    ;tls_skip_verify_insecure = false
    ;tls_client_cert =
    ;tls_client_key =
    ;tls_client_ca =
    ;send_client_credentials_via_post = false


    #################################### Basic Auth ##########################
    [auth.basic]
    enabled = true

    #################################### Auth Proxy ##########################
    [auth.proxy]
    ;enabled = false
    ;header_name =
    ;header_property = username
    ;auto_sign_up = true
    ;ldap_sync_ttl = 60
    ## Limit where auth proxy requests come from by configuring a list of IP addresses.
    ## This can be used to prevent users spoofing the X-WEBAUTH-USER header.
    ;whitelist =
    ;headers =

    #################################### Auth LDAP ###########################
    [auth.ldap]
    ;enabled = false
    ;config_file = /etc/grafana/ldap.toml
    ;allow_sign_up = true

    # LDAP backround sync (Enterprise only)
    ;sync_cron = @hourly
    ;active_sync_enabled = false

    #################################### SMTP / Emailing #####################
    [smtp]
    ;enabled = false
    ;host = localhost:25
    ;user =
    # If the password contains # or ; you have to wrap it with triple quotes. Ex """#password;"""
    ;password =
    ;cert_file =
    ;key_file =
    ;skip_verify = false
    ;from_address = admin@grafana.localhost
    ;from_name = Grafana
    ;ehlo_identity =

    [emails]
    ;welcome_email_on_sign_up = false
    ;templates_pattern = emails/*.html

    #################################### Logging ##########################
     [log]
    # Either "console", "file", "syslog". Default is console and file
    # Use space to separate multiple modes, e.g. "console file"
    ;mode = console file

    # Either "debug", "info", "warn", "error", "critical", default is "info"
    level = debug

    # optional settings to set different levels for specific loggers. Ex filters = sqlstore:debug
    ;filters =

    # For "console" mode only
    [log.console]
    ;level =

    # log line format, valid options are text, console and json
    ;format = console

    # For "file" mode only
    [log.file]
    ;level =

    # log line format, valid options are text, console and json
    ;format = text

    # This enables automated log rotate(switch of following options), default is true
    ;log_rotate = true

    # Max line number of single file, default is 1000000
    ;max_lines = 1000000

    # Max size shift of single file, default is 28 means 1 << 28, 256MB
    ;max_size_shift = 28

    # Segment log daily, default is true
    ;daily_rotate = true

    # Expired days of log file(delete after max days), default is 7
    ;max_days = 7

    [log.syslog]
    ;level =

    # log line format, valid options are text, console and json
    ;format = text

    # Syslog network type and address. This can be udp, tcp, or unix. If left blank, the default unix endpoints will be used.
    ;network =
    ;address =

    # Syslog facility. user, daemon and local0 through local7 are valid.
    ;facility =

    # Syslog tag. By default, the process' argv[0] is used.
    ;tag =

    #################################### Usage Quotas ########################
    [quota]
    ;enabled = false

    #### set quotas to -1 to make unlimited. ####
    # limit number of users per Org.
    ;org_user = 10

    # limit number of dashboards per Org.
    ;org_dashboard = 100

    # limit number of data_sources per Org.
    ;org_data_source = 10

    # limit number of api_keys per Org.
    ;org_api_key = 10

    # limit number of orgs a user can create.
    ;user_org = 10

    # Global limit of users.
    ;global_user = -1

    # global limit of orgs.
    ;global_org = -1

    # global limit of dashboards
    ;global_dashboard = -1

    # global limit of api_keys
    ;global_api_key = -1

    # global limit on number of logged in users.
    ;global_session = -1

    #################################### Alerting ############################
    [alerting]
    # Disable alerting engine & UI features
    enabled = false
    # Makes it possible to turn off alert rule execution but alerting UI is visible
    execute_alerts = false

    # Default setting for new alert rules. Defaults to categorize error and timeouts as alerting. (alerting, keep_state)
    ;error_or_timeout = alerting

    # Default setting for how Grafana handles nodata or null values in alerting. (alerting, no_data, keep_state, ok)
    ;nodata_or_nullvalues = no_data

    # Alert notifications can include images, but rendering many images at the same time can overload the server
    # This limit will protect the server from render overloading and make sure notifications are sent out quickly
    ;concurrent_render_limit = 5

    # Default setting for alert calculation timeout. Default value is 30
    ;evaluation_timeout_seconds = 30

    # Default setting for alert notification timeout. Default value is 30
    ;notification_timeout_seconds = 30

    # Default setting for max attempts to sending alert notifications. Default value is 3
    ;max_attempts = 3


    #################################### Explore #############################
    [explore]
    # Enable the Explore section
    enabled = false

    #################################### Internal Grafana Metrics ############
    # Metrics available at HTTP API Url /metrics
    [metrics]
    enabled           = true
    ;interval_seconds  = 10

    #If both are set, basic auth will be required for the metrics endpoint.
    ;basic_auth_username =
    ;basic_auth_password =

    # Send internal Grafana metrics to graphite
    [metrics.graphite]
    # Enable by setting the address setting (ex localhost:2003)
    ;address =
    ;prefix = prod.grafana.%(instance_name)s.

    [grafana_net]
    url =

    [grafana_com]
    url =

    #################################### Distributed tracing ############
    [tracing.jaeger]
    # jaeger destination (ex localhost:6831)
    ;address =
    # tag that will always be included in when creating new spans. ex (tag1:value1,tag2:value2)
    ;always_included_tag =
    # Type specifies the type of the sampler: const, probabilistic, rateLimiting, or remote
    ;sampler_type = const
    # jaeger samplerconfig param
    # for "const" sampler, 0 or 1 for always false/true respectively
    # for "probabilistic" sampler, a probability between 0 and 1
    # for "rateLimiting" sampler, the number of spans per second
    # for "remote" sampler, param is the same as for "probabilistic"
    # and indicates the initial sampling rate before the actual one
    # is received from the mothership
    ;sampler_param = 1

    #################################### External Image Storage ##############
    [external_image_storage]
    # You can choose between (s3, webdav, gcs, azure_blob, local)
    ;provider =

    [external_image_storage.s3]
    ;bucket_url =
    ;bucket =
    ;region =
    ;path =
    ;access_key =
    ;secret_key =

    [external_image_storage.webdav]
    ;url =
    ;username =
    ;password =
    ;public_url =

    [external_image_storage.gcs]
    ;key_file =
    ;bucket =
    ;path =

    [external_image_storage.azure_blob]
    ;account_name =
    ;account_key =
    ;container_name =

    [external_image_storage.local]
    # does not require any configuration

    [rendering]
    # Options to configure external image rendering server like https://github.com/grafana/grafana-image-renderer
    ;server_url =
    ;callback_url =

    [panels]
    # here for to support old env variables, can remove after a few months
    ;enable_alpha = false
    ;disable_sanitize_html = false

    [plugins]
    ;enable_alpha = false
    ;app_tls_skip_verify_insecure = false

    [enterprise]
    ;license_path =
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/grafana/templates/provision_profile.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
apiVersion: v1
kind: ConfigMap
metadata:
  name: "objectscale-manager-grafana-profile"
  labels:
    release: objectscale-manager
data:
  profile.conf: |+
    {
        "internal": {
            "db_dir": "/dashboards_flex/internal",
            "username": "grafana_admin",
            "password": "grafana_admin",
            "home_dashboard": "Data Access Performance - Overview"
        },
        "internal_oe": {
            "db_dir": "/dashboards_flex/internal_oe",
            "username": "grafana_admin",
            "password": "grafana_admin",
            "home_dashboard": null,
            "folder_permissions": {
                "defaults": {},
                "view_mode": {
                    "emcservice": "view",
                    "emcmonitor": "view"
                },
                "edit_mode": {
                    "emcservice": "edit",
                    "emcmonitor": "view"
                }
            }
        }
    }
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/influxdb/templates/config.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#

apiVersion: v1
kind: ConfigMap
metadata:
  name: "objectscale-manager-influxdb"
  labels:
    release: objectscale-manager
data:
  influxdb.conf: |+
    reporting-disabled = true
    bind-address = ":8088"

    [meta]
      dir = "/data/influxdb/meta"
      retention-autocreate = true
      logging-enabled = true

    [data]
      dir = "/data/influxdb/data"
      wal-dir = "/data/influxdb/wal"
      query-log-enabled = true
      cache-max-memory-size = 1073741824
      cache-snapshot-memory-size = 26214400
      cache-snapshot-write-cold-duration = "10m0s"
      compact-full-write-cold-duration = "4h0m0s"
      max-series-per-database = 1000000
      max-values-per-tag = 100000
      index-version = "tsi1"
      trace-logging-enabled = false

    [coordinator]
      write-timeout = "10s"
      max-concurrent-queries = 0
      query-timeout = "0s"
      log-queries-after = "0s"
      max-select-point = 0
      max-select-series = 0
      max-select-buckets = 0

    [retention]
      enabled = true
      check-interval = "30m0s"

    [shard-precreation]
      enabled = true
      check-interval = "10m0s"
      advance-period = "30m0s"

    [admin]
      enabled = false
      bind-address = ":8083"
      https-enabled = false
      https-certificate = "/etc/ssl/influxdb.pem"

    [monitor]
      store-enabled = false
      store-database = "_internal"
      store-interval = "10s"

    [subscriber]
      enabled = true
      http-timeout = "30s"
      insecure-skip-verify = false
      ca-certs = ""
      write-concurrency = 40
      write-buffer-size = 1000

    [http]
      enabled = true
      bind-address = ":8086"
      flux-enabled = true
      auth-enabled = false
      log-enabled = true
      write-tracing = false
      pprof-enabled = true
      https-enabled = false
      https-certificate = "/etc/ssl/influxdb.pem"
      https-private-key = ""
      max-row-limit = 10000
      max-connection-limit = 0
      shared-secret = "beetlejuicebeetlejuicebeetlejuice"
      realm = "InfluxDB"
      unix-socket-enabled = false
      bind-socket = "/var/run/influxdb.sock"

    [logging]
      format =  "auto"
      level =  "info"
      supress-logo = false
  endpoints.json: |+
    [
      {
        "id": "objectscale-manager-influxdb-0",
        "partition_id": "0",
        "ip": "objectscale-manager-influxdb-0.objectscale-manager-influxdb.default.svc.cluster.local",
        "http_port": "8086",
        "rpc_port": "8088"

      },
      {
        "id": "objectscale-manager-influxdb-1",
        "partition_id": "0",
        "ip": "objectscale-manager-influxdb-1.objectscale-manager-influxdb.default.svc.cluster.local",
        "http_port": "8086",
        "rpc_port": "8088"

      },
      {
        "id": "objectscale-manager-influxdb-2",
        "partition_id": "0",
        "ip": "objectscale-manager-influxdb-2.objectscale-manager-influxdb.default.svc.cluster.local",
        "http_port": "8086",
        "rpc_port": "8088"

      }
    ]
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/influxdb/templates/cron-config.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#

apiVersion: v1
kind: ConfigMap
metadata:
  name: objectscale-manager-influxdb-cron-config
  labels:
    app.kubernetes.io/instance: objectscale-manager
data:
  restore_downtime_ranges_cmd: |+
    @hourly root /restore_downtime_ranges.sh cron 127.0.0.1 8086 &>> /var/log/recover.log
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/influxdb/templates/init-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "objectscale-manager-influxdb-init"
  labels:
    release: objectscale-manager
data:
  init.iql: |
    CREATE DATABASE "monitoring_main" WITH DURATION 60d SHARD DURATION 10d NAME "default"
    CREATE DATABASE "monitoring_op" WITH DURATION 5d SHARD DURATION 5d NAME "default"
    CREATE DATABASE "monitoring_last" WITH DURATION 1d SHARD DURATION 1d NAME "default"
    CREATE DATABASE "monitoring_vdc" WITH DURATION 60d SHARD DURATION 10d NAME "default"
    CREATE DATABASE "monitoring_meta" WITH DURATION 60d SHARD DURATION 10d NAME "default"
    CREATE DATABASE "monitoring_rt" WITH DURATION 1h SHARD DURATION 1h NAME "default"
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/influxdb/templates/replicas-config.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#

apiVersion: v1
kind: ConfigMap
metadata:
  name: objectscale-manager-influxdb-replicas
  labels:
    release: objectscale-manager
data:
  replicas.json: |
    {
      "replicas":3
    }
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/influxdb/templates/telegraf-sidecar-config.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#

apiVersion: v1
kind: ConfigMap
metadata:
  name: objectscale-manager-influxdb-telegraf-sidecar-custom-config
  labels:
    app.kubernetes.io/instance: objectscale-manager
data:
  custom.conf: |+

    [[inputs.influxdb]]
      ## Works with InfluxDB debug endpoints out of the box,
      ## but other services can use this format too.
      ## See the influxdb plugin's README for more details.

      ## Multiple URLs from which to read InfluxDB-formatted JSON
      ## Default is "http://localhost:8086/debug/vars".
      interval = "300s"
      urls = [
      "http://127.0.0.1:8086/debug/vars"
      ]
      name_prefix = "tsdb_"

    [[inputs.procstat]]
      interval = "300s"
      # need using full path to executable, because native PIDFinder match exe pattern as substring in `exe` symlink.
      exe = "^/usr/bin/influxd$"
      pid_finder = "native"
      # 'exe' and 'pattern' are excluded here and below to unify columns in Flux tables
      # measurement 'procstat_lookup' is not necessary for our use cases
      tagexclude = ["exe"]
      namedrop = ["procstat_lookup"]
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/prometheus-alerts/templates/alertmanager_config.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
apiVersion: v1
kind: ConfigMap
metadata:
  name: "objectscale-manager-prometheus-alerts-alertmanager-config"
  labels:
    app: "objectscale-manager-prometheus-alerts"
    chart: "prometheus-alerts-0.54.0"
    release: objectscale-manager
data:
  alertmanager.yaml: |-
    route:
      group_by: [...]

      # When a new group of alerts is created by an incoming alert, wait at
      # least 'group_wait' to send the initial notification.
      # This way ensures that you get multiple alerts for the same group that start
      # firing shortly after another are batched together on the first
      # notification.
      group_wait: 1s

      # When the first notification was sent, wait 'group_interval' to send a batch
      # of new alerts that started firing for that group.
      group_interval: 5m

      # If an alert has successfully been sent, wait 'repeat_interval' to
      # resend them.
      repeat_interval: 2h

      # A default receiver
      receiver: k8s

    receivers:
      - name: 'k8s'
        k8sevent_configs:
          - namespace: "default"
            application: "objectscale-monitoring"
            component: "objectscale-monitoring"
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/prometheus-alerts/templates/alerts_config.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
apiVersion: v1
kind: ConfigMap
metadata:
  name: "objectscale-manager-prometheus-alerts-alerts-config"
  labels:
    app: "objectscale-manager-prometheus-alerts"
    chart: "prometheus-alerts-0.54.0"
    release: objectscale-manager
data:
  process.tmpl: |-
    |> map(fn: (r) => ({
        _value: r._value,
        type: r._type,
        symptom_id:
           if r._type == "Info" then "{{ index .Symptoms "Info" }}"
           else if r._type == "Warning" then "{{ index .Symptoms "Warning" }}"
           else if r._type == "Error" then "{{ index .Symptoms "Error" }}"
           else if r._type == "Critical" then "{{ index .Symptoms "Critical" }}"
           else ""
    }))
  alerts.yaml: |-
    groups:
      - name: "objectscale-monitoring"
        rules:
          - alert: "CAP_1111"
            range: 30m
            expr: |-
              // alert on low total objstore capacity
              
              thrsh_warning=70
              thrsh_error=80
              thrsh_critical=85
              
              from(bucket: "monitoring_vdc")
              |> filter(fn: (r) => r._measurement == "cq_capacity_region" and (r._field == "used" or r._field == "total_i"))
              |> range(start: {{ .Start }}, stop: {{ .Stop }})
              |> last()
              |> pivot(rowKey:["_time"], columnKey: ["_field"], valueColumn: "_value")
              |> group(columns: ["release_name"])
              |> map(fn: (r) => ({_value: (r.used*100)/r.total_i}))
              |> keep(columns: ["_value", "release_name"])
              |> filter(fn: (r) => r._value >= thrsh_warning)
              |> map(fn: (r) => ({
                _value: r._value,
                _type: if r._value >= thrsh_critical then "Critical"
                  else if r._value >= thrsh_error then "Error"
                  else "Warning", 
                threshold: if r._value >= thrsh_critical then string(v: thrsh_critical)
                  else if r._value >= thrsh_error then string(v: thrsh_error)
                  else string(v: thrsh_warning)}))
              |> group(columns: ["release_name", "threshold"])
              
            annotations:
              reason: "High usage objectscale space"
              message: "Objectscale capacity usage is {{ $value }}%, crosses threshold value {{ $labels.threshold }}%"
            symptoms:
              - id: OBJSC-MON-1111
                types:
                  - Warning
              - id: OBJSC-MON-1112
                types:
                  - Error
              - id: OBJSC-MON-1113
                types:
                  - Critical
          - alert: "MH_4019"
            range: 30m
            expr: |-
              // Simple check for telegraf system metrics availability
              // In fact by such query we only checking liveness of telegraf component
              
              import "csv"
              
              // fictive data to handle empty response case
              d = "#datatype,string,long,long
              #group,false,false,false
              #default,_result,,
              ,result,table,_value
              ,,0,0
              "
              
              f = csv.from(csv: d)
              
              m = from(bucket: "monitoring_op")
              |> filter(fn: (r) => r._measurement =~ /tsdb_telegraf_internal_.*/)
              |> range(start: {{ .Start }}, stop: {{ .Stop }})
              |> last()
              |> group()
              
              union(tables:[m,f])
              |> count()
              // we have one fictive record for case of no data from m query, so compare with 2
              |> filter(fn: (r) => r._value < 2)
              |> map(fn: (r) => ({
              // keep value to not fail in process.tmpl
                  _value: r._value,
                  _reason: "No data is pushed to the monitoring framework for the last 30 minutes",
                  _message: "Data recorded in TSDB is lagging by 30 mins",
                  _type: "Critical"
                }))
              
            annotations:
              reason: "No data has been pushed to the objectscale monitoring framework for the last 30 minutes"
              message: "No data has been pushed to the objectscale monitoring framework for the last 30 minutes"
            symptoms:
              - id: OBJSC-MON-4019
                types:
                  - Critical
          - alert: "OBJSC_MON_4021"
            range: 35m
            expr: |-
              threshold = 1800000000000 //30 minutes in nanoseconds
              
              all=from(bucket: "monitoring_op")
              |> filter(fn: (r) => r._measurement == "kubernetes_persistentvolumeclaim" and r.pvc_name =~ /influxdb-[0-9]+/ and r._value > 0)
              |> range(start: {{ .Start }}, stop: {{ .Stop }})
              |> keep(columns: ["_time", "pvc_name", "_value"])
              |> group(columns: ["pvc_name", "_value"])
              
              first=all |> first()
              last=all |> last()
              
              join(tables: {f:first, l:last}, on: ["pvc_name", "_value"])
              |> map(fn: (r) => ({duration: uint(v:r._time_l)-uint(v:r._time_f), _value: r._value }))
              |> filter(fn: (r) => r.duration >= threshold)
              |> map(fn: (r) => ({
                  _value: r._value,
                  _reason: "InfluxDB PVC " + r.pvc_name + " has a bad state for the last 30 minutes",
                  _message: "InfluxDB PVC " + r.pvc_name + " has a bad state for the last 30 minutes",
                  _type: "Critical"
                }))
              |> group(columns: ["pvc_name", "_message", "_reason"])
            annotations:
              reason: "{{ $labels._reason }}"
              message: "{{ $labels._message }}"
            symptoms:
              - id: OBJSC-MON-4021
                types:
                  - Critical
          - alert: "OBJSC_MON_4022"
            range: 35m
            expr: |-
              threshold = 1800000000000 //30 minutes in nanoseconds
              
              all=from(bucket: "monitoring_op")
              |> filter(fn: (r) => r._measurement == "kubernetes_persistentvolumeclaim" and r.pvc_name =~ /rsyslog-[0-9]+/ and r._value > 0)
              |> range(start: {{ .Start }}, stop: {{ .Stop }})
              |> keep(columns: ["_time", "pvc_name", "_value"])
              |> group(columns: ["pvc_name", "_value"])
              
              first=all |> first()
              last=all |> last()
              
              join(tables: {f:first, l:last}, on: ["pvc_name", "_value"])
              |> map(fn: (r) => ({duration: uint(v:r._time_l)-uint(v:r._time_f), _value: r._value }))
              |> filter(fn: (r) => r.duration >= threshold)
              |> map(fn: (r) => ({
                  _value: r._value,
                  _reason: "Rsyslog PVC " + r.pvc_name + " has a bad state for the last 30 minutes",
                  _message: "Rsyslog PVC " + r.pvc_name + " has a bad state for the last 30 minutes",
                  _type: "Critical"
                }))
              |> group(columns: ["pvc_name", "_message", "_reason"])
            annotations:
              reason: "{{ $labels._reason }}"
              message: "{{ $labels._message }}"
            symptoms:
              - id: OBJSC-MON-4022
                types:
                  - Critical
          - alert: "OBJSC_MON_4023"
            range: 30m
            expr: |-
              thrsh_warning=70
              thrsh_error=80
              thrsh_critical=90
              
              from(bucket: "monitoring_op")
              |> filter(fn: (r) => r._measurement == "disk"
                and r.host =~ /influxdb-[0-9]+/
                and r._field == "used_percent"
                and r.path == "/pv")
              |> range(start: {{ .Start }}, stop: {{ .Stop }})
              |> last()
              |> keep(columns: ["host", "_value"])
              |> filter(fn: (r) => r._value >= thrsh_warning)
              |> map(fn: (r) => ({
                _value: int(v: r._value),
                _type: if r._value >= thrsh_critical then "Critical"
                  else if r._value >= thrsh_error then "Error"
                  else "Warning",
                threshold: if r._value >= thrsh_critical then string(v: thrsh_critical)
                  else if r._value >= thrsh_error then string(v: thrsh_error)
                  else string(v: thrsh_warning)}))
              |> group(columns: ["threshold"])
            annotations:
              reason: "Low free space of InfluxDB PVC"
              message: "InfluxDB PVC usage is {{ $value }}%, crosses threshold value {{ $labels.threshold }}%"
            symptoms:
              - id: OBJSC-MON-4023
                types:
                  - Warning
              - id: OBJSC-MON-4024
                types:
                  - Error
              - id: OBJSC-MON-4025
                types:
                  - Critical
          - alert: "OBJSC_MON_4026"
            range: 30m
            expr: |-
              thrsh_warning=70
              thrsh_error=80
              thrsh_critical=90
              
              from(bucket: "monitoring_op")
              |> filter(fn: (r) => r._measurement == "disk"
                and r.host =~ /rsyslog-[0-9]+/
                and r._field == "used_percent"
                and r.path == "/pv")
              |> range(start: {{ .Start }}, stop: {{ .Stop }})
              |> last()
              |> keep(columns: ["host", "_value"])
              |> filter(fn: (r) => r._value >= thrsh_warning)
              |> map(fn: (r) => ({
                _value: int(v: r._value),
                _type: if r._value >= thrsh_critical then "Critical"
                  else if r._value >= thrsh_error then "Error"
                  else "Warning",
                threshold: if r._value >= thrsh_critical then string(v: thrsh_critical)
                  else if r._value >= thrsh_error then string(v: thrsh_error)
                  else string(v: thrsh_warning)}))
              |> group(columns: ["threshold"])
            annotations:
              reason: "Low free space of Rsyslog PVC"
              message: "Rsyslog PVC usage is {{ $value }}%, crosses threshold value {{ $labels.threshold }}%"
            symptoms:
              - id: OBJSC-MON-4026
                types:
                  - Warning
              - id: OBJSC-MON-4027
                types:
                  - Error
              - id: OBJSC-MON-4028
                types:
                  - Critical
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/prometheus-alerts/templates/prometheus_config.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
apiVersion: v1
kind: ConfigMap
metadata:
  name: "objectscale-manager-prometheus-alerts-config"
  labels:
    app: "objectscale-manager-prometheus-alerts"
    chart: "prometheus-alerts-0.54.0"
    release: objectscale-manager
data:
  prometheus.yaml: |-
    global:
      evaluation_interval: 5m

    rule_files:
      - /etc/alerts/alerts.yaml

    alerting:
      alertmanagers:
        - static_configs:
            - targets: ['localhost:9093']

    fluxd:
      url: "http://objectscale-manager-fluxd.default.svc.cluster.local:8093/api/v3/query"

      process_template: "/etc/alerts/process.tmpl"
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/rsyslog-client/templates/cleanup-logs.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#

apiVersion: v1
kind: ConfigMap
metadata:
  name: objectscale-manager-rsyslog-client-cleanup-logs-script
  labels:
    app.kubernetes.io/name: objectscale-manager-rsyslog-client
    app.kubernetes.io/instance: objectscale-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.54.0"
    app.kubernetes.io/part-of: objectscale-manager
    helm.sh/chart: rsyslog-client-0.54.0
    release: objectscale-manager
data:
  cleanup_logs.sh: |+
    #!/bin/bash

    source /etc/pod.env

    _log(){
        msg="$*"
        if [[ -n "$msg" ]] ; then
            echo "$(date "+%m%d%Y %T")":  "$msg"
        fi
    }

    MONITORING_LOGS="/var/log"
    _log "Started cleanup script. Logs folder: ${MONITORING_LOGS}"

    test -d "${MONITORING_LOGS}"            || exit 3

    # check if another instance is running (slowly) already
    SELF=$(basename "$0")
    if pidof -o %PPID -x "$SELF" > /dev/null; then
        exit 4
    fi

    fs_size_kb=$(df --output=size ${MONITORING_LOGS} | grep -v '1K-blocks')
    fs_size=$(( $fs_size_kb * 1024 ))

    # TODO: add alert on script failure
    python3 /etc/logrotate_autoconf.py -s ${fs_size} -c /etc/svc_logs_priority_conf.json >> "${MONITORING_LOGS}/logrotate_autoconf.log" 2>&1
    /etc/run_logrotate.sh >> /var/log/logrotate.log 2>&1

    # only remove compressed log files for now
    LOG_FILE_PATTERN="*.log*.gz" # the index/timestamp could be before or after the .log infix

    CHECK_INTERVAL=10

    du_high_watermark="${LOGS_SIZE_HIGH_WATERMARK:-204800}"
    du_low_watermark="${LOGS_SIZE_LOW_WATERMARK:-153600}"

    # some log files might not get compressed in error conditions,
    # compress them if not modified for a day.
    # assume the file name will be like
    #     messages-20140825-1409004745
    #     rm.log.20140826-165818
    NOT_COMPRESSED_PATTERN=".*20[0-9]{6}-[0-9]{6,10}$"
    find -L "${MONITORING_LOGS}" -regextype posix-egrep -regex "${NOT_COMPRESSED_PATTERN}" \
        -mmin +60 -exec gzip -f {} +

    LOGS_DISK_USAGE=$(du -skL "${MONITORING_LOGS}" | cut -f1)
    _log "Disk usage: $LOGS_DISK_USAGE. High watermark: ${du_high_watermark}."

    if [[ "$LOGS_DISK_USAGE" -gt ${du_high_watermark} ]]; then
        # TODO: alert if this part is executed
        _log "Perform cleanup"

        LOG_LIST_FILE=/tmp/log_list

        # list files in time order
        find -L "${MONITORING_LOGS}" \( -name "${LOG_FILE_PATTERN}" \) \
            -exec stat -c "%Y %n" {} + | sort -n | awk '{print $2}' > ${LOG_LIST_FILE}

        # remove one by one
        i=0
        while read -r file; do
            rm -f "$file"
            _log "Removed $file"

            # check du less frequently to speed up removal
            i=$(( i + 1 ))
            if [[ $(( i % CHECK_INTERVAL)) -eq 0 ]]; then
              usage="$(du -skL ${MONITORING_LOGS} | cut -f1)"
              _log "Disk usage: ${usage}"
              if [[ "${usage}" -le "${du_low_watermark}" ]]; then
                _log "Disk usage ${usage} is below low watermark ${du_low_watermark}"
                break
              fi
            fi
        done < ${LOG_LIST_FILE}

        rm -f ${LOG_LIST_FILE}
    fi
    _log "Finished cleanup script"
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/rsyslog-client/templates/cron-config.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#

apiVersion: v1
kind: ConfigMap
metadata:
  name: objectscale-manager-rsyslog-client-cron-config
  labels:
    app.kubernetes.io/name: objectscale-manager-rsyslog-client
    app.kubernetes.io/instance: objectscale-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.54.0"
    app.kubernetes.io/part-of: objectscale-manager
    helm.sh/chart: rsyslog-client-0.54.0
    release: objectscale-manager
data:
  cron_logrotate: |+
    * * * * *      root    /etc/cleanup_logs.sh >> /var/log/cleanup_logs.log 2>&1
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/rsyslog-client/templates/logrotate-config.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#

apiVersion: v1
kind: ConfigMap
metadata:
  name: objectscale-manager-rsyslog-client-logrotate-config
  labels:
    app.kubernetes.io/name: objectscale-manager-rsyslog-client
    app.kubernetes.io/instance: objectscale-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.54.0"
    app.kubernetes.io/part-of: objectscale-manager
    helm.sh/chart: rsyslog-client-0.54.0
    release: objectscale-manager
data:
  svc: |+
    /var/log/*.log
    {
      missingok
      copytruncate
      nocreate
      nosharedscripts
      size=10M
      maxage 14
      rotate 10
      notifempty
      compress
      dateext
      dateformat .%Y%m%d-%H%M%S
      postrotate
      endscript
    }
  logrotate.conf: |+
    # see "man logrotate" for details
    # rotate log files daily
    daily

    # keep rotated logs for 14 days max
    maxage 14

    # rotate 10 by default
    rotate 10

    # use date as a suffix of the rotated file
    dateext

    # Add a dateformat
    dateformat .%Y%m%d-%H%M%S

    # max size is 5 MB
    size 5M

    # Compress log files
    compress

    # comment these to switch compression to use gzip or another
    # compression scheme
    compresscmd /usr/bin/gzip
    uncompresscmd /usr/bin/gunzip

    # rotate logs as root
    su root root

    # RPM packages drop log rotation information into this directory
    include /etc/logrotate.d
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/rsyslog-client/templates/rsyslog-client-config.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#

apiVersion: v1
kind: ConfigMap
metadata:
  name: objectscale-manager-rsyslog-client-config
  # namespace is required for resources created by objectscale-vsphere
  namespace: default
  labels:
    app.kubernetes.io/name: objectscale-manager-rsyslog-client
    app.kubernetes.io/instance: objectscale-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.54.0"
    app.kubernetes.io/part-of: objectscale-manager
    helm.sh/chart: rsyslog-client-0.54.0
    release: objectscale-manager
data:
  rsyslog.conf.template: |+
    #### MODULES ####

    # input module: file
    module(load="imfile")

    #### GLOBAL DIRECTIVES ####

    #### RULES ####

    # input log files
    input(type="imfile"
          File="/var/log/*.log"
          Tag="objectscale-manager"
          addMetadata="on"
          Ruleset="handle_multiple_logs"
          Facility="local0"
    )

    _STDOUT_CONF_

    ruleset(name="handle_multiple_logs") {
      # http://www.rsyslog.com/doc/v8-stable/rainerscript/functions.html
      # re_extract(expr, re, match, submatch, no-found)
      set $.suffix=re_extract($!metadata!filename, "(.*)/([^/]*)", 0, 2, "all.log");
      set $.pod_name=getenv("POD_NAME");
      call sendToLogserver
    }

    ruleset(name="handle_stdout_logs") {
      # http://www.rsyslog.com/doc/v8-stable/rainerscript/functions.html
      # re_extract(expr, re, match, submatch, no-found)
      set $.container_name=re_extract($!metadata!filename, "(.*)/([^/]*)/([^/]*)", 0, 2, "unknown_container");
      set $.log_name=re_extract($!metadata!filename, "(.*)/([^/]*)", 0, 2, "all.log");
      set $.suffix= $.container_name & ".stdout." & $.log_name;
      set $.pod_name=getenv("POD_NAME");
      call sendToLogserver
    }

    # output template
    template(name="FileFormat" type="string"
    string= "<%PRI%>%TIMESTAMP% %HOSTNAME% %syslogtag%__%$.pod_name%__%$.suffix%%msg:::sp-if-no-1st-sp%%msg:::drop-last-lf%\n"
            )

    ruleset(name="sendToLogserver") {
      action(type="omfwd"
          Target="_RSYSLOG_POD_NAME_.objectscale-manager-rsyslog.default.svc.cluster.local"
          Port="10514"
          Protocol="tcp"
          Template="FileFormat" )
    #    action.resumeRetryCount=100
    #    queue.type=linkedList queue.size=10000)
    }
  rsyslog_stdout.conf.template: |+
    input(type="imfile"
          File="_CONTAINER_DIR_/*.log"
          Tag="objectscale-manager"
          addMetadata="on"
          Ruleset="handle_stdout_logs"
          Facility="local0"
    )
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/rsyslog/templates/configmap.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#

apiVersion: v1
kind: ConfigMap
metadata:
  name: objectscale-manager-rsyslog
  labels:
    app.kubernetes.io/name: objectscale-manager-rsyslog
    app.kubernetes.io/instance: objectscale-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.54.0"
    app.kubernetes.io/part-of: objectscale-manager
    helm.sh/chart: rsyslog-0.54.0
    release: objectscale-manager
data:
  rsyslog.conf: |+
    #### MODULES ####

    # input module: unix socket
    module(load="imtcp")

    # input module: structured data parser
    module(load="mmpstrucdata")

    #### RULES ####

    # avoid conversion of tabs to #011 characters
    global(
      parser.escapecontrolcharactertab="off"
    )

    template(name="jsonLogForwardFormat" type="string"
         string="{\"cluster\":\"unknown\",\"host\":\"%$.my_hostname%\",\"message\":\"%rawmsg:::json%\"}\n")

    # input unix socket
    input(type="imtcp" port="10514" ruleset="RemoteLogProcess")

    # output template
    # With ':2:$' we cut incoming msg from second symbol till the end of line so by this way we remove unexpected 'extra space'
    # according with %PROPERTY_NAME[:FROM_CHAR:TO_CHAR:OPTION]%
    # More info in OBSDEF-4384
    template(name="OnlyMsg" type="string" string="%msg:2:$:drop-last-lf%\n")

    # output template for messages from fluent-bit
    template(name="OnlyMsgFB" type="string" string="%msg:::drop-last-lf%\n")

    # output file path
    template(name="RemoteLogSavePath" type="list") {
        constant(value="/var/log")
        constant(value="/")
        property(name="$.logpath" )
    }

    # output ruleset
    ruleset(name="RemoteLogProcess") {
        # For facility local7 (23) set log filename from k8s structured data provided by fluent-bit
        if ( $syslogfacility == 23 ) then
        {
            action(type="mmpstrucdata")
            set $.logpath = $!rfc5424-sd!kubernetes!release & "/" & $!rfc5424-sd!kubernetes!pod_name & "/" & $!rfc5424-sd!kubernetes!container_name & ".stdout.log";
            action(type="omfile" dynaFileCacheSize="1024" dynaFile="RemoteLogSavePath" template="OnlyMsgFB"
            flushOnTXEnd="off" asyncWriting="on" flushInterval="1" ioBufferSize="64k")
        } else if ( $syslogfacility >= 16 ) then
        # For facilities local0-6 set log filename from $programname field: replace __ with /
        # Message has arbitary format, syslog fields are not used
        {
            set $.logpath = replace($programname, "__", "/");
            action(type="omfile" dynaFileCacheSize="1024" dynaFile="RemoteLogSavePath" template="OnlyMsg"
            flushOnTXEnd="off" asyncWriting="on" flushInterval="1" ioBufferSize="64k")
        # Logs with filename defined from facility
        # Message has syslog format, syslog fields are used
        } else {
            if (($syslogfacility == 0)) then {
        	    set $.logpath = "kern";
            } else if (($syslogfacility == 4) or ($syslogfacility == 10)) then {
                set $.logpath = "auth";
            } else if (($syslogfacility == 9) or ($syslogfacility == 15)) then {
                set $.logpath = "cron";
            } else {
                set $.logpath ="syslog";
            }
            # Built-in template RSYSLOG_FileFormat: High-precision timestamps and timezone information
            action(type="omfile" dynaFileCacheSize="1024" dynaFile="RemoteLogSavePath" template="RSYSLOG_FileFormat"
            flushOnTXEnd="off" asyncWriting="on" flushInterval="1" ioBufferSize="64k")
        }
    }
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/rsyslog/templates/logrotate-config.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#

apiVersion: v1
kind: ConfigMap
metadata:
  name: objectscale-manager-rsyslog-logrotate-config
  labels:
    app.kubernetes.io/name: objectscale-manager-rsyslog
    app.kubernetes.io/instance: objectscale-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.54.0"
    app.kubernetes.io/part-of: objectscale-manager
    helm.sh/chart: rsyslog-0.54.0
    release: objectscale-manager
data:
  svc_logs_priority_conf.json: |+
    {
      "defaults": {
        "__comment": "These parameters are used if they not specified obviously for individual logs and affect directly calculation result",
        "rotation_size_MB": 5,
        "retention_days": 30,
        "weight_for_undefined": 0.2
      },
      "config": {
        "atlas":{
          "global_weight_lim": 5,
          "retention_days": 60,
          "files":{}
        },
        "blob":{
          "global_weight_lim": 5,
          "retention_days": 60,
          "files":{}
        },
        "bookkeeper":{
          "files":{}
        },
        "cm":{
          "global_weight_lim": 5,
          "retention_days": 60,
          "files":{}
        },
        "control":{
          "global_weight_lim": 5,
          "retention_days": 60,
          "files":{}
        },
        "cp":{
          "files":{}
        },
        "diag":{
          "global_weight_lim": 5,
          "retention_days": 60,
          "files":{}
        },
        "fabric-proxy":{
          "global_weight_lim": 5,
          "retention_days": 60,
          "files":{}
        },
        "fluxd":{
          "global_weight_lim": 1,
          "retention_days": 60,
          "files":{}
        },
        "geoservice":{
          "global_weight_lim": 5,
          "retention_days": 60,
          "files":{}
        },
        "geo":{
          "global_weight_lim": 5,
          "retention_days": 60,
          "files":{}
        },
        "grafana":{
          "global_weight_lim": 1,
          "retention_days": 60,
          "files":{
            "boot.log": {
              "rotation_size": "200KB",
              "local_weight_lim": 1
            },
            "confd.log": {
              "rotation_size": "200KB",
              "local_weight_lim": 1
            },
            "fluxd.log": {
              "local_weight_lim": 6
            },
            "grafana-server.log": {
              "local_weight_lim": 6
            },
            "grafana_init.log": {
              "rotation_size": "200KB",
              "local_weight_lim": 2
            }
          }
        },
        "influxdb":{
          "global_weight_lim": 1,
          "retention_days": 60,
          "files": {}
        },
        "management-gateway":{
          "global_weight_lim": 5,
          "retention_days": 60,
          "files":{}
        },
        "metering":{
          "global_weight_lim": 5,
          "retention_days": 60,
          "files":{}
        },
        "objmt":{
          "files":{}
        },
        "event":{
          "global_weight_lim": 5,
          "retention_days": 60,
          "files":{}
        },
        "objectsvc":{
          "global_weight_lim": 5,
          "retention_days": 60,
          "files":{}
        },
        "ons":{
          "files":{}
        },
        "nds":{
          "files":{}
        },
        "pravega":{
          "global_weight_lim": 5,
          "retention_days": 60,
          "files":{}
        },
        "pravega-controller":{
          "global_weight_lim": 5,
          "retention_days": 60,
          "files":{}
        },
        "rep":{
          "files":{}
        },
        "resource":{
          "global_weight_lim": 5,
          "retention_days": 60,
          "files":{}
        },
        "rm":{
          "global_weight_lim": 5,
          "retention_days": 60,
          "files":{}
        },
        "s3":{
          "global_weight_lim": 5,
          "retention_days": 60,
          "files":{}
        },
        "segment-store":{
          "files":{}
        },
        "sm":{
          "global_weight_lim": 5,
          "retention_days": 60,
          "files":{}
        },
        "sr":{
          "global_weight_lim": 5,
          "retention_days": 60,
          "files":{}
        },
        "ss":{
          "global_weight_lim": 5,
          "retention_days": 60,
          "files":{}
        },
        "ssm":{
          "global_weight_lim": 5,
          "retention_days": 60,
          "files":{}
        },
        "storage-topology-tree":{
          "files":{}
        },
        "telegraf":{
          "global_weight_lim": 1,
          "retention_days": 60,
          "files":{}
        },
        "telegraf-prom":{
          "global_weight_lim": 1,
          "retention_days": 60,
          "files":{}
        },
        "throttler":{
          "global_weight_lim": 1,
          "retention_days": 60,
          "files":{}
        },
        "zookeeper":{
          "global_weight_lim": 5,
          "retention_days": 60,
          "files":{}
        }
      }
    }

  logrotate.conf: |+
    # see "man logrotate" for details
    # rotate log files daily
    daily

    # keep rotated logs for 14 days max
    maxage 14

    # rotate 10 by default
    rotate 10

    # use date as a suffix of the rotated file
    dateext

    # Add a dateformat
    dateformat .%Y%m%d-%H%M%S

    # max size is 5 MB
    size 5M

    # Compress log files
    compress

    # comment these to switch compression to use gzip or another
    # compression scheme
    compresscmd /usr/bin/gzip
    uncompresscmd /usr/bin/gunzip

    # rotate logs as root
    su root root

    # RPM packages drop log rotation information into this directory
    include /etc/logrotate.d

    # All non svc log files will be rotated with defaults  parameters
    /var/log/*.log {

    }
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/rsyslog/templates/telegraf-sidecar-config.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#

apiVersion: v1
kind: ConfigMap
metadata:
  name: objectscale-manager-rsyslog-telegraf-sidecar-custom-config
  labels:
    app.kubernetes.io/name: objectscale-manager-rsyslog
    app.kubernetes.io/instance: objectscale-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.54.0"
    app.kubernetes.io/part-of: objectscale-manager
    helm.sh/chart: rsyslog-0.54.0
    release: objectscale-manager
data:
  custom.conf: |+

    [[inputs.procstat]]
      interval = "300s"
      # need using full path to executable, because native PIDFinder match exe pattern as substring in `exe` symlink.
      exe = "^/usr/sbin/rsyslogd$"
      pid_finder = "native"
      # 'exe' and 'pattern' are excluded here and below to unify columns in Flux tables
      # measurement 'procstat_lookup' is not necessary for our use cases
      tagexclude = ["exe"]
      namedrop = ["procstat_lookup"]
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/telegraf-sidecar/templates/telegraf-config.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#

apiVersion: v1
kind: ConfigMap
metadata:
  name: objectscale-manager-telegraf-sidecar
  labels:
    app.kubernetes.io/instance: objectscale-manager
data:
  telegraf.conf: |+# Configuration for telegraf agent
    [ agent ]
      ## Default data collection interval for all inputs
      ## Set to 10 seconds to make sure data is sent to output as soon as possible
      interval = "10s"

      ## Default flushing interval for all outputs. You shouldn't set this below
      ## interval. Maximum flush_interval will be flush_interval + flush_jitter
      flush_interval = "10s"

      ## Jitter the flush interval by a random amount. This is primarily to avoid
      ## large write spikes for users running a large number of telegraf instances.
      ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
      flush_jitter = "10s"

      debug = true

      ## Following limitation of batch size and buffer limit ensures memory use <70MB
      ## when 2 InfluxDB instances are down.
      ## See README.md and MONITORING-241
      metric_batch_size = 1000
      metric_buffer_limit = 4000

    [[outputs.influxdb]]
      skip_database_creation = true
      urls = ["http://objectscale-manager-telegraf.default.svc.cluster.local:11002"]
      timeout = "30s"
      database = "default"
      retention_policy = "default"

    # Read metrics about disk usage by mount point
    [[inputs.disk]]
      interval = "300s"
      ## By default stats will be gathered for all mount points.
      ## Set mount_points will restrict the stats to only the specified mount points.
      mount_points = ["/", "/pv"]
      fieldpass = ["free", "used", "total", "used_percent", "inodes*"]

    [[processors.override]]
      namepass = [ "disk" ]
      tagexclude = ["device", "fstype", "mode"]
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/telegraf/templates/configmap-confd-template.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
apiVersion: v1
kind: ConfigMap
metadata:
  name: objectscale-manager-telegraf-confd-template
  labels:
    app.kubernetes.io/name: objectscale-manager-telegraf
    app.kubernetes.io/instance: objectscale-manager
    app.kubernetes.io/managed-by: Helm
data:
  telegraf_flex.toml: |+
    [template]
    src = "telegraf_flex.conf.tmpl"
    dest = "/etc/telegraf/telegraf.conf"
    keys = [
        "/replicas",
    ]
    reload_cmd = "pkill -SIGHUP telegraf"
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/telegraf/templates/configmap-template.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
apiVersion: v1
kind: ConfigMap
metadata:
  name: objectscale-manager-telegraf-config-template
  labels:
    app.kubernetes.io/name: objectscale-manager-telegraf
    app.kubernetes.io/instance: objectscale-manager
    app.kubernetes.io/managed-by: Helm
data:
  telegraf_flex.conf.tmpl: |+
    [global_tags]
      release_name = "objectscale-manager"
    [agent]
      collection_jitter = "0s"
      debug = false
      flush_interval = "10s"
      flush_jitter = "0s"
      interval = "10s"
      logfile = ""
      metric_batch_size = 1000
      metric_buffer_limit = 10000
      omit_hostname = true
      precision = ""
      quiet = false
      round_interval = true
    [[processors.override]]
      namepass = [
        "tsdb_influxdb_httpd"
      ]
      tagexclude = [
        "node_id",
        "ip"
      ]
    
    [[inputs.influxdb_listener]]
      read_timeout = "30s"
      service_address = ":11002"
      write_timeout = "30s"
    [[inputs.internal]]
      collect_memstats = true
      interval = "300s"
      name_prefix = "tsdb_telegraf_"
      [inputs.internal.tags]
        host = "$HOSTNAME"
        tag = "system"
    [[inputs.prometheus]]
      bearer_token = "/var/run/secrets/kubernetes.io/serviceaccount/token"
      insecure_skip_verify = true
      interval = "$COLLECTION_INTERVAL"
      kubernetes_label_selector = "app.kubernetes.io/name=objectscale-manager-fluxd"
      monitor_kubernetes_pods = true
      monitor_kubernetes_pods_namespace = "default"
      name_prefix = "tsdb_fluxd_"
      [inputs.prometheus.tags]
        tag = "system"
    [[inputs.prometheus]]
      bearer_token = "/var/run/secrets/kubernetes.io/serviceaccount/token"
      insecure_skip_verify = true
      interval = "$COLLECTION_INTERVAL"
      kubernetes_label_selector = "app.kubernetes.io/name=csi-baremetal"
      monitor_kubernetes_pods = true
      monitor_kubernetes_pods_namespace = "default"
      name_prefix = "csi_"
      tagexclude = [
        "cni.projectcalico.org/podIP",
        "cni.projectcalico.org/podIPs",
        "controller-revision-hash",
        "pod-template-generation",
        "pod-template-hash",
        "prometheus.io/path",
        "prometheus.io/port",
        "prometheus.io/scrape",
        "app.kubernetes.io/name",
        "role"
      ]
      [inputs.prometheus.tags]
        host = "$HOSTNAME"
    [[inputs.prometheus]]
      insecure_skip_verify = true
      interval = "$COLLECTION_INTERVAL"
      kubernetes_services = [
        "http://objectscale-manager-throttler.default.svc.cluster.local:8094/metrics"
      ]
      monitor_kubernetes_pods = false
      [inputs.prometheus.tags]
        host = "throttler"
        tag = "system"
    [[inputs.kube_inventory]]
      bearer_token = "/var/run/secrets/kubernetes.io/serviceaccount/token"
      insecure_skip_verify = true
      interval = "$COLLECTION_INTERVAL"
      namespace = ""
      resource_include = [
        "persistentvolumeclaims"
      ]
      tagexclude = [
        "phase"
      ]
      url = "https://kubernetes.default.svc"
    {{- $replicas := atoi (getv "/replicas" "1") }}
    {{- $replicas_per_partition := atoi (getenv "INFLUXDB_REPLICAS_PER_PARTITION" "3") }}
    {{- $partitions_count := div $replicas $replicas_per_partition }}{{range $i, $e := seq 1 ($replicas)}}
  
    [[outputs.influxdb]]
      urls = ["http://objectscale-manager-influxdb-{{$i}}.objectscale-manager-influxdb.default.svc.cluster.local:8086"]
      database = "monitoring_main"
      insecure_skip_verify = true
      namepass = ["tsdb_influxdb_httpd"]
      retention_policy = "default"
      skip_database_creation = true
      tagexclude = ["cluster", "release_name"]
      [outputs.influxdb.tagpass]
        host = ["objectscale-manager-influxdb-{{$i}}"]
  
    [[outputs.influxdb]]
      urls = ["http://objectscale-manager-influxdb-{{$i}}.objectscale-manager-influxdb.default.svc.cluster.local:8086"]
      database = "monitoring_op"
      insecure_skip_verify = true
      namepass = ["tsdb_influxdb_httpd"]
      retention_policy = "default"
      skip_database_creation = true
      tagexclude = ["cluster", "release_name"]
      [outputs.influxdb.tagpass]
        host = ["objectscale-manager-influxdb-{{$i}}"]
  
    [[outputs.influxdb]]
      urls = ["http://objectscale-manager-influxdb-{{$i}}.objectscale-manager-influxdb.default.svc.cluster.local:8086"]
      database = "monitoring_last"
      insecure_skip_verify = true
      namepass = ["tsdb_influxdb_httpd"]
      retention_policy = "default"
      skip_database_creation = true
      tagexclude = ["cluster", "release_name"]
      [outputs.influxdb.tagpass]
        host = ["objectscale-manager-influxdb-{{$i}}"]
  
    [[outputs.influxdb]]
      urls = ["http://objectscale-manager-influxdb-{{$i}}.objectscale-manager-influxdb.default.svc.cluster.local:8086"]
      database = "monitoring_vdc"
      insecure_skip_verify = true
      namepass = ["tsdb_influxdb_httpd"]
      retention_policy = "default"
      skip_database_creation = true
      tagexclude = ["cluster", "release_name"]
      [outputs.influxdb.tagpass]
        host = ["objectscale-manager-influxdb-{{$i}}"]{{- end }}
    {{ $release_name := getenv "RELEASE_NAME" "" }}
    {{ $release_namespace := getenv "RELEASE_NAMESPACE" "" }}
    {{ $scheme := getenv "SCHEME" "http" }}{{range $i, $e := seq 1 ($replicas)}}{{- $urls := print $scheme "://" $release_name "-influxdb-" $i "." $release_name "-influxdb." $release_namespace ".svc.cluster.local:8086" }}
    {{ $partition := div $i $replicas_per_partition -}}[[outputs.influxdb]]{{- if ne $urls "" }}
      urls = ["{{$urls}}"]{{- end }}
      database = "monitoring_op"
      fielddrop = [
        "*Timestamp"
      ]
      insecure_skip_verify = true
      namepass = [
        "tsdb_fluxd_http_api_request_duration_seconds",
        "tsdb_fluxd_http_api_requests_total",
        "tsdb_fluxd_host_state_change_total",
        "tsdb_fluxd_host_state",
        "tsdb_fluxd_host_selected",
        "tsdb_fluxd_host_selection_failed",
        "tsdb_fluxd_hl_*",
        "tsdb_fluxd_query_control_executing_duration_seconds",
        "tsdb_fluxd_http_lb_request_forwarded",
        "tsdb_fluxd_query_control_panics_total",
        "tsdb_influxdb",
        "tsdb_influxdb_database",
        "tsdb_influxdb_queryExecutor",
        "tsdb_telegraf_internal_gather",
        "tsdb_telegraf_internal_write",
        "cquerier_*",
        "disk",
        "procstat",
        "csi_*",
        "kubernetes_persistentvolumeclaim"
      ]
      retention_policy = "default"
      skip_database_creation = true
      tagexclude = [
        "vdc",
        "storage_pool",
        "cluster",
        "release_name"
      ]
      timeout = "30s"{{- if ne $partitions_count 1 }}
      [outputs.influxdb.hashpass]
        partitionpass = {{$partition}}
        partitions = {{$partitions_count}}{{- end }}
    [[outputs.influxdb]]{{- if ne $urls "" }}
      urls = ["{{$urls}}"]{{- end }}
      database = "monitoring_vdc"
      insecure_skip_verify = true
      namepass = [
        "cq_*"
      ]
      retention_policy = "default"
      skip_database_creation = true
      tagexclude = [
        "host",
        "node_id",
        "vdc",
        "storage_pool",
        "cluster"
      ]
      timeout = "30s"{{- if ne $partitions_count 1 }}
      [outputs.influxdb.hashpass]
        partitionpass = {{$partition}}
        partitions = {{$partitions_count}}{{- end }}
    
    {{ end -}}
    {{- $urls := "" }}
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/throttler/templates/config_throttler.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: objectscale-manager-throttler-config
  labels:
    app: "objectscale-manager-throttler"
    chart: "throttler-0.54.0"
    release: objectscale-manager
data:
  throttler.conf: |+
    ### Throttler configuration file.
    ###
    ### [throttler]
    ###
    ### Contains the parameters to configure throttler engine.
    ###
    [throttler]
      # Used to detect count of iterations which should be done by throttler before shutdown.
      # By default, iterations-count is set to 0 which means that iterations count is unlimited.
      iterations-count = 0

      # Used to detect which metrics should be throttled: "service", "system", "all"
      throttle-metrics-type = "system"

      # Used to detect throttler scrape interval.
      scrape-interval-minutes = 5

      # Used to detect maximum available metrics' ingest rate (points per second).
      max-ingest-rate = 350

      # Used to detect maximum available metrics' cardinality.
      max-metric-cardinality = 10000

      # Used to increase current metrics push interval to time series database
      # and pull interval (for system metrics) if the InfluxDB exceeded its limit
      increase-metrics-interval-sec = 60

      # Set the directory for all throttler's log messages
      log-dir = "/var/log"

    ###
    ### [influx]
    ### Contains the list with the necessary parameters for creating the connections to the InfluxDB instances.
    ### These instances are used to detect current ingest rate per each time series database.
    ###
    [influx]
      # List of InfluxDB endpoints in this format: host:port, separated by comma.
      endpoints = ["objectscale-manager-influxdb-0.objectscale-manager-influxdb.default.svc.cluster.local:8086,objectscale-manager-influxdb-1.objectscale-manager-influxdb.default.svc.cluster.local:8086,objectscale-manager-influxdb-2.objectscale-manager-influxdb.default.svc.cluster.local:8086"]

    ###
    ### [cf]
    ###
    ### Contains the parameters which are needed for communication with the cf service REST interface.
    ###
    [cf]
      # Node with cf instance.
      host = "127.0.0.1"

      # Used to get auth token for the further communication.
      username = "emcservice"

      # Port of the service which is listening all incoming requests.
      port = 4443

      # Http scheme which is used for cf requests.
      http-scheme = "https"

      # Url to get auth token
      auth-token-url = "/login"

      # Base url for all cf specific requests.
      auth-token-file = "/data/throttler/conf/.authcount"

    ###
    ### [http]
    ###
    ### Contains the parameters for http client.
    ###
    [http]
      # Timeout for the outgoing http requests.
      timeout-sec = 30

    ###
    ### [cq]
    ###
    ### Contains the parameters for CQ service.
    ###
    [cq]
      # Timeout for the outgoing http requests.
      fluxd-url = "http://objectscale-manager-fluxd.default.svc.cluster.local:8093/api/v3/query"
      # Telegraf URL is sent to Fluxd with http.to() function
      # and should be handled on Fluxd side
      telegraf-url = "http://objectscale-manager-telegraf.default.svc.cluster.local:11002/write"
      interval = "5m"
      template-folder = "/etc/cq_flex"

    [alerter]
      fluxd-url = "http://objectscale-manager-fluxd.default.svc.cluster.local:8093/api/v3/query"
      interval = "5m"
      alerts-folder = "/etc/alerter/"
      alerts-conf-path = "/etc/alerter/alerts.yaml"
      event-template = "event.tmpl"

    [fluxd-alerter]
      conf-path = "/etc/fluxd-alerter/config.yaml"
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/throttler/templates/cq.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "objectscale-manager-throttler-cq"
  labels:
    release: objectscale-manager
data:
  CQ.json: |
    [
      {
        "template":"capacity-region.tmpl",
        "min-depth":"5m",
        "max-depth":"1h",
        "start-offset":"-6h",
        "keep-offset":"5h",
        "max-age":"1440h",
        "target":"cq_capacity_region",
        "value-columns":["total_i", "used", "available", "reserved", "offline",
          "offline_recovered", "offline_unrecovered"],
        "max-retry": 3,
        "sync-query": false
      },
      {
        "template":"capacity-data-being-processed-region.tmpl",
        "min-depth":"5m",
        "max-depth":"1h",
        "start-offset":"-1h",
        "keep-offset":"0m",
        "max-age":"1440h",
        "target":"cq_capacity_data_being_processed_region",
        "value-columns":["data_being_processed"],
        "max-retry": 3,
        "sync-query": false
      },
      {
        "template":"capacity-used-region.tmpl",
        "min-depth":"5m",
        "max-depth":"1h",
        "start-offset":"-6h",
        "keep-offset":"5h",
        "max-age":"1440h",
        "target":"cq_capacity_used_region",
        "value-columns":["meta_data", "protection_overhead_wo_geo", "protection_overhead_user", "protection_overhead_metadata",
          "system_gc_pending", "system_gc_reclaimed",
          "system_gc_unreclaim", "user_data", "user_gc_pending", "user_gc_reclaimed", "user_gc_unreclaim"],
        "max-retry": 3,
        "sync-query": false
      },
      {
        "template":"capacity-ec-region.tmpl",
        "min-depth":"5m",
        "max-depth":"1h",
        "max-age":"1440h",
        "start-offset":"-6h",
        "keep-offset":"5h",
        "target":"cq_capacity_ec_region",
        "value-columns":["total_coded_data", "total_coding_data"],
        "max-retry":3,
        "sync-query":false
      },
      {
        "template":"capacity-ec-rate-region.tmpl",
        "min-depth":"5m",
        "max-depth":"1h",
        "max-age":"1440h",
        "start-offset":"-6h",
        "keep-offset":"5h",
        "target":"cq_capacity_ec_rate_region",
        "value-columns":["coding_rate"],
        "max-retry":3,
        "sync-query":false
      },
      {
        "template":"rebalance-region.tmpl",
        "min-depth":"5m",
        "max-depth":"1h",
        "max-age":"1440h",
        "start-offset":"-6h",
        "keep-offset":"5h",
        "target":"cq_rebalancing_region",
        "value-columns":["data_rebalanced", "pending_rebalance"],
        "max-retry":3,
        "sync-query":false
      },
      {
        "template":"recover-status-region.tmpl",
        "min-depth":"5m",
        "max-depth":"1h",
        "max-age":"1440h",
        "start-offset":"-6h",
        "keep-offset":"5h",
        "target":"cq_recover_status_region",
        "value-columns":["data_to_recover", "data_recovered"],
        "max-retry":3,
        "sync-query":false
      },
      {
        "template":"gc-stats-region.tmpl",
        "min-depth":"5m",
        "max-depth":"1h",
        "max-age":"1440h",
        "start-offset":"-6h",
        "keep-offset":"5h",
        "target":"cq_gc_data_region",
        "value-columns": ["user_gc_pending", "user_gc_unreclaim", "system_gc_pending", "system_gc_unreclaim", "system_gc_reclaimed", "user_gc_reclaimed"],
        "max-retry": 3,
        "sync-query": false
      },
      {
        "template":"latency-region.tmpl",
        "min-depth":"5m",
        "max-depth":"1h",
        "start-offset": "-30m",
        "keep-offset": "20m",
        "max-age": "1440h",
        "target":"cq_performance_latency_region",
  
        "value-columns":["p50","p99"],
        "tag-columns":["id"],
        "max-retry": 3,
        "sync-query": false
      }
    ]
  capacity-data-being-processed-region.tmpl: |
    import "http"
  
    from(bucket: "monitoring_vdc")
    |> filter(fn: (r) => r._measurement == "cq_capacity_data_being_processed" and
                         r._field == "data_being_processed")
    |> range(start: {{ .Start }}, stop: {{ .Stop }})
    |> fillMissing(period: 5m)
    |> range(start: {{ .KeepStart }}, stop: {{ .Stop }})
    |> keep(columns: ["_field", "_time", "_value"])
    |> group(columns: ["_field", "_time"])
    |> sum()
    |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
  capacity-ec-rate-region.tmpl: |
    import "http"
    from(bucket: "monitoring_vdc")
    |> filter(fn: (r) => r._measurement == "cq_capacity_ec_rate" and r._field == "coding_rate")
    |> range(start: {{ .Start }}, stop: {{ .Stop }})
    |> fillMissing(period: 5m)
    |> range(start: {{ .KeepStart }}, stop: {{ .Stop }})
    |> keep(columns: ["_field", "_time", "_value"])
    |> group(columns: ["_field", "_time"])
    |> sum()
    |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
  capacity-ec-region.tmpl: |
    import "http"
    from(bucket: "monitoring_vdc")
    |> filter(fn: (r) => r._measurement == "cq_capacity_ec" and (r._field == "total_coded_data" or r._field == "total_coding_data"))
    |> range(start:{{ .Start }},stop:{{ .Stop }})
    |> fillMissing(period: 5m)
    |> range(start: {{ .KeepStart }}, stop: {{ .Stop }})
    |> keep(columns: ["_field", "_time", "_value"])
    |> group(columns: ["_field", "_time"])
    |> sum()
    |> pivot(rowKey:["_time"], columnKey: ["_field"], valueColumn: "_value")
  capacity-region.tmpl: |
    import "http"
  
    // Aggregated capacity by region: total, used, available, reserved
    // Depends on capacity-vdc CQ: MONITORING-795
  
    from(bucket: "monitoring_vdc")
    |> filter(fn: (r) => r._measurement == "cq_capacity_vdc" and
                         (r._field == "total_i" or r._field == "used"
                         or r._field == "available" or r._field == "reserved"
                         or r._field == "offline"
                         or r._field == "offline_recovered" or r._field == "offline_unrecovered"))
    |> range(start: {{ .Start }}, stop: {{ .Stop }})
    |> fillMissing(period: 5m)
    |> range(start: {{ .KeepStart }}, stop: {{ .Stop }})
    |> keep(columns: ["_field", "_time", "_value"])
    |> group(columns: ["_field", "_time"])
    |> sum()
    |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
  capacity-used-region.tmpl: |
    import "http"
  
    // Aggregated used capacity by region: to calculate user data, system metadata, protection overhead, garbage
    // Depends on gc-stats, capacity-used-elements CQ: MONITORING-795
  
    from(bucket: "monitoring_vdc")
    |> filter(fn: (r) => r._measurement == "cq_gc_data" or
                         r._measurement == "cq_capacity_used_elements")
    |> range(start:{{ .Start }}, stop:{{ .Stop }})
    |> fillMissing(period: 5m)
    |> range(start: {{ .KeepStart }}, stop: {{ .Stop }})
    |> keep(columns: ["_field", "_time", "_value",])
    |> group(columns: ["_field", "_time"])
    |> sum()
    |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
  gc-stats-region.tmpl: |
    import "http"
    from(bucket: "monitoring_vdc")
    |> filter(fn: (r) => r._measurement == "cq_gc_data")
    |> range(start: {{ .Start }}, stop: {{ .Stop }})
    |> fillMissing(period: 5m)
    |> range(start: {{ .KeepStart }}, stop: {{ .Stop }})
    |> keep(columns: ["_field", "_time", "_value"])
    |> group(columns: ["_field", "_time"])
    |> sum()
    |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
  latency-region.tmpl: |-
    import "http"
    import "csv"
  
    // Stub for regional latency metric - MONITORING-1074
  
    csv.from(csv:"#datatype,string,long,string,dateTime:RFC3339,double,double
    #group,false,false,false,false,false,false
    #default,_result,,,,,
    ,result,table,id,_time,p50,p99
    ,,0,ttfb_read,{{ .Stop }},0,0
    ,,0,ttlb_write,{{ .Stop }},0,0")
  rebalance-region.tmpl: |
    import "http"
  
    from(bucket: "monitoring_vdc")
    |> filter(fn: (r) => r._measurement == "cq_node_rebalancing_summary" and (r._field == "data_rebalanced" or r._field == "pending_rebalance"))
    |> range(start:{{ .Start }},stop:{{ .Stop }})
    |> fillMissing(period: 5m)
    |> range(start: {{ .KeepStart }}, stop: {{ .Stop }})
    |> keep(columns: ["_field", "_time", "_value"])
    |> group(columns: ["_field", "_time"])
    |> sum()
    |> pivot(rowKey:["_time"], columnKey: ["_field"], valueColumn: "_value")
  recover-status-region.tmpl: |
    import "http"
  
    from(bucket: "monitoring_vdc")
    |> filter(fn: (r) => r._measurement == "cq_recover_status_summary" and (r._field == "data_to_recover" or r._field == "data_recovered"))
    |> range(start:{{ .Start }},stop:{{ .Stop }})
    |> fillMissing(period: 5m)
    |> range(start: {{ .KeepStart }}, stop: {{ .Stop }})
    |> keep(columns: ["_field", "_time", "_value"])
    |> group(columns: ["_field", "_time"])
    |> sum()
    |> pivot(rowKey:["_time"], columnKey: ["_field"], valueColumn: "_value")
  tohttp.tmpl: '|> http.to(url:"{{.Telegraf}}", method:"POST", name:"{{.Target}}", timeout:{{.HTTPToTimeout}},
    timeColumn:"_time"{{if .Tags}}, tagColumns:[{{range $i, $e:=.Tags}}{{if $i}},{{end}}"{{.}}"{{end}}]{{end}}{{if
    .Values}}, valueColumns:[{{range $i, $e:=.Values}}{{if $i}},{{end}}"{{.}}"{{end}}]{{end}})'
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/throttler/templates/fluxd_alerter.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#

apiVersion: v1
kind: ConfigMap
metadata:
  name: "objectscale-manager-throttler-fluxd-alerter"
  labels:
    app: "objectscale-manager-throttler"
    chart: "throttler-0.54.0"
    release: objectscale-manager
data:
  config.yaml: |-
    enabled: true
    prefix: OBJSC-MON
    symptoms:
      Critical: 4020
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/throttler/templates/logger.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: objectscale-manager-throttler-logger-config
  labels:
    app: "objectscale-manager-throttler"
    chart: "throttler-0.54.0"
    release: objectscale-manager
data:
  logger.json: |+
    {
      "maxsize": 10,
      "maxbackups": 20,
      "maxage": 14,
      "compress": true
    }
---
# Source: objectscale-manager/charts/objectscale-monitoring/templates/app_config.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#

# Config map with event rules for KAHM
apiVersion: v1
kind: ConfigMap
metadata:
  # By KAHM rules name must be <APPLICATION_NAME>-app-config
  name: objectscale-monitoring-app-config
  labels:
    app: "objectscale-manager-objectscale-monitoring"
    chart: "objectscale-monitoring-3.7.0-1146.a692701d"
    release: objectscale-manager
  annotations:
    com.dellemc.kahm.subscribed: "true"
data:
  eventRules: |-
    issueRules:
      
      - description: "Percent of used objectscale capacity crosses threshold"
        name: "Objectscale Capacity"
        defaultAutoClearTimeOut: 60
        issueCategory: Auto
        matchOnList:
          - matchon:
              # WARNING
              - label: SymptomID
                value: OBJSC-MON-1111
          - matchon:
              # ERROR
              - label: SymptomID
                value: OBJSC-MON-1112
          - matchon:
              # CRITICAL
              - label: SymptomID
                value: OBJSC-MON-1113
        notifiers:
          - objectscale-supportassist-ese
      
      
      - description: "No data has been pushed to the objectscale monitoring framework for the last 30 minutes"
        name: "Objectscale Monitoring Health"
        defaultAutoClearTimeOut: 60
        issueCategory: Auto
        matchOnList:
          - matchon:
              # CRITICAL
              - label: SymptomID
                value: OBJSC-MON-4019
        notifiers:
          - objectscale-supportassist-ese
      
      
      - description: "Fluxd has not responded for the last 30 minutes"
        name: "MonitoringFluxd"
        defaultAutoClearTimeOut: 60
        issueCategory: Auto
        matchOnList:
          - matchon:
              # CRITICAL
              - label: SymptomID
                value: OBJSC-MON-4020
        notifiers:
          - objectscale-supportassist-ese
      
      
      - description: "InfluxDB PVC has a bad state for the last 30 minutes"
        name: "InfluxDB PVC"
        defaultAutoClearTimeOut: 60
        issueCategory: Auto
        matchOnList:
          - matchon:
              # CRITICAL
              - label: SymptomID
                value: OBJSC-MON-4021
        notifiers:
          - objectscale-supportassist-ese
      
      
      - description: "Rsyslog PVC has a bad state for the last 30 minutes"
        name: "Rsyslog PVC"
        defaultAutoClearTimeOut: 60
        issueCategory: Auto
        matchOnList:
          - matchon:
              # CRITICAL
              - label: SymptomID
                value: OBJSC-MON-4022
        notifiers:
          - objectscale-supportassist-ese
      
      
      - description: "Percent of used InfluxDB capacity crosses threshold"
        name: "InfluxDB low disk space"
        defaultAutoClearTimeOut: 60
        issueCategory: Auto
        matchOnList:
          - matchon:
              # WARNING
              - label: SymptomID
                value: OBJSC-MON-4023
          - matchon:
              # ERROR
              - label: SymptomID
                value: OBJSC-MON-4024
          - matchon:
              # CRITICAL
              - label: SymptomID
                value: OBJSC-MON-4025
        notifiers:
          - objectscale-supportassist-ese
      
      
      - description: "Percent of used Rsyslog capacity crosses threshold"
        name: "Rsyslog low disk space"
        defaultAutoClearTimeOut: 60
        issueCategory: Auto
        matchOnList:
          - matchon:
              # WARNING
              - label: SymptomID
                value: OBJSC-MON-4026
          - matchon:
              # ERROR
              - label: SymptomID
                value: OBJSC-MON-4027
          - matchon:
              # CRITICAL
              - label: SymptomID
                value: OBJSC-MON-4028
        notifiers:
          - objectscale-supportassist-ese
      
  eventRemedies: |-
    symptoms:
      
      - symptomid: OBJSC-MON-1111
        description: "Percent of used objectscale capacity crosses WARNING threshold"
        remedies:
          - Please check objectsores capacity usage and take actions to prevent overflow
      - symptomid: OBJSC-MON-1112
        description: "Percent of used objectscale capacity crosses ERROR threshold"
        remedies:
          - Please check objectsores capacity usage and take actions to prevent overflow, otherwise write operations may be locked
      - symptomid: OBJSC-MON-1113
        description: "Percent of used objectscale capacity crosses CRITICAL threshold"
        remedies:
          - Now some of objectstores may be in read only mode. Please check objectsores capacity usage and take actions to unblock them
      
      
      - symptomid: OBJSC-MON-4019
        description: "No data has been pushed to the objectscale monitoring framework for the last 30 minutes"
        remedies:
          - KB https://support.emc.com/kb/536249
      
      
      - symptomid: OBJSC-MON-4020
        description: Fluxd has not responded for the last 30 minutes
        remedies:
          - Please check fluxd service status
      
      
      - symptomid: OBJSC-MON-4020
        description: "InfluxDB PVC has a bad status for the last 30 minutes"
        remedies:
          - Please check InfluxDB PVC status and take actions to fix it
      
      
      - symptomid: OBJSC-MON-4020
        description: "Rsyslog PVC has a bad status for the last 30 minutes"
        remedies:
          - Please check Rsyslog PVC status and take actions to fix it
      
      
      - symptomid: OBJSC-MON-4023
        description: "Percent of used InfluxDB capacity crosses WARNING threshold"
        remedies:
          - Please check InfluxDB capacity usage and take actions to prevent overflow
      - symptomid: OBJSC-MON-4024
        description: "Percent of used InfluxDB capacity crosses ERROR threshold"
        remedies:
          - Please check InfluxDB capacity usage and take actions to prevent overflow, otherwise write operations may be locked
      - symptomid: OBJSC-MON-4025
        description: "Percent of used InfluxDB capacity crosses CRITICAL threshold"
        remedies:
          - Now some of InfluxDB may be in read only mode. Please check InfluxDB capacity usage and take actions to unblock them
      
      
      - symptomid: OBJSC-MON-4026
        description: "Percent of used Rsyslog capacity crosses WARNING threshold"
        remedies:
          - Please check Rsyslog capacity usage and take actions to prevent overflow
      - symptomid: OBJSC-MON-4027
        description: "Percent of used Rsyslog capacity crosses ERROR threshold"
        remedies:
          - Please check Rsyslog capacity usage and take actions to prevent overflow, otherwise write operations may be locked
      - symptomid: OBJSC-MON-4028
        description: "Percent of used Rsyslog capacity crosses CRITICAL threshold"
        remedies:
          - Now some of Rsyslog may be in read only mode. Please check Rsyslog capacity usage and take actions to unblock them
---
# Source: objectscale-manager/templates/objectscale-manager-app-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
    name: objectscale-manager-app-config
    namespace: default
    labels:
      app.kubernetes.io/name: objectscale-manager
      app.kubernetes.io/instance: objectscale-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/version: 0.69.0
      app.kubernetes.io/part-of: objectscale-manager
      helm.sh/chart: objectscale-manager-0.69.0
      release: objectscale-manager
      operator: objectscale-operator
      product: objectscale
    annotations:
        com.dellemc.kahm.subscribed: "true"
data:
    eventRules: |-
    health: |-
      spec:
        - name: pre-update
          container: emccorp/objectscale-manager-pre-update:0.69.0
          serviceaccount: objectscale-manager-healthchecks
          timelimit: "5m"
          args:
            - -target-version
            - 0.69.0
    eventRemedies: |-
      symptoms:
        - symptomid: DEOS-MGR-1001
          description: Provisioning of the new objectstore failed
          remedies:
            - Check the results of the provisioning job
---
# Source: objectscale-manager/templates/operator-logger-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: default
  name: logger-config
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/instance: objectscale-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.69.0
    app.kubernetes.io/component: objectscale-operator
    app.kubernetes.io/part-of: objectscale-manager
    helm.sh/chart: objectscale-manager-0.69.0
    operator: objectscale-operator
    product: objectscale
    release: objectscale-manager
data:
  logger-config.yaml: |-
    development: true
    disableCaller: false
    disableStacktrace: false
    level: info
    outputPaths:
    - stdout
    errorOutputPaths:
    - stderr
    encoding: console
    encoderConfig:
      messageKey: M
      levelKey: L
      timeKey: T
      nameKey: N
      callerKey: C
      stacktraceKey: S
      lineEnding: 

      levelEncoder: capital
      timeEncoder: iso8601
      durationEncoder: string
      callerEncoder: short
---
# Source: objectscale-manager/charts/atlas-operator/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: atlas-operator
  labels:
    app.kubernetes.io/name: atlas-operator
    helm.sh/chart: atlas-operator-0.31.0
    app.kubernetes.io/instance: objectscale-manager
    app.kubernetes.io/version: "0.13.0"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  - endpoints
  - pods
  - pvc
  - services
  verbs:
  - '*'
- apiGroups:
  - ""
  resources:
  - configmaps/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
- apiGroups:
  - apps
  resources:
  - deployments
  - deployments/finalizers
  - statefulsets
  verbs:
  - '*'
- apiGroups:
  - atlas.dellemc.com
  resources:
  - atlasclusters
  - atlasclusters/finalizers
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - atlas.dellemc.com
  resources:
  - atlasclusters/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - '*'
---
# Source: objectscale-manager/charts/federation/templates/federation-admin-role.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: default-federation-admin
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/instance: objectscale-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.68.2
    app.kubernetes.io/component: federation
    app.kubernetes.io/part-of: objectscale-manager
    helm.sh/chart: federation-0.68.2
    release: objectscale-manager
    operator: objectscale-operator
    product: objectscale
rules:
- apiGroups:
  - ecs.dellemc.com
  resources:
  - ecsclusters
  verbs:
  - "*"
- apiGroups:
  - app.k8s.io
  resources:
  - "*"
  verbs:
  - "*"
- apiGroups:
    - apiextensions.k8s.io
  resources:
    - "*"
  verbs:
    - "*"
- apiGroups:
    - ""
  resources:
    - pods
    - secrets
    - configmaps
    - services
  verbs:
    - "*"
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/influxdb-operator/templates/influxdb_editor_role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: objectscale-manager-influxdb-operator-default-influxdb-editor-role
  labels:
    app.kubernetes.io/name: objectscale-manager-influxdb-operator
    app.kubernetes.io/instance: objectscale-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.68.2"
    app.kubernetes.io/part-of: objectscale-manager
    helm.sh/chart: influxdb-operator-0.68.2
    release: objectscale-manager
rules:
- apiGroups:
  - db.ecs.dellemc.com
  resources:
  - influxdbs
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - db.ecs.dellemc.com
  resources:
  - influxdbs/status
  verbs:
  - get
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/influxdb-operator/templates/influxdb_viewer_role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: objectscale-manager-influxdb-operator-default-influxdb-viewer-role
  labels:
    app.kubernetes.io/name: objectscale-manager-influxdb-operator
    app.kubernetes.io/instance: objectscale-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.68.2"
    app.kubernetes.io/part-of: objectscale-manager
    helm.sh/chart: influxdb-operator-0.68.2
    release: objectscale-manager
rules:
- apiGroups:
  - db.ecs.dellemc.com
  resources:
  - influxdbs
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - db.ecs.dellemc.com
  resources:
  - influxdbs/status
  verbs:
  - get
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/influxdb-operator/templates/leader_election_role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: objectscale-manager-influxdb-operator-default-leader-election-role
  labels:
    app.kubernetes.io/name: objectscale-manager-influxdb-operator
    app.kubernetes.io/instance: objectscale-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.68.2"
    app.kubernetes.io/part-of: objectscale-manager
    helm.sh/chart: influxdb-operator-0.68.2
    release: objectscale-manager
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - configmaps/status
  verbs:
  - get
  - update
  - patch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/influxdb-operator/templates/node_role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: objectscale-manager-influxdb-operator-default-node-role
  labels:
    app.kubernetes.io/name: objectscale-manager-influxdb-operator
    app.kubernetes.io/instance: objectscale-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.68.2"
    app.kubernetes.io/part-of: objectscale-manager
    helm.sh/chart: influxdb-operator-0.68.2
    release: objectscale-manager
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - get
  - list
  - watch
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/influxdb-operator/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: objectscale-manager-influxdb-operator-default-influxdb-operator-role
  labels:
    app.kubernetes.io/name: objectscale-manager-influxdb-operator
    app.kubernetes.io/instance: objectscale-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.68.2"
    app.kubernetes.io/part-of: objectscale-manager
    helm.sh/chart: influxdb-operator-0.68.2
    release: objectscale-manager
rules:
- apiGroups:
  - apps
  resources:
  - statefulsets
  - statefulsets/finalizers
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - db.ecs.dellemc.com
  resources:
  - influxdbs
  - influxdbs/finalizers
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - db.ecs.dellemc.com
  resources:
  - influxdbs/status
  verbs:
  - get
  - patch
  - update
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/statefuldaemonset-operator/templates/leader_election_role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: objectscale-manager-statefuldaemonset-operator-default-leader-election-role
  labels:
    app.kubernetes.io/name: objectscale-manager-statefuldaemonset-operator
    app.kubernetes.io/instance: objectscale-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.68.2"
    app.kubernetes.io/part-of: objectscale-manager
    helm.sh/chart: statefuldaemonset-operator-0.68.2
    release: objectscale-manager
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - configmaps/status
  verbs:
  - get
  - update
  - patch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/statefuldaemonset-operator/templates/node_role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: objectscale-manager-statefuldaemonset-operator-default-node-role
  labels:
    app.kubernetes.io/name: objectscale-manager-statefuldaemonset-operator
    app.kubernetes.io/instance: objectscale-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.68.2"
    app.kubernetes.io/part-of: objectscale-manager
    helm.sh/chart: statefuldaemonset-operator-0.68.2
    release: objectscale-manager
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - get
  - list
  - watch
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/statefuldaemonset-operator/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: objectscale-manager-statefuldaemonset-operator-default-statefuldaemonset-operator-role
  labels:
    app.kubernetes.io/name: objectscale-manager-statefuldaemonset-operator
    app.kubernetes.io/instance: objectscale-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.68.2"
    app.kubernetes.io/part-of: objectscale-manager
    helm.sh/chart: statefuldaemonset-operator-0.68.2
    release: objectscale-manager
rules:
- apiGroups:
  - apps
  resources:
  - statefulsets
  - statefulsets/finalizers
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - stateful.ecs.dellemc.com
  resources:
  - statefuldaemonsets
  - statefuldaemonsets/finalizers
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - stateful.ecs.dellemc.com
  resources:
  - statefuldaemonsets/status
  verbs:
  - get
  - patch
  - update
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/statefuldaemonset-operator/templates/statefuldaemonset_editor_role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: objectscale-manager-statefuldaemonset-operator-default-statefuldaemonset-editor-role
  labels:
    app.kubernetes.io/name: objectscale-manager-statefuldaemonset-operator
    app.kubernetes.io/instance: objectscale-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.68.2"
    app.kubernetes.io/part-of: objectscale-manager
    helm.sh/chart: statefuldaemonset-operator-0.68.2
    release: objectscale-manager
rules:
- apiGroups:
  - stateful.ecs.dellemc.com
  resources:
  - statefuldaemonsets
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - stateful.ecs.dellemc.com
  resources:
  - statefuldaemonsets/status
  verbs:
  - get
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/statefuldaemonset-operator/templates/statefuldaemonset_viewer_role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: objectscale-manager-statefuldaemonset-operator-default-statefuldaemonset-viewer-role
  labels:
    app.kubernetes.io/name: objectscale-manager-statefuldaemonset-operator
    app.kubernetes.io/instance: objectscale-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.68.2"
    app.kubernetes.io/part-of: objectscale-manager
    helm.sh/chart: statefuldaemonset-operator-0.68.2
    release: objectscale-manager
rules:
- apiGroups:
  - stateful.ecs.dellemc.com
  resources:
  - statefuldaemonsets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - stateful.ecs.dellemc.com
  resources:
  - statefuldaemonsets/status
  verbs:
  - get
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/telegraf/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: objectscale-manager-telegraf
  namespace: default
rules:
  - apiGroups:
    - ""
    resources:
    - pods
    - persistentvolumes
    - persistentvolumeclaims
    - nodes
    verbs:
    - get
    - list
    - watch
---
# Source: objectscale-manager/charts/service-pod/templates/rbac.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: default-objectscale-manager-objectscale-service-pod-cr
  labels:
    release: objectscale-manager
    product: objectscale 
rules:
- apiGroups:
  - ecs.dellemc.com
  resources:
  - "*"
  verbs:
  - "*"
- apiGroups:
  - decks.ecs.dellemc.com
  resources:
  - "*"
  verbs:
  - "*"
- apiGroups:
  - kahm.emcecs.github.com
  resources:
  - notifiers
  verbs:
  - "*"
- apiGroups:
  - app.k8s.io
  resources:
  - "*"
  verbs:
  - "*"
- apiGroups:
  - ""
  - extensions
  resources:
  - pods
  - pods/exec
  - pods/log
  - pods/portforward
  - services
  - endpoints
  - persistentvolumes
  - persistentvolumeclaims
  - events
  - configmaps
  - secrets
  - applications
  - nodes
  - namespaces
  - replicationcontrollers
  - daemonsets
  - deployments
  - replicasets
  verbs:
  - "*"
- apiGroups:
  - batch
  resources:
  - jobs
  - cronjobs
  verbs:
  - "*"
- apiGroups:
  - policy
  resources:
  - poddisruptionbudgets
  verbs:
  - "*"
- apiGroups:
  - apps
  resources:
  - deployments
  - daemonsets
  - replicasets
  - statefulsets
  verbs:
  - "*"
- apiGroups:
  - zookeeper.pravega.io
  resources:
  - "*"
  verbs:
  - "*"
- apiGroups:
  - storage.k8s.io
  resources:
  - storageclasses
  - storageclasslists
  verbs:
  - get
  - list
---
# Source: objectscale-manager/charts/zookeeper-operator/templates/rbac.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: zookeeper-operator

  labels:
    release: objectscale-manager
rules:
- apiGroups:
  - zookeeper.pravega.io
  resources:
  - "*"
  verbs:
  - "*"
- apiGroups:
  - ""
  resources:
  - pods
  - services
  - endpoints
  - persistentvolumeclaims
  - events
  - configmaps
  - secrets
  verbs:
  - "*"
- apiGroups:
  - policy
  resources:
  - poddisruptionbudgets
  verbs:
  - "*"
- apiGroups:
  - apps
  resources:
  - deployments
  - daemonsets
  - replicasets
  - statefulsets
  verbs:
  - "*"
---
# Source: objectscale-manager/templates/objectscale-cluster-resources.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: default-operator-cluster-resources
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/instance: objectscale-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.69.0
    app.kubernetes.io/component: objectscale-operator
    app.kubernetes.io/part-of: objectscale-manager
    helm.sh/chart: objectscale-manager-0.69.0
    release: objectscale-manager
    operator: objectscale-operator
    product: objectscale
rules:
  - apiGroups:
      - storage.k8s.io
    resources:
      - storageclasses
      - storageclasslists
    verbs:
      - get
      - list
  - apiGroups:
      - certificates.k8s.io
    resources:
      - certificatesigningrequests
    verbs:
      - "*"
  - apiGroups:
      - certificates.k8s.io
    resources:
      - certificatesigningrequests/approval
    verbs:
      - update
  - apiGroups:
    - rbac.authorization.k8s.io
    resources:
    - clusterroles
    - clusterrolebindings
    verbs:
    - "*"
  - apiGroups:
      - ""
    resources:
      - nodes
      - clusterroles
    verbs:
      - "*"
---
# Source: objectscale-manager/templates/operator-rbac.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: default-objectscale-operator
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/instance: objectscale-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.69.0
    app.kubernetes.io/component: objectscale-operator
    app.kubernetes.io/part-of: objectscale-manager
    helm.sh/chart: objectscale-manager-0.69.0
    release: objectscale-manager
    operator: objectscale-operator
    product: objectscale
rules:
- apiGroups:
  - rbac.authorization.k8s.io
  resources:
  - roles
  - rolebindings
  verbs:
  - '*'
- apiGroups:
  - ecs.dellemc.com
  resources:
  - "*"
  verbs:
  - "*"
- apiGroups:
  - decks.ecs.dellemc.com
  resources:
  - "*"
  verbs:
  - "*"
- apiGroups:
  - ""
  resources:
  - pods
  - services
  - endpoints
  - persistentvolumeclaims
  - persistentvolumes
  - events
  - configmaps
  - secrets
  - serviceaccounts
  verbs:
  - "*"
- apiGroups:
  - batch
  resources:
  - jobs
  - cronjobs
  verbs:
  - "*"
- apiGroups:
  - policy
  resources:
  - poddisruptionbudgets
  verbs:
  - "*"
- apiGroups:
  - apps
  resources:
  - deployments
  - daemonsets
  - replicasets
  - statefulsets
  verbs:
  - "*"
- apiGroups:
  - zookeeper.pravega.io
  resources:
  - "*"
  verbs:
  - "*"
- apiGroups:
  - app.k8s.io
  resources:
  - "*"
  verbs:
  - "*"
- apiGroups:
  - atlas.dellemc.com
  resources:
  - "*"
  verbs:
  - "*"
- apiGroups:
  - bookkeeper.pravega.io
  resources:
  - "*"
  verbs:
  - "*"
- apiGroups:
  - pravega.pravega.io
  resources:
  - "*"
  verbs:
  - "*"
- apiGroups:
  - influxdata.com
  resources:
  - influxdbs
  verbs:
  - "*"
- apiGroups:
  - cns.vmware.com
  resources:
    - "*"
  verbs:
    - "*"
---
# Source: objectscale-manager/charts/atlas-operator/templates/role_binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: atlas-operator-binding
  labels:
    app.kubernetes.io/name: atlas-operator
    helm.sh/chart: atlas-operator-0.31.0
    app.kubernetes.io/instance: objectscale-manager
    app.kubernetes.io/version: "0.13.0"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: atlas-operator
subjects:
- kind: ServiceAccount
  name: atlas-operator
  namespace: default
---
# Source: objectscale-manager/charts/federation/templates/federation-rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: default-federation
  labels:
    app.kubernetes.io/name: "federation"
    app.kubernetes.io/version: 0.68.2
    app.kubernetes.io/instance: objectscale-manager
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: federation-0.68.2
    release: objectscale-manager
subjects:
- kind: ServiceAccount
  name: federation
  namespace: default
roleRef:
  kind: ClusterRole
  name: default-federation-admin
  apiGroup: rbac.authorization.k8s.io
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/influxdb-operator/templates/leader_election_role_binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: objectscale-manager-influxdb-operator-default-leader-election-role-binding
  labels:
    app.kubernetes.io/name: objectscale-manager-influxdb-operator
    app.kubernetes.io/instance: objectscale-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.68.2"
    app.kubernetes.io/part-of: objectscale-manager
    helm.sh/chart: influxdb-operator-0.68.2
    release: objectscale-manager
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: objectscale-manager-influxdb-operator-default-leader-election-role
subjects:
- kind: ServiceAccount
  name: objectscale-manager-influxdb-operator
  namespace: default
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/influxdb-operator/templates/node_role_binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: objectscale-manager-influxdb-operator-default-node-role-binding
  labels:
    app.kubernetes.io/name: objectscale-manager-influxdb-operator
    app.kubernetes.io/instance: objectscale-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.68.2"
    app.kubernetes.io/part-of: objectscale-manager
    helm.sh/chart: influxdb-operator-0.68.2
    release: objectscale-manager
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: objectscale-manager-influxdb-operator-default-node-role
subjects:
- kind: ServiceAccount
  name: objectscale-manager-influxdb-operator
  namespace: default
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/influxdb-operator/templates/role_binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: objectscale-manager-influxdb-operator-default-influxdb-operator-binding
  labels:
    app.kubernetes.io/name: objectscale-manager-influxdb-operator
    app.kubernetes.io/instance: objectscale-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.68.2"
    app.kubernetes.io/part-of: objectscale-manager
    helm.sh/chart: influxdb-operator-0.68.2
    release: objectscale-manager
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: objectscale-manager-influxdb-operator-default-influxdb-operator-role
subjects:
- kind: ServiceAccount
  name: objectscale-manager-influxdb-operator
  namespace: default
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/statefuldaemonset-operator/templates/leader_election_role_binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: objectscale-manager-statefuldaemonset-operator-default-leader-election-role-binding
  labels:
    app.kubernetes.io/name: objectscale-manager-statefuldaemonset-operator
    app.kubernetes.io/instance: objectscale-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.68.2"
    app.kubernetes.io/part-of: objectscale-manager
    helm.sh/chart: statefuldaemonset-operator-0.68.2
    release: objectscale-manager
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: objectscale-manager-statefuldaemonset-operator-default-leader-election-role
subjects:
- kind: ServiceAccount
  name: objectscale-manager-statefuldaemonset-operator
  namespace: default
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/statefuldaemonset-operator/templates/node_role_binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: objectscale-manager-statefuldaemonset-operator-default-node-role-binding
  labels:
    app.kubernetes.io/name: objectscale-manager-statefuldaemonset-operator
    app.kubernetes.io/instance: objectscale-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.68.2"
    app.kubernetes.io/part-of: objectscale-manager
    helm.sh/chart: statefuldaemonset-operator-0.68.2
    release: objectscale-manager
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: objectscale-manager-statefuldaemonset-operator-default-node-role
subjects:
- kind: ServiceAccount
  name: objectscale-manager-statefuldaemonset-operator
  namespace: default
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/statefuldaemonset-operator/templates/role_binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: objectscale-manager-statefuldaemonset-operator-default-statefuldaemonset-operator-binding
  labels:
    app.kubernetes.io/name: objectscale-manager-statefuldaemonset-operator
    app.kubernetes.io/instance: objectscale-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.68.2"
    app.kubernetes.io/part-of: objectscale-manager
    helm.sh/chart: statefuldaemonset-operator-0.68.2
    release: objectscale-manager
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: objectscale-manager-statefuldaemonset-operator-default-statefuldaemonset-operator-role
subjects:
- kind: ServiceAccount
  name: objectscale-manager-statefuldaemonset-operator
  namespace: default
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/telegraf/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: objectscale-manager-telegraf
subjects:
  - kind: ServiceAccount
    name: objectscale-manager-telegraf
    namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: objectscale-manager-telegraf
---
# Source: objectscale-manager/charts/service-pod/templates/rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: default-objectscale-manager-objectscale-service-pod-crb
  labels:
    release: objectscale-manager
    product: objectscale 
subjects:
- kind: ServiceAccount
  name: objectscale-manager-service-pod-sa
  namespace: default
roleRef:
  kind: ClusterRole
  name: default-objectscale-manager-objectscale-service-pod-cr
  apiGroup: rbac.authorization.k8s.io
---
# Source: objectscale-manager/charts/zookeeper-operator/templates/rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: default-account-zookeeper-operator
  labels:
    release: objectscale-manager
subjects:
- kind: ServiceAccount
  name: default
  namespace: default
roleRef:
  kind: ClusterRole
  name: zookeeper-operator
  apiGroup: rbac.authorization.k8s.io
---
# Source: objectscale-manager/templates/objectscale-cluster-resources.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: default-operator-cluster-resources
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/instance: objectscale-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.69.0
    app.kubernetes.io/component: objectscale-operator
    app.kubernetes.io/part-of: objectscale-manager
    helm.sh/chart: objectscale-manager-0.69.0
    release: objectscale-manager
    operator: objectscale-operator
    product: objectscale
subjects:
  - kind: ServiceAccount
    name: objectscale-operator
    namespace: default
roleRef:
  kind: ClusterRole
  name: default-operator-cluster-resources
  apiGroup: rbac.authorization.k8s.io
---
# Source: objectscale-manager/templates/operator-rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: default-objectscale-operator
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/instance: objectscale-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.69.0
    app.kubernetes.io/component: objectscale-operator
    app.kubernetes.io/part-of: objectscale-manager
    helm.sh/chart: objectscale-manager-0.69.0
    release: objectscale-manager
    operator: objectscale-operator
    product: objectscale
subjects:
- kind: ServiceAccount
  name: objectscale-operator
  namespace: default
roleRef:
  kind: ClusterRole
  name: default-objectscale-operator
  apiGroup: rbac.authorization.k8s.io
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/fluxd/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: objectscale-manager-fluxd
  namespace: default
rules:
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create"]
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["create", "get", "update", "patch", "delete"]
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/prometheus-alerts/templates/role.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: objectscale-manager-prometheus-alerts
  namespace: default
rules:
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "update"]
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/rsyslog-client/templates/rbac_role.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
#  Role for rsyslog-client to find instance of rsyslog service
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app.kubernetes.io/name: objectscale-manager-rsyslog-client
    app.kubernetes.io/instance: objectscale-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.54.0"
    app.kubernetes.io/part-of: objectscale-manager
    helm.sh/chart: rsyslog-client-0.54.0
    release: objectscale-manager
  name: "objectscale-manager-rsyslog-client"
  namespace: "default"
rules:
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["list"]
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/throttler/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: objectscale-manager-throttler
  namespace: default
rules:
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "update"]
---
# Source: objectscale-manager/templates/healthcheck-rbac.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: objectscale-manager-healthchecks
  namespace: default
  labels:
    release: objectscale-manager
rules:
  - apiGroups:
      - ecs.dellemc.com
    resources:
      - '*'
    verbs:
      - get
      - list
  - apiGroups:
      - app.k8s.io
    resources:
      - "*"
    verbs:
      - get
      - list
  - apiGroups:
      - ""
    resources:
      - pods
      - secrets
      - services
      - endpoints
      - events
      - configmaps
      - applications
      - deployments
    verbs:
      - get
      - list
  - apiGroups:
      - apps
    resources:
      - deployments
      - daemonsets
      - replicasets
      - statefulsets
    verbs:
      - get
      - list
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/fluxd/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: objectscale-manager-fluxd
subjects:
  - kind: ServiceAccount
    name: objectscale-manager-fluxd
    namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: objectscale-manager-fluxd
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/prometheus-alerts/templates/rolebinding.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: objectscale-manager-prometheus-alerts
subjects:
  - kind: ServiceAccount
    name: objectscale-manager-prometheus-alerts
    namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: objectscale-manager-prometheus-alerts
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/rsyslog-client/templates/rbac_rolebinding.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
#  RoleBinding for rsyslog-client to find instance of rsyslog service
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: "objectscale-manager-rsyslog-client"
  namespace: "default"
  labels:
    app.kubernetes.io/name: objectscale-manager-rsyslog-client
    app.kubernetes.io/instance: objectscale-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.54.0"
    app.kubernetes.io/part-of: objectscale-manager
    helm.sh/chart: rsyslog-client-0.54.0
    release: objectscale-manager
subjects:
  - apiGroup: rbac.authorization.k8s.io
    kind: Group
    name: system:serviceaccounts
roleRef:
  kind: Role
  apiGroup: rbac.authorization.k8s.io
  name: "objectscale-manager-rsyslog-client"
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/throttler/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: objectscale-manager-throttler
subjects:
  - kind: ServiceAccount
    name: objectscale-manager-throttler
    namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: objectscale-manager-throttler
---
# Source: objectscale-manager/templates/healthcheck-rbac.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: objectscale-manager-healthchecks
  namespace: default
  labels:
    release: objectscale-manager
subjects:
  - kind: ServiceAccount
    name: objectscale-manager-healthchecks
    namespace: default
roleRef:
  kind: Role
  name: objectscale-manager-healthchecks
  apiGroup: rbac.authorization.k8s.io
---
# Source: objectscale-manager/charts/federation/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: fedsvc
  namespace: default
  labels:
    helm.sh/chart: federation-0.68.2
    app.kubernetes.io/name: federation
    app.kubernetes.io/instance: objectscale-manager
    app.kubernetes.io/version: "0.68.2"
    app.kubernetes.io/managed-by: Helm
  annotations:
    objectscale.dellemc.com/federationRegistration: "ObjectScale"
spec:
  type: LoadBalancer
  ports:
    - port: 9500
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: federation
    app.kubernetes.io/instance: objectscale-manager
---
# Source: objectscale-manager/charts/objectscale-iam/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: objectscale-iam
  namespace: default
  labels:
    helm.sh/chart: objectscale-iam-0.68.2
    app.kubernetes.io/name: objectscale-iam
    app.kubernetes.io/instance: objectscale-manager
    app.kubernetes.io/namespace: "default"
    objectscale.dellemc.com/logging-inject: "true"
    objectscale.dellemc.com/logging-release-name: "objectscale-manager"
    product: objectscale
    release: objectscale-manager
    app.kubernetes.io/version: "0.68.2"
    app.kubernetes.io/managed-by: Helm
  annotations:
    objectscale.dellemc.com/federationRegistration: "ObjectScale"
spec:
  type: LoadBalancer
  ports:
    - port: 9400
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: objectscale-iam
    app.kubernetes.io/instance: objectscale-manager
    app.kubernetes.io/namespace: "default"
    objectscale.dellemc.com/logging-inject: "true"
    objectscale.dellemc.com/logging-release-name: "objectscale-manager"
    product: objectscale
    release: objectscale-manager
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/fluxd/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "objectscale-manager-fluxd"
  labels:
    app.kubernetes.io/name: "objectscale-manager-fluxd"
    chart: "fluxd-0.54.0"
    release: "objectscale-manager"
    heritage: "Helm"
spec:
  type: ClusterIP
  ports:
  - name: api
    port: 8093
    targetPort: 8093
  selector:
    app.kubernetes.io/name: objectscale-manager-fluxd
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/grafana/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "objectscale-manager-grafana"
  labels:
    app.kubernetes.io/name: "objectscale-manager-grafana"
    chart: "grafana-0.54.0"
    release: "objectscale-manager"
    heritage: "Helm"
spec:
  type: ClusterIP
  ports:
  - name: api
    port: 3000
    targetPort: 3000
  selector:
    app.kubernetes.io/name: objectscale-manager-grafana
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/influxdb/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "objectscale-manager-influxdb"
  labels:
    app.kubernetes.io/name: "objectscale-manager-influxdb"
    chart: "influxdb-0.54.0"
    release: "objectscale-manager"
    heritage: "Helm"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - name: api
    port: 8086
    targetPort: 8086
  - name: rpc
    port: 8088
    targetPort: 8088
  selector:
    app.kubernetes.io/name: objectscale-manager-influxdb
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/rsyslog/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "objectscale-manager-rsyslog"
  labels:
    app.kubernetes.io/name: objectscale-manager-rsyslog
    app.kubernetes.io/instance: objectscale-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.54.0"
    app.kubernetes.io/part-of: objectscale-manager
    helm.sh/chart: rsyslog-0.54.0
    release: objectscale-manager
spec:
  clusterIP: None
  ports:
  - name: rsyslog
    port: 10514
  selector:
    app.kubernetes.io/name: objectscale-manager-rsyslog
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/telegraf/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "objectscale-manager-telegraf"
  labels:
    app.kubernetes.io/name: "objectscale-manager-telegraf"
    chart: "telegraf-0.54.0"
    release: "objectscale-manager"
    heritage: "Helm"
spec:
  type: ClusterIP
  ports:
  - name: api
    port: 11002
    targetPort: 11002
  selector:
    app.kubernetes.io/name: objectscale-manager-telegraf
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/throttler/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "objectscale-manager-throttler"
  labels:
    app.kubernetes.io/name: "objectscale-manager-throttler"
    chart: "throttler-0.54.0"
    release: "objectscale-manager"
    heritage: "Helm"
spec:
  type: ClusterIP
  ports:
  - name: api
    port: 8094
    targetPort: 8094
  selector:
    app.kubernetes.io/name: objectscale-manager-throttler
---
# Source: objectscale-manager/charts/service-pod/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: objectscale-manager-service-pod 
    release: objectscale-manager
    product: objectscale 
  name: objectscale-manager-service-pod 
  namespace: default
spec:
  type: ClusterIP
  ports:
  - port: 22
    name: ssh
    targetPort: ssh 
    protocol: TCP
  selector:
    remote_access: objectscale-service-pod
---
# Source: objectscale-manager/charts/atlas-operator/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: atlas-operator
  namespace: default
  labels:
    app.kubernetes.io/name: atlas-operator
    helm.sh/chart: atlas-operator-0.31.0
    app.kubernetes.io/instance: objectscale-manager
    app.kubernetes.io/version: "0.13.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: atlas-operator
      app.kubernetes.io/instance: objectscale-manager
  template:
    metadata:
      labels:
        app.kubernetes.io/name: atlas-operator
        app.kubernetes.io/instance: objectscale-manager
    spec:
      serviceAccountName: atlas-operator
      securityContext:
        {}
      containers:
        - name: atlas-operator
          image: "emccorp/atlas-operator:0.13.0"
          imagePullPolicy: IfNotPresent
          securityContext:
            {}
          resources:
            limits:
              cpu: 1
              memory: 500Mi
            requests:
              cpu: 250m
              memory: 300Mi
          args: ["--enable-leader-election"]
          env:
            - name: WATCH_NAMESPACE
              value: ""
---
# Source: objectscale-manager/charts/federation/templates/federation_deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fedsvc
  labels:
    helm.sh/chart: federation-0.68.2
    app.kubernetes.io/name: federation
    app.kubernetes.io/instance: objectscale-manager
    app.kubernetes.io/version: "0.68.2"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: federation
      app.kubernetes.io/instance: objectscale-manager
  template:
    metadata:
      labels:
        app.kubernetes.io/name: federation
        app.kubernetes.io/instance: objectscale-manager
    spec:
      serviceAccountName: "federation"
      containers:
      - name: fedsvc
        env:
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: MY_POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: MY_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        image: emccorp/fedsvc:0.68.2
        imagePullPolicy: IfNotPresent
        ports:
          - name: http
            containerPort: 9501 
            protocol: TCP
        livenessProbe:
            httpGet:
                path: /fedsvchealthcheck
                port: http
            failureThreshold: 3
            periodSeconds: 60
        readinessProbe:
            httpGet:
                path: /fedsvchealthcheck
                port: http
            failureThreshold: 3
            periodSeconds: 60
---
# Source: objectscale-manager/charts/objectscale-iam/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: objectscale-iam
  labels:
    helm.sh/chart: objectscale-iam-0.68.2
    app.kubernetes.io/name: objectscale-iam
    app.kubernetes.io/instance: objectscale-manager
    app.kubernetes.io/namespace: "default"
    objectscale.dellemc.com/logging-inject: "true"
    objectscale.dellemc.com/logging-release-name: "objectscale-manager"
    product: objectscale
    release: objectscale-manager
    app.kubernetes.io/version: "0.68.2"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: objectscale-iam
      app.kubernetes.io/instance: objectscale-manager
      app.kubernetes.io/namespace: "default"
      objectscale.dellemc.com/logging-inject: "true"
      objectscale.dellemc.com/logging-release-name: "objectscale-manager"
      product: objectscale
      release: objectscale-manager
  template:
    metadata:
      labels:
        app.kubernetes.io/name: objectscale-iam
        app.kubernetes.io/instance: objectscale-manager
        app.kubernetes.io/namespace: "default"
        objectscale.dellemc.com/logging-inject: "true"
        objectscale.dellemc.com/logging-release-name: "objectscale-manager"
        product: objectscale
        release: objectscale-manager
    spec:
      containers:
      - name: iam
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: "atlas,flex,dns"
        - name: ATLAS_SERVICE_HOSTNAME
          value: objectscale-iam-atlas-client
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: MY_POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: MY_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        image: emccorp/iamsvc:0.68.2
        imagePullPolicy: IfNotPresent
        ports:
          - name: http
            containerPort: 9401 
            protocol: TCP
        livenessProbe:
            httpGet:
                path: /iamhealthcheck
                port: http
            failureThreshold: 3
            periodSeconds: 60
            initialDelaySeconds: 60
        readinessProbe:
            httpGet:
                path: /iamhealthcheck/atlas
                port: http
            failureThreshold: 3
            periodSeconds: 60
            initialDelaySeconds: 60
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/fluxd/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: objectscale-manager-fluxd
  labels:
    app.kubernetes.io/name: objectscale-manager-fluxd
    app.kubernetes.io/instance: objectscale-manager
    helm.sh/chart: fluxd-0.54.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: objectscale-manager-fluxd
      app.kubernetes.io/instance: objectscale-manager
  template:
    metadata:
      labels:
        app.kubernetes.io/name: objectscale-manager-fluxd
        app.kubernetes.io/instance: objectscale-manager
        release: objectscale-manager
        
        objectscale.dellemc.com/logging-inject: "true"
        objectscale.dellemc.com/logging-release-name: "objectscale-manager"
        app.kubernetes.io/namespace: "default"
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/scheme: HTTP
        prometheus.io/port: "8093"
    spec:
      shareProcessNamespace: true
      serviceAccountName: objectscale-manager-fluxd
      initContainers:
      - name: confd-init
        image: "emccorp/confd-sidecar:3.7.0.0-1146.a692701d"
        imagePullPolicy: "IfNotPresent"
        command: ["bash"]
        args: ["-c", "echo /crash-dump/core-%e > /proc/sys/kernel/core_pattern; ulimit -c unlimited; GOTRACEBACK=crash /confd -onetime -sync-only -backend file -file /etc/fluxd-ext/influxdb-replicas/replicas.json -confdir /etc/confd_flex"]
        volumeMounts:
        - mountPath: /etc/fluxd-ext/influxdb-replicas
          name: influxdb-replicas-config
        - mountPath: /etc/confd_flex/templates
          name: configs-template
        - mountPath: /etc/confd_flex/conf.d
          name: configs-confd-template
        - mountPath: /etc/fluxd
          name: config
        - mountPath: /crash-dump
          name: crash-dump
        env:
        - name: NODE_ID
          valueFrom:
            fieldRef:
              # use pod name as node id
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: INFLUXDB_REPLICAS_PER_PARTITION
          value: "3"
        - name: RELEASE_NAME
          value: "objectscale-manager"
        - name: RELEASE_NAMESPACE
          value: "default"
        - name: TLS_ENABLED
          value: "false"
        - name: GRAPHQL_ENDPOINT
          value: "http://objectscale-graphql.default.svc.cluster.local:8080/graphql"
      containers:
      - name: fluxd
        image: "emccorp/fluxd:3.7.0.0-1146.a692701d"
        imagePullPolicy: "IfNotPresent"
        command: ["bash"]
        args: ["-c", "echo /crash-dump/core-%e > /proc/sys/kernel/core_pattern; ulimit -c unlimited; GOTRACEBACK=crash source /etc/fluxd/fluxd.env && fluxd --disable-lb --disable-cache --cf-disabled --disable-zk --node-id $NODE_ID --storage-hosts $STORAGE_HOSTS --store-namespace default --port 8093 --logger-config /non_existing"]
        resources:
          requests:
            memory: 350Mi
            ephemeral-storage: 950Mi
          limits:
            memory: 350Mi
            ephemeral-storage: 950Mi
        ports:
        - name: api
          containerPort: 8093
        env:
        - name: NODE_ID
          valueFrom:
            fieldRef:
              # use pod name as node id
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: INFLUXDB_REPLICAS_PER_PARTITION
          value: "3"
        - name: RELEASE_NAME
          value: "objectscale-manager"
        - name: RELEASE_NAMESPACE
          value: "default"
        - name: TLS_ENABLED
          value: "false"
        - name: GRAPHQL_ENDPOINT
          value: "http://objectscale-graphql.default.svc.cluster.local:8080/graphql"
        volumeMounts:
        - mountPath: /etc/fluxd/logger.json
          name: fluxd-logger-config
          subPath: logger.json
        - mountPath: /etc/fluxd
          name: config
        - mountPath: /crash-dump
          name: crash-dump
        - name: log
          mountPath: /var/log
        livenessProbe:
          httpGet:
            path: /metrics
            port: api
            scheme: HTTP
          initialDelaySeconds: 30
          timeoutSeconds: 30
          periodSeconds: 60
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /metrics
            port: api
            scheme: HTTP
          initialDelaySeconds: 5
          timeoutSeconds: 30
          periodSeconds: 60
          failureThreshold: 3
      - name: confd
        image: "emccorp/confd-sidecar:3.7.0.0-1146.a692701d"
        imagePullPolicy: "IfNotPresent"
        command: [ "bash" ]
        args: [ "-c", "echo /crash-dump/core-%e > /proc/sys/kernel/core_pattern; ulimit -c unlimited; GOTRACEBACK=crash /confd -backend file -file /etc/fluxd-ext/influxdb-replicas/replicas.json -confdir /etc/confd_flex -interval 300"]
        volumeMounts:
        - mountPath: /etc/fluxd-ext/influxdb-replicas
          name: influxdb-replicas-config
        - mountPath: /etc/confd_flex/templates
          name: configs-template
        - mountPath: /etc/confd_flex/conf.d
          name: configs-confd-template
        - mountPath: /etc/fluxd
          name: config
        - mountPath: /crash-dump
          name: crash-dump
        env:
        - name: NODE_ID
          valueFrom:
            fieldRef:
              # use pod name as node id
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: INFLUXDB_REPLICAS_PER_PARTITION
          value: "3"
        - name: RELEASE_NAME
          value: "objectscale-manager"
        - name: RELEASE_NAMESPACE
          value: "default"
        - name: TLS_ENABLED
          value: "false"
        - name: GRAPHQL_ENDPOINT
          value: "http://objectscale-graphql.default.svc.cluster.local:8080/graphql"
      volumes:
      - name: configs-template
        configMap:
          name: objectscale-manager-fluxd-configs-templates
      - name: configs-confd-template
        configMap:
          name: objectscale-manager-fluxd-confd-template
      - name: fluxd-logger-config
        configMap:
          name: objectscale-manager-fluxd-logger-config
      - name: config
        emptyDir: {}
      - name: crash-dump
        emptyDir: {}
      - name: log
        emptyDir: {}
      - name: influxdb-replicas-config
        configMap:
          name: objectscale-manager-influxdb-replicas
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/grafana/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: objectscale-manager-grafana
  labels:
    app.kubernetes.io/name: objectscale-manager-grafana
    helm.sh/chart: grafana-0.54.0
    app.kubernetes.io/instance: objectscale-manager
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: objectscale-manager-grafana
      app.kubernetes.io/instance: objectscale-manager
  template:
    metadata:
      labels:
        app.kubernetes.io/name: objectscale-manager-grafana
        app.kubernetes.io/instance: objectscale-manager
        release: objectscale-manager
        
        objectscale.dellemc.com/logging-inject: "true"
        objectscale.dellemc.com/logging-release-name: "objectscale-manager"
        app.kubernetes.io/namespace: "default"
        
        objectscale.dellemc.com/logging-inject-logrotate: "true"
      annotations:
        
        objectscale.dellemc.com/logging-release-name: "objectscale-manager"
    spec:
      shareProcessNamespace: true
      initContainers:
      - name: confd-init
        image: "emccorp/confd-sidecar:3.7.0.0-1146.a692701d"
        imagePullPolicy: "IfNotPresent"
        command: ["bash"]
        args: ["-c", "echo /crash-dump/core-%e > /proc/sys/kernel/core_pattern; ulimit -c unlimited; GOTRACEBACK=crash /confd -onetime -sync-only -backend file -file /etc/fluxd-ext/influxdb-replicas/replicas.json -confdir /etc/confd_flex"]
        volumeMounts:
        - mountPath: /etc/fluxd-ext/influxdb-replicas
          name: influxdb-replicas-config
        - mountPath: /etc/confd_flex/templates
          name: configs-template
        - mountPath: /etc/confd_flex/conf.d
          name: configs-confd-template
        - mountPath: /etc/fluxd
          name: config
        - mountPath: /crash-dump
          name: crash-dump
        env:
        - name: NODE_ID
          valueFrom:
            fieldRef:
              # use pod name as node id
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: INFLUXDB_REPLICAS_PER_PARTITION
          value: "3"
        - name: RELEASE_NAME
          value: "objectscale-manager"
        - name: RELEASE_NAMESPACE
          value: "default"
        - name: TLS_ENABLED
          value: "false"
        - name: GRAPHQL_ENDPOINT
          value: "http://objectscale-graphql.default.svc.cluster.local:8080/graphql"
      containers:
      - name: grafana
        image: "emccorp/grafana:3.7.0.0-1146.a692701d"
        imagePullPolicy: "IfNotPresent"
        command: ["bash"]
        args: ["-c", "echo /crash-dump/core-%e > /proc/sys/kernel/core_pattern; ulimit -c unlimited; GOTRACEBACK=crash /entrypoint.sh"]
        resources:
          requests:
            memory: 300Mi
            ephemeral-storage: 850Mi
          limits:
            memory: 300Mi
            ephemeral-storage: 850Mi
        ports:
        - name: api
          containerPort: 3000
        env:
        - name: K8S_FLUXD
          value: "127.0.0.1"
        volumeMounts:
        - mountPath: /dashboards_flex/internal
          name: dashboards-internal
        - mountPath: /dashboards_flex/internal_oe
          name: dashboards-internal-oe
        - mountPath: /etc/grafana/profile.conf
          name: provision-profile
          subPath: profile.conf
        - mountPath: /etc/grafana/grafana_flex.ini
          name: config-grafana-ini
          subPath: grafana.ini
        - name: log
          mountPath: /var/log
        - mountPath: /crash-dump
          name: crash-dump
        # nginx logs to stdout, no need to mount log
        livenessProbe:
          httpGet:
            path: /api/health
            port: api
            scheme: HTTP
          initialDelaySeconds: 30
          timeoutSeconds: 30
          periodSeconds: 60
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/health
            port: api
            scheme: HTTP
          initialDelaySeconds: 5
          timeoutSeconds: 30
          periodSeconds: 60
          failureThreshold: 3
      - name: fluxd
        image: "emccorp/fluxd:3.7.0.0-1146.a692701d"
        imagePullPolicy: "IfNotPresent"
        command: ["bash"]
        args: ["-c", "echo /crash-dump/core-%e > /proc/sys/kernel/core_pattern; ulimit -c unlimited; GOTRACEBACK=crash source /etc/fluxd/fluxd.env && fluxd --disable-lb --cf-disabled --disable-zk --node-id $NODE_ID --storage-hosts $STORAGE_HOSTS --store-namespace default --port 8093 --logger-config /non_existing"]
        resources:
        ports:
        - name: api
          containerPort: 8093
        env:
        - name: NODE_ID
          valueFrom:
            fieldRef:
              # use pod name as node id
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: INFLUXDB_REPLICAS_PER_PARTITION
          value: "3"
        - name: RELEASE_NAME
          value: "objectscale-manager"
        - name: RELEASE_NAMESPACE
          value: "default"
        - name: TLS_ENABLED
          value: "false"
        - name: GRAPHQL_ENDPOINT
          value: "http://objectscale-graphql.default.svc.cluster.local:8080/graphql"
        volumeMounts:
        - mountPath: /etc/fluxd/logger.json
          name: fluxd-logger-config
          subPath: logger.json
        - mountPath: /etc/fluxd
          name: config
        - mountPath: /crash-dump
          name: crash-dump
        - name: log
          mountPath: /var/log
      
      - name: confd
        image: "emccorp/confd-sidecar:3.7.0.0-1146.a692701d"
        imagePullPolicy: "IfNotPresent"
        command: [ "bash" ]
        args: [ "-c", "echo /crash-dump/core-%e > /proc/sys/kernel/core_pattern; ulimit -c unlimited; GOTRACEBACK=crash /confd -backend file -file /etc/fluxd-ext/influxdb-replicas/replicas.json -confdir /etc/confd_flex -interval 300"]
        volumeMounts:
        - mountPath: /etc/fluxd-ext/influxdb-replicas
          name: influxdb-replicas-config
        - mountPath: /etc/confd_flex/templates
          name: configs-template
        - mountPath: /etc/confd_flex/conf.d
          name: configs-confd-template
        - mountPath: /etc/fluxd
          name: config
        - mountPath: /crash-dump
          name: crash-dump
        env:
        - name: NODE_ID
          valueFrom:
            fieldRef:
              # use pod name as node id
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: INFLUXDB_REPLICAS_PER_PARTITION
          value: "3"
        - name: RELEASE_NAME
          value: "objectscale-manager"
        - name: RELEASE_NAMESPACE
          value: "default"
        - name: TLS_ENABLED
          value: "false"
        - name: GRAPHQL_ENDPOINT
          value: "http://objectscale-graphql.default.svc.cluster.local:8080/graphql"
      volumes:
      - name: dashboards-internal
        configMap:
          name: objectscale-manager-grafana-dashboards-internal
      - name: dashboards-internal-oe
        configMap:
          name: objectscale-manager-grafana-dashboards-internal-oe
      - name: provision-profile
        configMap:
          name: objectscale-manager-grafana-profile
      - name: config-grafana-ini
        configMap:
          name: objectscale-manager-grafana-grafana-ini
      
      - name: configs-template
        configMap:
          name: objectscale-manager-fluxd-configs-templates
      - name: configs-confd-template
        configMap:
          name: objectscale-manager-fluxd-confd-template
      - name: fluxd-logger-config
        configMap:
          name: objectscale-manager-fluxd-logger-config
      - name: config
        emptyDir: {}
      - name: crash-dump
        emptyDir: {}
      - name: log
        emptyDir: {}
      - name: influxdb-replicas-config
        configMap:
          name: objectscale-manager-influxdb-replicas
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/influxdb-operator/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: objectscale-manager-influxdb-operator
  namespace: default
  labels:
    app.kubernetes.io/name: objectscale-manager-influxdb-operator
    app.kubernetes.io/instance: objectscale-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.68.2"
    app.kubernetes.io/part-of: objectscale-manager
    helm.sh/chart: influxdb-operator-0.68.2
    release: objectscale-manager
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: objectscale-manager-influxdb-operator
      app.kubernetes.io/instance: objectscale-manager
  template:
    metadata:
      labels:
        app.kubernetes.io/name: objectscale-manager-influxdb-operator
        app.kubernetes.io/instance: objectscale-manager
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: "0.68.2"
        app.kubernetes.io/part-of: objectscale-manager
        helm.sh/chart: influxdb-operator-0.68.2
        release: objectscale-manager
    spec:
      serviceAccountName: objectscale-manager-influxdb-operator
      securityContext:
        {}
      containers:
        - name: influxdb-operator
          image: "emccorp/influxdb-operator:3.7.0.0-1146.a692701d"
          imagePullPolicy: IfNotPresent
          securityContext:
            {}
          resources:
            requests:
              memory: 200Mi
              ephemeral-storage: 650Mi
            limits:
              memory: 200Mi
              ephemeral-storage: 650Mi
          command: ["bash"]
          args: ["-c", "echo /crash-dump/core-%e > /proc/sys/kernel/core_pattern; ulimit -c unlimited; GOTRACEBACK=crash ./manager --enable-leader-election"]
          env:
            - name: WATCH_NAMESPACE
              value: ""
          volumeMounts:
          - mountPath: /crash-dump
            name: crash-dump
      volumes:
      - name: crash-dump
        emptyDir: {}
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/prometheus-alerts/templates/deployment.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
apiVersion: apps/v1
kind: Deployment
metadata:
  name: objectscale-manager-prometheus-alerts
  labels:
    app.kubernetes.io/name: objectscale-manager-prometheus-alerts
    app.kubernetes.io/instance: objectscale-manager
    helm.sh/chart: prometheus-alerts-0.54.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: objectscale-manager-prometheus-alerts
      app.kubernetes.io/instance: objectscale-manager
  template:
    metadata:
      labels:
        app.kubernetes.io/name: objectscale-manager-prometheus-alerts
        app.kubernetes.io/instance: objectscale-manager
        release: objectscale-manager
        
        objectscale.dellemc.com/logging-inject: "true"
        objectscale.dellemc.com/logging-release-name: "objectscale-manager"
        app.kubernetes.io/namespace: "default"
      annotations:
    spec:
      serviceAccountName: objectscale-manager-prometheus-alerts
      containers:
      - name: prometheus
        image: "emccorp/prometheus:3.7.0.0-1146.a692701d"
        imagePullPolicy: "IfNotPresent"
        args:
          - --storage.tsdb.path=/data
          - --storage.tsdb.retention.time=6h
          - --config.file=/etc/prometheus/prometheus.yaml
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
          failureThreshold: 3
          successThreshold: 1
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
          failureThreshold: 3
          successThreshold: 1
        resources:
          limits:
            memory: 182Mi
          requests:
            memory: 182Mi
        volumeMounts:
        - mountPath: /etc/prometheus
          name: prometheus-config
        - mountPath: /etc/alerts
          name: prometheus-alerts-config
        - mountPath: /data
          name: prometheus-storage-volume
        - mountPath: /crash-dump
          name: crash-dump
      - name: alertmanager
        image: "emccorp/alertmanager:3.7.0.0-1146.a692701d"
        imagePullPolicy: "IfNotPresent"
        args:
          - --storage.path=/data
          - --config.file=/etc/alertmanager/alertmanager.yaml
          - --data.retention=120h
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9093
          initialDelaySeconds: 30
          timeoutSeconds: 30
        volumeMounts:
        - mountPath: /etc/alertmanager
          name: prometheus-alertmanager-config
        - mountPath: /data
          name: alertmanager-storage-volume
        - mountPath: /crash-dump
          name: crash-dump
      volumes:
      - name: prometheus-config
        configMap:
          name: objectscale-manager-prometheus-alerts-config
      - name: prometheus-alerts-config
        configMap:
          name: objectscale-manager-prometheus-alerts-alerts-config
      - name: prometheus-alertmanager-config
        configMap:
          name: objectscale-manager-prometheus-alerts-alertmanager-config
      - name: prometheus-storage-volume
        emptyDir: {}
      - name: alertmanager-storage-volume
        emptyDir: {}
      - name: crash-dump
        emptyDir: {}
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/statefuldaemonset-operator/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: objectscale-manager-statefuldaemonset-operator
  namespace: default
  labels:
    app.kubernetes.io/name: objectscale-manager-statefuldaemonset-operator
    app.kubernetes.io/instance: objectscale-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.68.2"
    app.kubernetes.io/part-of: objectscale-manager
    helm.sh/chart: statefuldaemonset-operator-0.68.2
    release: objectscale-manager
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: objectscale-manager-statefuldaemonset-operator
      app.kubernetes.io/instance: objectscale-manager
  template:
    metadata:
      labels:
        app.kubernetes.io/name: objectscale-manager-statefuldaemonset-operator
        app.kubernetes.io/instance: objectscale-manager
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: "0.68.2"
        app.kubernetes.io/part-of: objectscale-manager
        helm.sh/chart: statefuldaemonset-operator-0.68.2
        release: objectscale-manager
    spec:
      serviceAccountName: objectscale-manager-statefuldaemonset-operator
      securityContext:
        {}
      containers:
        - name: statefuldaemonset-operator
          image: "emccorp/statefuldaemonset-operator:3.7.0.0-1146.a692701d"
          imagePullPolicy: IfNotPresent
          securityContext:
            {}
          resources:
            requests:
              memory: 200Mi
              ephemeral-storage: 650Mi
            limits:
              memory: 200Mi
              ephemeral-storage: 650Mi
          command: ["bash"]
          args: ["-c", "echo /crash-dump/core-%e > /proc/sys/kernel/core_pattern; ulimit -c unlimited; GOTRACEBACK=crash ./manager --enable-leader-election"]
          env:
            - name: WATCH_NAMESPACE
              value: ""
          volumeMounts:
          - mountPath: /crash-dump
            name: crash-dump
      volumes:
      - name: crash-dump
        emptyDir: {}
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/telegraf/templates/deployment.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
apiVersion: apps/v1
kind: Deployment
metadata:
  name: objectscale-manager-telegraf
  labels:
    app.kubernetes.io/name: objectscale-manager-telegraf
    helm.sh/chart: telegraf-0.54.0
    app.kubernetes.io/instance: objectscale-manager
spec:
  replicas:  1
  selector:
    matchLabels:
      app.kubernetes.io/name: objectscale-manager-telegraf
  template:
    metadata:
      labels:
        app.kubernetes.io/name: objectscale-manager-telegraf
        release: objectscale-manager
        
        objectscale.dellemc.com/logging-inject: "true"
        objectscale.dellemc.com/logging-release-name: "objectscale-manager"
        app.kubernetes.io/namespace: "default"
      annotations:
        # Include a hash of the configmap in the pod template
        # This means that if the configmap changes, the deployment will be rolled
        checksum/config: 38d22967bd3143b3a3ff2362499678f316122bef479118939d895eddd35638a8
    spec:
      shareProcessNamespace: true
      serviceAccountName: objectscale-manager-telegraf
      initContainers:
      - name: confd-init
        image: "emccorp/confd-sidecar:3.7.0.0-1146.a692701d"
        imagePullPolicy: "IfNotPresent"
        command: ["bash"]
        args: ["-c", "echo /crash-dump/core-%e > /proc/sys/kernel/core_pattern; ulimit -c unlimited; GOTRACEBACK=crash /confd -onetime -sync-only -backend file -file /etc/telegraf-ext/influxdb-replicas/replicas.json -confdir /etc/confd_flex"]
        volumeMounts:
        - mountPath: /etc/telegraf-ext/influxdb-replicas
          name: influxdb-replicas-config
        - mountPath: /etc/confd_flex/templates
          name: configs-template
        - mountPath: /etc/confd_flex/conf.d
          name: configs-confd-template
        - mountPath: /etc/telegraf
          name: config
        - mountPath: /crash-dump
          name: crash-dump
        env:
        - name: INFLUXDB_REPLICAS_PER_PARTITION
          value: "3"
        - name: RELEASE_NAME
          value: "objectscale-manager"
        - name: RELEASE_NAMESPACE
          value: "default"
        - name: SCHEME
          value: "http"
      containers:
      - name: telegraf
        image: "emccorp/telegraf:3.7.0.0-1146.a692701d"
        imagePullPolicy: "IfNotPresent"
        command: ["bash"]
        args: ["-c", "echo /crash-dump/core-%e > /proc/sys/kernel/core_pattern; ulimit -c unlimited; GOTRACEBACK=crash telegraf --config /etc/telegraf/telegraf.conf --config-directory /etc/telegraf/telegraf.d/"]
        resources:
          requests:
            memory: 200Mi
            ephemeral-storage: 650Mi
          limits:
            memory: 200Mi
            ephemeral-storage: 650Mi
        env:
        - name: COLLECTION_INTERVAL
          value: 300s
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        volumeMounts:
        - mountPath: /etc/telegraf
          name: config
        - name: additional-configs
          mountPath: /etc/telegraf/telegraf.d
        - mountPath: /crash-dump
          name: crash-dump
      - name: confd
        image: "emccorp/confd-sidecar:3.7.0.0-1146.a692701d"
        imagePullPolicy: "IfNotPresent"
        command: [ "bash" ]
        args: [ "-c", "echo /crash-dump/core-%e > /proc/sys/kernel/core_pattern; ulimit -c unlimited; GOTRACEBACK=crash /confd -backend file -file /etc/telegraf-ext/influxdb-replicas/replicas.json -confdir /etc/confd_flex -interval 300"]
        volumeMounts:
        - mountPath: /etc/telegraf-ext/influxdb-replicas
          name: influxdb-replicas-config
        - mountPath: /etc/confd_flex/templates
          name: configs-template
        - mountPath: /etc/confd_flex/conf.d
          name: configs-confd-template
        - mountPath: /etc/telegraf
          name: config
        - mountPath: /crash-dump
          name: crash-dump
        env:
        - name: INFLUXDB_REPLICAS_PER_PARTITION
          value: "3"
        - name: RELEASE_NAME
          value: "objectscale-manager"
        - name: RELEASE_NAMESPACE
          value: "default"
        - name: SCHEME
          value: "http"
      
      volumes:
      - name: config
        emptyDir: {}
      - name: configs-template
        configMap:
          name: objectscale-manager-telegraf-config-template
      - name: configs-confd-template
        configMap:
          name: objectscale-manager-telegraf-confd-template
      - name: additional-configs
        configMap:
          name: telegraf-external-monitoring-endpoint
          optional: true
      - name: crash-dump
        emptyDir: {}
      - name: log
        emptyDir: {}
      - name: influxdb-replicas-config
        configMap:
          name: objectscale-manager-influxdb-replicas
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/throttler/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: objectscale-manager-throttler
  labels:
    app.kubernetes.io/name: objectscale-manager-throttler
    app.kubernetes.io/instance: objectscale-manager
    helm.sh/chart: throttler-0.54.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: objectscale-manager-throttler
      app.kubernetes.io/instance: objectscale-manager
  template:
    metadata:
      labels:
        app.kubernetes.io/name: objectscale-manager-throttler
        app.kubernetes.io/instance: objectscale-manager
        release: objectscale-manager
        
        objectscale.dellemc.com/logging-inject: "true"
        objectscale.dellemc.com/logging-release-name: "objectscale-manager"
        app.kubernetes.io/namespace: "default"
      annotations:
    spec:
      serviceAccountName: objectscale-manager-throttler
      containers:
      - name: throttler
        image: "emccorp/throttler:3.7.0.0-1146.a692701d"
        imagePullPolicy: "IfNotPresent"
        command: ["bash"]
        args: ["-c", "echo /crash-dump/core-%e > /proc/sys/kernel/core_pattern; ulimit -c unlimited; GOTRACEBACK=crash throttler --logger-config /etc/throttler/logger.json --port 8094"]
        resources:
          requests:
            memory: 200Mi
            ephemeral-storage: 650Mi
          limits:
            memory: 200Mi
            ephemeral-storage: 650Mi
        ports:
          - name: api
            containerPort: 8094
        env:
        - name: K8S_NAMESPACE
          value: "default"
        - name: THROTTLER_APP_NAME
          value: "objectscale-manager"
        volumeMounts:
        - mountPath: /etc/throttler/throttler.conf
          name: throttler-config
          subPath: throttler.conf
        - mountPath: /etc/cq_flex
          name: cq
        - mountPath: /etc/throttler/logger.json
          name: logger-config
          subPath: logger.json
        - mountPath: /etc/fluxd-alerter/
          name: fluxd-alerter
        - mountPath: /crash-dump
          name: crash-dump
        - name: log
          mountPath: /var/log
        livenessProbe:
          httpGet:
            path: /metrics
            port: api
            scheme: HTTP
          initialDelaySeconds: 30
          timeoutSeconds: 30
          periodSeconds: 60
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /metrics
            port: api
            scheme: HTTP
          initialDelaySeconds: 5
          timeoutSeconds: 30
          periodSeconds: 60
          failureThreshold: 3
      
      volumes:
      - name: throttler-config
        configMap:
          name: objectscale-manager-throttler-config
      - name: cq
        configMap:
          name: objectscale-manager-throttler-cq
      - name: logger-config
        configMap:
          name: objectscale-manager-throttler-logger-config
      - name: fluxd-alerter
        configMap:
          name: objectscale-manager-throttler-fluxd-alerter
      - name: crash-dump
        emptyDir: {}
      - name: log
        emptyDir: {}
---
# Source: objectscale-manager/charts/service-pod/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: objectscale-manager-service-pod
  namespace: default
  labels:
    release: objectscale-manager
    product: objectscale
    app: objectscale-manager-service-pod
spec:
  replicas: 1
  selector:
    matchLabels:
      app: objectscale-manager-service-pod
  template:
    metadata:
      labels:
        app: objectscale-manager-service-pod
        name: objectscale-manager-service-pod
        release: objectscale-manager
        remote_access: objectscale-service-pod
        product: objectscale
    spec:
      serviceAccountName: objectscale-manager-service-pod-sa
      containers:
      - name: service-pod
        image: emccorp/objectscale-service-tools:2.68.2
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 22
          name: ssh
          protocol: TCP
        resources:
          requests:
            memory: 2Gi
        env:
        - name: MY_POD_IP
          valueFrom:
              fieldRef:
                fieldPath: status.podIP
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: DELL_EMC_PRODUCT
          value: objectscale
        - name: RELEASE_NAME
          value: objectscale-manager
        resources:
          limits:
            ephemeral-storage: 20Gi
          requests:
            ephemeral-storage: 10Gi
            memory: 2Gi
        volumeMounts:
        - mountPath: /dev/shm
          name: dshm
        - mountPath: /tmp
          name: host-data
        - mountPath: /etc/svcpod/creds
          name: creds-secret-vol
      dnsPolicy: ClusterFirst
      volumes:
      - name: dshm
        emptyDir:
          medium: Memory
      - name: host-data
        emptyDir: {}
      - name: creds-secret-vol
        secret:
          secretName: objectscale-manager-service-pod-secrets
---
# Source: objectscale-manager/charts/zookeeper-operator/templates/operator.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zookeeper-operator
  namespace: default
  labels:
    app.kubernetes.io/name: zookeeper-operator
    helm.sh/chart: zookeeper-operator-0.2.9
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: objectscale-manager
    app.kubernetes.io/version: 0.2.9
    app.kubernetes.io/component: zookeeper-operator
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: zookeeper-operator
      app.kubernetes.io/component: zookeeper-operator
  template:
    metadata:
      labels:
        app.kubernetes.io/name: zookeeper-operator
        helm.sh/chart: zookeeper-operator-0.2.9
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/instance: objectscale-manager
        app.kubernetes.io/version: 0.2.9
        app.kubernetes.io/component: zookeeper-operator
    spec:
      containers:
        - name: zookeeper-operator
          image: emccorp/zookeeper-operator:0.2.9
          imagePullPolicy: IfNotPresent
          ports:
          - containerPort: 60000
            name: metrics
          command:
          - zookeeper-operator
          env:
            - name: WATCH_NAMESPACE
              value: ""
            - name: OPERATOR_NAME
              value: "zookeeper-operator"
---
# Source: objectscale-manager/templates/operator.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: objectscale-operator
  namespace: default
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/instance: objectscale-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.69.0
    app.kubernetes.io/component: objectscale-operator
    app.kubernetes.io/part-of: objectscale-manager
    helm.sh/chart: objectscale-manager-0.69.0
    operator: objectscale-operator
    product: objectscale
    release: objectscale-manager
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: objectscale-manager
      app.kubernetes.io/component: objectscale-operator
  template:
    metadata:
      labels:
        app.kubernetes.io/name: objectscale-manager
        app.kubernetes.io/instance: objectscale-manager
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: 0.69.0
        app.kubernetes.io/component: objectscale-operator
        app.kubernetes.io/part-of: objectscale-manager
        helm.sh/chart: objectscale-manager-0.69.0
        operator: objectscale-operator
        product: objectscale
        release: objectscale-manager
    spec:
      serviceAccountName: objectscale-operator
      tolerations:
      containers:
      - name: operator
        image: emccorp/objectscale-operator:0.69.0
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 60000
          name: metrics
        command: ["bash"]
        args: ["-c", "echo /crash-dump/core-%e > /proc/sys/kernel/core_pattern; ulimit -c unlimited; GOTRACEBACK=crash /usr/local/bin/objectscale-operator"]
        resources:
          limits:
            memory: 500Mi
            ephemeral-storage: 1256Mi
          requests:
            memory: 300Mi
            ephemeral-storage: 1256Mi
        volumeMounts:
        - name: logger-config
          mountPath: /etc/config
        - name: crash-dump
          mountPath: /crash-dump
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: OPERATOR_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: PLATFORM
          value: Default
        - name: LOG_DIRECTION
          value: stdout
        - name: WATCH_NAMESPACE
          value: ""
        - name: OPERATOR_NAME
          value: objectscale-operator
        - name: LOG_DIRECTION
          value: stdout

# Because volumes config was created if platform is not VMware and logReceiver is active it's needed to add this
# checking here to save previous logic
      volumes:
        - name: logger-config
          configMap:
            name: logger-config
        - name: crash-dump
          emptyDir: {}
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/fluxd/templates/deployment.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/grafana/templates/dashboards.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/grafana/templates/deployment.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/grafana/templates/nginx-config.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/influxdb-operator/templates/influxdb_editor_role.yaml
# permissions for end users to edit influxdbs.
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/influxdb-operator/templates/influxdb_viewer_role.yaml
# permissions for end users to view influxdbs.
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/influxdb-operator/templates/leader_election_role.yaml
# permissions to do leader election.
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/influxdb/templates/influxdb-lib.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/influxdb/templates/influxdb.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/influxdb/templates/nginx-config-context.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/influxdb/templates/nginx-config.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/prometheus-alerts/templates/nginx_config.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/statefuldaemonset-operator/templates/leader_election_role.yaml
# permissions to do leader election.
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/statefuldaemonset-operator/templates/statefuldaemonset_editor_role.yaml
# permissions for end users to edit statefuldaemonsets.
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/statefuldaemonset-operator/templates/statefuldaemonset_viewer_role.yaml
# permissions for end users to view statefuldaemonsets.
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/telegraf/templates/service.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/throttler/templates/alerter.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/throttler/templates/alerter_app_config.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/throttler/templates/application.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/throttler/templates/config_throttler.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/throttler/templates/cq.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/throttler/templates/deployment.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/throttler/templates/logger.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/throttler/templates/nginx-config.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
---
# Source: objectscale-manager/charts/objectscale-monitoring/templates/application.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
# Application is required by KAHM to match <APP_NAME>-app-config config map
# and events created by Alert Manager
apiVersion: app.k8s.io/v1beta1
kind: Application
metadata:
  name: objectscale-monitoring
  labels:
    app.kubernetes.io/name: objectscale-manager-objectscale-monitoring
  annotations:
    com.dellemc.kahm.subscribed: "true"
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: objectscale-manager-objectscale-monitoring
---
# Source: objectscale-manager/templates/objectscale-manager-app.yaml
apiVersion: app.k8s.io/v1beta1
kind: Application
metadata:
  name: objectscale-manager
  namespace: default
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/version: 0.69.0
    app.kubernetes.io/instance: objectscale-manager
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: objectscale-manager-0.69.0
    release: objectscale-manager
    product: objectscale
  annotations:
    com.dellemc.kahm.subscribed: "true"
    nautilus.dellemc.com/run-level: "10"
    nautilus.dellemc.com/chart-name: objectscale-manager
    nautilus.dellemc.com/chart-version: 0.69.0
    nautilus.dellemc.com/chart-values: "{\"affinity\":{},\"atlas\":{\"enabled\":true},\"atlas-operator\":{\"affinity\":{},\"global\":{\"enableHealthcheck\":false,\"labels\":{},\"monitoring\":{\"enabled\":true},\"platform\":\"Default\",\"product\":\"objectscale\",\"registry\":\"emccorp\",\"watchAllNamespaces\":true},\"image\":{\"pullPolicy\":\"IfNotPresent\",\"repository\":\"atlas-operator\"},\"nameOverride\":\"\",\"nodeSelector\":{},\"podSecurityContext\":{},\"resources\":{\"limits\":{\"cpu\":1,\"memory\":\"500Mi\"},\"requests\":{\"cpu\":\"250m\",\"memory\":\"300Mi\"}},\"securityContext\":{},\"tolerations\":[]},\"bookkeeper\":{\"enabled\":false},\"createApplicationResource\":true,\"dcm\":{\"atlas\":{\"affinity\":false,\"image\":{\"pullPolicy\":\"IfNotPresent\",\"repository\":\"atlas\",\"tag\":\"1.1.3\"},\"persistence\":{\"size\":\"1Gi\"}},\"enabled\":false,\"global\":{\"enableHealthcheck\":false,\"monitoring\":{\"enabled\":true},\"performanceProfile\":\"Small\",\"platform\":\"Default\",\"product\":\"objectscale\",\"registry\":\"emccorp\",\"watchAllNamespaces\":true},\"image\":{\"pullPolicy\":\"IfNotPresent\",\"repository\":\"dcm\"},\"livenessProbe\":{\"probePath\":\"/dcmhealthcheck\"},\"readinessProbe\":{\"probePath\":\"/dcmhealthcheck\"},\"replicaCount\":1,\"service\":{\"port\":9026,\"targetPort\":9026,\"type\":\"LoadBalancer\"},\"tag\":\"0.68.2\"},\"federation\":{\"enabled\":true,\"fedsvc\":{\"image\":{\"pullPolicy\":\"IfNotPresent\",\"repository\":\"fedsvc\"},\"livenessProbe\":{\"probePath\":\"/fedsvchealthcheck\"},\"readinessProbe\":{\"probePath\":\"/fedsvchealthcheck\"},\"replicaCount\":3,\"service\":{\"port\":9500,\"type\":\"LoadBalancer\"}},\"global\":{\"enableHealthcheck\":false,\"monitoring\":{\"enabled\":true},\"platform\":\"Default\",\"product\":\"objectscale\",\"registry\":\"emccorp\",\"watchAllNamespaces\":true},\"tag\":\"0.68.2\"},\"fluentbitAgent\":{\"image\":{\"repository\":\"fluent-bit\",\"tag\":\"0.28.0\"}},\"global\":{\"enableHealthcheck\":false,\"monitoring\":{\"enabled\":true},\"platform\":\"Default\",\"product\":\"objectscale\",\"registry\":\"emccorp\",\"watchAllNamespaces\":true},\"healthChecks\":{\"preUpdate\":{\"image\":{\"repository\":\"objectscale-manager-pre-update\"}}},\"hooks\":{\"registry\":\"lachlanevenson\",\"repository\":\"k8s-kubectl\",\"tag\":\"v1.13.4\"},\"iam\":{\"enabled\":true},\"image\":{\"repository\":\"objectscale-operator\"},\"installApplicationCRD\":true,\"installObjectStoreCRD\":true,\"logReceiver\":{\"image\":{\"repository\":\"rsyslog\"},\"persistence\":{\"accessMode\":\"ReadWriteOnce\",\"enabled\":true,\"size\":\"50Gi\"}},\"loggerConfig\":{\"development\":true,\"disableCaller\":false,\"disableStacktrace\":false,\"enabled\":true,\"encoderConfig\":{\"callerEncoder\":\"short\",\"callerKey\":\"C\",\"durationEncoder\":\"string\",\"levelEncoder\":\"capital\",\"levelKey\":\"L\",\"lineEnding\":\"\\n\",\"messageKey\":\"M\",\"nameKey\":\"N\",\"stacktraceKey\":\"S\",\"timeEncoder\":\"iso8601\",\"timeKey\":\"T\"},\"encoding\":\"console\",\"errorOutputPaths\":[\"stderr\"],\"level\":\"info\",\"outputPaths\":[\"stdout\"]},\"nodeSelector\":{},\"objectscale-iam\":{\"atlas\":{\"disableAntiAffinity\":false,\"image\":{\"pullPolicy\":\"IfNotPresent\",\"repository\":\"atlas\",\"tag\":\"1.1.3\"},\"persistence\":{\"size\":\"10Gi\"},\"replicaCount\":3},\"global\":{\"enableHealthcheck\":false,\"monitoring\":{\"enabled\":true},\"platform\":\"Default\",\"product\":\"objectscale\",\"registry\":\"emccorp\",\"watchAllNamespaces\":true},\"image\":{\"pullPolicy\":\"IfNotPresent\",\"repository\":\"iamsvc\"},\"livenessProbe\":{\"probePath\":\"/iamhealthcheck\"},\"readinessProbe\":{\"probePath\":\"/iamhealthcheck/atlas\"},\"replicaCount\":3,\"service\":{\"port\":9400,\"type\":\"LoadBalancer\"},\"tag\":\"0.68.2\"},\"objectscale-monitoring\":{\"application_enabled\":true,\"cert\":{\"enabled\":false,\"global\":{\"communication_scheme\":\"http\",\"enableHealthcheck\":false,\"fluent_bit_enabled\":false,\"graphql_plugin_enabled\":true,\"graphql_release_name\":\"objectscale-graphql\",\"internal_dns\":\"kube-dns.kube-system.svc.cluster.local\",\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"monitoring_alert_app\":\"objectscale-monitoring\",\"monitoring_tag\":\"3.7.0.0-1146.a692701d\",\"performanceProfile\":\"Small\",\"platform\":\"Default\",\"platform_monitoring_disabled\":true,\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"rsyslog_uds_dir\":\"/var/run/rsyslog\",\"rsyslog_uds_filename\":\"rsyslog.socket\",\"started\":true,\"telegraf_tls_enabled\":false,\"tls_enabled\":false,\"use_vault_for_ssl\":false,\"watchAllNamespaces\":true}},\"fluent-bit\":{\"common-monitoring-lib\":{\"exports\":{\"default\":{\"rsyslog_client_image_pull_policy\":\"IfNotPresent\"}},\"global\":{\"communication_scheme\":\"http\",\"enableHealthcheck\":false,\"fluent_bit_enabled\":false,\"graphql_plugin_enabled\":true,\"graphql_release_name\":\"objectscale-graphql\",\"internal_dns\":\"kube-dns.kube-system.svc.cluster.local\",\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"monitoring_alert_app\":\"objectscale-monitoring\",\"monitoring_tag\":\"3.7.0.0-1146.a692701d\",\"performanceProfile\":\"Small\",\"platform\":\"Default\",\"platform_monitoring_disabled\":true,\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"rsyslog_uds_dir\":\"/var/run/rsyslog\",\"rsyslog_uds_filename\":\"rsyslog.socket\",\"started\":true,\"telegraf_tls_enabled\":false,\"tls_enabled\":false,\"use_vault_for_ssl\":false,\"watchAllNamespaces\":true}},\"config\":{\"criParser\":true,\"syslogPort\":10514},\"global\":{\"communication_scheme\":\"http\",\"enableHealthcheck\":false,\"fluent_bit_enabled\":false,\"graphql_plugin_enabled\":true,\"graphql_release_name\":\"objectscale-graphql\",\"internal_dns\":\"kube-dns.kube-system.svc.cluster.local\",\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"monitoring_alert_app\":\"objectscale-monitoring\",\"monitoring_tag\":\"3.7.0.0-1146.a692701d\",\"performanceProfile\":\"Small\",\"platform\":\"Default\",\"platform_monitoring_disabled\":true,\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"rsyslog_uds_dir\":\"/var/run/rsyslog\",\"rsyslog_uds_filename\":\"rsyslog.socket\",\"started\":true,\"telegraf_tls_enabled\":false,\"tls_enabled\":false,\"use_vault_for_ssl\":false,\"watchAllNamespaces\":true},\"image\":{\"pullPolicy\":\"IfNotPresent\",\"repository\":\"fluent-bit\"},\"resources\":{\"limits\":{\"memory\":\"1024Mi\"},\"requests\":{\"memory\":\"1024Mi\"}},\"tolerations\":[]},\"fluxd\":{\"common-monitoring-lib\":{\"exports\":{\"default\":{\"rsyslog_client_image_pull_policy\":\"IfNotPresent\"}},\"global\":{\"communication_scheme\":\"http\",\"enableHealthcheck\":false,\"fluent_bit_enabled\":false,\"graphql_plugin_enabled\":true,\"graphql_release_name\":\"objectscale-graphql\",\"internal_dns\":\"kube-dns.kube-system.svc.cluster.local\",\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"monitoring_alert_app\":\"objectscale-monitoring\",\"monitoring_tag\":\"3.7.0.0-1146.a692701d\",\"performanceProfile\":\"Small\",\"platform\":\"Default\",\"platform_monitoring_disabled\":true,\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"rsyslog_uds_dir\":\"/var/run/rsyslog\",\"rsyslog_uds_filename\":\"rsyslog.socket\",\"started\":true,\"telegraf_tls_enabled\":false,\"tls_enabled\":false,\"use_vault_for_ssl\":false,\"watchAllNamespaces\":true}},\"config\":{\"http\":{\"bind_address\":8093}},\"global\":{\"communication_scheme\":\"http\",\"enableHealthcheck\":false,\"fluent_bit_enabled\":false,\"graphql_plugin_enabled\":true,\"graphql_release_name\":\"objectscale-graphql\",\"internal_dns\":\"kube-dns.kube-system.svc.cluster.local\",\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"monitoring_alert_app\":\"objectscale-monitoring\",\"monitoring_tag\":\"3.7.0.0-1146.a692701d\",\"performanceProfile\":\"Small\",\"platform\":\"Default\",\"platform_monitoring_disabled\":true,\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"rsyslog_uds_dir\":\"/var/run/rsyslog\",\"rsyslog_uds_filename\":\"rsyslog.socket\",\"started\":true,\"telegraf_tls_enabled\":false,\"tls_enabled\":false,\"use_vault_for_ssl\":false,\"watchAllNamespaces\":true},\"image\":{\"pullPolicy\":\"IfNotPresent\",\"repository\":\"fluxd\"},\"livenessProbe\":{\"probePath\":\"/metrics\"},\"rbac\":{\"create\":true},\"readinessProbe\":{\"probePath\":\"/metrics\"},\"resources\":{\"limits\":{},\"requests\":{}},\"service\":{\"bind_address\":8093},\"serviceAccount\":{\"create\":true},\"startupProbe\":{\"enabled\":false,\"probePath\":\"/ping\"},\"tolerations\":[]},\"global\":{\"communication_scheme\":\"http\",\"enableHealthcheck\":false,\"fluent_bit_enabled\":false,\"graphql_plugin_enabled\":true,\"graphql_release_name\":\"objectscale-graphql\",\"internal_dns\":\"kube-dns.kube-system.svc.cluster.local\",\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"monitoring_alert_app\":\"objectscale-monitoring\",\"monitoring_tag\":\"3.7.0.0-1146.a692701d\",\"performanceProfile\":\"Small\",\"platform\":\"Default\",\"platform_monitoring_disabled\":true,\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"rsyslog_uds_dir\":\"/var/run/rsyslog\",\"rsyslog_uds_filename\":\"rsyslog.socket\",\"started\":true,\"telegraf_tls_enabled\":false,\"tls_enabled\":false,\"use_vault_for_ssl\":false,\"watchAllNamespaces\":true},\"grafana\":{\"common-monitoring-lib\":{\"exports\":{\"default\":{\"rsyslog_client_image_pull_policy\":\"IfNotPresent\"}},\"global\":{\"communication_scheme\":\"http\",\"enableHealthcheck\":false,\"fluent_bit_enabled\":false,\"graphql_plugin_enabled\":true,\"graphql_release_name\":\"objectscale-graphql\",\"internal_dns\":\"kube-dns.kube-system.svc.cluster.local\",\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"monitoring_alert_app\":\"objectscale-monitoring\",\"monitoring_tag\":\"3.7.0.0-1146.a692701d\",\"performanceProfile\":\"Small\",\"platform\":\"Default\",\"platform_monitoring_disabled\":true,\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"rsyslog_uds_dir\":\"/var/run/rsyslog\",\"rsyslog_uds_filename\":\"rsyslog.socket\",\"started\":true,\"telegraf_tls_enabled\":false,\"tls_enabled\":false,\"use_vault_for_ssl\":false,\"watchAllNamespaces\":true}},\"config\":{\"dashboards_dir\":\"dashboards/objectscale\",\"home_dashboard\":\"Data Access Performance - Overview\",\"http\":{\"bind_address\":3000},\"limitedUsers\":[],\"oauth\":{\"api_url\":\"\",\"auth_url\":\"\",\"auto_login\":true,\"client_id\":\"\",\"client_secret\":\"\",\"enabled\":false,\"signout_url\":\"\",\"token_url\":\"\"},\"reverse_proxy\":{\"domain\":\"\",\"enabled\":false,\"protocol\":\"https\",\"subpath\":\"grafana\"},\"users\":[]},\"global\":{\"communication_scheme\":\"http\",\"enableHealthcheck\":false,\"fluent_bit_enabled\":false,\"graphql_plugin_enabled\":true,\"graphql_release_name\":\"objectscale-graphql\",\"internal_dns\":\"kube-dns.kube-system.svc.cluster.local\",\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"monitoring_alert_app\":\"objectscale-monitoring\",\"monitoring_tag\":\"3.7.0.0-1146.a692701d\",\"performanceProfile\":\"Small\",\"platform\":\"Default\",\"platform_monitoring_disabled\":true,\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"rsyslog_uds_dir\":\"/var/run/rsyslog\",\"rsyslog_uds_filename\":\"rsyslog.socket\",\"started\":true,\"telegraf_tls_enabled\":false,\"tls_enabled\":false,\"use_vault_for_ssl\":false,\"watchAllNamespaces\":true},\"image\":{\"pullPolicy\":\"IfNotPresent\",\"repository\":\"grafana\"},\"livenessProbe\":{\"probePath\":\"/api/health\"},\"platform_monitoring\":{\"connected\":true,\"namespace\":\"default\",\"release_name\":\"monitoring\"},\"readinessProbe\":{\"probePath\":\"/api/health\"},\"replicas\":1,\"resources\":{\"limits\":{\"memory\":\"300Mi\"},\"requests\":{\"memory\":\"300Mi\"}},\"service\":{\"bind_address\":3000,\"type\":\"ClusterIP\"},\"tolerations\":[]},\"influxdb\":{\"common-monitoring-lib\":{\"exports\":{\"default\":{\"rsyslog_client_image_pull_policy\":\"IfNotPresent\"}},\"global\":{\"communication_scheme\":\"http\",\"enableHealthcheck\":false,\"fluent_bit_enabled\":false,\"graphql_plugin_enabled\":true,\"graphql_release_name\":\"objectscale-graphql\",\"internal_dns\":\"kube-dns.kube-system.svc.cluster.local\",\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"monitoring_alert_app\":\"objectscale-monitoring\",\"monitoring_tag\":\"3.7.0.0-1146.a692701d\",\"performanceProfile\":\"Small\",\"platform\":\"Default\",\"platform_monitoring_disabled\":true,\"product\":\"objectscale\",\"registry\":\"emccorp\",\"registrySecret\":\"dockerhub-registry-secret\",\"rsyslog_enabled\":true,\"rsyslog_uds_dir\":\"/var/run/rsyslog\",\"rsyslog_uds_filename\":\"rsyslog.socket\",\"started\":true,\"telegraf_tls_enabled\":false,\"tls_enabled\":false,\"use_vault_for_ssl\":false,\"watchAllNamespaces\":true,\"watchNamespace\":\"\"}},\"config\":{\"admin\":{\"bind_address\":8083,\"enabled\":false,\"https_certificate\":\"/etc/ssl/influxdb.pem\",\"https_enabled\":false},\"coordinator\":{\"log_queries_after\":\"0s\",\"max_concurrent_queries\":0,\"max_select_buckets\":0,\"max_select_point\":0,\"max_select_series\":0,\"query_timeout\":\"0s\",\"write_timeout\":\"10s\"},\"data\":{\"cache_max_memory_size\":1073741824,\"cache_snapshot_memory_size\":26214400,\"cache_snapshot_write_cold_duration\":\"10m0s\",\"compact_full_write_cold_duration\":\"4h0m0s\",\"index_version\":\"tsi1\",\"max_series_per_database\":1000000,\"max_values_per_tag\":100000,\"query_log_enabled\":true,\"trace_logging_enabled\":false},\"http\":{\"auth_enabled\":false,\"bind_address\":8086,\"bind_socket\":\"/var/run/influxdb.sock\",\"enabled\":true,\"flux_enabled\":true,\"https_certificate\":\"/etc/ssl/influxdb.pem\",\"https_enabled\":false,\"https_private_key\":\"\",\"log_enabled\":true,\"max_connection_limit\":0,\"max_row_limit\":10000,\"pprof_enabled\":true,\"realm\":\"InfluxDB\",\"shared_secret\":\"beetlejuicebeetlejuicebeetlejuice\",\"unix_socket_enabled\":false,\"write_tracing\":false},\"logging\":{\"format\":\"auto\",\"level\":\"info\",\"supress_logo\":false},\"meta\":{\"logging_enabled\":true,\"retention_autocreate\":true},\"monitor\":{\"store_database\":\"_internal\",\"store_enabled\":false,\"store_interval\":\"10s\"},\"reporting_disabled\":true,\"retention\":{\"check_interval\":\"30m0s\",\"enabled\":true},\"rpc\":{\"bind_address\":8088,\"enabled\":true},\"shard_precreation\":{\"advance_period\":\"30m0s\",\"check_interval\":\"10m0s\",\"enabled\":true},\"storage_directory\":\"/data/influxdb\",\"subscriber\":{\"ca_certs\":\"\",\"enabled\":true,\"http_timeout\":\"30s\",\"insecure_skip_verify\":false,\"write_buffer_size\":1000,\"write_concurrency\":40}},\"disable_recovery\":false,\"global\":{\"communication_scheme\":\"http\",\"enableHealthcheck\":false,\"fluent_bit_enabled\":false,\"graphql_plugin_enabled\":true,\"graphql_release_name\":\"objectscale-graphql\",\"internal_dns\":\"kube-dns.kube-system.svc.cluster.local\",\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"monitoring_alert_app\":\"objectscale-monitoring\",\"monitoring_tag\":\"3.7.0.0-1146.a692701d\",\"performanceProfile\":\"Small\",\"platform\":\"Default\",\"platform_monitoring_disabled\":true,\"product\":\"objectscale\",\"registry\":\"emccorp\",\"registrySecret\":\"dockerhub-registry-secret\",\"rsyslog_enabled\":true,\"rsyslog_uds_dir\":\"/var/run/rsyslog\",\"rsyslog_uds_filename\":\"rsyslog.socket\",\"started\":true,\"telegraf_tls_enabled\":false,\"tls_enabled\":false,\"use_vault_for_ssl\":false,\"watchAllNamespaces\":true,\"watchNamespace\":\"\"},\"image\":{\"pullPolicy\":\"IfNotPresent\",\"repository\":\"influxdb\"},\"initScripts\":{\"enabled\":true,\"scripts\":{\"init.iql\":\"CREATE DATABASE \\\"monitoring_main\\\" WITH DURATION 60d SHARD DURATION 10d NAME \\\"default\\\"\\nCREATE DATABASE \\\"monitoring_op\\\" WITH DURATION 5d SHARD DURATION 5d NAME \\\"default\\\"\\nCREATE DATABASE \\\"monitoring_last\\\" WITH DURATION 1d SHARD DURATION 1d NAME \\\"default\\\"\\nCREATE DATABASE \\\"monitoring_vdc\\\" WITH DURATION 60d SHARD DURATION 10d NAME \\\"default\\\"\\nCREATE DATABASE \\\"monitoring_meta\\\" WITH DURATION 60d SHARD DURATION 10d NAME \\\"default\\\"\\nCREATE DATABASE \\\"monitoring_rt\\\" WITH DURATION 1h SHARD DURATION 1h NAME \\\"default\\\"\\n\"}},\"livenessProbe\":{\"probePath\":\"/ping\"},\"persistence\":{\"accessMode\":\"ReadWriteOnce\",\"enabled\":true,\"size\":\"20Gi\"},\"readinessProbe\":{\"probePath\":\"/ping\"},\"resources\":{\"limits\":{},\"requests\":{}},\"service\":{\"bind_address\":8086,\"clusterIP\":\"None\",\"rpc\":{\"bind_address\":8088},\"type\":\"ClusterIP\"},\"startupProbe\":{\"enabled\":false,\"probePath\":\"/ping\"}},\"influxdb-operator\":{\"affinity\":{},\"common-monitoring-lib\":{\"exports\":{\"default\":{\"rsyslog_client_image_pull_policy\":\"IfNotPresent\",\"rsyslog_client_tag\":\"3.7.0.0-1145.04c5f7c4\"}},\"global\":{\"communication_scheme\":\"http\",\"enableHealthcheck\":false,\"fluent_bit_enabled\":false,\"graphql_plugin_enabled\":true,\"graphql_release_name\":\"objectscale-graphql\",\"internal_dns\":\"kube-dns.kube-system.svc.cluster.local\",\"labels\":{},\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"monitoring_alert_app\":\"objectscale-monitoring\",\"monitoring_tag\":\"3.7.0.0-1146.a692701d\",\"performanceProfile\":\"Small\",\"platform\":\"Default\",\"platform_monitoring_disabled\":true,\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"rsyslog_uds_dir\":\"/var/run/rsyslog\",\"rsyslog_uds_filename\":\"rsyslog.socket\",\"started\":true,\"telegraf_tls_enabled\":false,\"tls_enabled\":false,\"use_vault_for_ssl\":false,\"watchAllNamespaces\":true}},\"global\":{\"communication_scheme\":\"http\",\"enableHealthcheck\":false,\"fluent_bit_enabled\":false,\"graphql_plugin_enabled\":true,\"graphql_release_name\":\"objectscale-graphql\",\"internal_dns\":\"kube-dns.kube-system.svc.cluster.local\",\"labels\":{},\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"monitoring_alert_app\":\"objectscale-monitoring\",\"monitoring_tag\":\"3.7.0.0-1146.a692701d\",\"performanceProfile\":\"Small\",\"platform\":\"Default\",\"platform_monitoring_disabled\":true,\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"rsyslog_uds_dir\":\"/var/run/rsyslog\",\"rsyslog_uds_filename\":\"rsyslog.socket\",\"started\":true,\"telegraf_tls_enabled\":false,\"tls_enabled\":false,\"use_vault_for_ssl\":false,\"watchAllNamespaces\":true},\"image\":{\"pullPolicy\":\"IfNotPresent\",\"repository\":\"influxdb-operator\"},\"nameOverride\":\"\",\"nodeSelector\":{},\"podSecurityContext\":{},\"resources\":{\"limits\":{},\"requests\":{}},\"securityContext\":{},\"serviceAccount\":{\"create\":true},\"tolerations\":[]},\"prometheus-alerts\":{\"alertmanager\":{\"image\":{\"pullPolicy\":\"IfNotPresent\",\"repository\":\"alertmanager\"},\"readinessProbeInitialDelay\":30,\"readinessProbeTimeout\":30},\"application_enabled\":true,\"common-monitoring-lib\":{\"exports\":{\"default\":{\"rsyslog_client_image_pull_policy\":\"IfNotPresent\"}},\"global\":{\"communication_scheme\":\"http\",\"enableHealthcheck\":false,\"fluent_bit_enabled\":false,\"graphql_plugin_enabled\":true,\"graphql_release_name\":\"objectscale-graphql\",\"internal_dns\":\"kube-dns.kube-system.svc.cluster.local\",\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"monitoring_alert_app\":\"objectscale-monitoring\",\"monitoring_tag\":\"3.7.0.0-1146.a692701d\",\"performanceProfile\":\"Small\",\"platform\":\"Default\",\"platform_monitoring_disabled\":true,\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"rsyslog_uds_dir\":\"/var/run/rsyslog\",\"rsyslog_uds_filename\":\"rsyslog.socket\",\"started\":true,\"telegraf_tls_enabled\":false,\"tls_enabled\":false,\"use_vault_for_ssl\":false,\"watchAllNamespaces\":true}},\"config\":{\"alertmanager_repeat_interval\":\"2h\",\"alertmanager_retention\":\"120h\",\"alerts\":[{\"enabled\":true,\"id\":\"CAP_1111\",\"message\":\"Objectscale capacity usage is {{ $value }}%, crosses threshold value {{ $labels.threshold }}%\",\"range\":\"30m\",\"reason\":\"High usage objectscale space\",\"symptoms\":[{\"id\":\"OBJSC-MON-1111\",\"types\":[\"Warning\"]},{\"id\":\"OBJSC-MON-1112\",\"types\":[\"Error\"]},{\"id\":\"OBJSC-MON-1113\",\"types\":[\"Critical\"]}]},{\"enabled\":true,\"id\":\"MH_4019\",\"message\":\"No data has been pushed to the objectscale monitoring framework for the last 30 minutes\",\"range\":\"30m\",\"reason\":\"No data has been pushed to the objectscale monitoring framework for the last 30 minutes\",\"symptoms\":[{\"id\":\"OBJSC-MON-4019\",\"types\":[\"Critical\"]}]},{\"enabled\":true,\"id\":\"OBJSC_MON_4021\",\"message\":\"{{ $labels._message }}\",\"range\":\"35m\",\"reason\":\"{{ $labels._reason }}\",\"symptoms\":[{\"id\":\"OBJSC-MON-4021\",\"types\":[\"Critical\"]}]},{\"enabled\":true,\"id\":\"OBJSC_MON_4022\",\"message\":\"{{ $labels._message }}\",\"range\":\"35m\",\"reason\":\"{{ $labels._reason }}\",\"symptoms\":[{\"id\":\"OBJSC-MON-4022\",\"types\":[\"Critical\"]}]},{\"enabled\":true,\"id\":\"OBJSC_MON_4023\",\"message\":\"InfluxDB PVC usage is {{ $value }}%, crosses threshold value {{ $labels.threshold }}%\",\"range\":\"30m\",\"reason\":\"Low free space of InfluxDB PVC\",\"symptoms\":[{\"id\":\"OBJSC-MON-4023\",\"types\":[\"Warning\"]},{\"id\":\"OBJSC-MON-4024\",\"types\":[\"Error\"]},{\"id\":\"OBJSC-MON-4025\",\"types\":[\"Critical\"]}]},{\"enabled\":true,\"id\":\"OBJSC_MON_4026\",\"message\":\"Rsyslog PVC usage is {{ $value }}%, crosses threshold value {{ $labels.threshold }}%\",\"range\":\"30m\",\"reason\":\"Low free space of Rsyslog PVC\",\"symptoms\":[{\"id\":\"OBJSC-MON-4026\",\"types\":[\"Warning\"]},{\"id\":\"OBJSC-MON-4027\",\"types\":[\"Error\"]},{\"id\":\"OBJSC-MON-4028\",\"types\":[\"Critical\"]}]}],\"component\":\"objectscale-monitoring\",\"dir\":\"alerts/objectscale\",\"interval\":\"5m\",\"tsdb_retention\":\"6h\"},\"global\":{\"communication_scheme\":\"http\",\"enableHealthcheck\":false,\"fluent_bit_enabled\":false,\"graphql_plugin_enabled\":true,\"graphql_release_name\":\"objectscale-graphql\",\"internal_dns\":\"kube-dns.kube-system.svc.cluster.local\",\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"monitoring_alert_app\":\"objectscale-monitoring\",\"monitoring_tag\":\"3.7.0.0-1146.a692701d\",\"performanceProfile\":\"Small\",\"platform\":\"Default\",\"platform_monitoring_disabled\":true,\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"rsyslog_uds_dir\":\"/var/run/rsyslog\",\"rsyslog_uds_filename\":\"rsyslog.socket\",\"started\":true,\"telegraf_tls_enabled\":false,\"tls_enabled\":false,\"use_vault_for_ssl\":false,\"watchAllNamespaces\":true},\"prometheus\":{\"image\":{\"pullPolicy\":\"IfNotPresent\",\"repository\":\"prometheus\"},\"livenessProbeFailureThreshold\":3,\"livenessProbeInitialDelay\":30,\"livenessProbeSuccessThreshold\":1,\"livenessProbeTimeout\":30,\"readinessProbeFailureThreshold\":3,\"readinessProbeInitialDelay\":30,\"readinessProbeSuccessThreshold\":1,\"readinessProbeTimeout\":30,\"resources\":{\"limits\":{\"memory\":\"182Mi\"},\"requests\":{\"memory\":\"182Mi\"}}},\"rbac\":{\"clusterWide\":false,\"create\":true},\"replicas\":1,\"serviceAccount\":{\"create\":true},\"tolerations\":[]},\"rsyslog\":{\"common-monitoring-lib\":{\"exports\":{\"default\":{\"rsyslog_client_image_pull_policy\":\"IfNotPresent\"}},\"global\":{\"cluster_name\":\"unknown\",\"communication_scheme\":\"http\",\"enableHealthcheck\":false,\"fluent_bit_enabled\":false,\"graphql_plugin_enabled\":true,\"graphql_release_name\":\"objectscale-graphql\",\"internal_dns\":\"kube-dns.kube-system.svc.cluster.local\",\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"monitoring_alert_app\":\"objectscale-monitoring\",\"monitoring_tag\":\"3.7.0.0-1146.a692701d\",\"performanceProfile\":\"Small\",\"platform\":\"Default\",\"platform_monitoring_disabled\":true,\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"rsyslog_uds_dir\":\"/var/run/rsyslog\",\"rsyslog_uds_filename\":\"rsyslog.socket\",\"started\":true,\"telegraf_tls_enabled\":false,\"tls_enabled\":false,\"use_vault_for_ssl\":false,\"watchAllNamespaces\":true}},\"config\":{\"logs_size_high_watermark\":\"_199680000\",\"logs_size_low_watermark\":\"_189440000\",\"storage_directory\":\"/var/log\"},\"global\":{\"cluster_name\":\"unknown\",\"communication_scheme\":\"http\",\"enableHealthcheck\":false,\"fluent_bit_enabled\":false,\"graphql_plugin_enabled\":true,\"graphql_release_name\":\"objectscale-graphql\",\"internal_dns\":\"kube-dns.kube-system.svc.cluster.local\",\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"monitoring_alert_app\":\"objectscale-monitoring\",\"monitoring_tag\":\"3.7.0.0-1146.a692701d\",\"performanceProfile\":\"Small\",\"platform\":\"Default\",\"platform_monitoring_disabled\":true,\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"rsyslog_uds_dir\":\"/var/run/rsyslog\",\"rsyslog_uds_filename\":\"rsyslog.socket\",\"started\":true,\"telegraf_tls_enabled\":false,\"tls_enabled\":false,\"use_vault_for_ssl\":false,\"watchAllNamespaces\":true},\"image\":{\"pullPolicy\":\"IfNotPresent\",\"repository\":\"rsyslog\"},\"logReceiver\":{\"enable\":false,\"host\":\"my-logstash-server\",\"port\":9600,\"type\":\"Logstash\"},\"persistence\":{\"accessMode\":\"ReadWriteOnce\",\"enabled\":true,\"size\":\"200Gi\"},\"replicas\":1,\"resources\":{\"limits\":{\"memory\":\"1024Mi\"},\"requests\":{\"memory\":\"1024Mi\"}},\"service\":{\"bind_address\":10514},\"tolerations\":[]},\"rsyslog-client\":{\"common-monitoring-lib\":{\"exports\":{\"default\":{\"rsyslog_client_image_pull_policy\":\"IfNotPresent\"}},\"global\":{\"communication_scheme\":\"http\",\"enableHealthcheck\":false,\"fluent_bit_enabled\":false,\"graphql_plugin_enabled\":true,\"graphql_release_name\":\"objectscale-graphql\",\"internal_dns\":\"kube-dns.kube-system.svc.cluster.local\",\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"monitoring_alert_app\":\"objectscale-monitoring\",\"monitoring_tag\":\"3.7.0.0-1146.a692701d\",\"performanceProfile\":\"Small\",\"platform\":\"Default\",\"platform_monitoring_disabled\":true,\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"rsyslog_uds_dir\":\"/var/run/rsyslog\",\"rsyslog_uds_filename\":\"rsyslog.socket\",\"started\":true,\"telegraf_tls_enabled\":false,\"tls_enabled\":false,\"use_vault_for_ssl\":false,\"watchAllNamespaces\":true}},\"config\":{\"logs_size_high_watermark\":\"_204800\",\"logs_size_low_watermark\":\"_153600\",\"maxage\":30,\"output\":{\"port\":10514,\"queue\":{\"size\":10000,\"type\":\"linkedList\"},\"resumeRetryCount\":100}},\"createLogrotateConfigs\":true,\"createRBAC\":true,\"global\":{\"communication_scheme\":\"http\",\"enableHealthcheck\":false,\"fluent_bit_enabled\":false,\"graphql_plugin_enabled\":true,\"graphql_release_name\":\"objectscale-graphql\",\"internal_dns\":\"kube-dns.kube-system.svc.cluster.local\",\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"monitoring_alert_app\":\"objectscale-monitoring\",\"monitoring_tag\":\"3.7.0.0-1146.a692701d\",\"performanceProfile\":\"Small\",\"platform\":\"Default\",\"platform_monitoring_disabled\":true,\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"rsyslog_uds_dir\":\"/var/run/rsyslog\",\"rsyslog_uds_filename\":\"rsyslog.socket\",\"started\":true,\"telegraf_tls_enabled\":false,\"tls_enabled\":false,\"use_vault_for_ssl\":false,\"watchAllNamespaces\":true}},\"statefuldaemonset-operator\":{\"affinity\":{},\"common-monitoring-lib\":{\"exports\":{\"default\":{\"rsyslog_client_image_pull_policy\":\"IfNotPresent\",\"rsyslog_client_tag\":\"3.7.0.0-1145.04c5f7c4\"}},\"global\":{\"communication_scheme\":\"http\",\"enableHealthcheck\":false,\"fluent_bit_enabled\":false,\"graphql_plugin_enabled\":true,\"graphql_release_name\":\"objectscale-graphql\",\"internal_dns\":\"kube-dns.kube-system.svc.cluster.local\",\"labels\":{},\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"monitoring_alert_app\":\"objectscale-monitoring\",\"monitoring_tag\":\"3.7.0.0-1146.a692701d\",\"performanceProfile\":\"Small\",\"platform\":\"Default\",\"platform_monitoring_disabled\":true,\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"rsyslog_uds_dir\":\"/var/run/rsyslog\",\"rsyslog_uds_filename\":\"rsyslog.socket\",\"started\":true,\"telegraf_tls_enabled\":false,\"tls_enabled\":false,\"use_vault_for_ssl\":false,\"watchAllNamespaces\":true}},\"global\":{\"communication_scheme\":\"http\",\"enableHealthcheck\":false,\"fluent_bit_enabled\":false,\"graphql_plugin_enabled\":true,\"graphql_release_name\":\"objectscale-graphql\",\"internal_dns\":\"kube-dns.kube-system.svc.cluster.local\",\"labels\":{},\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"monitoring_alert_app\":\"objectscale-monitoring\",\"monitoring_tag\":\"3.7.0.0-1146.a692701d\",\"performanceProfile\":\"Small\",\"platform\":\"Default\",\"platform_monitoring_disabled\":true,\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"rsyslog_uds_dir\":\"/var/run/rsyslog\",\"rsyslog_uds_filename\":\"rsyslog.socket\",\"started\":true,\"telegraf_tls_enabled\":false,\"tls_enabled\":false,\"use_vault_for_ssl\":false,\"watchAllNamespaces\":true},\"image\":{\"pullPolicy\":\"IfNotPresent\",\"repository\":\"statefuldaemonset-operator\"},\"nameOverride\":\"\",\"nodeSelector\":{},\"podSecurityContext\":{},\"resources\":{\"limits\":{},\"requests\":{}},\"securityContext\":{},\"serviceAccount\":{\"create\":true},\"tolerations\":[]},\"telegraf\":{\"common-monitoring-lib\":{\"exports\":{\"default\":{\"rsyslog_client_image_pull_policy\":\"IfNotPresent\"}},\"global\":{\"communication_scheme\":\"http\",\"enableHealthcheck\":false,\"fluent_bit_enabled\":false,\"graphql_plugin_enabled\":true,\"graphql_release_name\":\"objectscale-graphql\",\"internal_dns\":\"kube-dns.kube-system.svc.cluster.local\",\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"monitoring_alert_app\":\"objectscale-monitoring\",\"monitoring_tag\":\"3.7.0.0-1146.a692701d\",\"performanceProfile\":\"Small\",\"platform\":\"Default\",\"platform_monitoring_disabled\":true,\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"rsyslog_uds_dir\":\"/var/run/rsyslog\",\"rsyslog_uds_filename\":\"rsyslog.socket\",\"started\":true,\"telegraf_tls_enabled\":false,\"tls_enabled\":false,\"use_vault_for_ssl\":false,\"watchAllNamespaces\":true}},\"config\":{\"agent\":{\"collection_jitter\":\"0s\",\"debug\":false,\"flush_interval\":\"10s\",\"flush_jitter\":\"0s\",\"interval\":\"10s\",\"logfile\":\"\",\"metric_batch_size\":1000,\"metric_buffer_limit\":10000,\"omit_hostname\":true,\"precision\":\"\",\"quiet\":false,\"round_interval\":true},\"collection_interval\":\"300s\",\"global_tags\":{\"release_name\":\"{{ .Release.Name }}\"},\"http\":{\"bind_address\":11002},\"influxdb_inputs_enabled\":false,\"inputs\":[{\"influxdb_listener\":{\"read_timeout\":\"30s\",\"service_address\":\":11002\",\"write_timeout\":\"30s\"}},{\"internal\":{\"collect_memstats\":true,\"interval\":\"300s\",\"name_prefix\":\"tsdb_telegraf_\",\"tags\":{\"host\":\"$HOSTNAME\",\"tag\":\"system\"}}},{\"prometheus\":{\"bearer_token\":\"/var/run/secrets/kubernetes.io/serviceaccount/token\",\"insecure_skip_verify\":true,\"interval\":\"$COLLECTION_INTERVAL\",\"kubernetes_label_selector\":\"app.kubernetes.io/name={{ .Release.Name }}-fluxd\",\"monitor_kubernetes_pods\":true,\"monitor_kubernetes_pods_namespace\":\"{{ .Release.Namespace }}\",\"name_prefix\":\"tsdb_fluxd_\",\"tags\":{\"tag\":\"system\"}}},{\"prometheus\":{\"bearer_token\":\"/var/run/secrets/kubernetes.io/serviceaccount/token\",\"insecure_skip_verify\":true,\"interval\":\"$COLLECTION_INTERVAL\",\"kubernetes_label_selector\":\"app.kubernetes.io/name=csi-baremetal\",\"monitor_kubernetes_pods\":true,\"monitor_kubernetes_pods_namespace\":\"{{ .Release.Namespace }}\",\"name_prefix\":\"csi_\",\"tagexclude\":[\"cni.projectcalico.org/podIP\",\"cni.projectcalico.org/podIPs\",\"controller-revision-hash\",\"pod-template-generation\",\"pod-template-hash\",\"prometheus.io/path\",\"prometheus.io/port\",\"prometheus.io/scrape\",\"app.kubernetes.io/name\",\"role\"],\"tags\":{\"host\":\"$HOSTNAME\"}}},{\"prometheus\":{\"insecure_skip_verify\":true,\"interval\":\"$COLLECTION_INTERVAL\",\"kubernetes_services\":[\"{{ .Values.global.communication_scheme }}://{{ .Release.Name }}-throttler.{{ .Release.Namespace }}.svc.cluster.local:8094/metrics\"],\"monitor_kubernetes_pods\":false,\"tags\":{\"host\":\"throttler\",\"tag\":\"system\"}}},{\"kube_inventory\":{\"bearer_token\":\"/var/run/secrets/kubernetes.io/serviceaccount/token\",\"insecure_skip_verify\":true,\"interval\":\"$COLLECTION_INTERVAL\",\"namespace\":\"{{ if eq .Values.global.watchAllNamespaces false }}{{ .Release.Namespace }}{{ end }}\",\"resource_include\":[\"persistentvolumeclaims\"],\"tagexclude\":[\"phase\"],\"url\":\"https://kubernetes.default.svc\"}}],\"outputs\":[{\"influxdb\":{\"database\":\"monitoring_op\",\"fielddrop\":[\"*Timestamp\"],\"insecure_skip_verify\":true,\"namepass\":[\"tsdb_fluxd_http_api_request_duration_seconds\",\"tsdb_fluxd_http_api_requests_total\",\"tsdb_fluxd_host_state_change_total\",\"tsdb_fluxd_host_state\",\"tsdb_fluxd_host_selected\",\"tsdb_fluxd_host_selection_failed\",\"tsdb_fluxd_hl_*\",\"tsdb_fluxd_query_control_executing_duration_seconds\",\"tsdb_fluxd_http_lb_request_forwarded\",\"tsdb_fluxd_query_control_panics_total\",\"tsdb_influxdb\",\"tsdb_influxdb_database\",\"tsdb_influxdb_queryExecutor\",\"tsdb_telegraf_internal_gather\",\"tsdb_telegraf_internal_write\",\"cquerier_*\",\"disk\",\"procstat\",\"csi_*\",\"kubernetes_persistentvolumeclaim\"],\"retention_policy\":\"default\",\"skip_database_creation\":true,\"tagexclude\":[\"vdc\",\"storage_pool\",\"cluster\",\"release_name\"],\"timeout\":\"30s\"}},{\"influxdb\":{\"database\":\"monitoring_vdc\",\"insecure_skip_verify\":true,\"namepass\":[\"cq_*\"],\"retention_policy\":\"default\",\"skip_database_creation\":true,\"tagexclude\":[\"host\",\"node_id\",\"vdc\",\"storage_pool\",\"cluster\"],\"timeout\":\"30s\"}}],\"processors\":[{\"override\":{\"namepass\":[\"tsdb_influxdb_httpd\"],\"tagexclude\":[\"node_id\",\"ip\"]}}]},\"extra_files\":{},\"global\":{\"communication_scheme\":\"http\",\"enableHealthcheck\":false,\"fluent_bit_enabled\":false,\"graphql_plugin_enabled\":true,\"graphql_release_name\":\"objectscale-graphql\",\"internal_dns\":\"kube-dns.kube-system.svc.cluster.local\",\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"monitoring_alert_app\":\"objectscale-monitoring\",\"monitoring_tag\":\"3.7.0.0-1146.a692701d\",\"performanceProfile\":\"Small\",\"platform\":\"Default\",\"platform_monitoring_disabled\":true,\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"rsyslog_uds_dir\":\"/var/run/rsyslog\",\"rsyslog_uds_filename\":\"rsyslog.socket\",\"started\":true,\"telegraf_tls_enabled\":false,\"tls_enabled\":false,\"use_vault_for_ssl\":false,\"watchAllNamespaces\":true},\"image\":{\"pullPolicy\":\"IfNotPresent\",\"repository\":\"telegraf\"},\"rbac\":{\"clusterWide\":false,\"create\":true,\"rules\":[{\"apiGroups\":[\"\"],\"resources\":[\"pods\",\"persistentvolumes\",\"persistentvolumeclaims\",\"nodes\"],\"verbs\":[\"get\",\"list\",\"watch\"]}]},\"resources\":{\"limits\":{},\"requests\":{}},\"service\":{\"bind_address\":11002,\"extra_bindings\":[],\"type\":\"ClusterIP\"},\"serviceAccount\":{\"create\":true},\"tolerations\":[]},\"telegraf-sidecar\":{\"common-monitoring-lib\":{\"exports\":{\"default\":{\"rsyslog_client_image_pull_policy\":\"IfNotPresent\"}},\"global\":{\"communication_scheme\":\"http\",\"enableHealthcheck\":false,\"fluent_bit_enabled\":false,\"graphql_plugin_enabled\":true,\"graphql_release_name\":\"objectscale-graphql\",\"internal_dns\":\"kube-dns.kube-system.svc.cluster.local\",\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"monitoring_alert_app\":\"objectscale-monitoring\",\"monitoring_tag\":\"3.7.0.0-1146.a692701d\",\"performanceProfile\":\"Small\",\"platform\":\"Default\",\"platform_monitoring_disabled\":true,\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"rsyslog_uds_dir\":\"/var/run/rsyslog\",\"rsyslog_uds_filename\":\"rsyslog.socket\",\"started\":true,\"telegraf_tls_enabled\":false,\"tls_enabled\":false,\"use_vault_for_ssl\":false,\"watchAllNamespaces\":true}},\"global\":{\"communication_scheme\":\"http\",\"enableHealthcheck\":false,\"fluent_bit_enabled\":false,\"graphql_plugin_enabled\":true,\"graphql_release_name\":\"objectscale-graphql\",\"internal_dns\":\"kube-dns.kube-system.svc.cluster.local\",\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"monitoring_alert_app\":\"objectscale-monitoring\",\"monitoring_tag\":\"3.7.0.0-1146.a692701d\",\"performanceProfile\":\"Small\",\"platform\":\"Default\",\"platform_monitoring_disabled\":true,\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"rsyslog_uds_dir\":\"/var/run/rsyslog\",\"rsyslog_uds_filename\":\"rsyslog.socket\",\"started\":true,\"telegraf_tls_enabled\":false,\"tls_enabled\":false,\"use_vault_for_ssl\":false,\"watchAllNamespaces\":true}},\"throttler\":{\"application_enabled\":false,\"common-monitoring-lib\":{\"exports\":{\"default\":{\"rsyslog_client_image_pull_policy\":\"IfNotPresent\"}},\"global\":{\"communication_scheme\":\"http\",\"enableHealthcheck\":false,\"fluent_bit_enabled\":false,\"graphql_plugin_enabled\":true,\"graphql_release_name\":\"objectscale-graphql\",\"internal_dns\":\"kube-dns.kube-system.svc.cluster.local\",\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"monitoring_alert_app\":\"objectscale-monitoring\",\"monitoring_tag\":\"3.7.0.0-1146.a692701d\",\"performanceProfile\":\"Small\",\"platform\":\"Default\",\"platform_monitoring_disabled\":true,\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"rsyslog_uds_dir\":\"/var/run/rsyslog\",\"rsyslog_uds_filename\":\"rsyslog.socket\",\"started\":true,\"telegraf_tls_enabled\":false,\"tls_enabled\":false,\"use_vault_for_ssl\":false,\"watchAllNamespaces\":true}},\"config\":{\"alerter\":{\"component\":\"\",\"dir\":\"\",\"enabled\":false,\"interval\":\"5m\"},\"cq_dir\":\"cq/objectscale\",\"fluxd_alerter\":{\"enabled\":true,\"prefix\":\"OBJSC-MON\",\"symptoms\":{\"Critical\":4020},\"threshold\":6},\"http\":{\"bind_address\":8094}},\"global\":{\"communication_scheme\":\"http\",\"enableHealthcheck\":false,\"fluent_bit_enabled\":false,\"graphql_plugin_enabled\":true,\"graphql_release_name\":\"objectscale-graphql\",\"internal_dns\":\"kube-dns.kube-system.svc.cluster.local\",\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"monitoring_alert_app\":\"objectscale-monitoring\",\"monitoring_tag\":\"3.7.0.0-1146.a692701d\",\"performanceProfile\":\"Small\",\"platform\":\"Default\",\"platform_monitoring_disabled\":true,\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"rsyslog_uds_dir\":\"/var/run/rsyslog\",\"rsyslog_uds_filename\":\"rsyslog.socket\",\"started\":true,\"telegraf_tls_enabled\":false,\"tls_enabled\":false,\"use_vault_for_ssl\":false,\"watchAllNamespaces\":true},\"image\":{\"pullPolicy\":\"IfNotPresent\",\"repository\":\"throttler\"},\"livenessProbe\":{\"probePath\":\"/metrics\"},\"rbac\":{\"create\":true},\"readinessProbe\":{\"probePath\":\"/metrics\"},\"replicas\":1,\"resources\":{\"limits\":{},\"requests\":{}},\"service\":{\"bind_address\":8094},\"serviceAccount\":{\"create\":true},\"startupProbe\":{\"enabled\":false,\"probePath\":\"/ping\"},\"tolerations\":[]}},\"pravega\":{\"enabled\":false},\"product\":\"objectscale\",\"pullPolicy\":\"IfNotPresent\",\"replicaCount\":1,\"resources\":{\"fluentbitAgent\":{\"limits\":{\"memory\":\"40Mi\"},\"requests\":{\"memory\":\"20Mi\"}},\"operator\":{\"limits\":{\"ephemeralStorage\":\"1256Mi\",\"memory\":\"500Mi\"},\"requests\":{\"ephemeralStorage\":\"1256Mi\",\"memory\":\"300Mi\"}},\"rsyslog\":{\"limits\":{\"memory\":\"60Mi\"},\"requests\":{\"memory\":\"30Mi\"}}},\"service-pod\":{\"global\":{\"enableHealthcheck\":false,\"monitoring\":{\"enabled\":true},\"platform\":\"Default\",\"product\":\"objectscale\",\"registry\":\"emccorp\",\"watchAllNamespaces\":true},\"image\":{\"repository\":\"base-service-tools\"},\"pullPolicy\":\"IfNotPresent\",\"resources\":{\"limits\":{\"ephemeral-storage\":\"20Gi\"},\"requests\":{\"ephemeral-storage\":\"10Gi\",\"memory\":\"2Gi\"}},\"sshCred\":{\"group\":\"adm\",\"password\":\"ChangeMe\",\"user\":\"root\"},\"tag\":\"2.68.2\"},\"servicePod\":{\"enabled\":true},\"tag\":\"0.69.0\",\"tolerations\":[],\"zookeeper\":{\"enabled\":true},\"zookeeper-operator\":{\"global\":{\"enableHealthcheck\":false,\"installCRD\":true,\"monitoring\":{\"enabled\":true},\"platform\":\"Default\",\"product\":\"objectscale\",\"registry\":\"emccorp\",\"watchAllNamespaces\":true},\"image\":{\"pullPolicy\":\"IfNotPresent\",\"repository\":\"zookeeper-operator\",\"tag\":\"0.2.9\"},\"replicaCount\":1}}"
spec:
  assemblyPhase: Pending
  selector:
    matchLabels:
      app.kubernetes.io/name: objectscale-manager
  componentKinds:
    - group: core
      kind: Service
    - group: apps
      kind: Deployment
    - group: core
      kind: Pod
    - group: core
      kind: ReplicaSet
    - group: core
      kind: ConfigMap
    - group: core
      kind: ServiceAccount
    - group: rbac.authorization.k8s.io
      kind: Role
    - group: rbac.authorization.k8s.io
      kind: RoleBinding
    - group: batch
      kind: CronJob
    - group: batch
      kind: Job
    - group: core
      kind: Secret
  descriptor:
    type: objectscale-manager
    description: Cluster-level management of Dell EMC ObjecScale Object Stores
    version: 0.69.0
    keywords:
      - deos
      - objectscale
      - object store
      - flex
      - ecs
      - s3
    info:
      - "Copyright Â© 2019 Dell Inc. or its subsidiaries. All Rights Reserved."
---
# Source: objectscale-manager/charts/objectscale-iam/templates/atlas_v1beta1_iamcluster.yaml
apiVersion: atlas.dellemc.com/v1beta1
kind: AtlasCluster
metadata:
  name: objectscale-iam-atlas
spec:
  replicas: 3
  image:
    repository:  emccorp/atlas
    tag: 1.1.3
    pullPolicy: IfNotPresent
  persistence:
    spec:
      resources:
        requests:
          storage: 10Gi
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/influxdb/templates/influxdb.yaml
apiVersion: db.ecs.dellemc.com/v1
kind: Influxdb
metadata:
  name: "objectscale-manager-influxdb"
  labels:
    app.kubernetes.io/name: "objectscale-manager-influxdb"
    chart: "influxdb-0.54.0"
    release: "objectscale-manager"
    heritage: "Helm"
spec:
  podManagementPolicy: Parallel
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: objectscale-manager-influxdb
  serviceName: "objectscale-manager-influxdb"
  serviceAddressTemplate: "objectscale-manager-influxdb-%d.objectscale-manager-influxdb.default.svc.cluster.local"
  replicasConfigMapName: objectscale-manager-influxdb-replicas
  replicasConfigName: replicas.json
  replicasPerPartition: 3
  template:
    metadata:
      labels:
        app.kubernetes.io/name: objectscale-manager-influxdb
        release: "objectscale-manager"
        
        objectscale.dellemc.com/logging-inject: "true"
        objectscale.dellemc.com/logging-release-name: "objectscale-manager"
        app.kubernetes.io/namespace: "default"
        
        objectscale.dellemc.com/logging-inject-logrotate: "true"
      annotations:
        
        objectscale.dellemc.com/logging-release-name: "objectscale-manager"
    spec:
      shareProcessNamespace: true
      affinity:
        # Use pod anti-affinity rules to deploy statefulset pods one-per-node.
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: "app.kubernetes.io/name"
                operator: In
                values:
                - objectscale-manager-influxdb
            topologyKey: "kubernetes.io/hostname"
      initContainers:
      - name: influxdb-init
        image: "emccorp/influxdb:3.7.0.0-1146.a692701d"
        imagePullPolicy: "IfNotPresent"
        resources:
          requests:
            memory: 300Mi
            ephemeral-storage: 850Mi
          limits:
            memory: 300Mi
            ephemeral-storage: 850Mi
        ports:
        - name: api
          containerPort: 8086
        env:
        - name: INIT_CTNR
          value: "1"
        - name: INFLUXDB_HTTP_PORT_DEFAULT
          value: "8086"
        - name: INFLUXDB_RPC_PORT
          value: "8088"
        volumeMounts:
        - name: objectscale-manager-influxdb-data
          mountPath: /data/influxdb
        - name: config
          mountPath: /data/influxdb/conf/
        - name: init
          mountPath: /docker-entrypoint-initdb.d
        - name: log
          mountPath: /var/log
        - mountPath: /crash-dump
          name: crash-dump
      containers:
      - name: influxdb
        image: "emccorp/influxdb:3.7.0.0-1146.a692701d"
        imagePullPolicy: "IfNotPresent"
        command: ["bash"]
        args: ["-c", "echo /crash-dump/core-%e > /proc/sys/kernel/core_pattern; ulimit -c unlimited; GOTRACEBACK=crash /entrypoint.sh influxd"]
        resources:
          requests:
            memory: 460Mi
            ephemeral-storage: 1170Mi
          limits:
            memory: 460Mi
            ephemeral-storage: 1170Mi
        ports:
        - name: api
          containerPort: 8086
        env:
        - name: INFLUXDB_HTTP_PORT_DEFAULT
          value: "8086"
        - name: INFLUXDB_RPC_PORT
          value: "8088"
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        
        volumeMounts:
        - name: objectscale-manager-influxdb-data
          mountPath: /data/influxdb
        - name: config
          mountPath: /data/influxdb/conf/
        - name: log
          mountPath: /var/log
        - mountPath: /crash-dump
          name: crash-dump
        livenessProbe:
          httpGet:
            path: /ping
            port: api
            scheme: HTTP
          timeoutSeconds: 30
          periodSeconds: 60
          initialDelaySeconds: 180
          failureThreshold: 360
        readinessProbe:
          httpGet:
            path: /ping
            port: api
            scheme: HTTP
          periodSeconds: 60
          timeoutSeconds: 30
          initialDelaySeconds: 120
          failureThreshold: 360
      
      - name: telegraf
        image: "emccorp/telegraf:3.7.0.0-1146.a692701d"
        imagePullPolicy: "IfNotPresent"
        command: ["bash"]
        args: ["-c", "echo /crash-dump/core-%e > /proc/sys/kernel/core_pattern; ulimit -c unlimited; GOTRACEBACK=crash HOST_PROC=/proc telegraf --config  /etc/telegraf/telegraf.conf --config-directory /etc/telegraf/telegraf.d/"]
        volumeMounts:
        - name: objectscale-manager-influxdb-data
          mountPath: /pv
        - name: telegraf-sidecar-config
          mountPath: /etc/telegraf
        - name: additional-configs
          mountPath: /etc/telegraf/telegraf.d
        env:
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
      
      - name: cron
        image: "emccorp/influxdb:3.7.0.0-1146.a692701d"
        imagePullPolicy: "IfNotPresent"
        command: ["bash"]
        args: ["-c", "echo /crash-dump/core-%e > /proc/sys/kernel/core_pattern; ulimit -c unlimited; GOTRACEBACK=crash env >> /etc/environment; cron -n "]
        env:
        - name: INFLUXDB_HTTP_PORT_DEFAULT
          value: "8086"
        - name: INFLUXDB_RPC_PORT
          value: "8088"
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        volumeMounts:
        - name: objectscale-manager-influxdb-data
          mountPath: /data/influxdb
        - name: config
          mountPath: /data/influxdb/conf/
        - name: log
          mountPath: /var/log
        - name: restore-ranges-cron-config
          mountPath: /etc/cron.d
        - mountPath: /crash-dump
          name: crash-dump
      volumes:
      - name: config
        configMap:
          name: objectscale-manager-influxdb
      - name: init
        configMap:
          name: objectscale-manager-influxdb-init
      
      - name: telegraf-sidecar-config
        configMap:
          name: objectscale-manager-telegraf-sidecar
      - name: additional-configs
        configMap:
          name: objectscale-manager-influxdb-telegraf-sidecar-custom-config
      - name: log
        emptyDir: {}
      - name: restore-ranges-cron-config
        configMap:
          name: objectscale-manager-influxdb-cron-config
      - name: crash-dump
        emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: objectscale-manager-influxdb-data
        annotations:
        labels:
          release: objectscale-manager
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "20Gi"
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/rsyslog/templates/statefuldaemonset.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#

apiVersion: stateful.ecs.dellemc.com/v1alpha1
kind: StatefulDaemonSet
metadata:
  name: objectscale-manager-rsyslog
  labels:
    app.kubernetes.io/name: objectscale-manager-rsyslog
    app.kubernetes.io/instance: objectscale-manager
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.54.0"
    app.kubernetes.io/part-of: objectscale-manager
    helm.sh/chart: rsyslog-0.54.0
    release: objectscale-manager
spec:
  serviceName: objectscale-manager-rsyslog
  servicePort: 10514
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: objectscale-manager-rsyslog
  template:
    metadata:
      labels:
        app.kubernetes.io/name: objectscale-manager-rsyslog
        release: objectscale-manager
      annotations:
        # Include a hash of the configmap in the pod template
        # This means that if the configmap changes, the deployment will be rolled
        checksum/config: 101333e45eda0f7cb3890f3d23588d409672d733c21ea0c34216ad22a27a3fa7
    spec:
      shareProcessNamespace: true
      containers:
      - name: rsyslog
        image: "emccorp/rsyslog:3.7.0.0-1146.a692701d"
        imagePullPolicy: "IfNotPresent"
        ports:
        - containerPort: 10514
          name: rsyslog
        resources:
          limits:
            memory: 1024Mi
          requests:
            memory: 1024Mi
        volumeMounts:
        - name: objectscale-manager-rsyslog-data
          mountPath: /var/log
        - mountPath: /etc/rsyslog.conf
          name: config
          subPath: rsyslog.conf
        - mountPath: /crash-dump
          name: crash-dump
        env:
          # This pulls HOSTNAME from the node, not the pod.
          - name: HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
      - name: logrotate
        image: "emccorp/rsyslog:3.7.0.0-1146.a692701d"
        imagePullPolicy: "IfNotPresent"
        command: ["bash"]
        args: ["-c", "echo /crash-dump/core-%e > /proc/sys/kernel/core_pattern; ulimit -c unlimited; GOTRACEBACK=crash export >> /etc/pod.env && cron -n"]
        env:
          - name: LOGS_SIZE_HIGH_WATERMARK
            value: "199680000"
          - name: LOGS_SIZE_LOW_WATERMARK
            value: "189440000"
        volumeMounts:
        - name: objectscale-manager-rsyslog-data
          mountPath: /var/log
        - mountPath: /etc/cron.d
          name: cron-config
        - mountPath: /etc/svc_logs_priority_conf.json
          name: logrotate-config
          subPath: svc_logs_priority_conf.json
        - mountPath: /etc/logrotate.conf
          name: logrotate-config
          subPath: logrotate.conf
        - mountPath: /etc/cleanup_logs.sh
          name: cleanup-script
          subPath: cleanup_logs.sh
        - mountPath: /crash-dump
          name: crash-dump
      - name: telegraf
        image: "emccorp/telegraf:3.7.0.0-1146.a692701d"
        imagePullPolicy: "IfNotPresent"
        command: ["bash"]
        args: ["-c", "echo /crash-dump/core-%e > /proc/sys/kernel/core_pattern; ulimit -c unlimited; GOTRACEBACK=crash HOST_PROC=/proc telegraf --config  /etc/telegraf/telegraf.conf --config-directory /etc/telegraf/telegraf.d/"]
        volumeMounts:
        - name: objectscale-manager-rsyslog-data
          mountPath: /pv
        - name: telegraf-sidecar-config
          mountPath: /etc/telegraf
        - name: additional-configs
          mountPath: /etc/telegraf/telegraf.d
        env:
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
      volumes:
      - name: config
        configMap:
          name: objectscale-manager-rsyslog
      - name: logrotate-config
        configMap:
          name: objectscale-manager-rsyslog-logrotate-config
      - name: cron-config
        configMap:
          name: objectscale-manager-rsyslog-client-cron-config
      - name: cleanup-script
        configMap:
          name: objectscale-manager-rsyslog-client-cleanup-logs-script
          defaultMode: 0755
      - name: crash-dump
        emptyDir: {}
      - name: telegraf-sidecar-config
        configMap:
          name: objectscale-manager-telegraf-sidecar
      - name: additional-configs
        configMap:
          name: objectscale-manager-rsyslog-telegraf-sidecar-custom-config
  volumeClaimTemplates:
  - metadata:
      name: objectscale-manager-rsyslog-data
      annotations:
      labels:
        release: objectscale-manager
    spec:
      accessModes:
        - "ReadWriteOnce"
      resources:
        requests:
          storage: "200Gi"
---
# Source: objectscale-vsphere/templates/vsphere-plugin-network-policy.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: objectscale-allow-all
  namespace: default
spec:
  ingress:
    - {}
  podSelector: {}
  policyTypes:
    - Ingress
---
# Source: objectscale-vsphere/charts/objectscale-portal/charts/objectscale-graphql/charts/helm-controller/templates/controller-rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: install-controller
  namespace: default
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/instance: objectscale-vsphere
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.68.2
    app.kubernetes.io/component: objectscale-operator
    app.kubernetes.io/part-of: objectscale-vsphere
    helm.sh/chart: helm-controller-0.68.2
    release: objectscale-vsphere
    operator: objectscale-operator
    product: objectscale
---
# Source: objectscale-vsphere/charts/objectscale-portal/charts/objectscale-graphql/templates/objecscale-api-rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: objectscale-api
  namespace: default
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/instance: objectscale-vsphere
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.68.2
    app.kubernetes.io/component: objectscale-graphql
    app.kubernetes.io/part-of: objectscale-vsphere
    helm.sh/chart: objectscale-graphql-0.68.2
    release: objectscale-vsphere
    operator: objectscale-operator
    product: objectscale
---
# Source: objectscale-vsphere/charts/objectscale-portal/charts/objectscale-graphql/charts/helm-controller/templates/rest-credentials-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: objectscale-vsphere-rest-credentials
  namespace: default
type: Opaque
stringData:
  credentials: objectscale:QvjM4w1uzkORRWe0:rkZwDXz55hcX7yGx
---
# Source: objectscale-vsphere/templates/vsphere-plugin-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: vsphere-docker-secret
  namespace: default
data:
  .dockerconfigjson: DOCKERSECRETPLACEHOLDER
type: kubernetes.io/dockerconfigjson
---
# Source: objectscale-vsphere/charts/objectscale-portal/charts/rsyslog-client/templates/rsyslog-client-config.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#

apiVersion: v1
kind: ConfigMap
metadata:
  name: objectscale-vsphere-rsyslog-client-config
  # namespace is required for resources created by objectscale-vsphere
  namespace: default
  labels:
    app.kubernetes.io/name: objectscale-vsphere-rsyslog-client
    app.kubernetes.io/instance: objectscale-vsphere
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.54.0"
    app.kubernetes.io/part-of: objectscale-vsphere
    helm.sh/chart: rsyslog-client-3.7.0-1146.a692701d
    release: objectscale-vsphere
data:
  rsyslog.conf.template: |+
    #### MODULES ####

    # input module: file
    module(load="imfile")

    #### GLOBAL DIRECTIVES ####

    #### RULES ####

    # input log files
    input(type="imfile"
          File="/var/log/*.log"
          Tag="objectscale-vsphere"
          addMetadata="on"
          Ruleset="handle_multiple_logs"
          Facility="local0"
    )

    _STDOUT_CONF_

    ruleset(name="handle_multiple_logs") {
      # http://www.rsyslog.com/doc/v8-stable/rainerscript/functions.html
      # re_extract(expr, re, match, submatch, no-found)
      set $.suffix=re_extract($!metadata!filename, "(.*)/([^/]*)", 0, 2, "all.log");
      set $.pod_name=getenv("POD_NAME");
      call sendToLogserver
    }

    ruleset(name="handle_stdout_logs") {
      # http://www.rsyslog.com/doc/v8-stable/rainerscript/functions.html
      # re_extract(expr, re, match, submatch, no-found)
      set $.container_name=re_extract($!metadata!filename, "(.*)/([^/]*)/([^/]*)", 0, 2, "unknown_container");
      set $.log_name=re_extract($!metadata!filename, "(.*)/([^/]*)", 0, 2, "all.log");
      set $.suffix= $.container_name & ".stdout." & $.log_name;
      set $.pod_name=getenv("POD_NAME");
      call sendToLogserver
    }

    # output template
    template(name="FileFormat" type="string"
    string= "<%PRI%>%TIMESTAMP% %HOSTNAME% %syslogtag%__%$.pod_name%__%$.suffix%%msg:::sp-if-no-1st-sp%%msg:::drop-last-lf%\n"
            )

    ruleset(name="sendToLogserver") {
      action(type="omfwd"
          Target="_RSYSLOG_POD_NAME_.objectscale-manager-rsyslog.default.svc.cluster.local"
          Port="10514"
          Protocol="tcp"
          Template="FileFormat" )
    #    action.resumeRetryCount=100
    #    queue.type=linkedList queue.size=10000)
    }
  rsyslog_stdout.conf.template: |+
    input(type="imfile"
          File="_CONTAINER_DIR_/*.log"
          Tag="objectscale-vsphere"
          addMetadata="on"
          Ruleset="handle_stdout_logs"
          Facility="local0"
    )
---
# Source: objectscale-vsphere/charts/objectscale-portal/templates/objectscale-portal-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: objectscale-portal
  namespace: default
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/instance: objectscale-vsphere
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.69.0
    app.kubernetes.io/component: objectscale-portal
    app.kubernetes.io/part-of: objectscale-vsphere
    helm.sh/chart: objectscale-portal-0.69.0
    release: objectscale-vsphere
    operator: objectscale-operator
    product: objectscale
data:
  upstream.conf: |
    upstream graphql {
        server objectscale-graphql:8080;
    }
  nginx.conf: |
    events {
        worker_connections  4096;  ## Default: 1024
    }

    http {
        include /etc/nginx/mime.types;
        include /conf/upstream.conf;
        map $request_method $decksname {
         default decks-support-store.default.svc.cluster.local;
        }
        map $request_method $decksport {
         default 7443;
        }
        server {
            resolver kube-dns.kube-system.svc.cluster.local;
            listen       4443;
            server_name  localhost;
            access_log /dev/stdout;
            error_log /dev/stdout;
            rewrite_log on;
            ssl on;
            ssl_protocols        TLSv1.2;
            ssl_ciphers          AES:!ADH;
            ssl_certificate /etc/nginx/ssl/tls.crt;
            ssl_certificate_key /etc/nginx/ssl/tls.key;
            location /wcp/login {
                proxy_pass_request_headers on;
                proxy_pass_request_body on;
                proxy_pass https://kube-apiserver-authproxy-svc.kube-system.svc.cluster.local:8443/wcp/login;
            }
            location /rest/saml-hook {
                proxy_pass_request_headers on;
                proxy_pass_request_body on;
                proxy_pass https://kube-apiserver-authproxy-svc.kube-system.svc.cluster.local:8443/wcp/vsphere-ui-saml-hook;
            }
            location /graphql {
                proxy_pass http://graphql;
            }
            location /data {
                proxy_pass https://$decksname:$decksport;
            }
            location ~* /grafana/[a-z0-9]([-a-z0-9]*[a-z0-9])?/[a-z0-9]([-a-z0-9]*[a-z0-9])? {
                rewrite /grafana/([a-z0-9-]+)/([a-z0-9-]+)/(.*) /$3 break;
                rewrite /grafana/([a-z0-9-]+)/([a-z0-9-]+) / break;
                proxy_pass http://$2-grafana.$1.svc.cluster.local:3000;
            }
            location /platform {
                default_type application/json;
                return 200 '{"value":"VMware"}';
            }
            location /features {
                return 200 '{"bucketsv2":false,"iam":false,"objectscaleDashboard":true,"objectscaleSystems":false,"replications":false,"uiLoggingLevel":"ERROR"}';
            }
            location / {
                root   /usr/share/nginx/html;
                index  index.html index.htm;
            }
        }
    }
  plugin.json: |
    {
        "manifestVersion": "1.0.0",
        "requirements": {
            "plugin.api.version": "1.0.0"
        },
        "configuration": {
            "nameKey": "plugin.name",
            "icon": {
                "name": "star"
            },
            "sso": {
                "saml": {
                    "hokSolution": {
                        "pushHook": {
                            "uri": "rest/saml-hook"
                        }
                    }
                }
            }
        },
        "objects": {
            "ClusterComputeResource": {
                "summary": {
                    "view": {
                        "uri": "index.html?view=summary",
                        "size": {
                            "widthSpan": 1,
                            "heightSpan": 2
                        }
                    }
                },
                "monitor": {
                    "views": [
                        {
                            "navigationId": "deos.monitor.health",
                            "labelKey": "cluster.monitor.list.health",
                            "uri": "index.html?view=health"
                        }
                    ]
                },
                "configure": {
                    "views": [
                        {
                            "navigationId": "deos.configure.dashboard",
                            "labelKey": "cluster.configure.list.dashboard",
                            "uri": "index.html?view=dashboard"
                        },
                        {
                            "navigationId": "deos.configure.accounts",
                            "labelKey": "cluster.configure.list.accounts",
                            "uri": "index.html?view=accounts"
                        },
                        {
                            "navigationId": "deos.configure.objectstores",
                            "labelKey": "cluster.configure.list.objectstores",
                            "uri": "index.html?view=objectstores"
                        },
                        {
                            "navigationId": "deos.configure.objectscalesystems",
                            "labelKey": "cluster.configure.list.objectscalesystems",
                            "uri": "index.html?view=objectscalesystems"
                        },
                        
                        {
                            "navigationId": "deos.configure.settings",
                            "labelKey": "cluster.configure.list.settings",
                            "uri": "index.html?view=settings"
                        }
                    ]
                }
            }
        },
        "definitions": {
            "iconSpriteSheet": {
                "uri": "assets/images/sprites.png",
                "definitions": {
                    "star": {
                        "x": 0,
                        "y": 96
                    }
                }
            },
            "i18n": {
                "locales": [
                    "en-US",
                    "de-DE",
                    "fr-FR"
                ],
                "definitions": {
                    "plugin.name": {
                        "en-US": "ObjectScaleSERVICE_ID",
                        "de-DE": "ObjectScaleSERVICE_ID",
                        "fr-FR": "ObjectScaleSERVICE_ID"
                    },
                    "cluster.monitor.list.health": {
                        "en-US": "HealthSERVICE_ID",
                        "de-DE": "GesundheitSERVICE_ID",
                        "fr-FR": "santÃ©SERVICE_ID"
                    },
                    "cluster.configure.list.objectstores": {
                        "en-US": "Object StoresSERVICE_ID",
                        "de-DE": "Object StoresSERVICE_ID",
                        "fr-FR": "Object StoresSERVICE_ID"
                    },
                    "cluster.configure.list.settings": {
                        "en-US": "SettingsSERVICE_ID",
                        "de-DE": "SettingsSERVICE_ID",
                        "fr-FR": "SettingsSERVICE_ID"
                    },
                    "cluster.configure.list.dashboard": {
                        "en-US": "DashboardSERVICE_ID",
                        "de-DE": "DashboardSERVICE_ID",
                        "fr-FR": "DashboardSERVICE_ID"
                    },
                    "cluster.configure.list.accounts": {
                        "en-US": "AccountsSERVICE_ID",
                        "de-DE": "AccountsSERVICE_ID",
                        "fr-FR": "AccountsSERVICE_ID"
                    },
                    "cluster.configure.list.objectscalesystems": {
                        "en-US": "Objectscale SystemsSERVICE_ID",
                        "de-DE": "Objectscale SystemsSERVICE_ID",
                        "fr-FR": "Objectscale SystemsSERVICE_ID"
                    }
                }
            }
        }
    }
---
# Source: objectscale-vsphere/charts/objectscale-portal/charts/objectscale-graphql/charts/helm-controller/templates/controller-rbac.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: default-install-controller
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/instance: objectscale-vsphere
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.68.2
    app.kubernetes.io/component: objectscale-operator
    app.kubernetes.io/part-of: objectscale-vsphere
    helm.sh/chart: helm-controller-0.68.2
    release: objectscale-vsphere
    operator: objectscale-operator
    product: objectscale
rules:
  - apiGroups:
      - rbac.authorization.k8s.io
    resources:
      - roles
      - rolebindings
      - clusterroles
      - clusterrolebindings
    verbs:
      - '*'
  - apiGroups:
      - ecs.dellemc.com
    resources:
      - "*"
    verbs:
      - "*"
  - apiGroups:
      - decks.ecs.dellemc.com
    resources:
      - "*"
    verbs:
      - "*"
  - apiGroups:
      - kahm.emcecs.github.com
    resources:
      - "*"
    verbs:
      - "*"
  - apiGroups:
      - storage.k8s.io
    resources:
      - storageclasses
      - storageclasslists
    verbs:
      - get
      - list
  - apiGroups:
      - ""
    resources:
      - pods
      - services
      - endpoints
      - persistentvolumeclaims
      - persistentvolumes
      - events
      - configmaps
      - secrets
      - serviceaccounts
    verbs:
      - "*"
  - apiGroups:
      - batch
    resources:
      - jobs
      - cronjobs
    verbs:
      - "*"
  - apiGroups:
      - certificates.k8s.io
    resources:
      - certificatesigningrequests
    verbs:
      - "*"
  - apiGroups:
      - certificates.k8s.io
    resources:
      - certificatesigningrequests/approval
    verbs:
      - update
  - apiGroups:
      - policy
    resources:
      - poddisruptionbudgets
    verbs:
      - "*"
  - apiGroups:
      - apps
    resources:
      - deployments
      - daemonsets
      - replicasets
      - statefulsets
    verbs:
      - "*"
  - apiGroups:
      - zookeeper.pravega.io
    resources:
      - "*"
    verbs:
      - "*"
  - apiGroups:
      - app.k8s.io
    resources:
      - "*"
    verbs:
      - "*"
  - apiGroups:
      - atlas.dellemc.com
    resources:
      - "*"
    verbs:
      - "*"
  - apiGroups:
      - influxdata.com
    resources:
      - influxdbs
    verbs:
      - "*"
  - apiGroups:
      - ""
    resources:
      - nodes
      - clusterroles
    verbs:
      - "*"
  - apiGroups:
    - apiextensions.k8s.io
    resources:
    - customresourcedefinitions
    verbs:
    - '*'
  - apiGroups:
    - ""
    resources:
    - namespaces
    verbs:
    - list
    - get
  - apiGroups:
      - stateful.ecs.dellemc.com
    resources:
      - "*"
    verbs:
      - "*"
  - apiGroups:
    - "admissionregistration.k8s.io"
    resources:
    - "mutatingwebhookconfigurations"
    - "validatingwebhookconfigurations"
    verbs:
      - "*"
  - apiGroups:
      - db.ecs.dellemc.com
    resources:
      - "*"
    verbs:
      - "*"
---
# Source: objectscale-vsphere/charts/objectscale-portal/charts/objectscale-graphql/templates/object-store-admin-role.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: default-object-store-admin
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/instance: objectscale-vsphere
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.68.2
    app.kubernetes.io/component: objectscale-graphql
    app.kubernetes.io/part-of: objectscale-vsphere
    helm.sh/chart: objectscale-graphql-0.68.2
    release: objectscale-vsphere
    operator: objectscale-operator
    product: objectscale
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
rules:
- apiGroups:
  - ecs.dellemc.com
  resources:
  - ecsclusters
  verbs:
  - "*"
- apiGroups:
  - app.k8s.io
  resources:
  - "*"
  verbs:
  - "*"
- apiGroups:
  - influxdata.com
  resources:
  - influxdbs
  verbs:
  - "*"
- apiGroups:
    - ""
  resources:
    - pods
    - persistentvolumeclaims
    - secrets
    - configmaps
  verbs:
    - "*"
- apiGroups:
    - batch
  resources:
    - jobs
    - cronjobs
  verbs:
    - "*"
- apiGroups:
    - appplatform.wcp.vmware.com
  resources:
    - storagepolicies
  verbs:
    - get
    - list
---
# Source: objectscale-vsphere/charts/objectscale-portal/charts/objectscale-graphql/templates/object-store-monitor-role.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: default-object-store-monitor
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/instance: objectscale-vsphere
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.68.2
    app.kubernetes.io/component: objectscale-graphql
    app.kubernetes.io/part-of: objectscale-vsphere
    helm.sh/chart: objectscale-graphql-0.68.2
    release: objectscale-vsphere
    operator: objectscale-operator
    product: objectscale
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
    rbac.authorization.k8s.io/aggregate-to-view: "true"
rules:
- apiGroups:
  - ecs.dellemc.com
  resources:
  - ecsclusters
  verbs:
  - get
  - list
  - watch
- apiGroups:
    - ecs.dellemc.com
  resources:
    - networkconnections
  verbs:
    - get
    - watch
    - list
- apiGroups:
  - ""
  resources:
  - pods
  - services
  - endpoints
  - persistentvolumeclaims
  - persistentvolumes
  - events
  - configmaps
  - secrets
  - resourcequotas
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - batch
  resources:
  - jobs
  - cronjobs
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - policy
  resources:
  - poddisruptionbudgets
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - apps
  resources:
  - deployments
  - daemonsets
  - replicasets
  - statefulsets
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - zookeeper.pravega.io
  resources:
  - "*"
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - app.k8s.io
  resources:
  - "*"
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - atlas.dellemc.com
  resources:
  - "*"
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - influxdata.com
  resources:
  - influxdbs
  verbs:
  - "*"
- apiGroups:
    - metrics.k8s.io
  resources:
    - "*"
  verbs:
    - get
    - watch
    - list
- apiGroups:
    - appplatform.wcp.vmware.com
  resources:
    - storagepolicies
  verbs:
    - get
    - list
- apiGroups:
    - appplatform.wcp.vmware.com
  resources:
    - storagepolicies
  verbs:
    - get
    - list
---
# Source: objectscale-vsphere/charts/objectscale-portal/charts/objectscale-graphql/templates/objectscale-admin-cluster-role.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: default-objectscale-admin
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/instance: objectscale-vsphere
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.68.2
    app.kubernetes.io/component: graphql-cluster-scoped-resources
    app.kubernetes.io/part-of: objectscale-vsphere
    helm.sh/chart: objectscale-graphql-0.68.2
    release: objectscale-vsphere
    operator: objectscale-operator
    product: objectscale
rules:
  - apiGroups:
      - cns.vmware.com
    resources:
      - storagepools
    verbs:
      - get
      - list
  - apiGroups:
      - storage.k8s.io
    resources:
      - storageclasses
      - storageclasslists
    verbs:
      - get
      - list
  - apiGroups:
      - certificates.k8s.io
    resources:
      - certificatesigningrequests
    verbs:
      - "*"
  - apiGroups:
      - certificates.k8s.io
    resources:
      - certificatesigningrequests/approval
    verbs:
      - update
  - apiGroups:
      - certificates.k8s.io
    resourceNames:
      - kubernetes.io/*
    resources:
      - signers
    verbs:
      - approve
  - apiGroups:
      - rbac.authorization.k8s.io
    resources:
      - clusterroles
      - clusterrolebindings
    verbs:
      - "*"
  - apiGroups:
      - ""
    resources:
      - nodes
      - clusterroles
    verbs:
      - "*"
  - apiGroups:
      - ""
    resources:
      - namespaces
      - serviceaccounts
      - secrets
      - resourcequotas
    verbs:
      - get
      - list
      - watch
---
# Source: objectscale-vsphere/charts/objectscale-portal/charts/objectscale-graphql/charts/helm-controller/templates/controller-rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: default-install-controller
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/instance: objectscale-vsphere
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.68.2
    app.kubernetes.io/component: helm-controller
    app.kubernetes.io/part-of: objectscale-vsphere
    helm.sh/chart: helm-controller-0.68.2
    release: objectscale-vsphere
    operator: objectscale-operator
    product: objectscale
subjects:
  - kind: ServiceAccount
    name: install-controller
    namespace: default
roleRef:
  kind: ClusterRole
  name: default-install-controller
  apiGroup: rbac.authorization.k8s.io
---
# Source: objectscale-vsphere/charts/objectscale-portal/templates/objectscale-api-role-bindings.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: default-objectscale-api-as-admin
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/instance: objectscale-vsphere
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.69.0
    app.kubernetes.io/component: objectscale-graphql
    app.kubernetes.io/part-of: objectscale-vsphere
    helm.sh/chart: objectscale-portal-0.69.0
    release: objectscale-vsphere
    operator: objectscale-operator
    product: objectscale
subjects:
  - kind: ServiceAccount
    name: objectscale-api
    namespace: default
roleRef:
  kind: ClusterRole
  name: default-objectscale-admin
  apiGroup: rbac.authorization.k8s.io
---
# Source: objectscale-vsphere/charts/objectscale-portal/charts/objectscale-graphql/templates/objecscale-api-rbac.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: default-objectscale-api
  namespace: default
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/instance: objectscale-vsphere
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.68.2
    app.kubernetes.io/component: objectscale-graphql
    app.kubernetes.io/part-of: objectscale-vsphere
    helm.sh/chart: objectscale-graphql-0.68.2
    release: objectscale-vsphere
    operator: objectscale-operator
    product: objectscale
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
    - "*"
---
# Source: objectscale-vsphere/charts/objectscale-portal/charts/objectscale-graphql/templates/objectscale-admin-role.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: default-objectscale-admin
  namespace: default
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/instance: objectscale-vsphere
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.68.2
    app.kubernetes.io/component: objectscale-graphql
    app.kubernetes.io/part-of: objectscale-vsphere
    helm.sh/chart: objectscale-graphql-0.68.2
    release: objectscale-vsphere
    operator: objectscale-operator
    product: objectscale
rules:
- apiGroups:
    - decks.ecs.dellemc.com
  resources:
    - "*"
  verbs:
    - "*"
- apiGroups:
    - ecs.dellemc.com
  resources:
    - "*"
  verbs:
    - "*"
- apiGroups:
    - kahm.emcecs.github.com
  resources:
    - "*"
  verbs:
    - "*"
- apiGroups:
    - ""
  resources:
    - secrets
    - pods
    - services
    - endpoints
    - persistentvolumeclaims
    - persistentvolumes
    - events
    - configmaps
  verbs:
    - "*"
- apiGroups:
    - batch
  resources:
    - jobs
    - cronjobs
  verbs:
    - "*"
- apiGroups:
    - policy
  resources:
    - poddisruptionbudgets
  verbs:
    - get
    - list
    - watch
- apiGroups:
    - apps
  resources:
    - deployments
    - daemonsets
    - replicasets
    - statefulsets
  verbs:
    - "*"
- apiGroups:
    - app.k8s.io
  resources:
    - "*"
  verbs:
    - "*"
- apiGroups:
    - metrics.k8s.io
  resources:
    - "*"
  verbs:
    - get
    - watch
    - list
- apiGroups:
    - appplatform.wcp.vmware.com
  resources:
    - storagepolicies
  verbs:
    - get
    - list
---
# Source: objectscale-vsphere/charts/objectscale-portal/charts/rsyslog-client/templates/rbac_role.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
#  Role for rsyslog-client to find instance of rsyslog service
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app.kubernetes.io/name: objectscale-vsphere-rsyslog-client
    app.kubernetes.io/instance: objectscale-vsphere
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.54.0"
    app.kubernetes.io/part-of: objectscale-vsphere
    helm.sh/chart: rsyslog-client-3.7.0-1146.a692701d
    release: objectscale-vsphere
  name: "objectscale-vsphere-rsyslog-client"
  namespace: "default"
rules:
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["list"]
---
# Source: objectscale-vsphere/templates/vsphere-plugin-network-policy.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: objectscale-default-role
  namespace: default
rules:
  - apiGroups:
      - policy
    resourceNames:
      - wcp-privileged-psp
    resources:
      - podsecuritypolicies
    verbs:
      - use
---
# Source: objectscale-vsphere/charts/objectscale-portal/charts/objectscale-graphql/templates/objecscale-api-rbac.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: default-objectscale-api
  namespace: default
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/instance: objectscale-vsphere
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.68.2
    app.kubernetes.io/component: objectscale-graphql
    app.kubernetes.io/part-of: objectscale-vsphere
    helm.sh/chart: objectscale-graphql-0.68.2
    release: objectscale-vsphere
    operator: objectscale-operator
    product: objectscale
subjects:
- kind: ServiceAccount
  name: objectscale-api
  namespace: default
roleRef:
  kind: Role
  name: default-objectscale-api
  apiGroup: rbac.authorization.k8s.io
---
# Source: objectscale-vsphere/charts/objectscale-portal/charts/rsyslog-client/templates/rbac_rolebinding.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
#  RoleBinding for rsyslog-client to find instance of rsyslog service
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: "objectscale-vsphere-rsyslog-client"
  namespace: "default"
  labels:
    app.kubernetes.io/name: objectscale-vsphere-rsyslog-client
    app.kubernetes.io/instance: objectscale-vsphere
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.54.0"
    app.kubernetes.io/part-of: objectscale-vsphere
    helm.sh/chart: rsyslog-client-3.7.0-1146.a692701d
    release: objectscale-vsphere
subjects:
  - apiGroup: rbac.authorization.k8s.io
    kind: Group
    name: system:serviceaccounts
roleRef:
  kind: Role
  apiGroup: rbac.authorization.k8s.io
  name: "objectscale-vsphere-rsyslog-client"
---
# Source: objectscale-vsphere/charts/objectscale-portal/templates/objectscale-api-role-bindings.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: default-objectscale-api-as-admin
  namespace: default
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/instance: objectscale-vsphere
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.69.0
    app.kubernetes.io/component: objectscale-graphql
    app.kubernetes.io/part-of: objectscale-vsphere
    helm.sh/chart: objectscale-portal-0.69.0
    release: objectscale-vsphere
    operator: objectscale-operator
    product: objectscale
subjects:
  - kind: ServiceAccount
    name: objectscale-api
    namespace: default
roleRef:
  kind: Role
  name: default-objectscale-admin
  apiGroup: rbac.authorization.k8s.io
---
# Source: objectscale-vsphere/templates/vsphere-plugin-network-policy.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: objectscale-default-binding
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: objectscale-default-role
subjects:
  - kind: ServiceAccount
    name: default
    namespace: default
---
# Source: objectscale-vsphere/charts/objectscale-portal/charts/objectscale-graphql/charts/helm-controller/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: objectscale-vsphere-installer
  namespace: default
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/component: objectscale-install-controller
    helm.sh/chart: helm-controller-0.68.2
    app.kubernetes.io/instance: objectscale-vsphere
    app.kubernetes.io/version: 0.68.2
    app.kubernetes.io/part-of: objectscale-vsphere
    release: objectscale-vsphere
    operator: objectscale-operator
    product: objectscale
    io.kompose.service: helm-controller
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      targetPort: 8080
  selector:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/component: objectscale-install-controller
---
# Source: objectscale-vsphere/charts/objectscale-portal/charts/objectscale-graphql/templates/graphql-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: objectscale-graphql
  namespace: default
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/instance: objectscale-vsphere
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.68.2
    app.kubernetes.io/component: objectscale-graphql
    app.kubernetes.io/part-of: objectscale-vsphere
    helm.sh/chart: objectscale-graphql-0.68.2
    release: objectscale-vsphere
    operator: objectscale-operator
    product: objectscale
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/component: objectscale-graphql
  ports:
    - port: 8080
      name: http
---
# Source: objectscale-vsphere/charts/objectscale-portal/templates/objectscale-portal-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: objectscale-portal
  namespace: default
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/instance: objectscale-vsphere
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.69.0
    app.kubernetes.io/component: objectscale-portal
    app.kubernetes.io/part-of: objectscale-vsphere
    helm.sh/chart: objectscale-portal-0.69.0
    release: objectscale-vsphere
    operator: objectscale-operator
    product: objectscale
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/component: objectscale-portal
  ports: 
      - name: https
        port: 4443
        targetPort: 4443
---
# Source: objectscale-vsphere/charts/objectscale-portal/charts/objectscale-graphql/charts/helm-controller/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: objectscale-install-controller
  namespace: default
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/component: objectscale-install-controller
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: objectscale-vsphere
    app.kubernetes.io/version: 0.68.2
    app.kubernetes.io/part-of: objectscale-vsphere
    helm.sh/chart: helm-controller-0.68.2
    release: objectscale-vsphere
    operator: objectscale-operator
    product: objectscale
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: objectscale-manager
      app.kubernetes.io/component: objectscale-install-controller
  template:
    metadata:
      labels:
        app.kubernetes.io/name: objectscale-manager
        app.kubernetes.io/component: objectscale-install-controller
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/instance: objectscale-vsphere
        app.kubernetes.io/version: 0.68.2
        app.kubernetes.io/part-of: objectscale-vsphere
        helm.sh/chart: helm-controller-0.68.2
        release: objectscale-vsphere
        operator: objectscale-operator
        product: objectscale
    spec:
      serviceAccountName: install-controller
      containers:
        - name: objectscale-install-controller
          resources:
            limits:
              memory: 500M
            requests:
              memory: 250M
          image: emccorp/install-controller:0.68.2
          env:
            - name: OPERATOR_NAME
              value: objectscale-operator
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: REST_PORT
              value: "8080"
            - name: REST_CREDENTIALS
              valueFrom:
                secretKeyRef:
                  name: objectscale-vsphere-rest-credentials
                  key: credentials
            - name: WATCH_NAMESPACE
              value: ""
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
              name: http
---
# Source: objectscale-vsphere/charts/objectscale-portal/charts/objectscale-graphql/templates/graphql-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: objectscale-graphql
  namespace: default
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/instance: objectscale-vsphere
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.68.2
    app.kubernetes.io/component: objectscale-graphql
    app.kubernetes.io/part-of: objectscale-vsphere
    helm.sh/chart: objectscale-graphql-0.68.2
    release: objectscale-vsphere
    operator: objectscale-operator
    product: objectscale
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: objectscale-manager
      app.kubernetes.io/component: objectscale-graphql
  template:
    metadata:
      labels:
        app.kubernetes.io/name: objectscale-manager
        app.kubernetes.io/component: objectscale-graphql
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/instance: objectscale-vsphere
        app.kubernetes.io/part-of: objectscale-vsphere
        app.kubernetes.io/version: 0.68.2
        helm.sh/chart: objectscale-graphql-0.68.2
        release: objectscale-vsphere
        operator: objectscale-operator
        product: objectscale
    spec:
      serviceAccountName: objectscale-api
      containers:
      - name: objectscale-graphql
        image: emccorp/ecs-flex-graphql:0.68.2
        imagePullPolicy: IfNotPresent
        env:
        - name: OBJSTORE_AVAILABLE_VERSIONS
          value: "[\"0.68.2\"]"
        - name: GRAPHQL_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: WATCH_NAMESPACE
          value: ""
        - name: GLOBAL_REGISTRY
          value: emccorp
        - name: LICENSE_CHART_VERSION
          value: 2.68.2
        - name: SUPPORTASSIST_CHART_VERSION
          value: 2.68.2
        - name: SRSGATEWAY_CHART_VERSION
          value: 1.2.0
        - name: OPERATOR_NAME
          value: objectscale-operator
        - name: MANAGER_RELEASE_NAME
          value: objectscale-manager
        - name: VSPHERE_SERVICE_PREFIX
          value: VSPHERE_SERVICE_PREFIX_VALUE
        - name: STORAGE_CLASS_NAME
          value: dellemc-objectscale-highly-available
        - name: LOG_DIRECTION
          value: stdout
        - name: HELM_CONTROLLER_ENDPOINT
          value: http://objectscale-vsphere-installer
        - name: HELM_CONTROLLER_REST_CREDENTIALS
          valueFrom:
            secretKeyRef:
              name: objectscale-vsphere-rest-credentials
              key: credentials
      
      - name: rsyslog
        image: "emccorp/rsyslog:3.7.0.0-1137.4d29996c"
        imagePullPolicy: "IfNotPresent"
        env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_UID
            valueFrom:
              fieldRef:
                fieldPath: metadata.uid
          - name: POD_NAMESPACE
            value: "default"
          - name: LOG_STDOUT_ENABLED
            value: ""
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: RSYSLOG_CLIENT
            value: "true"
          - name: RSYSLOG_SVC_NAME
            value: objectscale-manager-rsyslog
          - name: RSYSLOG_SVC_NAMESPACE
            value: default
        volumeMounts:
          - mountPath: /etc/rsyslog
            name: rsyslog-config
      volumes:
      
      - name: rsyslog-config
        configMap:
          name: objectscale-vsphere-rsyslog-client-config
---
# Source: objectscale-vsphere/charts/objectscale-portal/templates/objectscale-portal-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: objectscale-portal
  namespace: default
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/instance: objectscale-vsphere
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.69.0
    app.kubernetes.io/component: objectscale-portal
    app.kubernetes.io/part-of: objectscale-vsphere
    helm.sh/chart: objectscale-portal-0.69.0
    release: objectscale-vsphere
    operator: objectscale-operator
    product: objectscale
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: objectscale-manager
      app.kubernetes.io/component: objectscale-portal
  template:
    metadata:
      labels:
        app.kubernetes.io/name: objectscale-manager
        app.kubernetes.io/component: objectscale-portal
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/instance: objectscale-vsphere
        app.kubernetes.io/part-of: objectscale-vsphere
        app.kubernetes.io/version: 0.69.0
        helm.sh/chart: objectscale-portal-0.69.0
        release: objectscale-vsphere
        operator: objectscale-operator
        product: objectscale
    spec:
      volumes:
        - name: config-volume
          configMap:
            name: objectscale-portal
        - name: certificate
          secret:
            secretName: objectscale-plugin-secret-default
      containers:
        - name: objectscale-portal
          image: emccorp/ecs-flex-vsphere-plugin:0.69.0
          env:
            - name: OPERATOR_NAME
              value: objectscale-operator
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: config-volume
              mountPath: /usr/share/nginx/html/plugin.json
              subPath: plugin.json
            - name: config-volume
              mountPath: /conf/upstream.conf
              subPath: upstream.conf
            - name: config-volume
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
            - name: certificate
              mountPath: /etc/nginx/ssl
---
# Source: objectscale-vsphere/templates/persistent-services-platform-sp-ha.yaml
apiVersion: appplatform.wcp.vmware.com/v1beta1
kind: StoragePolicy
metadata:
  labels:
    controller-tools.k8s.io: "1.0"
  name: dellemc-objectscale-highly-available
  namespace: default
spec:
  name: dellemc-objectscale-highly-available
  rules:
    VSAN.hostFailuresToTolerate: "1"
    VSAN.stripeWidth: "1"
---
# Source: objectscale-vsphere/templates/persistent-services-platform-operator.yaml
apiVersion: appplatform.wcp.vmware.com/v1beta1
kind: VCUIPlugin
metadata:
  labels:
    controller-tools.k8s.io: "1.0"
  name: objectscale-ui-default
  namespace: default
spec:
  name: objectscale-default
  uiBackendSecret: objectscale-plugin-secret-default
  uiBackendService: objectscale-portal
  vSphereUiPluginUrl: /plugin.json
  vSphereExtensionKey: com.dellemc.vsphere.plugin.default
---
# Source: objectscale-graphql/charts/helm-controller/templates/controller-rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: install-controller
  namespace: default
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/instance: objectscale-graphql
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.68.2
    app.kubernetes.io/component: objectscale-operator
    app.kubernetes.io/part-of: objectscale-graphql
    helm.sh/chart: helm-controller-0.68.2
    release: objectscale-graphql
    operator: objectscale-operator
    product: objectscale
---
# Source: objectscale-graphql/templates/objecscale-api-rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: objectscale-api
  namespace: default
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/instance: objectscale-graphql
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.69.0
    app.kubernetes.io/component: objectscale-graphql
    app.kubernetes.io/part-of: objectscale-graphql
    helm.sh/chart: objectscale-graphql-0.69.0
    release: objectscale-graphql
    operator: objectscale-operator
    product: objectscale
---
# Source: objectscale-graphql/charts/helm-controller/templates/rest-credentials-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: objectscale-graphql-rest-credentials
  namespace: default
type: Opaque
stringData:
  credentials: objectscale:JkewIsK3yxvAJiWL:bzPYkelGBXsYm3CE
---
# Source: objectscale-graphql/charts/helm-controller/templates/controller-rbac.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: default-install-controller
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/instance: objectscale-graphql
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.68.2
    app.kubernetes.io/component: objectscale-operator
    app.kubernetes.io/part-of: objectscale-graphql
    helm.sh/chart: helm-controller-0.68.2
    release: objectscale-graphql
    operator: objectscale-operator
    product: objectscale
rules:
  - apiGroups:
      - rbac.authorization.k8s.io
    resources:
      - roles
      - rolebindings
      - clusterroles
      - clusterrolebindings
    verbs:
      - '*'
  - apiGroups:
      - ecs.dellemc.com
    resources:
      - "*"
    verbs:
      - "*"
  - apiGroups:
      - decks.ecs.dellemc.com
    resources:
      - "*"
    verbs:
      - "*"
  - apiGroups:
      - kahm.emcecs.github.com
    resources:
      - "*"
    verbs:
      - "*"
  - apiGroups:
      - storage.k8s.io
    resources:
      - storageclasses
      - storageclasslists
    verbs:
      - get
      - list
  - apiGroups:
      - ""
    resources:
      - pods
      - services
      - endpoints
      - persistentvolumeclaims
      - persistentvolumes
      - events
      - configmaps
      - secrets
      - serviceaccounts
    verbs:
      - "*"
  - apiGroups:
      - batch
    resources:
      - jobs
      - cronjobs
    verbs:
      - "*"
  - apiGroups:
      - certificates.k8s.io
    resources:
      - certificatesigningrequests
    verbs:
      - "*"
  - apiGroups:
      - certificates.k8s.io
    resources:
      - certificatesigningrequests/approval
    verbs:
      - update
  - apiGroups:
      - policy
    resources:
      - poddisruptionbudgets
    verbs:
      - "*"
  - apiGroups:
      - apps
    resources:
      - deployments
      - daemonsets
      - replicasets
      - statefulsets
    verbs:
      - "*"
  - apiGroups:
      - zookeeper.pravega.io
    resources:
      - "*"
    verbs:
      - "*"
  - apiGroups:
      - app.k8s.io
    resources:
      - "*"
    verbs:
      - "*"
  - apiGroups:
      - atlas.dellemc.com
    resources:
      - "*"
    verbs:
      - "*"
  - apiGroups:
      - influxdata.com
    resources:
      - influxdbs
    verbs:
      - "*"
  - apiGroups:
      - ""
    resources:
      - nodes
      - clusterroles
    verbs:
      - "*"
  - apiGroups:
    - apiextensions.k8s.io
    resources:
    - customresourcedefinitions
    verbs:
    - '*'
  - apiGroups:
    - ""
    resources:
    - namespaces
    verbs:
    - list
    - get
  - apiGroups:
      - stateful.ecs.dellemc.com
    resources:
      - "*"
    verbs:
      - "*"
  - apiGroups:
    - "admissionregistration.k8s.io"
    resources:
    - "mutatingwebhookconfigurations"
    - "validatingwebhookconfigurations"
    verbs:
      - "*"
  - apiGroups:
      - db.ecs.dellemc.com
    resources:
      - "*"
    verbs:
      - "*"
---
# Source: objectscale-graphql/templates/object-store-admin-role.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: default-object-store-admin
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/instance: objectscale-graphql
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.69.0
    app.kubernetes.io/component: objectscale-graphql
    app.kubernetes.io/part-of: objectscale-graphql
    helm.sh/chart: objectscale-graphql-0.69.0
    release: objectscale-graphql
    operator: objectscale-operator
    product: objectscale
rules:
- apiGroups:
  - ecs.dellemc.com
  resources:
  - ecsclusters
  verbs:
  - "*"
- apiGroups:
  - app.k8s.io
  resources:
  - "*"
  verbs:
  - "*"
- apiGroups:
  - influxdata.com
  resources:
  - influxdbs
  verbs:
  - "*"
- apiGroups:
    - ""
  resources:
    - pods
    - persistentvolumeclaims
    - secrets
    - configmaps
  verbs:
    - "*"
- apiGroups:
    - batch
  resources:
    - jobs
    - cronjobs
  verbs:
    - "*"
- apiGroups:
    - appplatform.wcp.vmware.com
  resources:
    - storagepolicies
  verbs:
    - get
    - list
---
# Source: objectscale-graphql/templates/object-store-monitor-role.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: default-object-store-monitor
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/instance: objectscale-graphql
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.69.0
    app.kubernetes.io/component: objectscale-graphql
    app.kubernetes.io/part-of: objectscale-graphql
    helm.sh/chart: objectscale-graphql-0.69.0
    release: objectscale-graphql
    operator: objectscale-operator
    product: objectscale
rules:
- apiGroups:
  - ecs.dellemc.com
  resources:
  - ecsclusters
  verbs:
  - get
  - list
  - watch
- apiGroups:
    - ecs.dellemc.com
  resources:
    - networkconnections
  verbs:
    - get
    - watch
    - list
- apiGroups:
  - ""
  resources:
  - pods
  - services
  - endpoints
  - persistentvolumeclaims
  - persistentvolumes
  - events
  - configmaps
  - secrets
  - resourcequotas
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - batch
  resources:
  - jobs
  - cronjobs
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - policy
  resources:
  - poddisruptionbudgets
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - apps
  resources:
  - deployments
  - daemonsets
  - replicasets
  - statefulsets
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - zookeeper.pravega.io
  resources:
  - "*"
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - app.k8s.io
  resources:
  - "*"
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - atlas.dellemc.com
  resources:
  - "*"
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - influxdata.com
  resources:
  - influxdbs
  verbs:
  - "*"
- apiGroups:
    - metrics.k8s.io
  resources:
    - "*"
  verbs:
    - get
    - watch
    - list
- apiGroups:
    - appplatform.wcp.vmware.com
  resources:
    - storagepolicies
  verbs:
    - get
    - list
- apiGroups:
    - appplatform.wcp.vmware.com
  resources:
    - storagepolicies
  verbs:
    - get
    - list
---
# Source: objectscale-graphql/templates/objectscale-admin-cluster-role.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: default-objectscale-admin
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/instance: objectscale-graphql
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.69.0
    app.kubernetes.io/component: graphql-cluster-scoped-resources
    app.kubernetes.io/part-of: objectscale-graphql
    helm.sh/chart: objectscale-graphql-0.69.0
    release: objectscale-graphql
    operator: objectscale-operator
    product: objectscale
rules:
  - apiGroups:
      - cns.vmware.com
    resources:
      - storagepools
    verbs:
      - get
      - list
  - apiGroups:
      - storage.k8s.io
    resources:
      - storageclasses
      - storageclasslists
    verbs:
      - get
      - list
  - apiGroups:
      - certificates.k8s.io
    resources:
      - certificatesigningrequests
    verbs:
      - "*"
  - apiGroups:
      - certificates.k8s.io
    resources:
      - certificatesigningrequests/approval
    verbs:
      - update
  - apiGroups:
      - certificates.k8s.io
    resourceNames:
      - kubernetes.io/*
    resources:
      - signers
    verbs:
      - approve
  - apiGroups:
      - rbac.authorization.k8s.io
    resources:
      - clusterroles
      - clusterrolebindings
    verbs:
      - "*"
  - apiGroups:
      - ""
    resources:
      - nodes
      - clusterroles
    verbs:
      - "*"
  - apiGroups:
      - ""
    resources:
      - namespaces
      - serviceaccounts
      - secrets
      - resourcequotas
    verbs:
      - get
      - list
      - watch
---
# Source: objectscale-graphql/charts/helm-controller/templates/controller-rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: default-install-controller
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/instance: objectscale-graphql
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.68.2
    app.kubernetes.io/component: helm-controller
    app.kubernetes.io/part-of: objectscale-graphql
    helm.sh/chart: helm-controller-0.68.2
    release: objectscale-graphql
    operator: objectscale-operator
    product: objectscale
subjects:
  - kind: ServiceAccount
    name: install-controller
    namespace: default
roleRef:
  kind: ClusterRole
  name: default-install-controller
  apiGroup: rbac.authorization.k8s.io
---
# Source: objectscale-graphql/templates/objecscale-api-rbac.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: default-objectscale-api
  namespace: default
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/instance: objectscale-graphql
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.69.0
    app.kubernetes.io/component: objectscale-graphql
    app.kubernetes.io/part-of: objectscale-graphql
    helm.sh/chart: objectscale-graphql-0.69.0
    release: objectscale-graphql
    operator: objectscale-operator
    product: objectscale
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
    - "*"
---
# Source: objectscale-graphql/templates/objectscale-admin-role.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: default-objectscale-admin
  namespace: default
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/instance: objectscale-graphql
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.69.0
    app.kubernetes.io/component: objectscale-graphql
    app.kubernetes.io/part-of: objectscale-graphql
    helm.sh/chart: objectscale-graphql-0.69.0
    release: objectscale-graphql
    operator: objectscale-operator
    product: objectscale
rules:
- apiGroups:
    - decks.ecs.dellemc.com
  resources:
    - "*"
  verbs:
    - "*"
- apiGroups:
    - ecs.dellemc.com
  resources:
    - "*"
  verbs:
    - "*"
- apiGroups:
    - kahm.emcecs.github.com
  resources:
    - "*"
  verbs:
    - "*"
- apiGroups:
    - ""
  resources:
    - secrets
    - pods
    - services
    - endpoints
    - persistentvolumeclaims
    - persistentvolumes
    - events
    - configmaps
  verbs:
    - "*"
- apiGroups:
    - batch
  resources:
    - jobs
    - cronjobs
  verbs:
    - "*"
- apiGroups:
    - policy
  resources:
    - poddisruptionbudgets
  verbs:
    - get
    - list
    - watch
- apiGroups:
    - apps
  resources:
    - deployments
    - daemonsets
    - replicasets
    - statefulsets
  verbs:
    - "*"
- apiGroups:
    - app.k8s.io
  resources:
    - "*"
  verbs:
    - "*"
- apiGroups:
    - metrics.k8s.io
  resources:
    - "*"
  verbs:
    - get
    - watch
    - list
- apiGroups:
    - appplatform.wcp.vmware.com
  resources:
    - storagepolicies
  verbs:
    - get
    - list
---
# Source: objectscale-graphql/templates/objecscale-api-rbac.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: default-objectscale-api
  namespace: default
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/instance: objectscale-graphql
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.69.0
    app.kubernetes.io/component: objectscale-graphql
    app.kubernetes.io/part-of: objectscale-graphql
    helm.sh/chart: objectscale-graphql-0.69.0
    release: objectscale-graphql
    operator: objectscale-operator
    product: objectscale
subjects:
- kind: ServiceAccount
  name: objectscale-api
  namespace: default
roleRef:
  kind: Role
  name: default-objectscale-api
  apiGroup: rbac.authorization.k8s.io
---
# Source: objectscale-graphql/charts/helm-controller/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: objectscale-graphql-installer
  namespace: default
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/component: objectscale-install-controller
    helm.sh/chart: helm-controller-0.68.2
    app.kubernetes.io/instance: objectscale-graphql
    app.kubernetes.io/version: 0.68.2
    app.kubernetes.io/part-of: objectscale-graphql
    release: objectscale-graphql
    operator: objectscale-operator
    product: objectscale
    io.kompose.service: helm-controller
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      targetPort: 8080
  selector:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/component: objectscale-install-controller
---
# Source: objectscale-graphql/templates/graphql-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: objectscale-graphql
  namespace: default
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/instance: objectscale-graphql
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.69.0
    app.kubernetes.io/component: objectscale-graphql
    app.kubernetes.io/part-of: objectscale-graphql
    helm.sh/chart: objectscale-graphql-0.69.0
    release: objectscale-graphql
    operator: objectscale-operator
    product: objectscale
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/component: objectscale-graphql
  ports:
    - port: 8080
      name: http
---
# Source: objectscale-graphql/charts/helm-controller/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: objectscale-install-controller
  namespace: default
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/component: objectscale-install-controller
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: objectscale-graphql
    app.kubernetes.io/version: 0.68.2
    app.kubernetes.io/part-of: objectscale-graphql
    helm.sh/chart: helm-controller-0.68.2
    release: objectscale-graphql
    operator: objectscale-operator
    product: objectscale
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: objectscale-manager
      app.kubernetes.io/component: objectscale-install-controller
  template:
    metadata:
      labels:
        app.kubernetes.io/name: objectscale-manager
        app.kubernetes.io/component: objectscale-install-controller
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/instance: objectscale-graphql
        app.kubernetes.io/version: 0.68.2
        app.kubernetes.io/part-of: objectscale-graphql
        helm.sh/chart: helm-controller-0.68.2
        release: objectscale-graphql
        operator: objectscale-operator
        product: objectscale
    spec:
      serviceAccountName: install-controller
      containers:
        - name: objectscale-install-controller
          resources:
            limits:
              memory: 500M
            requests:
              memory: 250M
          image: emccorp/install-controller:0.68.2
          env:
            - name: OPERATOR_NAME
              value: objectscale-operator
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: REST_PORT
              value: "8080"
            - name: REST_CREDENTIALS
              valueFrom:
                secretKeyRef:
                  name: objectscale-graphql-rest-credentials
                  key: credentials
            - name: WATCH_NAMESPACE
              value: ""
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
              name: http
---
# Source: objectscale-graphql/templates/graphql-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: objectscale-graphql
  namespace: default
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/instance: objectscale-graphql
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.69.0
    app.kubernetes.io/component: objectscale-graphql
    app.kubernetes.io/part-of: objectscale-graphql
    helm.sh/chart: objectscale-graphql-0.69.0
    release: objectscale-graphql
    operator: objectscale-operator
    product: objectscale
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: objectscale-manager
      app.kubernetes.io/component: objectscale-graphql
  template:
    metadata:
      labels:
        app.kubernetes.io/name: objectscale-manager
        app.kubernetes.io/component: objectscale-graphql
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/instance: objectscale-graphql
        app.kubernetes.io/part-of: objectscale-graphql
        app.kubernetes.io/version: 0.69.0
        helm.sh/chart: objectscale-graphql-0.69.0
        release: objectscale-graphql
        operator: objectscale-operator
        product: objectscale
    spec:
      serviceAccountName: objectscale-api
      containers:
      - name: objectscale-graphql
        image: emccorp/ecs-flex-graphql:0.69.0
        imagePullPolicy: IfNotPresent
        env:
        - name: OBJSTORE_AVAILABLE_VERSIONS
          value: "[\"0.69.0\"]"
        - name: GRAPHQL_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: WATCH_NAMESPACE
          value: ""
        - name: GLOBAL_REGISTRY
          value: emccorp
        - name: LICENSE_CHART_VERSION
          value: 2.69.0
        - name: SUPPORTASSIST_CHART_VERSION
          value: 2.69.0
        - name: SRSGATEWAY_CHART_VERSION
          value: 1.2.0
        - name: OPERATOR_NAME
          value: objectscale-operator
        - name: MANAGER_RELEASE_NAME
          value: 
        - name: LOG_DIRECTION
          value: stdout
        - name: HELM_CONTROLLER_ENDPOINT
          value: http://objectscale-graphql-installer
        - name: HELM_CONTROLLER_REST_CREDENTIALS
          valueFrom:
            secretKeyRef:
              name: objectscale-graphql-rest-credentials
              key: credentials
      
      volumes:
---
# Source: helm-controller/templates/controller-rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: install-controller
  namespace: default
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/instance: helm-controller
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.69.0
    app.kubernetes.io/component: objectscale-operator
    app.kubernetes.io/part-of: helm-controller
    helm.sh/chart: helm-controller-0.69.0
    release: helm-controller
    operator: objectscale-operator
    product: objectscale
---
# Source: helm-controller/templates/controller-rbac.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: default-install-controller
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/instance: helm-controller
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.69.0
    app.kubernetes.io/component: objectscale-operator
    app.kubernetes.io/part-of: helm-controller
    helm.sh/chart: helm-controller-0.69.0
    release: helm-controller
    operator: objectscale-operator
    product: objectscale
rules:
  - apiGroups:
      - rbac.authorization.k8s.io
    resources:
      - roles
      - rolebindings
      - clusterroles
      - clusterrolebindings
    verbs:
      - '*'
  - apiGroups:
      - ecs.dellemc.com
    resources:
      - "*"
    verbs:
      - "*"
  - apiGroups:
      - decks.ecs.dellemc.com
    resources:
      - "*"
    verbs:
      - "*"
  - apiGroups:
      - kahm.emcecs.github.com
    resources:
      - "*"
    verbs:
      - "*"
  - apiGroups:
      - storage.k8s.io
    resources:
      - storageclasses
      - storageclasslists
    verbs:
      - get
      - list
  - apiGroups:
      - ""
    resources:
      - pods
      - services
      - endpoints
      - persistentvolumeclaims
      - persistentvolumes
      - events
      - configmaps
      - secrets
      - serviceaccounts
    verbs:
      - "*"
  - apiGroups:
      - batch
    resources:
      - jobs
      - cronjobs
    verbs:
      - "*"
  - apiGroups:
      - certificates.k8s.io
    resources:
      - certificatesigningrequests
    verbs:
      - "*"
  - apiGroups:
      - certificates.k8s.io
    resources:
      - certificatesigningrequests/approval
    verbs:
      - update
  - apiGroups:
      - policy
    resources:
      - poddisruptionbudgets
    verbs:
      - "*"
  - apiGroups:
      - apps
    resources:
      - deployments
      - daemonsets
      - replicasets
      - statefulsets
    verbs:
      - "*"
  - apiGroups:
      - zookeeper.pravega.io
    resources:
      - "*"
    verbs:
      - "*"
  - apiGroups:
      - app.k8s.io
    resources:
      - "*"
    verbs:
      - "*"
  - apiGroups:
      - atlas.dellemc.com
    resources:
      - "*"
    verbs:
      - "*"
  - apiGroups:
      - influxdata.com
    resources:
      - influxdbs
    verbs:
      - "*"
  - apiGroups:
      - ""
    resources:
      - nodes
      - clusterroles
    verbs:
      - "*"
  - apiGroups:
    - apiextensions.k8s.io
    resources:
    - customresourcedefinitions
    verbs:
    - '*'
  - apiGroups:
    - ""
    resources:
    - namespaces
    verbs:
    - list
    - get
  - apiGroups:
      - stateful.ecs.dellemc.com
    resources:
      - "*"
    verbs:
      - "*"
  - apiGroups:
    - "admissionregistration.k8s.io"
    resources:
    - "mutatingwebhookconfigurations"
    - "validatingwebhookconfigurations"
    verbs:
      - "*"
  - apiGroups:
      - db.ecs.dellemc.com
    resources:
      - "*"
    verbs:
      - "*"
---
# Source: helm-controller/templates/controller-rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: default-install-controller
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/instance: helm-controller
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.69.0
    app.kubernetes.io/component: helm-controller
    app.kubernetes.io/part-of: helm-controller
    helm.sh/chart: helm-controller-0.69.0
    release: helm-controller
    operator: objectscale-operator
    product: objectscale
subjects:
  - kind: ServiceAccount
    name: install-controller
    namespace: default
roleRef:
  kind: ClusterRole
  name: default-install-controller
  apiGroup: rbac.authorization.k8s.io
---
# Source: helm-controller/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: helm-controller-installer
  namespace: default
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/component: objectscale-install-controller
    helm.sh/chart: helm-controller-0.69.0
    app.kubernetes.io/instance: helm-controller
    app.kubernetes.io/version: 0.69.0
    app.kubernetes.io/part-of: helm-controller
    release: helm-controller
    operator: objectscale-operator
    product: objectscale
    io.kompose.service: helm-controller
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      targetPort: 8080
  selector:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/component: objectscale-install-controller
---
# Source: helm-controller/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: objectscale-install-controller
  namespace: default
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/component: objectscale-install-controller
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: helm-controller
    app.kubernetes.io/version: 0.69.0
    app.kubernetes.io/part-of: helm-controller
    helm.sh/chart: helm-controller-0.69.0
    release: helm-controller
    operator: objectscale-operator
    product: objectscale
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: objectscale-manager
      app.kubernetes.io/component: objectscale-install-controller
  template:
    metadata:
      labels:
        app.kubernetes.io/name: objectscale-manager
        app.kubernetes.io/component: objectscale-install-controller
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/instance: helm-controller
        app.kubernetes.io/version: 0.69.0
        app.kubernetes.io/part-of: helm-controller
        helm.sh/chart: helm-controller-0.69.0
        release: helm-controller
        operator: objectscale-operator
        product: objectscale
    spec:
      serviceAccountName: install-controller
      containers:
        - name: objectscale-install-controller
          resources:
            limits:
              memory: 500M
            requests:
              memory: 250M
          image: objectscale/install-controller:0.69.0
          env:
            - name: OPERATOR_NAME
              value: objectscale-operator
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: REST_PORT
              value: "8080"
            - name: REST_CREDENTIALS
              valueFrom:
                secretKeyRef:
                  name: helm-controller-rest-credentials
                  key: credentials
            - name: WATCH_NAMESPACE
              value: ""
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
              name: http
---
# Source: helm-controller/templates/rest-credentials-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: helm-controller-rest-credentials
  namespace: default
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-delete-policy": "before-hook-creation"
type: Opaque
stringData:
  credentials: objectscale:VqeL3DGktg2Iy43Z:OAuYETJSXxU6yQW8
---
# Source: objectscale-portal/charts/objectscale-graphql/charts/helm-controller/templates/controller-rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: install-controller
  namespace: default
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/instance: objectscale-portal
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.68.2
    app.kubernetes.io/component: objectscale-operator
    app.kubernetes.io/part-of: objectscale-portal
    helm.sh/chart: helm-controller-0.68.2
    release: objectscale-portal
    operator: objectscale-operator
    product: objectscale
---
# Source: objectscale-portal/charts/objectscale-graphql/templates/objecscale-api-rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: objectscale-api
  namespace: default
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/instance: objectscale-portal
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.68.2
    app.kubernetes.io/component: objectscale-graphql
    app.kubernetes.io/part-of: objectscale-portal
    helm.sh/chart: objectscale-graphql-0.68.2
    release: objectscale-portal
    operator: objectscale-operator
    product: objectscale
---
# Source: objectscale-portal/charts/objectscale-graphql/charts/helm-controller/templates/rest-credentials-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: objectscale-portal-rest-credentials
  namespace: default
type: Opaque
stringData:
  credentials: objectscale:hWo8xJhYtk02RkiN:joBpIdFbtPn8CQXx
---
# Source: objectscale-portal/charts/rsyslog-client/templates/rsyslog-client-config.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#

apiVersion: v1
kind: ConfigMap
metadata:
  name: objectscale-portal-rsyslog-client-config
  # namespace is required for resources created by objectscale-vsphere
  namespace: default
  labels:
    app.kubernetes.io/name: objectscale-portal-rsyslog-client
    app.kubernetes.io/instance: objectscale-portal
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.54.0"
    app.kubernetes.io/part-of: objectscale-portal
    helm.sh/chart: rsyslog-client-3.7.0-1146.a692701d
    release: objectscale-portal
data:
  rsyslog.conf.template: |+
    #### MODULES ####

    # input module: file
    module(load="imfile")

    #### GLOBAL DIRECTIVES ####

    #### RULES ####

    # input log files
    input(type="imfile"
          File="/var/log/*.log"
          Tag="objectscale-portal"
          addMetadata="on"
          Ruleset="handle_multiple_logs"
          Facility="local0"
    )

    _STDOUT_CONF_

    ruleset(name="handle_multiple_logs") {
      # http://www.rsyslog.com/doc/v8-stable/rainerscript/functions.html
      # re_extract(expr, re, match, submatch, no-found)
      set $.suffix=re_extract($!metadata!filename, "(.*)/([^/]*)", 0, 2, "all.log");
      set $.pod_name=getenv("POD_NAME");
      call sendToLogserver
    }

    ruleset(name="handle_stdout_logs") {
      # http://www.rsyslog.com/doc/v8-stable/rainerscript/functions.html
      # re_extract(expr, re, match, submatch, no-found)
      set $.container_name=re_extract($!metadata!filename, "(.*)/([^/]*)/([^/]*)", 0, 2, "unknown_container");
      set $.log_name=re_extract($!metadata!filename, "(.*)/([^/]*)", 0, 2, "all.log");
      set $.suffix= $.container_name & ".stdout." & $.log_name;
      set $.pod_name=getenv("POD_NAME");
      call sendToLogserver
    }

    # output template
    template(name="FileFormat" type="string"
    string= "<%PRI%>%TIMESTAMP% %HOSTNAME% %syslogtag%__%$.pod_name%__%$.suffix%%msg:::sp-if-no-1st-sp%%msg:::drop-last-lf%\n"
            )

    ruleset(name="sendToLogserver") {
      action(type="omfwd"
          Target="_RSYSLOG_POD_NAME_.objectscale-manager-rsyslog.default.svc.cluster.local"
          Port="10514"
          Protocol="tcp"
          Template="FileFormat" )
    #    action.resumeRetryCount=100
    #    queue.type=linkedList queue.size=10000)
    }
  rsyslog_stdout.conf.template: |+
    input(type="imfile"
          File="_CONTAINER_DIR_/*.log"
          Tag="objectscale-portal"
          addMetadata="on"
          Ruleset="handle_stdout_logs"
          Facility="local0"
    )
---
# Source: objectscale-portal/templates/objectscale-portal-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: objectscale-portal
  namespace: default
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/instance: objectscale-portal
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.69.0
    app.kubernetes.io/component: objectscale-portal
    app.kubernetes.io/part-of: objectscale-portal
    helm.sh/chart: objectscale-portal-0.69.0
    release: objectscale-portal
    operator: objectscale-operator
    product: objectscale
data:
  upstream.conf: |
    upstream graphql {
        server objectscale-graphql:8080;
    }
  nginx.conf: |
    events {
        worker_connections  4096;  ## Default: 1024
    }

    http {
        include /etc/nginx/mime.types;
        include /conf/upstream.conf;
        map $request_method $decksname {
         default decks-support-store.default.svc.cluster.local;
        }
        map $request_method $decksport {
         default 7443;
        }
        server {
            resolver kube-dns.kube-system.svc.cluster.local;
            listen       4443;
            server_name  localhost;
            access_log /dev/stdout;
            error_log /dev/stdout;
            rewrite_log on;
            ssl on;
            ssl_protocols        TLSv1.2;
            ssl_ciphers          AES:!ADH;
            ssl_certificate /etc/nginx/ssl/tls.crt;
            ssl_certificate_key /etc/nginx/ssl/tls.key;
            location /graphql {
                proxy_pass http://graphql;
            }
            location /data {
                proxy_pass https://$decksname:$decksport;
            }
            location ~* /grafana/[a-z0-9]([-a-z0-9]*[a-z0-9])?/[a-z0-9]([-a-z0-9]*[a-z0-9])? {
                rewrite /grafana/([a-z0-9-]+)/([a-z0-9-]+)/(.*) /$3 break;
                rewrite /grafana/([a-z0-9-]+)/([a-z0-9-]+) / break;
                proxy_pass http://$2-grafana.$1.svc.cluster.local:3000;
            }
            location /platform {
                default_type application/json;
                return 200 '{"value":"Default"}';
            }
            location /features {
                return 200 '{"bucketsv2":false,"iam":false,"objectscaleDashboard":true,"objectscaleSystems":false,"replications":false,"uiLoggingLevel":"ERROR"}';
            }
            location / {
                root   /usr/share/nginx/html;
                index  index.html index.htm;
            }
        }
    }
  plugin.json: |
    {
        "manifestVersion": "1.0.0",
        "requirements": {
            "plugin.api.version": "1.0.0"
        },
        "configuration": {
            "nameKey": "plugin.name",
            "icon": {
                "name": "star"
            },
        },
        "objects": {
            "ClusterComputeResource": {
                "summary": {
                    "view": {
                        "uri": "index.html?view=summary",
                        "size": {
                            "widthSpan": 1,
                            "heightSpan": 2
                        }
                    }
                },
                "monitor": {
                    "views": [
                        {
                            "navigationId": "deos.monitor.health",
                            "labelKey": "cluster.monitor.list.health",
                            "uri": "index.html?view=health"
                        }
                    ]
                },
                "configure": {
                    "views": [
                        {
                            "navigationId": "deos.configure.dashboard",
                            "labelKey": "cluster.configure.list.dashboard",
                            "uri": "index.html?view=dashboard"
                        },
                        {
                            "navigationId": "deos.configure.accounts",
                            "labelKey": "cluster.configure.list.accounts",
                            "uri": "index.html?view=accounts"
                        },
                        {
                            "navigationId": "deos.configure.objectstores",
                            "labelKey": "cluster.configure.list.objectstores",
                            "uri": "index.html?view=objectstores"
                        },
                        {
                            "navigationId": "deos.configure.objectscalesystems",
                            "labelKey": "cluster.configure.list.objectscalesystems",
                            "uri": "index.html?view=objectscalesystems"
                        },
                        
                        {
                            "navigationId": "deos.configure.settings",
                            "labelKey": "cluster.configure.list.settings",
                            "uri": "index.html?view=settings"
                        }
                    ]
                }
            }
        },
        "definitions": {
            "iconSpriteSheet": {
                "uri": "assets/images/sprites.png",
                "definitions": {
                    "star": {
                        "x": 0,
                        "y": 96
                    }
                }
            },
            "i18n": {
                "locales": [
                    "en-US",
                    "de-DE",
                    "fr-FR"
                ],
                "definitions": {
                    "plugin.name": {
                        "en-US": "ObjectScaleSERVICE_ID",
                        "de-DE": "ObjectScaleSERVICE_ID",
                        "fr-FR": "ObjectScaleSERVICE_ID"
                    },
                    "cluster.monitor.list.health": {
                        "en-US": "HealthSERVICE_ID",
                        "de-DE": "GesundheitSERVICE_ID",
                        "fr-FR": "santÃ©SERVICE_ID"
                    },
                    "cluster.configure.list.objectstores": {
                        "en-US": "Object StoresSERVICE_ID",
                        "de-DE": "Object StoresSERVICE_ID",
                        "fr-FR": "Object StoresSERVICE_ID"
                    },
                    "cluster.configure.list.settings": {
                        "en-US": "SettingsSERVICE_ID",
                        "de-DE": "SettingsSERVICE_ID",
                        "fr-FR": "SettingsSERVICE_ID"
                    },
                    "cluster.configure.list.dashboard": {
                        "en-US": "DashboardSERVICE_ID",
                        "de-DE": "DashboardSERVICE_ID",
                        "fr-FR": "DashboardSERVICE_ID"
                    },
                    "cluster.configure.list.accounts": {
                        "en-US": "AccountsSERVICE_ID",
                        "de-DE": "AccountsSERVICE_ID",
                        "fr-FR": "AccountsSERVICE_ID"
                    },
                    "cluster.configure.list.objectscalesystems": {
                        "en-US": "Objectscale SystemsSERVICE_ID",
                        "de-DE": "Objectscale SystemsSERVICE_ID",
                        "fr-FR": "Objectscale SystemsSERVICE_ID"
                    }
                }
            }
        }
    }
---
# Source: objectscale-portal/charts/objectscale-graphql/charts/helm-controller/templates/controller-rbac.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: default-install-controller
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/instance: objectscale-portal
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.68.2
    app.kubernetes.io/component: objectscale-operator
    app.kubernetes.io/part-of: objectscale-portal
    helm.sh/chart: helm-controller-0.68.2
    release: objectscale-portal
    operator: objectscale-operator
    product: objectscale
rules:
  - apiGroups:
      - rbac.authorization.k8s.io
    resources:
      - roles
      - rolebindings
      - clusterroles
      - clusterrolebindings
    verbs:
      - '*'
  - apiGroups:
      - ecs.dellemc.com
    resources:
      - "*"
    verbs:
      - "*"
  - apiGroups:
      - decks.ecs.dellemc.com
    resources:
      - "*"
    verbs:
      - "*"
  - apiGroups:
      - kahm.emcecs.github.com
    resources:
      - "*"
    verbs:
      - "*"
  - apiGroups:
      - storage.k8s.io
    resources:
      - storageclasses
      - storageclasslists
    verbs:
      - get
      - list
  - apiGroups:
      - ""
    resources:
      - pods
      - services
      - endpoints
      - persistentvolumeclaims
      - persistentvolumes
      - events
      - configmaps
      - secrets
      - serviceaccounts
    verbs:
      - "*"
  - apiGroups:
      - batch
    resources:
      - jobs
      - cronjobs
    verbs:
      - "*"
  - apiGroups:
      - certificates.k8s.io
    resources:
      - certificatesigningrequests
    verbs:
      - "*"
  - apiGroups:
      - certificates.k8s.io
    resources:
      - certificatesigningrequests/approval
    verbs:
      - update
  - apiGroups:
      - policy
    resources:
      - poddisruptionbudgets
    verbs:
      - "*"
  - apiGroups:
      - apps
    resources:
      - deployments
      - daemonsets
      - replicasets
      - statefulsets
    verbs:
      - "*"
  - apiGroups:
      - zookeeper.pravega.io
    resources:
      - "*"
    verbs:
      - "*"
  - apiGroups:
      - app.k8s.io
    resources:
      - "*"
    verbs:
      - "*"
  - apiGroups:
      - atlas.dellemc.com
    resources:
      - "*"
    verbs:
      - "*"
  - apiGroups:
      - influxdata.com
    resources:
      - influxdbs
    verbs:
      - "*"
  - apiGroups:
      - ""
    resources:
      - nodes
      - clusterroles
    verbs:
      - "*"
  - apiGroups:
    - apiextensions.k8s.io
    resources:
    - customresourcedefinitions
    verbs:
    - '*'
  - apiGroups:
    - ""
    resources:
    - namespaces
    verbs:
    - list
    - get
  - apiGroups:
      - stateful.ecs.dellemc.com
    resources:
      - "*"
    verbs:
      - "*"
  - apiGroups:
    - "admissionregistration.k8s.io"
    resources:
    - "mutatingwebhookconfigurations"
    - "validatingwebhookconfigurations"
    verbs:
      - "*"
  - apiGroups:
      - db.ecs.dellemc.com
    resources:
      - "*"
    verbs:
      - "*"
---
# Source: objectscale-portal/charts/objectscale-graphql/templates/object-store-admin-role.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: default-object-store-admin
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/instance: objectscale-portal
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.68.2
    app.kubernetes.io/component: objectscale-graphql
    app.kubernetes.io/part-of: objectscale-portal
    helm.sh/chart: objectscale-graphql-0.68.2
    release: objectscale-portal
    operator: objectscale-operator
    product: objectscale
rules:
- apiGroups:
  - ecs.dellemc.com
  resources:
  - ecsclusters
  verbs:
  - "*"
- apiGroups:
  - app.k8s.io
  resources:
  - "*"
  verbs:
  - "*"
- apiGroups:
  - influxdata.com
  resources:
  - influxdbs
  verbs:
  - "*"
- apiGroups:
    - ""
  resources:
    - pods
    - persistentvolumeclaims
    - secrets
    - configmaps
  verbs:
    - "*"
- apiGroups:
    - batch
  resources:
    - jobs
    - cronjobs
  verbs:
    - "*"
- apiGroups:
    - appplatform.wcp.vmware.com
  resources:
    - storagepolicies
  verbs:
    - get
    - list
---
# Source: objectscale-portal/charts/objectscale-graphql/templates/object-store-monitor-role.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: default-object-store-monitor
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/instance: objectscale-portal
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.68.2
    app.kubernetes.io/component: objectscale-graphql
    app.kubernetes.io/part-of: objectscale-portal
    helm.sh/chart: objectscale-graphql-0.68.2
    release: objectscale-portal
    operator: objectscale-operator
    product: objectscale
rules:
- apiGroups:
  - ecs.dellemc.com
  resources:
  - ecsclusters
  verbs:
  - get
  - list
  - watch
- apiGroups:
    - ecs.dellemc.com
  resources:
    - networkconnections
  verbs:
    - get
    - watch
    - list
- apiGroups:
  - ""
  resources:
  - pods
  - services
  - endpoints
  - persistentvolumeclaims
  - persistentvolumes
  - events
  - configmaps
  - secrets
  - resourcequotas
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - batch
  resources:
  - jobs
  - cronjobs
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - policy
  resources:
  - poddisruptionbudgets
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - apps
  resources:
  - deployments
  - daemonsets
  - replicasets
  - statefulsets
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - zookeeper.pravega.io
  resources:
  - "*"
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - app.k8s.io
  resources:
  - "*"
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - atlas.dellemc.com
  resources:
  - "*"
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - influxdata.com
  resources:
  - influxdbs
  verbs:
  - "*"
- apiGroups:
    - metrics.k8s.io
  resources:
    - "*"
  verbs:
    - get
    - watch
    - list
- apiGroups:
    - appplatform.wcp.vmware.com
  resources:
    - storagepolicies
  verbs:
    - get
    - list
- apiGroups:
    - appplatform.wcp.vmware.com
  resources:
    - storagepolicies
  verbs:
    - get
    - list
---
# Source: objectscale-portal/charts/objectscale-graphql/templates/objectscale-admin-cluster-role.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: default-objectscale-admin
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/instance: objectscale-portal
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.68.2
    app.kubernetes.io/component: graphql-cluster-scoped-resources
    app.kubernetes.io/part-of: objectscale-portal
    helm.sh/chart: objectscale-graphql-0.68.2
    release: objectscale-portal
    operator: objectscale-operator
    product: objectscale
rules:
  - apiGroups:
      - cns.vmware.com
    resources:
      - storagepools
    verbs:
      - get
      - list
  - apiGroups:
      - storage.k8s.io
    resources:
      - storageclasses
      - storageclasslists
    verbs:
      - get
      - list
  - apiGroups:
      - certificates.k8s.io
    resources:
      - certificatesigningrequests
    verbs:
      - "*"
  - apiGroups:
      - certificates.k8s.io
    resources:
      - certificatesigningrequests/approval
    verbs:
      - update
  - apiGroups:
      - certificates.k8s.io
    resourceNames:
      - kubernetes.io/*
    resources:
      - signers
    verbs:
      - approve
  - apiGroups:
      - rbac.authorization.k8s.io
    resources:
      - clusterroles
      - clusterrolebindings
    verbs:
      - "*"
  - apiGroups:
      - ""
    resources:
      - nodes
      - clusterroles
    verbs:
      - "*"
  - apiGroups:
      - ""
    resources:
      - namespaces
      - serviceaccounts
      - secrets
      - resourcequotas
    verbs:
      - get
      - list
      - watch
---
# Source: objectscale-portal/charts/objectscale-graphql/charts/helm-controller/templates/controller-rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: default-install-controller
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/instance: objectscale-portal
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.68.2
    app.kubernetes.io/component: helm-controller
    app.kubernetes.io/part-of: objectscale-portal
    helm.sh/chart: helm-controller-0.68.2
    release: objectscale-portal
    operator: objectscale-operator
    product: objectscale
subjects:
  - kind: ServiceAccount
    name: install-controller
    namespace: default
roleRef:
  kind: ClusterRole
  name: default-install-controller
  apiGroup: rbac.authorization.k8s.io
---
# Source: objectscale-portal/templates/objectscale-api-role-bindings.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: default-objectscale-api-as-admin
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/instance: objectscale-portal
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.69.0
    app.kubernetes.io/component: objectscale-graphql
    app.kubernetes.io/part-of: objectscale-portal
    helm.sh/chart: objectscale-portal-0.69.0
    release: objectscale-portal
    operator: objectscale-operator
    product: objectscale
subjects:
  - kind: ServiceAccount
    name: objectscale-api
    namespace: default
roleRef:
  kind: ClusterRole
  name: default-objectscale-admin
  apiGroup: rbac.authorization.k8s.io
---
# Source: objectscale-portal/charts/objectscale-graphql/templates/objecscale-api-rbac.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: default-objectscale-api
  namespace: default
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/instance: objectscale-portal
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.68.2
    app.kubernetes.io/component: objectscale-graphql
    app.kubernetes.io/part-of: objectscale-portal
    helm.sh/chart: objectscale-graphql-0.68.2
    release: objectscale-portal
    operator: objectscale-operator
    product: objectscale
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
    - "*"
---
# Source: objectscale-portal/charts/objectscale-graphql/templates/objectscale-admin-role.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: default-objectscale-admin
  namespace: default
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/instance: objectscale-portal
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.68.2
    app.kubernetes.io/component: objectscale-graphql
    app.kubernetes.io/part-of: objectscale-portal
    helm.sh/chart: objectscale-graphql-0.68.2
    release: objectscale-portal
    operator: objectscale-operator
    product: objectscale
rules:
- apiGroups:
    - decks.ecs.dellemc.com
  resources:
    - "*"
  verbs:
    - "*"
- apiGroups:
    - ecs.dellemc.com
  resources:
    - "*"
  verbs:
    - "*"
- apiGroups:
    - kahm.emcecs.github.com
  resources:
    - "*"
  verbs:
    - "*"
- apiGroups:
    - ""
  resources:
    - secrets
    - pods
    - services
    - endpoints
    - persistentvolumeclaims
    - persistentvolumes
    - events
    - configmaps
  verbs:
    - "*"
- apiGroups:
    - batch
  resources:
    - jobs
    - cronjobs
  verbs:
    - "*"
- apiGroups:
    - policy
  resources:
    - poddisruptionbudgets
  verbs:
    - get
    - list
    - watch
- apiGroups:
    - apps
  resources:
    - deployments
    - daemonsets
    - replicasets
    - statefulsets
  verbs:
    - "*"
- apiGroups:
    - app.k8s.io
  resources:
    - "*"
  verbs:
    - "*"
- apiGroups:
    - metrics.k8s.io
  resources:
    - "*"
  verbs:
    - get
    - watch
    - list
- apiGroups:
    - appplatform.wcp.vmware.com
  resources:
    - storagepolicies
  verbs:
    - get
    - list
---
# Source: objectscale-portal/charts/rsyslog-client/templates/rbac_role.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
#  Role for rsyslog-client to find instance of rsyslog service
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app.kubernetes.io/name: objectscale-portal-rsyslog-client
    app.kubernetes.io/instance: objectscale-portal
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.54.0"
    app.kubernetes.io/part-of: objectscale-portal
    helm.sh/chart: rsyslog-client-3.7.0-1146.a692701d
    release: objectscale-portal
  name: "objectscale-portal-rsyslog-client"
  namespace: "default"
rules:
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["list"]
---
# Source: objectscale-portal/charts/objectscale-graphql/templates/objecscale-api-rbac.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: default-objectscale-api
  namespace: default
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/instance: objectscale-portal
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.68.2
    app.kubernetes.io/component: objectscale-graphql
    app.kubernetes.io/part-of: objectscale-portal
    helm.sh/chart: objectscale-graphql-0.68.2
    release: objectscale-portal
    operator: objectscale-operator
    product: objectscale
subjects:
- kind: ServiceAccount
  name: objectscale-api
  namespace: default
roleRef:
  kind: Role
  name: default-objectscale-api
  apiGroup: rbac.authorization.k8s.io
---
# Source: objectscale-portal/charts/rsyslog-client/templates/rbac_rolebinding.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
#  RoleBinding for rsyslog-client to find instance of rsyslog service
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: "objectscale-portal-rsyslog-client"
  namespace: "default"
  labels:
    app.kubernetes.io/name: objectscale-portal-rsyslog-client
    app.kubernetes.io/instance: objectscale-portal
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.54.0"
    app.kubernetes.io/part-of: objectscale-portal
    helm.sh/chart: rsyslog-client-3.7.0-1146.a692701d
    release: objectscale-portal
subjects:
  - apiGroup: rbac.authorization.k8s.io
    kind: Group
    name: system:serviceaccounts
roleRef:
  kind: Role
  apiGroup: rbac.authorization.k8s.io
  name: "objectscale-portal-rsyslog-client"
---
# Source: objectscale-portal/templates/objectscale-api-role-bindings.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: default-objectscale-api-as-admin
  namespace: default
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/instance: objectscale-portal
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.69.0
    app.kubernetes.io/component: objectscale-graphql
    app.kubernetes.io/part-of: objectscale-portal
    helm.sh/chart: objectscale-portal-0.69.0
    release: objectscale-portal
    operator: objectscale-operator
    product: objectscale
subjects:
  - kind: ServiceAccount
    name: objectscale-api
    namespace: default
roleRef:
  kind: Role
  name: default-objectscale-admin
  apiGroup: rbac.authorization.k8s.io
---
# Source: objectscale-portal/charts/objectscale-graphql/charts/helm-controller/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: objectscale-portal-installer
  namespace: default
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/component: objectscale-install-controller
    helm.sh/chart: helm-controller-0.68.2
    app.kubernetes.io/instance: objectscale-portal
    app.kubernetes.io/version: 0.68.2
    app.kubernetes.io/part-of: objectscale-portal
    release: objectscale-portal
    operator: objectscale-operator
    product: objectscale
    io.kompose.service: helm-controller
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      targetPort: 8080
  selector:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/component: objectscale-install-controller
---
# Source: objectscale-portal/charts/objectscale-graphql/templates/graphql-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: objectscale-graphql
  namespace: default
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/instance: objectscale-portal
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.68.2
    app.kubernetes.io/component: objectscale-graphql
    app.kubernetes.io/part-of: objectscale-portal
    helm.sh/chart: objectscale-graphql-0.68.2
    release: objectscale-portal
    operator: objectscale-operator
    product: objectscale
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/component: objectscale-graphql
  ports:
    - port: 8080
      name: http
---
# Source: objectscale-portal/templates/objectscale-portal-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: objectscale-portal
  namespace: default
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/instance: objectscale-portal
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.69.0
    app.kubernetes.io/component: objectscale-portal
    app.kubernetes.io/part-of: objectscale-portal
    helm.sh/chart: objectscale-portal-0.69.0
    release: objectscale-portal
    operator: objectscale-operator
    product: objectscale
spec:
  type: LoadBalancer
  selector:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/component: objectscale-portal
  ports: 
      - name: https
        port: 4443
        targetPort: 4443
---
# Source: objectscale-portal/charts/objectscale-graphql/charts/helm-controller/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: objectscale-install-controller
  namespace: default
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/component: objectscale-install-controller
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: objectscale-portal
    app.kubernetes.io/version: 0.68.2
    app.kubernetes.io/part-of: objectscale-portal
    helm.sh/chart: helm-controller-0.68.2
    release: objectscale-portal
    operator: objectscale-operator
    product: objectscale
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: objectscale-manager
      app.kubernetes.io/component: objectscale-install-controller
  template:
    metadata:
      labels:
        app.kubernetes.io/name: objectscale-manager
        app.kubernetes.io/component: objectscale-install-controller
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/instance: objectscale-portal
        app.kubernetes.io/version: 0.68.2
        app.kubernetes.io/part-of: objectscale-portal
        helm.sh/chart: helm-controller-0.68.2
        release: objectscale-portal
        operator: objectscale-operator
        product: objectscale
    spec:
      serviceAccountName: install-controller
      containers:
        - name: objectscale-install-controller
          resources:
            limits:
              memory: 500M
            requests:
              memory: 250M
          image: emccorp/install-controller:0.68.2
          env:
            - name: OPERATOR_NAME
              value: objectscale-operator
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: REST_PORT
              value: "8080"
            - name: REST_CREDENTIALS
              valueFrom:
                secretKeyRef:
                  name: objectscale-portal-rest-credentials
                  key: credentials
            - name: WATCH_NAMESPACE
              value: ""
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
              name: http
---
# Source: objectscale-portal/charts/objectscale-graphql/templates/graphql-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: objectscale-graphql
  namespace: default
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/instance: objectscale-portal
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.68.2
    app.kubernetes.io/component: objectscale-graphql
    app.kubernetes.io/part-of: objectscale-portal
    helm.sh/chart: objectscale-graphql-0.68.2
    release: objectscale-portal
    operator: objectscale-operator
    product: objectscale
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: objectscale-manager
      app.kubernetes.io/component: objectscale-graphql
  template:
    metadata:
      labels:
        app.kubernetes.io/name: objectscale-manager
        app.kubernetes.io/component: objectscale-graphql
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/instance: objectscale-portal
        app.kubernetes.io/part-of: objectscale-portal
        app.kubernetes.io/version: 0.68.2
        helm.sh/chart: objectscale-graphql-0.68.2
        release: objectscale-portal
        operator: objectscale-operator
        product: objectscale
    spec:
      serviceAccountName: objectscale-api
      containers:
      - name: objectscale-graphql
        image: emccorp/ecs-flex-graphql:0.68.2
        imagePullPolicy: IfNotPresent
        env:
        - name: OBJSTORE_AVAILABLE_VERSIONS
          value: "[\"0.68.2\"]"
        - name: GRAPHQL_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: WATCH_NAMESPACE
          value: ""
        - name: GLOBAL_REGISTRY
          value: emccorp
        - name: LICENSE_CHART_VERSION
          value: 2.68.2
        - name: SUPPORTASSIST_CHART_VERSION
          value: 2.68.2
        - name: SRSGATEWAY_CHART_VERSION
          value: 1.2.0
        - name: OPERATOR_NAME
          value: objectscale-operator
        - name: MANAGER_RELEASE_NAME
          value: objectscale-manager
        - name: STORAGE_CLASS_NAME
          value: dellemc-objectscale-highly-available
        - name: LOG_DIRECTION
          value: stdout
        - name: HELM_CONTROLLER_ENDPOINT
          value: http://objectscale-portal-installer
        - name: HELM_CONTROLLER_REST_CREDENTIALS
          valueFrom:
            secretKeyRef:
              name: objectscale-portal-rest-credentials
              key: credentials
      
      - name: rsyslog
        image: "emccorp/rsyslog:3.7.0.0-1137.4d29996c"
        imagePullPolicy: "IfNotPresent"
        env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_UID
            valueFrom:
              fieldRef:
                fieldPath: metadata.uid
          - name: POD_NAMESPACE
            value: "default"
          - name: LOG_STDOUT_ENABLED
            value: ""
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: RSYSLOG_CLIENT
            value: "true"
          - name: RSYSLOG_SVC_NAME
            value: objectscale-manager-rsyslog
          - name: RSYSLOG_SVC_NAMESPACE
            value: default
        volumeMounts:
          - mountPath: /etc/rsyslog
            name: rsyslog-config
      volumes:
      
      - name: rsyslog-config
        configMap:
          name: objectscale-portal-rsyslog-client-config
---
# Source: objectscale-portal/templates/objectscale-portal-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: objectscale-portal
  namespace: default
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/instance: objectscale-portal
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.69.0
    app.kubernetes.io/component: objectscale-portal
    app.kubernetes.io/part-of: objectscale-portal
    helm.sh/chart: objectscale-portal-0.69.0
    release: objectscale-portal
    operator: objectscale-operator
    product: objectscale
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: objectscale-manager
      app.kubernetes.io/component: objectscale-portal
  template:
    metadata:
      labels:
        app.kubernetes.io/name: objectscale-manager
        app.kubernetes.io/component: objectscale-portal
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/instance: objectscale-portal
        app.kubernetes.io/part-of: objectscale-portal
        app.kubernetes.io/version: 0.69.0
        helm.sh/chart: objectscale-portal-0.69.0
        release: objectscale-portal
        operator: objectscale-operator
        product: objectscale
    spec:
      volumes:
        - name: config-volume
          configMap:
            name: objectscale-portal
      containers:
        - name: objectscale-portal
          image: emccorp/ecs-flex-vsphere-plugin:0.69.0
          env:
            - name: OPERATOR_NAME
              value: objectscale-operator
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: config-volume
              mountPath: /usr/share/nginx/html/plugin.json
              subPath: plugin.json
            - name: config-volume
              mountPath: /conf/upstream.conf
              subPath: upstream.conf
            - name: config-volume
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
---
# Source: objectscale-iam/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: objectscale-iam
  namespace: default
  labels:
    helm.sh/chart: objectscale-iam-0.69.0
    app.kubernetes.io/name: objectscale-iam
    app.kubernetes.io/instance: objectscale-iam
    app.kubernetes.io/namespace: "default"
    objectscale.dellemc.com/logging-inject: "true"
    objectscale.dellemc.com/logging-release-name: "objectscale-iam"
    product: objectscale
    release: objectscale-iam
    app.kubernetes.io/version: "0.69.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    objectscale.dellemc.com/federationRegistration: "ObjectScale"
spec:
  type: LoadBalancer
  ports:
    - port: 9400
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: objectscale-iam
    app.kubernetes.io/instance: objectscale-iam
    app.kubernetes.io/namespace: "default"
    objectscale.dellemc.com/logging-inject: "true"
    objectscale.dellemc.com/logging-release-name: "objectscale-iam"
    product: objectscale
    release: objectscale-iam
---
# Source: objectscale-iam/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: objectscale-iam
  labels:
    helm.sh/chart: objectscale-iam-0.69.0
    app.kubernetes.io/name: objectscale-iam
    app.kubernetes.io/instance: objectscale-iam
    app.kubernetes.io/namespace: "default"
    objectscale.dellemc.com/logging-inject: "true"
    objectscale.dellemc.com/logging-release-name: "objectscale-iam"
    product: objectscale
    release: objectscale-iam
    app.kubernetes.io/version: "0.69.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: objectscale-iam
      app.kubernetes.io/instance: objectscale-iam
      app.kubernetes.io/namespace: "default"
      objectscale.dellemc.com/logging-inject: "true"
      objectscale.dellemc.com/logging-release-name: "objectscale-iam"
      product: objectscale
      release: objectscale-iam
  template:
    metadata:
      labels:
        app.kubernetes.io/name: objectscale-iam
        app.kubernetes.io/instance: objectscale-iam
        app.kubernetes.io/namespace: "default"
        objectscale.dellemc.com/logging-inject: "true"
        objectscale.dellemc.com/logging-release-name: "objectscale-iam"
        product: objectscale
        release: objectscale-iam
    spec:
      containers:
      - name: iam
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: "atlas,flex,dns"
        - name: ATLAS_SERVICE_HOSTNAME
          value: objectscale-iam-atlas-client
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: MY_POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: MY_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        image: emccorp/iamsvc:0.69.0
        imagePullPolicy: IfNotPresent
        ports:
          - name: http
            containerPort: 9401 
            protocol: TCP
        livenessProbe:
            httpGet:
                path: /iamhealthcheck
                port: http
            failureThreshold: 3
            periodSeconds: 60
            initialDelaySeconds: 60
        readinessProbe:
            httpGet:
                path: /iamhealthcheck/atlas
                port: http
            failureThreshold: 3
            periodSeconds: 60
            initialDelaySeconds: 60
---
# Source: objectscale-iam/templates/atlas_v1beta1_iamcluster.yaml
apiVersion: atlas.dellemc.com/v1beta1
kind: AtlasCluster
metadata:
  name: objectscale-iam-atlas
spec:
  replicas: 3
  image:
    repository:  emccorp/atlas
    tag: 1.1.3
    pullPolicy: IfNotPresent
  persistence:
    spec:
      resources:
        requests:
          storage: 10Gi
---
# Source: statefuldaemonset-operator/templates/service_account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: statefuldaemonset-operator
  labels:
    app.kubernetes.io/name: statefuldaemonset-operator
    app.kubernetes.io/instance: statefuldaemonset-operator
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.69.0"
    app.kubernetes.io/part-of: statefuldaemonset-operator
    helm.sh/chart: statefuldaemonset-operator-0.69.0
    release: statefuldaemonset-operator
---
# Source: statefuldaemonset-operator/templates/leader_election_role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: statefuldaemonset-operator-default-leader-election-role
  labels:
    app.kubernetes.io/name: statefuldaemonset-operator
    app.kubernetes.io/instance: statefuldaemonset-operator
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.69.0"
    app.kubernetes.io/part-of: statefuldaemonset-operator
    helm.sh/chart: statefuldaemonset-operator-0.69.0
    release: statefuldaemonset-operator
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - configmaps/status
  verbs:
  - get
  - update
  - patch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
---
# Source: statefuldaemonset-operator/templates/node_role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: statefuldaemonset-operator-default-node-role
  labels:
    app.kubernetes.io/name: statefuldaemonset-operator
    app.kubernetes.io/instance: statefuldaemonset-operator
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.69.0"
    app.kubernetes.io/part-of: statefuldaemonset-operator
    helm.sh/chart: statefuldaemonset-operator-0.69.0
    release: statefuldaemonset-operator
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - get
  - list
  - watch
---
# Source: statefuldaemonset-operator/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: statefuldaemonset-operator-default-statefuldaemonset-operator-role
  labels:
    app.kubernetes.io/name: statefuldaemonset-operator
    app.kubernetes.io/instance: statefuldaemonset-operator
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.69.0"
    app.kubernetes.io/part-of: statefuldaemonset-operator
    helm.sh/chart: statefuldaemonset-operator-0.69.0
    release: statefuldaemonset-operator
rules:
- apiGroups:
  - apps
  resources:
  - statefulsets
  - statefulsets/finalizers
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - stateful.ecs.dellemc.com
  resources:
  - statefuldaemonsets
  - statefuldaemonsets/finalizers
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - stateful.ecs.dellemc.com
  resources:
  - statefuldaemonsets/status
  verbs:
  - get
  - patch
  - update
---
# Source: statefuldaemonset-operator/templates/statefuldaemonset_editor_role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: statefuldaemonset-operator-default-statefuldaemonset-editor-role
  labels:
    app.kubernetes.io/name: statefuldaemonset-operator
    app.kubernetes.io/instance: statefuldaemonset-operator
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.69.0"
    app.kubernetes.io/part-of: statefuldaemonset-operator
    helm.sh/chart: statefuldaemonset-operator-0.69.0
    release: statefuldaemonset-operator
rules:
- apiGroups:
  - stateful.ecs.dellemc.com
  resources:
  - statefuldaemonsets
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - stateful.ecs.dellemc.com
  resources:
  - statefuldaemonsets/status
  verbs:
  - get
---
# Source: statefuldaemonset-operator/templates/statefuldaemonset_viewer_role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: statefuldaemonset-operator-default-statefuldaemonset-viewer-role
  labels:
    app.kubernetes.io/name: statefuldaemonset-operator
    app.kubernetes.io/instance: statefuldaemonset-operator
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.69.0"
    app.kubernetes.io/part-of: statefuldaemonset-operator
    helm.sh/chart: statefuldaemonset-operator-0.69.0
    release: statefuldaemonset-operator
rules:
- apiGroups:
  - stateful.ecs.dellemc.com
  resources:
  - statefuldaemonsets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - stateful.ecs.dellemc.com
  resources:
  - statefuldaemonsets/status
  verbs:
  - get
---
# Source: statefuldaemonset-operator/templates/leader_election_role_binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: statefuldaemonset-operator-default-leader-election-role-binding
  labels:
    app.kubernetes.io/name: statefuldaemonset-operator
    app.kubernetes.io/instance: statefuldaemonset-operator
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.69.0"
    app.kubernetes.io/part-of: statefuldaemonset-operator
    helm.sh/chart: statefuldaemonset-operator-0.69.0
    release: statefuldaemonset-operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: statefuldaemonset-operator-default-leader-election-role
subjects:
- kind: ServiceAccount
  name: statefuldaemonset-operator
  namespace: default
---
# Source: statefuldaemonset-operator/templates/node_role_binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: statefuldaemonset-operator-default-node-role-binding
  labels:
    app.kubernetes.io/name: statefuldaemonset-operator
    app.kubernetes.io/instance: statefuldaemonset-operator
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.69.0"
    app.kubernetes.io/part-of: statefuldaemonset-operator
    helm.sh/chart: statefuldaemonset-operator-0.69.0
    release: statefuldaemonset-operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: statefuldaemonset-operator-default-node-role
subjects:
- kind: ServiceAccount
  name: statefuldaemonset-operator
  namespace: default
---
# Source: statefuldaemonset-operator/templates/role_binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: statefuldaemonset-operator-default-statefuldaemonset-operator-binding
  labels:
    app.kubernetes.io/name: statefuldaemonset-operator
    app.kubernetes.io/instance: statefuldaemonset-operator
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.69.0"
    app.kubernetes.io/part-of: statefuldaemonset-operator
    helm.sh/chart: statefuldaemonset-operator-0.69.0
    release: statefuldaemonset-operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: statefuldaemonset-operator-default-statefuldaemonset-operator-role
subjects:
- kind: ServiceAccount
  name: statefuldaemonset-operator
  namespace: default
---
# Source: statefuldaemonset-operator/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: statefuldaemonset-operator
  namespace: default
  labels:
    app.kubernetes.io/name: statefuldaemonset-operator
    app.kubernetes.io/instance: statefuldaemonset-operator
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.69.0"
    app.kubernetes.io/part-of: statefuldaemonset-operator
    helm.sh/chart: statefuldaemonset-operator-0.69.0
    release: statefuldaemonset-operator
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: statefuldaemonset-operator
      app.kubernetes.io/instance: statefuldaemonset-operator
  template:
    metadata:
      labels:
        app.kubernetes.io/name: statefuldaemonset-operator
        app.kubernetes.io/instance: statefuldaemonset-operator
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: "0.69.0"
        app.kubernetes.io/part-of: statefuldaemonset-operator
        helm.sh/chart: statefuldaemonset-operator-0.69.0
        release: statefuldaemonset-operator
    spec:
      serviceAccountName: statefuldaemonset-operator
      securityContext:
        {}
      containers:
        - name: statefuldaemonset-operator
          image: "emccorp/statefuldaemonset-operator:"
          imagePullPolicy: IfNotPresent
          securityContext:
            {}
          resources:
            requests:
              memory: 200Mi
              ephemeral-storage: 650Mi
            limits:
              memory: 200Mi
              ephemeral-storage: 650Mi
          command: ["bash"]
          args: ["-c", "echo /crash-dump/core-%e > /proc/sys/kernel/core_pattern; ulimit -c unlimited; GOTRACEBACK=crash ./manager --enable-leader-election"]
          env:
            - name: WATCH_NAMESPACE
              value: ""
          volumeMounts:
          - mountPath: /crash-dump
            name: crash-dump
      volumes:
      - name: crash-dump
        emptyDir: {}
---
# Source: statefuldaemonset-operator/templates/leader_election_role.yaml
# permissions to do leader election.
---
# Source: statefuldaemonset-operator/templates/statefuldaemonset_editor_role.yaml
# permissions for end users to edit statefuldaemonsets.
---
# Source: statefuldaemonset-operator/templates/statefuldaemonset_viewer_role.yaml
# permissions for end users to view statefuldaemonsets.
---
# Source: influxdb-operator/templates/service_account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: influxdb-operator
  labels:
    app.kubernetes.io/name: influxdb-operator
    app.kubernetes.io/instance: influxdb-operator
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.69.0"
    app.kubernetes.io/part-of: influxdb-operator
    helm.sh/chart: influxdb-operator-0.69.0
    release: influxdb-operator
---
# Source: influxdb-operator/templates/influxdb_editor_role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: influxdb-operator-default-influxdb-editor-role
  labels:
    app.kubernetes.io/name: influxdb-operator
    app.kubernetes.io/instance: influxdb-operator
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.69.0"
    app.kubernetes.io/part-of: influxdb-operator
    helm.sh/chart: influxdb-operator-0.69.0
    release: influxdb-operator
rules:
- apiGroups:
  - db.ecs.dellemc.com
  resources:
  - influxdbs
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - db.ecs.dellemc.com
  resources:
  - influxdbs/status
  verbs:
  - get
---
# Source: influxdb-operator/templates/influxdb_viewer_role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: influxdb-operator-default-influxdb-viewer-role
  labels:
    app.kubernetes.io/name: influxdb-operator
    app.kubernetes.io/instance: influxdb-operator
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.69.0"
    app.kubernetes.io/part-of: influxdb-operator
    helm.sh/chart: influxdb-operator-0.69.0
    release: influxdb-operator
rules:
- apiGroups:
  - db.ecs.dellemc.com
  resources:
  - influxdbs
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - db.ecs.dellemc.com
  resources:
  - influxdbs/status
  verbs:
  - get
---
# Source: influxdb-operator/templates/leader_election_role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: influxdb-operator-default-leader-election-role
  labels:
    app.kubernetes.io/name: influxdb-operator
    app.kubernetes.io/instance: influxdb-operator
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.69.0"
    app.kubernetes.io/part-of: influxdb-operator
    helm.sh/chart: influxdb-operator-0.69.0
    release: influxdb-operator
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - configmaps/status
  verbs:
  - get
  - update
  - patch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
---
# Source: influxdb-operator/templates/node_role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: influxdb-operator-default-node-role
  labels:
    app.kubernetes.io/name: influxdb-operator
    app.kubernetes.io/instance: influxdb-operator
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.69.0"
    app.kubernetes.io/part-of: influxdb-operator
    helm.sh/chart: influxdb-operator-0.69.0
    release: influxdb-operator
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - get
  - list
  - watch
---
# Source: influxdb-operator/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: influxdb-operator-default-influxdb-operator-role
  labels:
    app.kubernetes.io/name: influxdb-operator
    app.kubernetes.io/instance: influxdb-operator
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.69.0"
    app.kubernetes.io/part-of: influxdb-operator
    helm.sh/chart: influxdb-operator-0.69.0
    release: influxdb-operator
rules:
- apiGroups:
  - apps
  resources:
  - statefulsets
  - statefulsets/finalizers
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - db.ecs.dellemc.com
  resources:
  - influxdbs
  - influxdbs/finalizers
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - db.ecs.dellemc.com
  resources:
  - influxdbs/status
  verbs:
  - get
  - patch
  - update
---
# Source: influxdb-operator/templates/leader_election_role_binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: influxdb-operator-default-leader-election-role-binding
  labels:
    app.kubernetes.io/name: influxdb-operator
    app.kubernetes.io/instance: influxdb-operator
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.69.0"
    app.kubernetes.io/part-of: influxdb-operator
    helm.sh/chart: influxdb-operator-0.69.0
    release: influxdb-operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: influxdb-operator-default-leader-election-role
subjects:
- kind: ServiceAccount
  name: influxdb-operator
  namespace: default
---
# Source: influxdb-operator/templates/node_role_binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: influxdb-operator-default-node-role-binding
  labels:
    app.kubernetes.io/name: influxdb-operator
    app.kubernetes.io/instance: influxdb-operator
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.69.0"
    app.kubernetes.io/part-of: influxdb-operator
    helm.sh/chart: influxdb-operator-0.69.0
    release: influxdb-operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: influxdb-operator-default-node-role
subjects:
- kind: ServiceAccount
  name: influxdb-operator
  namespace: default
---
# Source: influxdb-operator/templates/role_binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: influxdb-operator-default-influxdb-operator-binding
  labels:
    app.kubernetes.io/name: influxdb-operator
    app.kubernetes.io/instance: influxdb-operator
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.69.0"
    app.kubernetes.io/part-of: influxdb-operator
    helm.sh/chart: influxdb-operator-0.69.0
    release: influxdb-operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: influxdb-operator-default-influxdb-operator-role
subjects:
- kind: ServiceAccount
  name: influxdb-operator
  namespace: default
---
# Source: influxdb-operator/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: influxdb-operator
  namespace: default
  labels:
    app.kubernetes.io/name: influxdb-operator
    app.kubernetes.io/instance: influxdb-operator
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.69.0"
    app.kubernetes.io/part-of: influxdb-operator
    helm.sh/chart: influxdb-operator-0.69.0
    release: influxdb-operator
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: influxdb-operator
      app.kubernetes.io/instance: influxdb-operator
  template:
    metadata:
      labels:
        app.kubernetes.io/name: influxdb-operator
        app.kubernetes.io/instance: influxdb-operator
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: "0.69.0"
        app.kubernetes.io/part-of: influxdb-operator
        helm.sh/chart: influxdb-operator-0.69.0
        release: influxdb-operator
    spec:
      serviceAccountName: influxdb-operator
      securityContext:
        {}
      containers:
        - name: influxdb-operator
          image: "emccorp/influxdb-operator:"
          imagePullPolicy: IfNotPresent
          securityContext:
            {}
          resources:
            requests:
              memory: 200Mi
              ephemeral-storage: 650Mi
            limits:
              memory: 200Mi
              ephemeral-storage: 650Mi
          command: ["bash"]
          args: ["-c", "echo /crash-dump/core-%e > /proc/sys/kernel/core_pattern; ulimit -c unlimited; GOTRACEBACK=crash ./manager --enable-leader-election"]
          env:
            - name: WATCH_NAMESPACE
              value: ""
          volumeMounts:
          - mountPath: /crash-dump
            name: crash-dump
      volumes:
      - name: crash-dump
        emptyDir: {}
---
# Source: influxdb-operator/templates/influxdb_editor_role.yaml
# permissions for end users to edit influxdbs.
---
# Source: influxdb-operator/templates/influxdb_viewer_role.yaml
# permissions for end users to view influxdbs.
---
# Source: influxdb-operator/templates/leader_election_role.yaml
# permissions to do leader election.
---
# Source: federation/templates/federation-rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: federation
  namespace: default
  labels:
    app.kubernetes.io/name: "federation"
    app.kubernetes.io/version: 0.69.0
    app.kubernetes.io/instance: federation
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: federation-0.69.0
    release: federation
---
# Source: federation/templates/fedsvc-local-objectstores-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
    name: fedsvc-local-objectstores
    namespace: default
    labels:
      app.kubernetes.io/name: fedsvc
      app.kubernetes.io/instance: federation
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/version: 0.69.0
      app.kubernetes.io/part-of: federation
      helm.sh/chart: federation-0.69.0
      release: federation
      operator: objectscale-operator
      product: objectscale
    annotations:
        com.dellemc.kahm.subscribed: "true"
data:
---
# Source: federation/templates/fedsvc-local-services-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
    name: fedsvc-local-services
    namespace: default
    labels:
      app.kubernetes.io/name: fedsvc
      app.kubernetes.io/instance: federation
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/version: 0.69.0
      app.kubernetes.io/part-of: federation
      helm.sh/chart: federation-0.69.0
      release: federation
      operator: objectscale-operator
      product: objectscale
    annotations:
        com.dellemc.kahm.subscribed: "true"
data:
---
# Source: federation/templates/federation-admin-role.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: default-federation-admin
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/instance: federation
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.69.0
    app.kubernetes.io/component: federation
    app.kubernetes.io/part-of: federation
    helm.sh/chart: federation-0.69.0
    release: federation
    operator: objectscale-operator
    product: objectscale
rules:
- apiGroups:
  - ecs.dellemc.com
  resources:
  - ecsclusters
  verbs:
  - "*"
- apiGroups:
  - app.k8s.io
  resources:
  - "*"
  verbs:
  - "*"
- apiGroups:
    - apiextensions.k8s.io
  resources:
    - "*"
  verbs:
    - "*"
- apiGroups:
    - ""
  resources:
    - pods
    - secrets
    - configmaps
    - services
  verbs:
    - "*"
---
# Source: federation/templates/federation-rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: default-federation
  labels:
    app.kubernetes.io/name: "federation"
    app.kubernetes.io/version: 0.69.0
    app.kubernetes.io/instance: federation
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: federation-0.69.0
    release: federation
subjects:
- kind: ServiceAccount
  name: federation
  namespace: default
roleRef:
  kind: ClusterRole
  name: default-federation-admin
  apiGroup: rbac.authorization.k8s.io
---
# Source: federation/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: fedsvc
  namespace: default
  labels:
    helm.sh/chart: federation-0.69.0
    app.kubernetes.io/name: federation
    app.kubernetes.io/instance: federation
    app.kubernetes.io/version: "0.69.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    objectscale.dellemc.com/federationRegistration: "ObjectScale"
spec:
  type: LoadBalancer
  ports:
    - port: 9500
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: federation
    app.kubernetes.io/instance: federation
---
# Source: federation/templates/federation_deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fedsvc
  labels:
    helm.sh/chart: federation-0.69.0
    app.kubernetes.io/name: federation
    app.kubernetes.io/instance: federation
    app.kubernetes.io/version: "0.69.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: federation
      app.kubernetes.io/instance: federation
  template:
    metadata:
      labels:
        app.kubernetes.io/name: federation
        app.kubernetes.io/instance: federation
    spec:
      serviceAccountName: "federation"
      containers:
      - name: fedsvc
        env:
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: MY_POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: MY_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        image: emccorp/fedsvc:0.69.0
        imagePullPolicy: IfNotPresent
        ports:
          - name: http
            containerPort: 9501 
            protocol: TCP
        livenessProbe:
            httpGet:
                path: /fedsvchealthcheck
                port: http
            failureThreshold: 3
            periodSeconds: 60
        readinessProbe:
            httpGet:
                path: /fedsvchealthcheck
                port: http
            failureThreshold: 3
            periodSeconds: 60
---
# Source: logging-injector/charts/logging-injector/templates/secret.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#

apiVersion: v1
kind: Secret
metadata:
  name: "logging-injector-ca-bundle"
  namespace: default
  labels:
    app.kubernetes.io/name: logging-injector
    app.kubernetes.io/instance: logging-injector
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.54.0"
    app.kubernetes.io/part-of: logging-injector
    helm.sh/chart: logging-injector-3.7.0-1146.a692701d
    release: logging-injector
type: Opaque
stringData:
  ca.pem: |+
    -----BEGIN CERTIFICATE-----
    MIIEwDCCAqigAwIBAgICB+QwDQYJKoZIhvcNAQELBQAwADAgFw0yMDExMTEwNzA3
    NTBaGA85OTk5MTIzMTIzNTk1OVowADCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCC
    AgoCggIBAOlE0wVptunzd0+J3p5PUpO8n0Yf8XoqwNyXts4YMD3uMjoYTv9FhrW6
    SFtoV1BlqSrNsOM9vCvWkkxA2JEUAL9iBjNOxBf6vQWW8FLiTjcB0p4OCFY9hMZK
    84bvmQm1ms013hrApjlO63Q9cQ60xjpQehtSpNAyFNtZapcwiczJeq75k9S7HR9D
    r1FiHWlpzU26c+Ocbqz3AQDqctfMzawzga2YOfi8vARtMBEl3tO9S6p4m/NaUKt7
    mqaz9yiXh2IUhQqZVyX3csOw8iXMXvJoEXWwNCtv/t4r+660A7zTH+4M5tDjZt2B
    NQpOcDDRnFGOqEdJ/x0wteKNdBtv9Ni72u7BvfIxih8RfgBRLcqWc43nge4JV0gv
    99GDbinmiQNcV49Y0VCcl7pl/moRh4QG7pwkLcTgXvPeGD2lD3mPqwuctK3i9028
    R6rtZd1L0qskl4ur/GrXhmow9pkJXAfp3mBs+z1gQ888hI4ln7jTprkNGG9yLtgU
    Wg+ZKfaiRbn9U3PvuHS5Rsk13JYSHrVRliwvfyEG5CRNsyd9YjDncTwkIS47fTty
    HEQdStcBjt/b9qW1dEGtfV1YCXPFFM8zj5hLPxx4Rs4JCqM3fQdokltWQwkPUZAU
    mgTRwESeQFyFrrlUhw5iCIjkZ+KKU60Y4e0qH52ItWVR6Rp8geHrAgMBAAGjQjBA
    MA4GA1UdDwEB/wQEAwIChDAdBgNVHSUEFjAUBggrBgEFBQcDAgYIKwYBBQUHAwEw
    DwYDVR0TAQH/BAUwAwEB/zANBgkqhkiG9w0BAQsFAAOCAgEA5bp+jJadS95EQ+pL
    KlkJYniGutAxp6wMzh9jQk0qxeI1JWOabqJ8N76T97Sk38KninRDsT/cjg8jHAIv
    AeUkkgkel8nD9ecFeDBrWXXDdWYAa944wpmY32fdDB9k3LhH/qoFEe6FHaA037J1
    D5nJLz+yxRlDRIb3Oe/sWn5zfEqZij6O3HGIJjJYmRmnIEUNkYDM3JNtm9AAbMg5
    GBA487H1t/X8tgI9aRRC7OEINkvx7Bb84KMJ57gnf0VSTHLghV0f7uMQOmQhBCn4
    BKpHF2pjENYSYdYk873wMrcXw9hhhIJIj+a/kAYxMh+b0J7yoK/SoTd5mByQq9yy
    nG7gkCpozAlQia9nZYvsNYxQJuwP/PG+3B199LarmviqSn67WcPQ9yUEvKItjofg
    FO0gP+zf+T7YgOEDg7DEMga5ThnfqSokgjmymYNDlTDw+XRF4cjUtH9/gTjcFfI0
    sa/R3KXiqizIXZxR3LAz0rlTzsXzLs/qGOKljqHa0opaHcw1YyRwY/FN8qyt6vBg
    jrO2lUKbIrWTNjlUjyStqJDk9QCYV5deEux5w9OwSHP6qeI4vvJJ6dqkZcOKKKO/
    jJzckcnPYhJ9yvWypC4V9bfWPrnevrl7JMQOsmfvYUS0GNQcRme3fSuUat/Ntk8X
    VQpAZmSONkMdAqvZHShMLhzBOxY=
    -----END CERTIFICATE-----
    
  ca.key: |+
    -----BEGIN RSA PRIVATE KEY-----
    MIIJJwIBAAKCAgEA6UTTBWm26fN3T4nenk9Sk7yfRh/xeirA3Je2zhgwPe4yOhhO
    /0WGtbpIW2hXUGWpKs2w4z28K9aSTEDYkRQAv2IGM07EF/q9BZbwUuJONwHSng4I
    Vj2Exkrzhu+ZCbWazTXeGsCmOU7rdD1xDrTGOlB6G1Kk0DIU21lqlzCJzMl6rvmT
    1LsdH0OvUWIdaWnNTbpz45xurPcBAOpy18zNrDOBrZg5+Ly8BG0wESXe071Lqnib
    81pQq3uaprP3KJeHYhSFCplXJfdyw7DyJcxe8mgRdbA0K2/+3iv7rrQDvNMf7gzm
    0ONm3YE1Ck5wMNGcUY6oR0n/HTC14o10G2/02Lva7sG98jGKHxF+AFEtypZzjeeB
    7glXSC/30YNuKeaJA1xXj1jRUJyXumX+ahGHhAbunCQtxOBe894YPaUPeY+rC5y0
    reL3TbxHqu1l3UvSqySXi6v8ateGajD2mQlcB+neYGz7PWBDzzyEjiWfuNOmuQ0Y
    b3Iu2BRaD5kp9qJFuf1Tc++4dLlGyTXclhIetVGWLC9/IQbkJE2zJ31iMOdxPCQh
    Ljt9O3IcRB1K1wGO39v2pbV0Qa19XVgJc8UUzzOPmEs/HHhGzgkKozd9B2iSW1ZD
    CQ9RkBSaBNHARJ5AXIWuuVSHDmIIiORn4opTrRjh7SofnYi1ZVHpGnyB4esCAwEA
    AQKCAgBkudZREQvty7aqPsNFIsVqi9lOw35XHVz4I/7I0YMLSu6fTV3XNqNrl0ul
    RNHnIm7Az97g0QiO+XFkwd+CDdwgx+gbgZiFLj0uy7VsZNIXSI80tqR88MWDhlvP
    2WgA3E1C7U7ByIw+VMixAdLu4bpy9cs0PyRxzh5ZdSvkqw3lwt5Z7eUax81Ucbqj
    brV6jjgbpzZhg2v6/hGN3q7GZmYtRHRrjD8EHCMn2ioWTX8BeUzSCJB2rXoGAjKO
    Z0mDWqMYA/pK0FnkSAxjWeXF0pDxJWTcp8BvPUYVk3JzRsISaCvyc9m7O2ZwoVlQ
    4Pvq6KgSQ4KAfgBOD3mKoUAQlPBpTvEEzxCK9myaHkEJG4L+reTo5pw1XxMT9wH6
    5xA9Jv1cCjIV18VAMcptnV6C5XSl5RipHZyyu1k3Mp8NrbXE3BkTnG0/FpoLA8lD
    SjT63IXEB2MDM0mGxNp0aHRVUItmXEdSS5SUNkQh8GEdmJYnBCzjjgLJM6+2/Jdk
    zh6VALBRfCOCnclaBfXi14lMFjPPgRCO/+4wtJPTcSGEw5gwVQ7LRh5i86XADfW8
    8P+pjScl6RmLxM3Ozo8SVtUKDeTifjCp6FLg81dvQ3wMG03g7/Evi6Es8NkQ320e
    XtSIAck0+HdVXH7k39712TcG0f+CUA4P3onMHD1+uFFr9devQQKCAQEA9cxMQqi+
    6S0E8xCKvqALolZunsbSJ08rZ7+XsSNmjX5h7zxuSee4gQ5Hev8CnbvLolMeQ7SX
    MIw6KRctozoRCENQXQK7QEc+DRFSLNK0Fjxdi48Vr7mSZCmJsfDGXuSHWua60PhL
    TtOTaXNgSJaDP03ozDZRkJzr2gtlIDs/q35CGoj9RUfaY3pWYeJmrd6CThvP++H6
    kNkDMgaj0eJ4SAzPPxXcA7cofxLaK9P0QKm44aBdzoa7s46ge4AIXImmoPRPsOU2
    rvHGqxMiBriOotDevnRCpq0jmUsRmcoRikoelOXzySFiSaB4jrEQuLEsO9l83hGY
    7csaNA2M/ng6ywKCAQEA8vNmE2JK0kJ7qCobS4Djs1GzbhBVeAYKXPe8ZQxVOcXl
    mACPV6uw4ofjp3v8m3e9n8F+PHm31z9I20IsvX6BPEbQk0inXOv8tPjlEIFP5Ucg
    E119iUtyr5Tqh4BdlyDk6Vej/bQCg/9AzekF5lZ6GhZvO7b7dLL2cC7v5dPrKI7N
    DWF08b4j2n+88wEzCrGbFTVDp5puPHfiHEDR0crJpTwqobT7qbkauQQWJB4zSPHK
    D8Ei7UXopkhuqqALl03ie0r/SHwG0kaBCjkKF+ZB4aTw+9pQGgMdCsOV1aXcd1w2
    q5rTyO1vY1aP1MdrTnYJyE36WLj34HBzI5LWHQBxYQKCAQBuXtJPjF5Nbf2u91qV
    xl/zAUSi3zw2koI3D/0ZeX/vQTTQrB4J6ZcbvEG0pRWTpmQF+7S3SjwpfI4RLWs8
    xDIpt7A6U6OpdVQTohd4MRTUdz66EAH46icl+tDtqeQpcAyncLuqYhPOzYp/62Ls
    tUkx/9Xs/OcbPJtbSYqbMn+gjg04xRKVLXKPALwRMAxTPnrcf/igbhSJPikFKZ4d
    /Mdt8vKMrVAiCviQNvLog0BGWO+/wLbeqflW41CEpDUc+GJuG8Y89G/dlotS/kBl
    LDJAQfIDK0lSdqRpjR/WIrpFkoqw6aDSS79KuFfqGvAbPtNR/JLpVJWLEYwum3cY
    PPyJAoIBABhb9TEeWtgoGFPtHN1+J9Zz66SueJNXL7TQlhAfo2/ueq256KVmro6Y
    B2hkkxhXcijRcsHHhnpLexeY0/mP9I9BnmoWD8nOU4Elr3nvLT6U2g93AT5B1Vbr
    fHRnl3qurqUCx4uJf/MSJcI/ifrlUsrI0xBOsXmq8/CdlCocDGj9oGumCN6wLNIc
    mqpWxXJeCmme9JCaeFERyBcDHMaHKZ6qoK+kANOsnpRMZ5fpe0TmEVdxCvp1VvVN
    L+NltqPOCFZKV7xBy0FMFmYa//sTeCmSqyLlacCh7UiGAcDxJ2DEWyrrlC6CN/fi
    1vsDn6u3RBXUU7SPnzLes3yunU89GyECggEAEFNna5Ah+1O6ivWm4EqFsWrxzXmI
    GVC+6ife+8zvH/VfvRhglVRM8gKKzyrwiMeAumDEz8BK7aI692lKbw6k6ZeAObuo
    nW4pDwV6EFHStTegaDDM9v5I/AMFQvnYbgmnwLTbAaRKqlPHFr1d6wrsImTEP2My
    8ixA0l1pMw0tKEm1b0spXgYUBwb3abfMXGmLbVxqoAcFlQyCayS7O7tO0rXkbcKg
    OEjVhI13rcE3Gxn5dhaMLZDrpkUlNO3Zat3CI8Xv6AJZ1CZhouyxNFd5w+jONkyg
    3x44wlZUxlLaKQEiUiSF3+tQqZOHTJYr5+AkH0Yt91m+eLUJtKrgXU4i3w==
    -----END RSA PRIVATE KEY-----
---
# Source: logging-injector/charts/logging-injector/charts/rsyslog-client/templates/cleanup-logs.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#

apiVersion: v1
kind: ConfigMap
metadata:
  name: logging-injector-rsyslog-client-cleanup-logs-script
  labels:
    app.kubernetes.io/name: logging-injector-rsyslog-client
    app.kubernetes.io/instance: logging-injector
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.54.0"
    app.kubernetes.io/part-of: logging-injector
    helm.sh/chart: rsyslog-client-0.54.0
    release: logging-injector
data:
  cleanup_logs.sh: |+
    #!/bin/bash

    source /etc/pod.env

    _log(){
        msg="$*"
        if [[ -n "$msg" ]] ; then
            echo "$(date "+%m%d%Y %T")":  "$msg"
        fi
    }

    MONITORING_LOGS="/var/log"
    _log "Started cleanup script. Logs folder: ${MONITORING_LOGS}"

    test -d "${MONITORING_LOGS}"            || exit 3

    # check if another instance is running (slowly) already
    SELF=$(basename "$0")
    if pidof -o %PPID -x "$SELF" > /dev/null; then
        exit 4
    fi

    fs_size_kb=$(df --output=size ${MONITORING_LOGS} | grep -v '1K-blocks')
    fs_size=$(( $fs_size_kb * 1024 ))

    # TODO: add alert on script failure
    python3 /etc/logrotate_autoconf.py -s ${fs_size} -c /etc/svc_logs_priority_conf.json >> "${MONITORING_LOGS}/logrotate_autoconf.log" 2>&1
    /etc/run_logrotate.sh >> /var/log/logrotate.log 2>&1

    # only remove compressed log files for now
    LOG_FILE_PATTERN="*.log*.gz" # the index/timestamp could be before or after the .log infix

    CHECK_INTERVAL=10

    du_high_watermark="${LOGS_SIZE_HIGH_WATERMARK:-204800}"
    du_low_watermark="${LOGS_SIZE_LOW_WATERMARK:-153600}"

    # some log files might not get compressed in error conditions,
    # compress them if not modified for a day.
    # assume the file name will be like
    #     messages-20140825-1409004745
    #     rm.log.20140826-165818
    NOT_COMPRESSED_PATTERN=".*20[0-9]{6}-[0-9]{6,10}$"
    find -L "${MONITORING_LOGS}" -regextype posix-egrep -regex "${NOT_COMPRESSED_PATTERN}" \
        -mmin +60 -exec gzip -f {} +

    LOGS_DISK_USAGE=$(du -skL "${MONITORING_LOGS}" | cut -f1)
    _log "Disk usage: $LOGS_DISK_USAGE. High watermark: ${du_high_watermark}."

    if [[ "$LOGS_DISK_USAGE" -gt ${du_high_watermark} ]]; then
        # TODO: alert if this part is executed
        _log "Perform cleanup"

        LOG_LIST_FILE=/tmp/log_list

        # list files in time order
        find -L "${MONITORING_LOGS}" \( -name "${LOG_FILE_PATTERN}" \) \
            -exec stat -c "%Y %n" {} + | sort -n | awk '{print $2}' > ${LOG_LIST_FILE}

        # remove one by one
        i=0
        while read -r file; do
            rm -f "$file"
            _log "Removed $file"

            # check du less frequently to speed up removal
            i=$(( i + 1 ))
            if [[ $(( i % CHECK_INTERVAL)) -eq 0 ]]; then
              usage="$(du -skL ${MONITORING_LOGS} | cut -f1)"
              _log "Disk usage: ${usage}"
              if [[ "${usage}" -le "${du_low_watermark}" ]]; then
                _log "Disk usage ${usage} is below low watermark ${du_low_watermark}"
                break
              fi
            fi
        done < ${LOG_LIST_FILE}

        rm -f ${LOG_LIST_FILE}
    fi
    _log "Finished cleanup script"
---
# Source: logging-injector/charts/logging-injector/charts/rsyslog-client/templates/cron-config.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#

apiVersion: v1
kind: ConfigMap
metadata:
  name: logging-injector-rsyslog-client-cron-config
  labels:
    app.kubernetes.io/name: logging-injector-rsyslog-client
    app.kubernetes.io/instance: logging-injector
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.54.0"
    app.kubernetes.io/part-of: logging-injector
    helm.sh/chart: rsyslog-client-0.54.0
    release: logging-injector
data:
  cron_logrotate: |+
    * * * * *      root    /etc/cleanup_logs.sh >> /var/log/cleanup_logs.log 2>&1
---
# Source: logging-injector/charts/logging-injector/charts/rsyslog-client/templates/logrotate-config.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#

apiVersion: v1
kind: ConfigMap
metadata:
  name: logging-injector-rsyslog-client-logrotate-config
  labels:
    app.kubernetes.io/name: logging-injector-rsyslog-client
    app.kubernetes.io/instance: logging-injector
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.54.0"
    app.kubernetes.io/part-of: logging-injector
    helm.sh/chart: rsyslog-client-0.54.0
    release: logging-injector
data:
  svc: |+
    /var/log/*.log
    {
      missingok
      copytruncate
      nocreate
      nosharedscripts
      size=10M
      maxage 14
      rotate 10
      notifempty
      compress
      dateext
      dateformat .%Y%m%d-%H%M%S
      postrotate
      endscript
    }
  logrotate.conf: |+
    # see "man logrotate" for details
    # rotate log files daily
    daily

    # keep rotated logs for 14 days max
    maxage 14

    # rotate 10 by default
    rotate 10

    # use date as a suffix of the rotated file
    dateext

    # Add a dateformat
    dateformat .%Y%m%d-%H%M%S

    # max size is 5 MB
    size 5M

    # Compress log files
    compress

    # comment these to switch compression to use gzip or another
    # compression scheme
    compresscmd /usr/bin/gzip
    uncompresscmd /usr/bin/gunzip

    # rotate logs as root
    su root root

    # RPM packages drop log rotation information into this directory
    include /etc/logrotate.d
---
# Source: logging-injector/charts/logging-injector/charts/rsyslog-client/templates/rsyslog-client-config.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#

apiVersion: v1
kind: ConfigMap
metadata:
  name: logging-injector-rsyslog-client-config
  # namespace is required for resources created by objectscale-vsphere
  namespace: default
  labels:
    app.kubernetes.io/name: logging-injector-rsyslog-client
    app.kubernetes.io/instance: logging-injector
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.54.0"
    app.kubernetes.io/part-of: logging-injector
    helm.sh/chart: rsyslog-client-0.54.0
    release: logging-injector
data:
  rsyslog.conf.template: |+
    #### MODULES ####

    # input module: file
    module(load="imfile")

    #### GLOBAL DIRECTIVES ####

    #### RULES ####

    # input log files
    input(type="imfile"
          File="/var/log/*.log"
          Tag="logging-injector"
          addMetadata="on"
          Ruleset="handle_multiple_logs"
          Facility="local0"
    )

    _STDOUT_CONF_

    ruleset(name="handle_multiple_logs") {
      # http://www.rsyslog.com/doc/v8-stable/rainerscript/functions.html
      # re_extract(expr, re, match, submatch, no-found)
      set $.suffix=re_extract($!metadata!filename, "(.*)/([^/]*)", 0, 2, "all.log");
      set $.pod_name=getenv("POD_NAME");
      call sendToLogserver
    }

    ruleset(name="handle_stdout_logs") {
      # http://www.rsyslog.com/doc/v8-stable/rainerscript/functions.html
      # re_extract(expr, re, match, submatch, no-found)
      set $.container_name=re_extract($!metadata!filename, "(.*)/([^/]*)/([^/]*)", 0, 2, "unknown_container");
      set $.log_name=re_extract($!metadata!filename, "(.*)/([^/]*)", 0, 2, "all.log");
      set $.suffix= $.container_name & ".stdout." & $.log_name;
      set $.pod_name=getenv("POD_NAME");
      call sendToLogserver
    }

    # output template
    template(name="FileFormat" type="string"
    string= "<%PRI%>%TIMESTAMP% %HOSTNAME% %syslogtag%__%$.pod_name%__%$.suffix%%msg:::sp-if-no-1st-sp%%msg:::drop-last-lf%\n"
            )

    ruleset(name="sendToLogserver") {
      action(type="omfwd"
          Target="_RSYSLOG_POD_NAME_.logging-injector-rsyslog.default.svc.cluster.local"
          Port="10514"
          Protocol="tcp"
          Template="FileFormat" )
    #    action.resumeRetryCount=100
    #    queue.type=linkedList queue.size=10000)
    }
  rsyslog_stdout.conf.template: |+
    input(type="imfile"
          File="_CONTAINER_DIR_/*.log"
          Tag="logging-injector"
          addMetadata="on"
          Ruleset="handle_stdout_logs"
          Facility="local0"
    )
---
# Source: logging-injector/charts/logging-injector/templates/configmap.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#

apiVersion: v1
kind: ConfigMap
metadata:
  name: logging-injector-config
  namespace: default
  labels:
    app.kubernetes.io/name: logging-injector
    app.kubernetes.io/instance: logging-injector
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.54.0"
    app.kubernetes.io/part-of: logging-injector
    helm.sh/chart: logging-injector-3.7.0-1146.a692701d
    release: logging-injector
data:
  sidecarconfig.yaml: |
    logVolumeName: "log"
    stdoutLogsVolumeName: "log-pods"
    stdoutEnabled: false
    logging:
      container:
        name: rsyslog-client
        image: "emccorp/rsyslog:3.7.0.0-1146.a692701d"
        imagePullPolicy: "IfNotPresent"
        env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: POD_UID
            valueFrom:
              fieldRef:
                fieldPath: metadata.uid
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: LOG_STDOUT_ENABLED
            value: "false"
          - name: RSYSLOG_DEBUG
            value: "DebugOnDemand NoStdOut"
          - name: RSYSLOG_DEBUGLOG
            value: "/var/log/rsyslog.log"
          - name: RSYSLOG_CLIENT
            value: "true"
          - name: RSYSLOG_SVC_NAME
            value: "logging-injector-rsyslog"
          - name: RSYSLOG_SVC_NAMESPACE
            value: "default"
        volumeMounts:
          - mountPath: /etc/rsyslog/
            name: rsyslog-config
          - name: "log"
            mountPath: /var/log
          - name: "log-pods"
            mountPath: /var/log/pods
            readOnly: true
      volumes:
        - name: rsyslog-config
          configMap:
            name: TARGET_RELEASE_NAME-rsyslog-client-config
        - name: log-pods
          hostPath:
            path: /var/log/pods
            type: Directory
    logrotate:
      container:
        name: logrotate
        image: "emccorp/rsyslog:3.7.0.0-1146.a692701d"
        imagePullPolicy: "IfNotPresent"
        command: ["cron"]
        args: ["-n"]
        volumeMounts:
        - name: "log"
          mountPath: /var/log
        - mountPath: /etc/cron.d
          name: cron-config
        - mountPath: /etc/logrotate.d/svc
          name: logrotate-config
          subPath: svc
        - mountPath: /etc/logrotate.conf
          name: logrotate-config
          subPath: logrotate.conf
        - mountPath: /etc/cleanup_logs
          name: cleanup-script
          subPath: cleanup_logs
      volumes:
          - name: logrotate-config
            configMap:
              name: TARGET_RELEASE_NAME-rsyslog-client-logrotate-config
          - name: cron-config
            configMap:
              name: TARGET_RELEASE_NAME-rsyslog-client-cron-config
          - name: cleanup-script
            configMap:
              name: TARGET_RELEASE_NAME-rsyslog-client-cleanup-logs-script
              defaultMode: 0755
---
# Source: logging-injector/charts/logging-injector/charts/rsyslog-client/templates/rbac_role.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
#  Role for rsyslog-client to find instance of rsyslog service
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app.kubernetes.io/name: logging-injector-rsyslog-client
    app.kubernetes.io/instance: logging-injector
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.54.0"
    app.kubernetes.io/part-of: logging-injector
    helm.sh/chart: rsyslog-client-0.54.0
    release: logging-injector
  name: "logging-injector-rsyslog-client"
  namespace: "default"
rules:
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["list"]
---
# Source: logging-injector/charts/logging-injector/charts/rsyslog-client/templates/rbac_rolebinding.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
#  RoleBinding for rsyslog-client to find instance of rsyslog service
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: "logging-injector-rsyslog-client"
  namespace: "default"
  labels:
    app.kubernetes.io/name: logging-injector-rsyslog-client
    app.kubernetes.io/instance: logging-injector
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.54.0"
    app.kubernetes.io/part-of: logging-injector
    helm.sh/chart: rsyslog-client-0.54.0
    release: logging-injector
subjects:
  - apiGroup: rbac.authorization.k8s.io
    kind: Group
    name: system:serviceaccounts
roleRef:
  kind: Role
  apiGroup: rbac.authorization.k8s.io
  name: "logging-injector-rsyslog-client"
---
# Source: logging-injector/charts/logging-injector/templates/service.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#

apiVersion: v1
kind: Service
metadata:
  name: logging-injector
  labels:
    app.kubernetes.io/name: logging-injector
    app.kubernetes.io/instance: logging-injector
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.54.0"
    app.kubernetes.io/part-of: logging-injector
    helm.sh/chart: logging-injector-3.7.0-1146.a692701d
    release: logging-injector
spec:
  ports:
    - port: 443
      targetPort: 8443
  selector:
    app.kubernetes.io/name: logging-injector
---
# Source: logging-injector/charts/logging-injector/templates/deployment.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#

apiVersion: apps/v1
kind: Deployment
metadata:
  name: logging-injector
  labels:
    app.kubernetes.io/name: logging-injector
    app.kubernetes.io/instance: logging-injector
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.54.0"
    app.kubernetes.io/part-of: logging-injector
    helm.sh/chart: logging-injector-3.7.0-1146.a692701d
    release: logging-injector
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: logging-injector
      app.kubernetes.io/instance: logging-injector
  template:
    metadata:
      labels:
        app.kubernetes.io/name: logging-injector
        app.kubernetes.io/instance: logging-injector
        release: logging-injector
    spec:
      initContainers:
      - name: logging-injector-init
        image: "emccorp/logging-injector:3.7.0.0-1146.a692701d"
        imagePullPolicy: "IfNotPresent"
        volumeMounts:
          - mountPath: /etc/injector/ca-bundle
            name: ca-bundle
          - mountPath: /etc/injector/server-cert
            name: server-cert
        command: ["/usr/bin/gen_cert"]
        args: ["--ca-path", "/etc/injector/ca-bundle/ca.pem",
               "--ca-key", "/etc/injector/ca-bundle/ca.key",
               "--cert-dir", "/etc/injector/server-cert",
               "--service-name", "logging-injector",
               "--service-namespace", default,
               "--server-cert-name", "cert.pem",
               "--server-key-name", "key.pem"]
      containers:
      - name: logging-injector
        image: "emccorp/logging-injector:3.7.0.0-1146.a692701d"
        imagePullPolicy: "IfNotPresent"
        command: ["/usr/bin/injector"]
        args: ["--port", "8443",
               "--cert-path", "/etc/webhook/certs/cert.pem", "--key-path", "/etc/webhook/certs/key.pem",
               "--config", "/etc/webhook/config/sidecarconfig.yaml"]
        ports:
          - name: api
            containerPort: 8443
        resources:
          limits:
            memory: 256Mi
          requests:
            memory: 256Mi
        volumeMounts:
        - name: server-cert
          mountPath: /etc/webhook/certs
        - name: sidecar-config
          mountPath: /etc/webhook/config
      
      volumes:
        - name: ca-bundle
          secret:
            secretName: logging-injector-ca-bundle
        - name: server-cert
          emptyDir: {}
        - name: sidecar-config
          configMap:
            name: logging-injector-config
---
# Source: logging-injector/templates/logging-injector-app.yaml
apiVersion: app.k8s.io/v1beta1
kind: Application
metadata:
  name: logging-injector
  namespace: default
  labels:
    app.kubernetes.io/name: logging-injector
    app.kubernetes.io/version: 0.69.0
    app.kubernetes.io/instance: logging-injector
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: logging-injector-0.69.0
    release: logging-injector
    product: objectscale
  annotations:
    nautilus.dellemc.com/run-level: "9"    # start before objectscale-manager
    nautilus.dellemc.com/chart-name: logging-injector
    nautilus.dellemc.com/chart-version: 0.69.0
    nautilus.dellemc.com/chart-values: "{\"createApplicationResource\":true,\"global\":{\"product\":\"objectscale\"},\"logging-injector\":{\"common-monitoring-lib\":{\"exports\":{\"default\":{\"rsyslog_client_image_pull_policy\":\"IfNotPresent\",\"rsyslog_client_tag\":null}},\"global\":{\"monitoring_tag\":\"3.7.0.0-1146.a692701d\",\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_client_stdout_enabled\":false,\"rsyslog_enabled\":false,\"watchAllNamespaces\":true}},\"config\":{\"logVolumeName\":\"log\"},\"global\":{\"monitoring_tag\":\"3.7.0.0-1146.a692701d\",\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_client_stdout_enabled\":false,\"rsyslog_enabled\":false,\"watchAllNamespaces\":true},\"image\":{\"pullPolicy\":\"IfNotPresent\",\"repository\":\"logging-injector\"},\"replicas\":1,\"resources\":{\"limits\":{\"memory\":\"256Mi\"},\"requests\":{\"memory\":\"256Mi\"}},\"rsyslog-client\":{\"common-monitoring-lib\":{\"exports\":{\"default\":{\"rsyslog_client_image_pull_policy\":\"IfNotPresent\"}},\"global\":{\"monitoring_tag\":\"3.7.0.0-1146.a692701d\",\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_client_stdout_enabled\":false,\"rsyslog_enabled\":false,\"watchAllNamespaces\":true}},\"config\":{\"logs_size_high_watermark\":\"_204800\",\"logs_size_low_watermark\":\"_153600\",\"maxage\":30,\"output\":{\"port\":10514,\"queue\":{\"size\":10000,\"type\":\"linkedList\"},\"resumeRetryCount\":100}},\"createLogrotateConfigs\":true,\"createRBAC\":true,\"global\":{\"monitoring_tag\":\"3.7.0.0-1146.a692701d\",\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_client_stdout_enabled\":false,\"rsyslog_enabled\":false,\"watchAllNamespaces\":true}},\"tolerations\":[]},\"product\":\"objectscale\"}"
spec:
  assemblyPhase: Pending
  selector:
    matchLabels:
      app.kubernetes.io/name: logging-injector
  componentKinds:
    - group: core
      kind: Service
    - group: apps
      kind: Deployment
    - group: core
      kind: Pod
    - group: core
      kind: ReplicaSet
    - group: core
      kind: ConfigMap
    - group: core
      kind: ServiceAccount
    - group: rbac.authorization.k8s.io
      kind: Role
    - group: rbac.authorization.k8s.io
      kind: RoleBinding
  descriptor:
    type: logging-injector
    description: Logging sidecar injector
    version: 0.69.0
    keywords:
      - objectscale
      - object store
      - flex
      - ecs
      - s3
    info:
      - "Copyright Â© 2020 Dell Inc. or its subsidiaries. All Rights Reserved."
---
# Source: logging-injector/charts/logging-injector/templates/mutatingwebhook.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#

apiVersion: admissionregistration.k8s.io/v1beta1
kind: MutatingWebhookConfiguration
metadata:
  name: "logging-injector-default"
  labels:
    app.kubernetes.io/name: logging-injector
    app.kubernetes.io/instance: logging-injector
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.54.0"
    app.kubernetes.io/part-of: logging-injector
    helm.sh/chart: logging-injector-3.7.0-1146.a692701d
    release: logging-injector
webhooks:
  - name: "logging-injector.default.objectscale.dellemc.com"
    matchPolicy: Equivalent
    failurePolicy: Fail
    clientConfig:
      service:
        name: "logging-injector"
        namespace: "default"
        path: "/mutate"
      caBundle: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUV3RENDQXFpZ0F3SUJBZ0lDQitRd0RRWUpLb1pJaHZjTkFRRUxCUUF3QURBZ0Z3MHlNREV4TVRFd056QTMKTlRCYUdBODVPVGs1TVRJek1USXpOVGsxT1Zvd0FEQ0NBaUl3RFFZSktvWklodmNOQVFFQkJRQURnZ0lQQURDQwpBZ29DZ2dJQkFPbEUwd1ZwdHVuemQwK0ozcDVQVXBPOG4wWWY4WG9xd055WHRzNFlNRDN1TWpvWVR2OUZoclc2ClNGdG9WMUJscVNyTnNPTTl2Q3ZXa2t4QTJKRVVBTDlpQmpOT3hCZjZ2UVdXOEZMaVRqY0IwcDRPQ0ZZOWhNWksKODRidm1RbTFtczAxM2hyQXBqbE82M1E5Y1E2MHhqcFFlaHRTcE5BeUZOdFphcGN3aWN6SmVxNzVrOVM3SFI5RApyMUZpSFdscHpVMjZjK09jYnF6M0FRRHFjdGZNemF3emdhMllPZmk4dkFSdE1CRWwzdE85UzZwNG0vTmFVS3Q3Cm1xYXo5eWlYaDJJVWhRcVpWeVgzY3NPdzhpWE1YdkpvRVhXd05DdHYvdDRyKzY2MEE3elRIKzRNNXREalp0MkIKTlFwT2NERFJuRkdPcUVkSi94MHd0ZUtOZEJ0djlOaTcydTdCdmZJeGloOFJmZ0JSTGNxV2M0M25nZTRKVjBndgo5OUdEYmlubWlRTmNWNDlZMFZDY2w3cGwvbW9SaDRRRzdwd2tMY1RnWHZQZUdEMmxEM21QcXd1Y3RLM2k5MDI4ClI2cnRaZDFMMHFza2w0dXIvR3JYaG1vdzlwa0pYQWZwM21Ccyt6MWdRODg4aEk0bG43alRwcmtOR0c5eUx0Z1UKV2crWktmYWlSYm45VTNQdnVIUzVSc2sxM0pZU0hyVlJsaXd2ZnlFRzVDUk5zeWQ5WWpEbmNUd2tJUzQ3ZlR0eQpIRVFkU3RjQmp0L2I5cVcxZEVHdGZWMVlDWFBGRk04emo1aExQeHg0UnM0SkNxTTNmUWRva2x0V1F3a1BVWkFVCm1nVFJ3RVNlUUZ5RnJybFVodzVpQ0lqa1orS0tVNjBZNGUwcUg1Mkl0V1ZSNlJwOGdlSHJBZ01CQUFHalFqQkEKTUE0R0ExVWREd0VCL3dRRUF3SUNoREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQWdZSUt3WUJCUVVIQXdFdwpEd1lEVlIwVEFRSC9CQVV3QXdFQi96QU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FnRUE1YnArakphZFM5NUVRK3BMCktsa0pZbmlHdXRBeHA2d016aDlqUWswcXhlSTFKV09hYnFKOE43NlQ5N1NrMzhLbmluUkRzVC9jamc4akhBSXYKQWVVa2tna2VsOG5EOWVjRmVEQnJXWFhEZFdZQWE5NDR3cG1ZMzJmZERCOWszTGhIL3FvRkVlNkZIYUEwMzdKMQpENW5KTHoreXhSbERSSWIzT2Uvc1duNXpmRXFaaWo2TzNIR0lKakpZbVJtbklFVU5rWURNM0pOdG05QUFiTWc1CkdCQTQ4N0gxdC9YOHRnSTlhUlJDN09FSU5rdng3QmI4NEtNSjU3Z25mMFZTVEhMZ2hWMGY3dU1RT21RaEJDbjQKQktwSEYycGpFTllTWWRZazg3M3dNcmNYdzloaGhJSklqK2Eva0FZeE1oK2IwSjd5b0svU29UZDVtQnlRcTl5eQpuRzdna0Nwb3pBbFFpYTluWll2c05ZeFFKdXdQL1BHKzNCMTk5TGFybXZpcVNuNjdXY1BROXlVRXZLSXRqb2ZnCkZPMGdQK3pmK1Q3WWdPRURnN0RFTWdhNVRobmZxU29rZ2pteW1ZTkRsVER3K1hSRjRjalV0SDkvZ1RqY0ZmSTAKc2EvUjNLWGlxaXpJWFp4UjNMQXowcmxUenNYekxzL3FHT0tsanFIYTBvcGFIY3cxWXlSd1kvRk44cXl0NnZCZwpqck8ybFVLYklyV1ROamxVanlTdHFKRGs5UUNZVjVkZUV1eDV3OU93U0hQNnFlSTR2dkpKNmRxa1pjT0tLS08vCmpKemNrY25QWWhKOXl2V3lwQzRWOWJmV1BybmV2cmw3Sk1RT3NtZnZZVVMwR05RY1JtZTNmU3VVYXQvTnRrOFgKVlFwQVptU09Oa01kQXF2WkhTaE1MaHpCT3hZPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t"
    rules:
      - operations: ["CREATE", "UPDATE"]
        apiGroups: [""]
        apiVersions: ["v1"]
        resources: ["pods"]
    objectSelector:
      matchLabels:
        objectscale.dellemc.com/logging-inject: "true"
---
# Source: dcm/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: dcm
  namespace: default
  labels:
    helm.sh/chart: dcm-0.69.0
    app.kubernetes.io/name: dcm
    app.kubernetes.io/instance: dcm
    app.kubernetes.io/version: "0.69.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: LoadBalancer
  ports:
    - port: 9026
      targetPort: 9026
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: dcm
    app.kubernetes.io/instance: dcm
---
# Source: dcm/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dcm
  namespace: default
  labels:
    helm.sh/chart: dcm-0.69.0
    app.kubernetes.io/name: dcm
    app.kubernetes.io/instance: dcm
    app.kubernetes.io/version: "0.69.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: dcm
      app.kubernetes.io/instance: dcm
  template:
    metadata:
      labels:
        app.kubernetes.io/name: dcm
        app.kubernetes.io/instance: dcm
    spec:
      containers:
        - name: dcm
          env:
          - name: SPRING_PROFILES_ACTIVE
            value: "atlas,flex,dns"
          - name: ATLAS_SERVICE_HOSTNAME
            value: "dcm-dcm-atlas-client"
          - name: MY_POD_NAME
            valueFrom:
             fieldRef:
              fieldPath: metadata.name
          - name: MY_POD_NAMESPACE
            valueFrom:
             fieldRef:
              fieldPath: metadata.namespace
          - name: MY_POD_IP
            valueFrom:
             fieldRef:
              fieldPath: status.podIP
          image: "emccorp/dcm:0.69.0"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 9026
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /dcmhealthcheck
              port: http
            failureThreshold: 3
            periodSeconds: 60
          readinessProbe:
            httpGet:
              path: /dcmhealthcheck
              port: http
            failureThreshold: 3
            periodSeconds: 60
---
# Source: dcm/templates/atlas_v1beta1_dcmcluster.yaml
apiVersion: atlas.dellemc.com/v1beta1
kind: AtlasCluster
metadata:
  name: "dcm-dcm-atlas"
  namespace: default
spec:
  replicas: 1
  image:
    repository:  emccorp/atlas
    tag: 1.1.3
    pullPolicy: IfNotPresent
  persistence:
    spec:
      resources:
        requests:
          storage: 1Gi
---
# Source: decks/templates/rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: decks
  namespace: default
  labels:
    app.kubernetes.io/name: "decks"
    app.kubernetes.io/version: 2.69.0
    app.kubernetes.io/instance: decks
    app.kubernetes.io/managed-by: nautilus
    helm.sh/chart: decks-2.69.0
    release: decks
---
# Source: decks/templates/testapp-rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: decks-testapp
  namespace: default
  labels:
    app.kubernetes.io/name: "decks"
    app.kubernetes.io/version: 2.69.0
    app.kubernetes.io/instance: decks
    app.kubernetes.io/managed-by: nautilus
    helm.sh/chart: decks-2.69.0
    release: decks
---
# Source: decks/templates/decks-app-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
    name: decks-app-config
    namespace: default
    labels:
        app.kubernetes.io/name: "decks"
        app.kubernetes.io/version: 2.69.0
        app.kubernetes.io/instance: decks
        app.kubernetes.io/managed-by: nautilus
        helm.sh/chart: decks-2.69.0
        release: decks
    annotations:
        com.dellemc.kahm.subscribed: "true"
data:
    eventRules: |-
    healthChecks: |-
    eventRemedies: |-
      symptoms:
        - symptomid: DECKS-1007
          description: Unable to register with Dell EMC Secure Remote Services
          remedies:
            - Make sure a valid Dell EMC license has been applied
            - Make sure the SRS Gateway has not been disabled
            - Verify the correct hostname or IP addr/port was used for
              the SRS gateway
            - Verify the correct Dell EMC customer support account name
              and password were specified
            - Verify the SRS Gateway system is running
            - Check if the SRS gateway has connectivity through the firewall
              to Dell EMC
            - Verify the network connection to the SRS gateway
            - Check the health of the SRS gateway by connecting to the user
              interface
            - Check the status of the SRS Gateway resource in the k8s cluster
            - Make sure the kubernetes cluster has enabled external
              IP provisioning capabilities, (for example LoadBalancer)
        - symptomid: DECKS-1015
          description: Unable to send events to the Dell EMC Secure Remote Service
          remedies:
            - Verify the SRS Gateway system is running
            - Check if the SRS gateway has connectivity through the firewall
              to Dell EMC
            - Verify the network connection to the SRS gateway
            - Check the health of the SRS gateway by connecting to the user
              interface
            - View the logs of the decks and srs-notifier services for any
              additional details
---
# Source: decks/templates/admin-role.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: default-decks-admin
  labels:
    app.kubernetes.io/name: "decks"
    app.kubernetes.io/version: 2.69.0
    app.kubernetes.io/instance: decks
    app.kubernetes.io/managed-by: nautilus
    helm.sh/chart: decks-2.69.0
    release: decks
rules:
- apiGroups:
  - decks.ecs.dellemc.com
  resources:
  - "*"
  verbs:
  - "*"
- apiGroups:
  - kahm.emcecs.github.com
  resources:
  - notifiers
  verbs:
  - "*"
- apiGroups:
  - app.k8s.io
  resources:
  - "*"
  verbs:
  - "*"
- apiGroups:
  - ""
  - extensions
  resources:
  - pods
  - services
  - endpoints
  - persistentvolumeclaims
  - events
  - configmaps
  - secrets
  - applications
  - nodes
  - namespaces
  - replicationcontrollers
  - daemonsets
  - deployments
  - replicasets
  verbs:
  - "*"
- apiGroups:
  - batch
  resources:
  - jobs
  - cronjobs
  verbs:
  - "*"
- apiGroups:
  - policy
  resources:
  - poddisruptionbudgets
  verbs:
  - "*"
- apiGroups:
  - apps
  resources:
  - deployments
  - daemonsets
  - replicasets
  - statefulsets
  verbs:
  - "*"
- apiGroups:
  - zookeeper.pravega.io
  resources:
  - "*"
  verbs:
  - "*"
- apiGroups:
  - storage.k8s.io
  resources:
  - storageclasses
  - storageclasslists
  verbs:
  - get
  - list
---
# Source: decks/templates/rbac.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: default-decks
  labels:
    app.kubernetes.io/name: "decks"
    app.kubernetes.io/version: 2.69.0
    app.kubernetes.io/instance: decks
    app.kubernetes.io/managed-by: nautilus
    helm.sh/chart: decks-2.69.0
    release: decks
rules:
- apiGroups:
  - decks.ecs.dellemc.com
  resources:
  - "*"
  verbs:
  - "*"
- apiGroups:
  - kahm.emcecs.github.com
  resources:
  - notifiers
  verbs:
  - "*"
- apiGroups:
  - app.k8s.io
  resources:
  - "*"
  verbs:
  - "*"
- apiGroups:
  - ""
  - extensions
  resources:
  - pods
  - services
  - endpoints
  - persistentvolumeclaims
  - events
  - configmaps
  - secrets
  - applications
  - nodes
  - namespaces
  - replicationcontrollers
  - daemonsets
  - deployments
  - replicasets
  - secrets/finalizers
  verbs:
  - "*"
- apiGroups:
  - batch
  resources:
  - jobs
  - cronjobs
  verbs:
  - "*"
- apiGroups:
  - policy
  resources:
  - poddisruptionbudgets
  verbs:
  - "*"
- apiGroups:
  - apps
  resources:
  - deployments
  - daemonsets
  - replicasets
  - statefulsets
  verbs:
  - "*"
- apiGroups:
  - zookeeper.pravega.io
  resources:
  - "*"
  verbs:
  - "*"
- apiGroups:
  - storage.k8s.io
  resources:
  - storageclasses
  - storageclasslists
  verbs:
  - get
  - list
---
# Source: decks/templates/testapp-rbac.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: decks-testapp
  labels:
    app.kubernetes.io/name: "decks"
    app.kubernetes.io/version: 2.69.0
    app.kubernetes.io/instance: decks
    app.kubernetes.io/managed-by: nautilus
    helm.sh/chart: decks-2.69.0
    release: decks
rules:
- apiGroups:
  - decks.ecs.dellemc.com
  resources:
  - "*"
  verbs:
  - "*"
- apiGroups:
  - kahm.emcecs.github.com
  resources:
  - notifiers
  verbs:
  - "*"
- apiGroups:
  - rbac.authorization.k8s.io
  resources:
  - clusterroles
  - clusterrolebindings
  - roles
  - rolebindings
  verbs:
  - "*"
- apiGroups:
  - app.k8s.io
  resources:
  - "*"
  verbs:
  - "*"
- apiGroups:
  - ""
  - extensions
  resources:
  - pods
  - pods/log
  - services
  - endpoints
  - configmaps
  - secrets
  - namespaces
  - replicationcontrollers
  - deployments
  - replicasets
  - serviceaccounts
  - persistentvolumeclaims
  verbs:
  - "*"
- apiGroups:
  - batch
  resources:
  - jobs
  - cronjobs
  verbs:
  - "*"
- apiGroups:
  - apps
  resources:
  - deployments
  - daemonsets
  - replicasets
  - statefulsets
  verbs:
  - "*"
---
# Source: decks/templates/rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: default-decks
  labels:
    app.kubernetes.io/name: "decks"
    app.kubernetes.io/version: 2.69.0
    app.kubernetes.io/instance: decks
    app.kubernetes.io/managed-by: nautilus
    helm.sh/chart: decks-2.69.0
    release: decks
subjects:
- kind: ServiceAccount
  name: decks
  namespace: default
roleRef:
  kind: ClusterRole
  name: default-decks
  apiGroup: rbac.authorization.k8s.io
---
# Source: decks/templates/testapp-rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: decks-testapp
  labels:
    app.kubernetes.io/name: "decks"
    app.kubernetes.io/version: 2.69.0
    app.kubernetes.io/instance: decks
    app.kubernetes.io/managed-by: nautilus
    helm.sh/chart: decks-2.69.0
    release: decks
subjects:
- kind: ServiceAccount
  name: decks-testapp
  namespace: default
roleRef:
  kind: ClusterRole
  name: decks-testapp
  apiGroup: rbac.authorization.k8s.io
---
# Source: decks/charts/decks-support-store/templates/support-store-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: decks-support-store
  namespace: default
  labels:
    io.kompose.service: decks-support-store
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 7443
    targetPort: 7443
  selector:
    io.kompose.service: decks-support-store
---
# Source: decks/templates/decks.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: decks
  namespace: default
  labels:
    app.kubernetes.io/name: "decks"
    release: decks
    name: decks
spec:
  replicas: 1
  selector:
    matchLabels:
      name: decks
  template:
    metadata:
      labels:
        name: decks
        app.kubernetes.io/name: "decks"
        release: decks
    spec:
      serviceAccountName: "decks"
      containers:
      - name: decks
        image: emccorp/decks:2.69.0
        imagePullPolicy: IfNotPresent
        command:
        - decks
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: WATCH_NAMESPACE
          value: ""
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: CONTROLLER_NAME
          value: decks
---
# Source: decks/charts/decks-support-store/templates/support-store-stateful-set.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: decks-support-store
  namespace: default
  labels:
    io.kompose.service: decks-support-store
    app.kubernetes.io/name: decks
    release: decks
    name: decks
spec:
  serviceName: decks-support-store
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: decks-support-store
  template:
    metadata:
      labels:
        io.kompose.service: decks-support-store
    spec:
      containers:
      - name: decks-support-store
        env:
        - name: USERNAME
          valueFrom:
            secretKeyRef:
              name: decks-support-store-secret
              key: username
        - name: PASSWORD
          valueFrom:
            secretKeyRef:
              name: decks-support-store-secret
              key: password
        - name: SALT
          valueFrom:
            secretKeyRef:
              name: decks-support-store-secret
              key: salt
        image: emccorp/decks-support-store:2.69.0
        imagePullPolicy: IfNotPresent
        command: ["/usr/local/bin/run-nginx.sh"]
        ports:
        - containerPort: 7443
        resources: {}
        volumeMounts:
        - mountPath: /opt/secure/data
          name: decks-support-store-claim0
      restartPolicy: Always
  volumeClaimTemplates:
    - metadata:
        labels:
          app: decks-support-store
          release: decks
        name: decks-support-store-claim0
        namespace: default
      spec:
        accessModes:
        - ReadWriteOnce
        dataSource: null
        resources:
          requests:
            storage: 200Gi
---
# Source: decks/templates/decks-app.yaml
apiVersion: app.k8s.io/v1beta1
kind: Application
metadata:
  name: "decks"
  namespace: default
  labels:
    app.kubernetes.io/name: "decks"
    app.kubernetes.io/version: 2.69.0
    app.kubernetes.io/instance: decks
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: decks-2.69.0
    release: decks
  annotations:
    com.dellemc.kahm.subscribed: "true"
    nautilus.dellemc.com/run-level: "15"
    nautilus.dellemc.com/chart-name: decks
    nautilus.dellemc.com/chart-version: 2.69.0
    nautilus.dellemc.com/chart-values: "{\"accessKey\":0,\"affinity\":{},\"createdecksappResource\":true,\"decks-support-store\":{\"affinity\":{},\"containerPort\":7443,\"global\":{\"platform\":\"Default\",\"product\":\"objectscale\",\"registry\":\"emccorp\",\"watchAllNamespaces\":true},\"image\":{\"pullPolicy\":\"IfNotPresent\",\"repository\":\"decks-support-store\",\"version\":\"2.0.0\"},\"nodeSelector\":{},\"persistentVolume\":{\"size\":\"200Gi\"},\"pullPolicy\":\"IfNotPresent\",\"replicaCount\":1,\"resources\":{},\"service\":{\"port\":7443,\"targetPort\":7443,\"type\":\"ClusterIP\"},\"tag\":\"2.69.0\",\"tolerations\":[]},\"global\":{\"platform\":\"Default\",\"product\":\"objectscale\",\"registry\":\"emccorp\",\"watchAllNamespaces\":true},\"helmTestConfig\":{\"srsGateway\":{\"port\":9443},\"testImage\":{\"repository\":\"decks-testapp\"}},\"image\":{\"repository\":\"decks\"},\"nodeSelector\":{},\"pin\":0,\"product\":\"objectscale\",\"productVersion\":0,\"pullPolicy\":\"IfNotPresent\",\"replicaCount\":1,\"resources\":{},\"siteID\":0,\"supportStore\":{\"enabled\":true},\"tag\":\"2.69.0\",\"tolerations\":[]}"
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: "decks"
  componentKinds:
    - group: apps
      kind: Deployment
    - group: core
      kind: ConfigMap
    - group: core
      kind: ServiceAccount
    - group: core
      kind: Pod
    - group: apps
      kind: ReplicaSet
    - group: rbac.authorization.k8s.io
      kind: ClusterRole
    - group: rbac.authorization.k8s.io
      kind: ClusterRoleBinding
  assemblyPhase: "Pending"
  descriptor:
    type: "decks"
    version: 2.69.0
    description: >
      Dell EMC Common Kubernetes Services
    keywords:
      - "decks"
      - "srs"
      - "licensing"
    info:
      - "Copyright (c) 2019-2020 Dell Inc. or its subsidiaries. All Rights Reserved."
---
# Source: decks/charts/decks-support-store/templates/support-store-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: decks-support-store-secret
  namespace: default
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-delete-policy": "before-hook-creation"
type: Opaque
data:
    username: "OVhlcVk="
    password: "d21mWlNFUTBBeA=="
    salt: "aVp4MnZCTDRjeA=="
---
# Source: decks/templates/test/test-app.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "decks-decks-test"
  annotations:
    "helm.sh/hook": test-success
spec:
  serviceAccountName: "decks-testapp"
  containers:
  - name: decks-decks-test
    image: emccorp/decks-testapp:2.69.0
    imagePullPolicy: IfNotPresent
    command:
    - decks-testapp
    env:
    - name: DECKS_RELEASE_NAME
      value: "decks" 
    - name: REGISTRY_NAME
      value: emccorp
    - name: REGISTRY_SECRET
      value: 
    - name: DECKS_NAMESPACE
      value: "default"
    - name: START_TIME
      value: "2021-03-16T12:13:31+03:00"
  restartPolicy: Never
---
# Source: kahm/templates/rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kahm
  namespace: default
imagePullSecrets:
  - name: dockerhub-registry-secret
---
# Source: kahm/templates/Rest-Secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: kahm-restapi-secrets
  namespace: default
  labels:
    kahm-restapi: "true"
type: Opaque
stringData:
  credentials.conf: |-
    realm: kahm-restapi
    username: kahm
    password: ChangeMe
---
# Source: kahm/templates/rbac-resource-watcher.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: default-kahm-resource-watcher
  labels:
    release: kahm
rules:
- apiGroups: ["*"]
  resources: ["*"]
  verbs: ["get", "watch", "list"]
---
# Source: kahm/templates/rbac.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: default-kahm
  labels:
    release: kahm
rules:
- apiGroups:
  - kahm.emcecs.github.com
  resources:
  - '*'
  verbs:
  - '*'
- apiGroups:
  - app.k8s.io
  resources:
  - "*"
  verbs:
  - "*"
- apiGroups:
  - ""
  - batch
  - extensions
  resources:
  - pods
  - pods/log
  - services
  - endpoints
  - persistentvolumeclaims
  - events
  - configmaps
  - secrets
  - applications
  - deployments
  - jobs
  - cronjobs
  verbs:
  - "*"
- apiGroups:
  - apps
  resources:
  - deployments
  - daemonsets
  - replicasets
  - statefulsets
  verbs:
  - "*"
---
# Source: kahm/templates/rbac-resource-watcher.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: default-kahm-resource-watcher
  labels:
    release: kahm
subjects:
- kind: ServiceAccount
  name: kahm
  namespace: default
roleRef:
  kind: ClusterRole
  name: default-kahm-resource-watcher
  apiGroup: rbac.authorization.k8s.io
---
# Source: kahm/templates/rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: default-kahm
  labels:
    release: kahm
subjects:
- kind: ServiceAccount
  name: kahm
  namespace: default
roleRef:
  kind: ClusterRole
  name: default-kahm
  apiGroup: rbac.authorization.k8s.io
---
# Source: kahm/templates/Rest-Service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: kahm
    release: kahm
  name: kahm-restapi
  namespace: default
spec:
  ports:
  - protocol: TCP
    name: rest 
    port: 17999 
    targetPort: rest 
  selector:
    app: kahm
  type: ClusterIP
---
# Source: kahm/templates/kahm.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kahm
  namespace: default
  labels:
    release: kahm
spec:
  replicas: 1
  selector:
    matchLabels:
      name: kahm
  strategy:
   type: Recreate
  template:
    metadata:
      labels:
        name: kahm
        release: kahm
        app: kahm
    spec:
      serviceAccountName: "kahm"
      imagePullSecrets:
        - name: dockerhub-registry-secret
      containers:
      - name: kahm
        image: emccorp/kahm:2.69.0
        imagePullPolicy: IfNotPresent
        command:
        - kahm
        ports:
        - containerPort: 60000 
          name: metrics
        - containerPort: 17999
          name: rest
        volumeMounts:
        - mountPath: /data/db
          name: db
        resources:
          requests:
            memory: 2Gi 
        env:
        - name: POD_NAME
          valueFrom:
           fieldRef:
             fieldPath: metadata.name
        - name: MY_POD_IP
          valueFrom:
           fieldRef:
             fieldPath: status.podIP
        - name: WATCH_NAMESPACE
          value: ""
        - name: REGISTRY_SECRET
          value: dockerhub-registry-secret
        - name: KAHM_DB_TYPE
          value: BadgerDB
        - name: KAHM_DB_EVENT_TTL
          value: "2592000"
      restartPolicy: Always
      volumes:
      - name: db
        persistentVolumeClaim:
          claimName: db-kahm-0
---
# Source: kahm/templates/kahm-app.yaml
apiVersion: app.k8s.io/v1beta1
kind: Application
metadata:
  name: "kahm"
  namespace: default
  labels:
    app.kubernetes.io/name: "kahm"
    app.kubernetes.io/version: 2.69.0
    app.kubernetes.io/instance: kahm
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: kahm-2.69.0
    release: kahm
  annotations:
    com.dellemc.kahm.subscribed: "true"
    nautilus.dellemc.com/run-level: "12"
    nautilus.dellemc.com/chart-name: kahm
    nautilus.dellemc.com/chart-version: 2.69.0
    nautilus.dellemc.com/chart-values: "{\"accessKey\":0,\"affinity\":{},\"createkahmappResource\":true,\"db\":{\"dbType\":\"BadgerDB\",\"eventTTL\":\"2592000\"},\"global\":{\"platform\":\"Default\",\"product\":\"objectscale\",\"registry\":\"emccorp\",\"registrySecret\":\"dockerhub-registry-secret\",\"watchAllNamespaces\":true},\"image\":{\"repository\":\"kahm\"},\"nodeSelector\":{},\"pin\":0,\"product\":\"objectscale\",\"productVersion\":0,\"pullPolicy\":\"IfNotPresent\",\"replicaCount\":1,\"resources\":{\"requests\":{\"memory\":\"2Gi\"}},\"restapi\":{\"password\":\"ChangeMe\",\"realm\":\"kahm-restapi\",\"username\":\"kahm\"},\"siteID\":0,\"tag\":\"2.69.0\",\"testImage\":{\"repository\":\"kahm-testapp\"},\"tolerations\":[]}"
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: "kahm"
  componentKinds:
    - group: apps
      kind: StatefulSet
    - group: core
      kind: ConfigMap
    - group: core
      kind: ServiceAccount
    - group: core
      kind: Pod
    - group: apps
      kind: ReplicaSet
    - group: rbac.authorization.k8s.io
      kind: ClusterRole
    - group: rbac.authorization.k8s.io
      kind: ClusterRoleBinding
  assemblyPhase: "Pending"
  descriptor:
    type: "kahm"
    version: 2.69.0
    description: >
      Kubernetes Application Health Management
    keywords:
      - "kahm"
      - "event"
      - "health"
    info:
      - "Copyright (c) 2019-2020 Dell Inc. or its subsidiaries. All Rights Reserved."
---
# Source: kahm/templates/badgerdb-pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: db-kahm-0
  namespace: 
  labels:
    app: kahm
    release: kahm
  annotations:
    "helm.sh/hook": "pre-install"
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
# Source: kahm/templates/test/test-app.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "kahm-kahm-test"
  namespace: default
  labels:
    release: kahm
  annotations:
    "helm.sh/hook": test-success
spec:
  serviceAccountName: "kahm"
  imagePullSecrets:
  - name: dockerhub-registry-secret
  containers:
  - name: kahm-kahm-test
    image: emccorp/kahm-testapp:2.69.0
    imagePullPolicy: IfNotPresent
    command:
    - kahm-testapp
    env:
    - name: KAHM_RELEASE_NAME
      value: "kahm"
    - name: REGISTRY_SECRET
      value: dockerhub-registry-secret
    - name: DOCKER_REGISTRY
      value: emccorp
    - name: GLOBAL_IMAGE_TAG
      value: 2.69.0
    - name: KAHM_NAMESPACE
      value: "default"
  restartPolicy: Never
---
# Source: supportassist/templates/ese-callback-rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: supportassist-objectscale-ese-callback
  namespace: default
  labels:
    app.kubernetes.io/component: supportassist-objectscale-ese-callback
    app.kubernetes.io/name: "supportassist-objectscale"
    app.kubernetes.io/instance: supportassist
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "2.69.0"
    app.kubernetes.io/part-of: supportassist
    helm.sh/chart: supportassist-2.69.0
    product: objectscale
    release: supportassist
imagePullSecrets:
  - name: dockerhub-registry-secret
---
# Source: supportassist/templates/notifier-rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: supportassist-objectscale-notifier
  namespace: default
  labels:
    app.kubernetes.io/component: supportassist-objectscale-notifier
    app.kubernetes.io/name: "supportassist-objectscale"
    app.kubernetes.io/instance: supportassist
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "2.69.0"
    app.kubernetes.io/part-of: supportassist
    helm.sh/chart: supportassist-2.69.0
    product: objectscale
    release: supportassist
imagePullSecrets:
  - name: dockerhub-registry-secret
---
# Source: supportassist/templates/supportassist-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: supportassist-objectscale-secret
  namespace: default
  labels:
    app.kubernetes.io/name: "supportassist-objectscale"
    app.kubernetes.io/instance: supportassist
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "2.69.0"
    app.kubernetes.io/part-of: supportassist
    helm.sh/chart: supportassist-2.69.0
    product: objectscale
    release: supportassist
type: Opaque
stringData:
  accessKey: "0"
  pin: "0"
---
# Source: supportassist/templates/supportassist-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: supportassist-objectscale-authkey
  namespace: default
  labels:
    app.kubernetes.io/name: "supportassist-objectscale"
    app.kubernetes.io/instance: supportassist
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "2.69.0"
    app.kubernetes.io/part-of: supportassist
    helm.sh/chart: supportassist-2.69.0
    product: objectscale
    release: supportassist
type: Opaque
stringData:
  authKey: tmpKey4U
---
# Source: supportassist/templates/supportassist-app-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
    name: supportassist-objectscale-app-config
    namespace: 
    labels:
        app.kubernetes.io/name: supportassist-objectscale
        app.kubernetes.io/version: 2.69.0
        app.kubernetes.io/instance: supportassist
        app.kubernetes.io/managed-by: Helm
        helm.sh/chart: supportassist-2.69.0
        release: supportassist
        product: objectscale
    annotations:
        com.dellemc.kahm.subscribed: "true"
data:
    eventRules: |-
      issueRules:
       - name: SupportAssistConfiguration
         description: "SupportAssist configuration issues"
         issueCategory: Auto
         matchOnList:
          - matchon:
            - label: SymptomID
              value: DECKS-SA-1023
    eventRemedies: |-
      symptoms:
        - symptomid: DECKS-SA-1023
          description: Dell EMC SupportAssist configuration issues
          remedies:
            - Verify the supportassist-objectscale pod is Running
            - Is SupportAssist still disabled?
            - Verify connectivity of configured gateways.
            - Verify a valid AccessKey and PIN were used.
    healthChecks: |-
---
# Source: supportassist/templates/supportassist.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: supportassist-objectscale-default-properties
  namespace: 
  labels:
    app.kubernetes.io/component: supportassist-objectscale-ese
    app.kubernetes.io/name: "supportassist-objectscale"
    app.kubernetes.io/instance: supportassist
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "2.69.0"
    app.kubernetes.io/part-of: supportassist
    helm.sh/chart: supportassist-2.69.0
    product: objectscale
    release: supportassist
# yamllint disable-rule:colons
data:
  DefaultProperties.json: |
    # ESE Static configuration. It is simple JSON, but
    # may contain comments prefixed by '#'
    # For property information, visit: https://confluence.gtie.dell.com/display/LCOM/ESE+Configuration
    {
        "ipAddress": "0.0.0.0",
        "port": "8080",
        "useSSL": false,
        "productFrontendUri": "http://supportassist-objectscale-ese-callback.default.svc.cluster.local:9447",
        # Could also be HTTPS: "productFrontendUri": "https://supportassist-objectscale.default.svc.cluster.local:8447",
        "productFrontendPrefix": "objectscale",
        "productFrontendType": "webrest",
        "srsTransferType": "OBJECTSCALE"
    }
---
# Source: supportassist/templates/supportassist-ese-store-claim0-persistentvolumeclaim.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: supportassist-objectscale-store-claim0
  namespace: default
  labels:
    io.kompose.service: ese-store-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
status: {}
---
# Source: supportassist/templates/supportassist.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: supportassist-objectscale-persistentdata
  namespace: 
  labels:
    app.kubernetes.io/component: supportassist-objectscale-ese
    app.kubernetes.io/name: "supportassist-objectscale"
    app.kubernetes.io/instance: supportassist
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "2.69.0"
    app.kubernetes.io/part-of: supportassist
    helm.sh/chart: supportassist-2.69.0
    product: objectscale
    release: supportassist
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
status: {}
---
# Source: supportassist/templates/notifier-rbac.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: default-supportassist-objectscale-notifier
  labels:
    app.kubernetes.io/component: supportassist-objectscale-notifier
    app.kubernetes.io/name: "supportassist-objectscale"
    app.kubernetes.io/instance: supportassist
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "2.69.0"
    app.kubernetes.io/part-of: supportassist
    helm.sh/chart: supportassist-2.69.0
    product: objectscale
    release: supportassist
rules:
- apiGroups:
  - decks.ecs.dellemc.com
  resources:
  - supportassists
  verbs:
  - "*"
- apiGroups:
  - ""
  - extensions
  resources:
  - secrets
  - events
  verbs:
  - "*"
---
# Source: supportassist/templates/notifier-rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: default-supportassist-objectscale-notifier
  labels:
    app.kubernetes.io/component: supportassist-objectscale-notifier
    app.kubernetes.io/name: "supportassist-objectscale"
    app.kubernetes.io/instance: supportassist
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "2.69.0"
    app.kubernetes.io/part-of: supportassist
    helm.sh/chart: supportassist-2.69.0
    product: objectscale
    release: supportassist
subjects:
- kind: ServiceAccount
  name: supportassist-objectscale-notifier
  namespace: default
roleRef:
  name: default-supportassist-objectscale-notifier
  kind: ClusterRole
  apiGroup: rbac.authorization.k8s.io
---
# Source: supportassist/templates/ese-callback-rbac.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: supportassist-objectscale-ese-callback
  namespace: default
  labels:
    app.kubernetes.io/component: supportassist-objectscale-ese-callback
    app.kubernetes.io/name: "supportassist-objectscale"
    app.kubernetes.io/instance: supportassist
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "2.69.0"
    app.kubernetes.io/part-of: supportassist
    helm.sh/chart: supportassist-2.69.0
    product: objectscale
    release: supportassist
rules:
- apiGroups:
  - decks.ecs.dellemc.com
  resources:
  - supportassists
  verbs:
  - "*"
- apiGroups:
  - app.k8s.io
  resources:
  - "*"
  verbs:
  - "*"
- apiGroups:
  - ""
  - extensions
  resources:
  - secrets
  verbs:
  - "*"
---
# Source: supportassist/templates/ese-callback-rbac.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: supportassist-objectscale-ese-callback
  namespace: default
  labels:
    app.kubernetes.io/component: supportassist-objectscale-ese-callback
    app.kubernetes.io/name: "supportassist-objectscale"
    app.kubernetes.io/instance: supportassist
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "2.69.0"
    app.kubernetes.io/part-of: supportassist
    helm.sh/chart: supportassist-2.69.0
    product: objectscale
    release: supportassist
subjects:
- kind: ServiceAccount
  name: supportassist-objectscale-ese-callback
  namespace: default
roleRef:
  name: supportassist-objectscale-ese-callback
  kind: Role
  apiGroup: rbac.authorization.k8s.io
---
# Source: supportassist/templates/ese-callback.yaml
apiVersion: v1
kind: Service
metadata:
  name: supportassist-objectscale-ese-callback
  namespace: 
  labels:
    app.kubernetes.io/component: supportassist-objectscale-ese-callback
    app.kubernetes.io/name: "supportassist-objectscale"
    app.kubernetes.io/instance: supportassist
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "2.69.0"
    app.kubernetes.io/part-of: supportassist
    helm.sh/chart: supportassist-2.69.0
    product: objectscale
    release: supportassist
spec:
  type: ClusterIP
  ports:
  - name: ese-callback
    port: 9447
    targetPort: ese-callback
    protocol: TCP
  selector:
    app.kubernetes.io/component: supportassist-objectscale-ese-callback
    app.kubernetes.io/name: supportassist-objectscale
---
# Source: supportassist/templates/notifier.yaml
apiVersion: v1
kind: Service
metadata:
  name: supportassist-objectscale-notifier
  namespace: 
  labels:
    app.kubernetes.io/component: supportassist-objectscale-notifier
    app.kubernetes.io/name: "supportassist-objectscale"
    app.kubernetes.io/instance: supportassist
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "2.69.0"
    app.kubernetes.io/part-of: supportassist
    helm.sh/chart: supportassist-2.69.0
    product: objectscale
    release: supportassist
spec:
  type: ClusterIP
  ports:
  - name: grpc 
    port: 50051 
    targetPort: grpc
    protocol: TCP
  selector:
    app.kubernetes.io/component: supportassist-objectscale-notifier
    app.kubernetes.io/name: supportassist-objectscale
---
# Source: supportassist/templates/supportassist-ese-store-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: supportassist-objectscale-store-svc
  namespace: default
  labels:
    io.kompose.service: ese-store
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 7443
      targetPort: 7443
  selector:
    app.kubernetes.io/component: supportassist-objectscale-ese
    io.kompose.service: ese-store
---
# Source: supportassist/templates/supportassist.yaml
apiVersion: v1
kind: Service
metadata:
  name: supportassist-objectscale
  namespace: 
  labels:
    app.kubernetes.io/component: supportassist-objectscale-ese
    app.kubernetes.io/name: "supportassist-objectscale"
    app.kubernetes.io/instance: supportassist
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "2.69.0"
    app.kubernetes.io/part-of: supportassist
    helm.sh/chart: supportassist-2.69.0
    product: objectscale
    release: supportassist
spec:
  type: ClusterIP
  ports:
  - name: secure
    port: 9447
    targetPort: secure
    protocol: TCP
  - name: insecure
    port: 8080
    targetPort: insecure
    protocol: TCP
  selector:
    app.kubernetes.io/name: supportassist-objectscale
    app.kubernetes.io/component: supportassist-objectscale-ese
---
# Source: supportassist/templates/ese-callback.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: supportassist-objectscale-ese-callback
  namespace: 
  labels:
    app.kubernetes.io/component: supportassist-objectscale-ese-callback
    app.kubernetes.io/name: "supportassist-objectscale"
    app.kubernetes.io/instance: supportassist
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "2.69.0"
    app.kubernetes.io/part-of: supportassist
    helm.sh/chart: supportassist-2.69.0
    product: objectscale
    release: supportassist
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: supportassist-objectscale-ese-callback
      app.kubernetes.io/name: supportassist-objectscale
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/component: supportassist-objectscale-ese-callback
        app.kubernetes.io/name: "supportassist-objectscale"
        app.kubernetes.io/instance: supportassist
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: "2.69.0"
        app.kubernetes.io/part-of: supportassist
        helm.sh/chart: supportassist-2.69.0
        product: objectscale
        release: supportassist
    spec:
      serviceAccountName: supportassist-objectscale-ese-callback
      imagePullSecrets:
        - name: dockerhub-registry-secret
      containers:
      - name: supportassist-objectscale-ese-callback
        image: emccorp/ese-callback:2.69.0
        imagePullPolicy: Always
        ports:
        - containerPort: 9447
          name: ese-callback
          protocol: TCP
        command: ["/usr/local/bin/ese-callback"]
        env:
        - name: MY_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: PRODUCT_NAME
          value: objectscale
        - name: POD_NAMESPACE
          value: default
      restartPolicy: Always
---
# Source: supportassist/templates/notifier.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: supportassist-objectscale-notifier
  namespace: 
  labels:
    app.kubernetes.io/component: supportassist-objectscale-notifier
    app.kubernetes.io/name: "supportassist-objectscale"
    app.kubernetes.io/instance: supportassist
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "2.69.0"
    app.kubernetes.io/part-of: supportassist
    helm.sh/chart: supportassist-2.69.0
    product: objectscale
    release: supportassist
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: supportassist-objectscale-notifier
      app.kubernetes.io/name: supportassist-objectscale
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/component: supportassist-objectscale-notifier
        app.kubernetes.io/name: "supportassist-objectscale"
        app.kubernetes.io/instance: supportassist
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: "2.69.0"
        app.kubernetes.io/part-of: supportassist
        helm.sh/chart: supportassist-2.69.0
        product: objectscale
        release: supportassist
    spec:
      serviceAccountName: supportassist-objectscale-notifier
      imagePullSecrets:
        - name: dockerhub-registry-secret
      containers:
      - name: supportassist-objectscale-notifier
        image: emccorp/supportassist-ese-notifier:2.69.0
        imagePullPolicy: Always
        ports:
        - containerPort: 50051 
          name: grpc 
          protocol: TCP
        env:
        - name: PRODUCT_NAME
          value:  objectscale
        - name: POD_NAMESPACE
          value:  default
        - name: MY_POD_IP
          valueFrom:
           fieldRef:
             fieldPath: status.podIP
      restartPolicy: Always
---
# Source: supportassist/templates/supportassist.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: supportassist-objectscale
  namespace: 
  labels:
    app.kubernetes.io/component: supportassist-objectscale-ese
    app.kubernetes.io/name: "supportassist-objectscale"
    app.kubernetes.io/instance: supportassist
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "2.69.0"
    app.kubernetes.io/part-of: supportassist
    helm.sh/chart: supportassist-2.69.0
    product: objectscale
    release: supportassist
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: supportassist-objectscale-ese
      app.kubernetes.io/name: supportassist-objectscale
      io.kompose.service: ese-store
  strategy:
    type: Recreate
  template:
    metadata:
      name: supportassist-objectscale
      namespace: 
      labels:
        app.kubernetes.io/component: supportassist-objectscale-ese
        app.kubernetes.io/name: supportassist-objectscale
        io.kompose.service: ese-store
        app.kubernetes.io/name: "supportassist-objectscale"
        app.kubernetes.io/instance: supportassist
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: "2.69.0"
        app.kubernetes.io/part-of: supportassist
        helm.sh/chart: supportassist-2.69.0
        product: objectscale
        release: supportassist
    spec:
      # to allow mounts and ownership as eseservice uid (999)
      # https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#configure-volume-permission-and-ownership-change-policy-for-pods
      securityContext:
        fsGroup: 999
        fsGroupChangePolicy: "OnRootMistmatch"
      containers:
      - name: supportassist-objectscale
        # image: <docker_registry>/dell-supportassist-ese:2.0.3
        image: emccorp/dell-supportassist-ese:2.2.0.0
        imagePullPolicy: Always
        command: ["/opt/ese/bin/entrypoint.sh"]
        ports:
        - containerPort: 9447
          name: secure
          protocol: TCP
        - containerPort: 8080
          name: insecure
          protocol: TCP
        volumeMounts:
          - name: supportassist-objectscale-persistentdata
            mountPath: /opt/ese/var
          - name: supportassist-objectscale-default-properties
            mountPath: /opt/ese/etc/DefaultProperties.json
            subPath: DefaultProperties.json
          - name: supportassist-objectscale-store-claim0
            mountPath: /opt/ese/data
        securityContext:
          runAsUser: 999
        env:
        - name: ESE_USER
          value: "eseservice"
        - name: REGISTRY_SECRET
          value: dockerhub-registry-secret
      - name: ese-store
        image: emccorp/decks-support-store:2.69.0
        imagePullPolicy: Always
        command: ["/usr/local/bin/run-nginx.sh"]
        securityContext:
          runAsUser: 0
        ports:
        - containerPort: 7443
        resources: {}
        volumeMounts:
        - mountPath: /opt/secure/data
          name: supportassist-objectscale-store-claim0
        env:
        - name: REGISTRY_SECRET
          value: dockerhub-registry-secret
        - name: USERNAME
          valueFrom:
            secretKeyRef:
              name: supportassist-objectscale-store-secret
              key: username
        - name: PASSWORD
          valueFrom:
            secretKeyRef:
              name: supportassist-objectscale-store-secret
              key: password
        - name: SALT
          valueFrom:
            secretKeyRef:
              name: supportassist-objectscale-store-secret
              key: salt
      restartPolicy: Always
      volumes:
      - name: supportassist-objectscale-persistentdata
        persistentVolumeClaim:
          claimName: supportassist-objectscale-persistentdata
      - name: supportassist-objectscale-default-properties
        configMap:
          name: supportassist-objectscale-default-properties
      - name: supportassist-objectscale-store-claim0
        persistentVolumeClaim:
          claimName: supportassist-objectscale-store-claim0
      imagePullSecrets:
      - name: dockerhub-registry-secret
---
# Source: supportassist/templates/supportassist-app.yaml
apiVersion: app.k8s.io/v1beta1
kind: Application
metadata:
  name: "supportassist-objectscale"
  namespace: default
  labels:
    app.kubernetes.io/name: "supportassist-objectscale"
    app.kubernetes.io/instance: supportassist
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "2.69.0"
    app.kubernetes.io/part-of: supportassist
    helm.sh/chart: supportassist-2.69.0
    product: objectscale
    release: supportassist
  annotations:
    com.dellemc.kahm.subscribed: "true"
    nautilus.dellemc.com/chart-name: supportassist
    nautilus.dellemc.com/chart-version: "2.69.0"
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: "supportassist-objectscale"
  componentKinds:
    - group: apps
      kind: StatefulSet
    - group: apps
      kind: Deployment
    - group: core
      kind: Secrets
    - group: core
      kind: Pod
    - group: apps
      kind: ReplicaSet
  assemblyPhase: "Pending"
  descriptor:
    type: "supportassist-objectscale"
    version: 2.69.0
    description: >
      Dell EMC SupportAssist Embedded Services Enabler
    keywords:
      - "SupportAssist"
      - "ese"
    info:
      - "Copyright (c) 2020 Dell Inc. or its subsidiaries. All Rights Reserved."
---
# Source: supportassist/templates/notifier-cr.yaml
apiVersion: kahm.emcecs.github.com/v1beta1
kind: Notifier
metadata:
  name: supportassist-objectscale
  namespace: 
  labels:
    kahm-notifier: objectscale-supportassist-ese
    app.kubernetes.io/name: "supportassist-objectscale"
    app.kubernetes.io/instance: supportassist
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "2.69.0"
    app.kubernetes.io/part-of: supportassist
    helm.sh/chart: supportassist-2.69.0
    product: objectscale
    release: supportassist
spec:
  hostname: supportassist-objectscale-notifier
  port: 50051
  grpcConnTimeout: 5
  grpcRetries: 3
---
# Source: supportassist/templates/supportassist-cr.yaml
apiVersion: decks.ecs.dellemc.com/v1beta1
kind: SupportAssist
metadata:
  name: supportassist-objectscale
  namespace: 
  labels:
    app.kubernetes.io/name: "supportassist-objectscale"
    app.kubernetes.io/instance: supportassist
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "2.69.0"
    app.kubernetes.io/part-of: supportassist
    helm.sh/chart: supportassist-2.69.0
    product: objectscale
    release: supportassist
spec:
  productName: "OBJECTSCALE"
  productModel: "OBJECTSCALE"
  productType: dell.enterprise.storage.objectscale
  productVersion: 0
  enabled: true
  siteID: 0
  systemMode: preProd
  eventMuted: true
  testDialHome: true
  remoteAccessEnabled: false
  useGateways: true
  CloudIQ:
    enabled: false
    inventory: 60
    performance: 5
    capacity: 5
    health: 5
    usageintelligence: 3600
---
# Source: supportassist/templates/supportassist-ese-store-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: supportassist-objectscale-store-secret
  namespace: default
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-delete-policy": "before-hook-creation"
type: Opaque
stringData:
    username: "U595n"
    password: "VDAQ3d12qp"
    salt: "toS5L7tFIi"
---
# Source: service-pod/templates/rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: service-pod-service-pod-sa
  namespace: default
  labels:
    release: service-pod
    product: objectscale
---
# Source: service-pod/templates/creds_secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: service-pod-service-pod-secrets
  namespace: default
  labels:
    release: service-pod
    product: objectscale
    app: service-pod-service-pod
type: Opaque
stringData:
  credentials.conf: |-
    remoteUserCredentials:
      user: root
      group: adm
      password: ChangeMe
---
# Source: service-pod/templates/rbac.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: default-service-pod-objectscale-service-pod-cr
  labels:
    release: service-pod
    product: objectscale 
rules:
- apiGroups:
  - ecs.dellemc.com
  resources:
  - "*"
  verbs:
  - "*"
- apiGroups:
  - decks.ecs.dellemc.com
  resources:
  - "*"
  verbs:
  - "*"
- apiGroups:
  - kahm.emcecs.github.com
  resources:
  - notifiers
  verbs:
  - "*"
- apiGroups:
  - app.k8s.io
  resources:
  - "*"
  verbs:
  - "*"
- apiGroups:
  - ""
  - extensions
  resources:
  - pods
  - pods/exec
  - pods/log
  - pods/portforward
  - services
  - endpoints
  - persistentvolumes
  - persistentvolumeclaims
  - events
  - configmaps
  - secrets
  - applications
  - nodes
  - namespaces
  - replicationcontrollers
  - daemonsets
  - deployments
  - replicasets
  verbs:
  - "*"
- apiGroups:
  - batch
  resources:
  - jobs
  - cronjobs
  verbs:
  - "*"
- apiGroups:
  - policy
  resources:
  - poddisruptionbudgets
  verbs:
  - "*"
- apiGroups:
  - apps
  resources:
  - deployments
  - daemonsets
  - replicasets
  - statefulsets
  verbs:
  - "*"
- apiGroups:
  - zookeeper.pravega.io
  resources:
  - "*"
  verbs:
  - "*"
- apiGroups:
  - storage.k8s.io
  resources:
  - storageclasses
  - storageclasslists
  verbs:
  - get
  - list
---
# Source: service-pod/templates/rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: default-service-pod-objectscale-service-pod-crb
  labels:
    release: service-pod
    product: objectscale 
subjects:
- kind: ServiceAccount
  name: service-pod-service-pod-sa
  namespace: default
roleRef:
  kind: ClusterRole
  name: default-service-pod-objectscale-service-pod-cr
  apiGroup: rbac.authorization.k8s.io
---
# Source: service-pod/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: service-pod-service-pod 
    release: service-pod
    product: objectscale 
  name: service-pod-service-pod 
  namespace: default
spec:
  type: ClusterIP
  ports:
  - port: 22
    name: ssh
    targetPort: ssh 
    protocol: TCP
  selector:
    remote_access: objectscale-service-pod
---
# Source: service-pod/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: service-pod-service-pod
  namespace: default
  labels:
    release: service-pod
    product: objectscale
    app: service-pod-service-pod
spec:
  replicas: 1
  selector:
    matchLabels:
      app: service-pod-service-pod
  template:
    metadata:
      labels:
        app: service-pod-service-pod
        name: service-pod-service-pod
        release: service-pod
        remote_access: objectscale-service-pod
        product: objectscale
    spec:
      serviceAccountName: service-pod-service-pod-sa
      containers:
      - name: service-pod
        image: emccorp/objectscale-service-tools:2.69.0
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 22
          name: ssh
          protocol: TCP
        resources:
          requests:
            memory: 2Gi
        env:
        - name: MY_POD_IP
          valueFrom:
              fieldRef:
                fieldPath: status.podIP
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: DELL_EMC_PRODUCT
          value: objectscale
        - name: RELEASE_NAME
          value: service-pod
        resources:
          limits:
            ephemeral-storage: 20Gi
          requests:
            ephemeral-storage: 10Gi
            memory: 2Gi
        volumeMounts:
        - mountPath: /dev/shm
          name: dshm
        - mountPath: /tmp
          name: host-data
        - mountPath: /etc/svcpod/creds
          name: creds-secret-vol
      dnsPolicy: ClusterFirst
      volumes:
      - name: dshm
        emptyDir:
          medium: Memory
      - name: host-data
        emptyDir: {}
      - name: creds-secret-vol
        secret:
          secretName: service-pod-service-pod-secrets
---
# Source: dellemc-license/templates/dellemc-license-app-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
    name: dellemc-objectscale-license-app-config
    namespace: 
    labels:
        app.kubernetes.io/name: dellemc-objectscale-license
        app.kubernetes.io/version: 2.69.0
        app.kubernetes.io/instance: dellemc-license
        app.kubernetes.io/managed-by: Helm
        helm.sh/chart: dellemc-license-2.69.0
        release: dellemc-license
        product: objectscale
    annotations:
        com.dellemc.kahm.subscribed: "true"
data:
    eventRules: |-
      issueRules:
       - description: "license is invalid"
         name: InvalidLicense
         issueCategory: Auto
         matchOnList:
          - matchon:
            - label: SymptomID
              value: DECKS-LIC-1008
          - matchon:
            - label: SymptomID
              value: DECKS-LIC-1002
         notifiers:
              - objectscale-supportassist-ese
       - description: "license is expiring or expired"
         name: ExpiringLicense
         issueCategory: Auto
         matchOnList:
          - matchon:
            - label: SymptomID
              value: DECKS-LIC-1005
          - matchon:
            - label: SymptomID
              value: DECKS-LIC-1006
          - matchon:
            - label: SymptomID
              value: DECKS-LIC-1002
         notifiers:
              - objectscale-supportassist-ese
    eventRemedies: |-
      symptoms:
        - symptomid: DECKS-LIC-1005
          description: Dell EMC subscription license expired for product objectscale
          remedies:
            - Check the end date of the objectscale license
            - Visit the Dell EMC Software Licensing Center (SLC) to
              renew/extend the objectscale license.
            - Contact your Dell EMC sales representative to
              renew/extend the objectscale license
        - symptomid: DECKS-LIC-1006
          description: Dell EMC subscription license for product objectscale is about to expire
          remedies:
            - Check the end date of the license
            - Visit the Dell EMC Software Licensing Center (SLC) to
              renew/extend the objectscale license.
            - Contact your Dell EMC sales representative to
              renew/extend the objectscale license
        - symptomid: DECKS-LIC-1008
          description: Invalid Dell EMC license
          remedies:
            - Verify the objectscale license was obtained from the
              Dell EMC Software Licensing Center
            - Verify the objectscale license was not modified prior to applying it to
              the cluster
            - Verify the PRODUCTSHORTNAME is defined in the objectscale license
            - Verify the subscription dates for licensed features are still valid (not expired)
        - symptomid: DECKS-LIC-1011
          description: License features no longer being tracked
          remedies:
            - Verify the objectscale license is correct and the feature was intended to
              be removed.
    healthChecks: |-
---
# Source: dellemc-license/templates/dellemc-license-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: dellemc-objectscale-license
  namespace: default
  labels:
    release: dellemc-license
rules:
- apiGroups:
  - decks.ecs.dellemc.com
  resources:
  - licenses
  verbs: ["get", "watch", "list"]
---
# Source: dellemc-license/templates/dellemc-license-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: dellemc-objectscale-license
  namespace: default
  labels:
    release: dellemc-license
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: dellemc-objectscale-license
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: Group
  name: system:authenticated
---
# Source: dellemc-license/templates/dellemc-license-app.yaml
apiVersion: app.k8s.io/v1beta1
kind: Application
metadata:
  name: dellemc-objectscale-license
  namespace: default
  labels:
    app.kubernetes.io/name: dellemc-objectscale-license
    app.kubernetes.io/version: 2.69.0
    app.kubernetes.io/instance: dellemc-license
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: dellemc-license-2.69.0
    product: objectscale
    release: dellemc-license
  annotations:
    com.dellemc.kahm.subscribed: "true"
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: dellemc-objectscale-license
  componentKinds:
    - group: core
      kind: ConfigMaps
    - group: core
      kind: Secrets
  assemblyPhase: "Pending"
  descriptor:
    type: dellemc-license
    version: 2.69.0
    description: >
      Dell EMC License
    keywords:
      - "decks"
      - "supportassist"
      - "licensing"
    info:
      - "Copyright Â© 2019-2021 Dell Inc. or its subsidiaries. All Rights Reserved."
---
# Source: decks-support-store/templates/support-store-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: decks-support-store
  namespace: default
  labels:
    io.kompose.service: decks-support-store
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 7443
    targetPort: 7443
  selector:
    io.kompose.service: decks-support-store
---
# Source: decks-support-store/templates/support-store-stateful-set.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: decks-support-store
  namespace: default
  labels:
    io.kompose.service: decks-support-store
    app.kubernetes.io/name: decks
    release: decks-support-store
    name: decks
spec:
  serviceName: decks-support-store
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: decks-support-store
  template:
    metadata:
      labels:
        io.kompose.service: decks-support-store
    spec:
      containers:
      - name: decks-support-store
        env:
        - name: USERNAME
          valueFrom:
            secretKeyRef:
              name: decks-support-store-secret
              key: username
        - name: PASSWORD
          valueFrom:
            secretKeyRef:
              name: decks-support-store-secret
              key: password
        - name: SALT
          valueFrom:
            secretKeyRef:
              name: decks-support-store-secret
              key: salt
        image: emccorp/decks-support-store:2.69.0
        imagePullPolicy: IfNotPresent
        command: ["/usr/local/bin/run-nginx.sh"]
        ports:
        - containerPort: 7443
        resources: {}
        volumeMounts:
        - mountPath: /opt/secure/data
          name: decks-support-store-claim0
      restartPolicy: Always
  volumeClaimTemplates:
    - metadata:
        labels:
          app: decks-support-store
          release: decks
        name: decks-support-store-claim0
        namespace: default
      spec:
        accessModes:
        - ReadWriteOnce
        dataSource: null
        resources:
          requests:
            storage: 200Gi
---
# Source: decks-support-store/templates/support-store-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: decks-support-store-secret
  namespace: default
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-delete-policy": "before-hook-creation"
type: Opaque
data:
    username: "SU8weFg="
    password: "ZUhIU2V0UWU4TQ=="
    salt: "SmxUR0dqSXcyMg=="
