---
# Source: objectscale-manager/charts/atlas-operator/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: atlas-operator
  namespace: dellemc-sf426-domain-c45
  labels:
    app.kubernetes.io/name: atlas-operator
    helm.sh/chart: atlas-operator-0.31.0
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/version: "0.13.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: objectscale-manager/charts/bookkeeper-operator/templates/service_account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: bookkeeper-operator
  namespace: dellemc-sf426-domain-c45
  labels:
    app.kubernetes.io/name: bookkeeper-operator
    app.kubernetes.io/version: "0.1.3"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: "bookkeeper-operator-0.1.3"
---
# Source: objectscale-manager/charts/federation/templates/federation-rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: federation
  namespace: dellemc-sf426-domain-c45
  labels:
    app.kubernetes.io/name: "federation"
    app.kubernetes.io/version: 0.71.2
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: federation-0.71.2
    release: RELEASE-NAME
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/fluxd/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: RELEASE-NAME-fluxd
  labels:
    app.kubernetes.io/name: RELEASE-NAME-fluxd
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/influxdb-operator/templates/service_account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: RELEASE-NAME-influxdb-operator
  labels:
    app.kubernetes.io/name: RELEASE-NAME-influxdb-operator
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.71.2"
    app.kubernetes.io/part-of: RELEASE-NAME
    helm.sh/chart: influxdb-operator-0.71.2
    release: RELEASE-NAME
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/prometheus-alerts/templates/serviceaccount.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
apiVersion: v1
kind: ServiceAccount
metadata:
  name: RELEASE-NAME-prometheus-alerts
  labels:
    app.kubernetes.io/name: RELEASE-NAME-prometheus-alerts
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/statefuldaemonset-operator/templates/service_account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: RELEASE-NAME-statefuldaemonset-operator
  labels:
    app.kubernetes.io/name: RELEASE-NAME-statefuldaemonset-operator
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.71.2"
    app.kubernetes.io/part-of: RELEASE-NAME
    helm.sh/chart: statefuldaemonset-operator-0.71.2
    release: RELEASE-NAME
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/telegraf/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: RELEASE-NAME-telegraf
  labels:
    app.kubernetes.io/name: RELEASE-NAME-telegraf
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/throttler/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: RELEASE-NAME-throttler
  labels:
    app.kubernetes.io/name: RELEASE-NAME-throttler
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
---
# Source: objectscale-manager/charts/pravega-operator/templates/service_account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: pravega-operator
  namespace: dellemc-sf426-domain-c45
  labels:
    app.kubernetes.io/name: pravega-operator
    app.kubernetes.io/version: "0.5.2"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: "pravega-operator-0.5.2"
---
# Source: objectscale-manager/charts/service-pod/templates/rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: RELEASE-NAME-service-pod-sa
  namespace: dellemc-sf426-domain-c45
  labels:
    release: RELEASE-NAME
    product: objectscale
---
# Source: objectscale-manager/templates/healthcheck-rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: RELEASE-NAME-healthchecks
  namespace: dellemc-sf426-domain-c45
---
# Source: objectscale-manager/templates/operator-rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: objectscale-operator
  namespace: dellemc-sf426-domain-c45
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.71.2
    app.kubernetes.io/component: objectscale-operator
    app.kubernetes.io/part-of: RELEASE-NAME
    helm.sh/chart: objectscale-manager-0.71.2
    release: RELEASE-NAME
    operator: objectscale-operator
    product: objectscale
---
# Source: objectscale-manager/templates/telemetry-rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: RELEASE-NAME-inventory
  namespace: dellemc-sf426-domain-c45
---
# Source: objectscale-manager/templates/telemetry-rbac.yaml
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: RELEASE-NAME-capacity
  namespace: dellemc-sf426-domain-c45
---
# Source: objectscale-manager/templates/telemetry-rbac.yaml
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: RELEASE-NAME-performance
  namespace: dellemc-sf426-domain-c45
---
# Source: objectscale-manager/templates/telemetry-rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: RELEASE-NAME-health
  namespace: dellemc-sf426-domain-c45
---
# Source: objectscale-manager/templates/telemetry-rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: dellemc-sf426-domain-c45-license-usage
  namespace: dellemc-sf426-domain-c45
---
# Source: objectscale-manager/charts/service-pod/templates/creds_secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: RELEASE-NAME-service-pod-secrets
  namespace: dellemc-sf426-domain-c45
  labels:
    release: RELEASE-NAME
    product: objectscale
    app: RELEASE-NAME-service-pod
type: Opaque
stringData:
  credentials.conf: |-
    remoteUserCredentials:
      user: svcuser
      group: users
      password: ChangeMe
---
# Source: objectscale-manager/charts/bookkeeper-operator/templates/version_map.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: bk-supported-versions-map
  namespace: dellemc-sf426-domain-c45
  labels:
    app.kubernetes.io/name: bookkeeper-operator
    app.kubernetes.io/version: "0.1.3"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: "bookkeeper-operator-0.1.3"
data:
  keys: |
        0.1.0:0.1.0
        0.2.0:0.2.0
        0.3.0:0.3.0,0.3.1,0.3.2
        0.3.1:0.3.1,0.3.2
        0.3.2:0.3.2
        0.4.0:0.4.0
        0.5.0:0.5.0,0.5.1,0.6.0,0.6.1,0.6.2,0.7.0,0.7.1
        0.5.1:0.5.1,0.6.0,0.6.1,0.6.2,0.7.0,0.7.1
        0.6.0:0.6.0,0.6.1,0.6.2,0.7.0,0.7.1
        0.6.1:0.6.1,0.6.2,0.7.0,0.7.1
        0.6.2:0.6.2,0.7.0,0.7.1
        0.7.0:0.7.0,0.7.1
        0.7.1:0.7.1
        0.9.0:0.9.0,0.9.0-2684.01ecbde96
        0.9.0:0.9.0
---
# Source: objectscale-manager/charts/dcm/templates/dcm-log-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: dcm-log-config
  namespace: dellemc-sf426-domain-c45
  labels:
    app.kubernetes.io/name: objectscale-manager
    helm.sh/chart: dcm-0.71.2
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/version: 0.71.2
    app.kubernetes.io/part-of: ecs-flex-manager
data:
  dcm-log4j2.xml: |
    <?xml version="1.0" encoding="UTF-8"?>
    <Configuration  monitorInterval="60" shutdownHook="disable">
        <Appenders>
            <RollingFile name="R" fileName="${sys:product.home}/logs/dcm.log"
                         filePattern="${sys:product.home}/logs/dcm.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
            </RollingFile>

            <RollingFile name="P" fileName="${sys:product.home}/logs/dcm-perf-counter.log"
                         filePattern="${sys:product.home}/logs/dcm-perf-counter.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
            </RollingFile>

            <RollingFile name="E" fileName="${sys:product.home}/logs/dcm-error.log"
                         filePattern="${sys:product.home}/logs/dcm-error.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
            </RollingFile>

            <RollingFile name="M" fileName="${sys:product.home}/logs/dcm-stats.log"
                         filePattern="${sys:product.home}/logs/dcm-stats.log.%i">
                <PatternLayout>
                    <Pattern>%d{ISO8601} [%t] %5p  %F (line %L) %m%n%ex</Pattern>
                </PatternLayout>
                <Policies>
                    <SizeBasedTriggeringPolicy size="5 MB"/>
                </Policies>
            </RollingFile>

            <Syslog name="alertsLogger" host="localhost" port="514" protocol="UDP" facility="LOCAL7"/>

            <Async name="asyncR" includeLocation="true">
                <AppenderRef ref="R"/>
            </Async>
            <Async name="asyncE" includeLocation="true">
                <AppenderRef ref="E"/>
            </Async>
            <Async name="asyncP" includeLocation="true">
                <AppenderRef ref="P"/>
            </Async>
            <Async name="asyncM" includeLocation="true">
                <AppenderRef ref="M"/>
            </Async>
        </Appenders>

        <Loggers>
            <Logger name="org.apache.zookeeper" level="INFO"/>
            <Logger name="org.perf4j.TimingLogger" level="ERROR"/>
            <Logger name="com.emc.storageos.data.object.utils.RequestTrace" level="INFO"/>
            <Logger name="org.eclipse.jetty.server.RequestLog" level="INFO"/>

            <Logger name="com.emc.storageos.services.util.AlertsLogger" level="WARN" additivity="false">
                <AppenderRef ref="alertsLogger"/>
            </Logger>
            <Logger name="com.emc.storageos.objcontrol.object.shared.PerformanceCounter" level="DEBUG" additivity="false">
                <AppenderRef ref="asyncP"/>
            </Logger>
            <Logger name="com.emc.storageos.data.monitoring.MonitoringWorker" level="INFO">
                <AppenderRef ref="asyncM"/>
            </Logger>
            <Logger name="com.emc.storageos.data.object.impl.buffer" level="INFO">
                <AppenderRef ref="asyncM"/>
            </Logger>
            <Logger name="com.dell.objectscale.dcm.rest" level="DEBUG" />

            <Root level="info">
                <AppenderRef ref="asyncR"/>
                <AppenderRef ref="asyncE" level="error"/>
            </Root>
        </Loggers>

    </Configuration>
---
# Source: objectscale-manager/charts/federation/templates/fedsvc-local-objectstores-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
    name: fedsvc-local-objectstores
    namespace: dellemc-sf426-domain-c45
    labels:
      app.kubernetes.io/name: fedsvc
      app.kubernetes.io/instance: RELEASE-NAME
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/version: 0.71.2
      app.kubernetes.io/part-of: RELEASE-NAME
      helm.sh/chart: federation-0.71.2
      release: RELEASE-NAME
      operator: objectscale-operator
      product: objectscale
    annotations:
        com.dellemc.kahm.subscribed: "true"
data:
---
# Source: objectscale-manager/charts/federation/templates/fedsvc-local-services-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
    name: fedsvc-local-services
    namespace: dellemc-sf426-domain-c45
    labels:
      app.kubernetes.io/name: fedsvc
      app.kubernetes.io/instance: RELEASE-NAME
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/version: 0.71.2
      app.kubernetes.io/part-of: RELEASE-NAME
      helm.sh/chart: federation-0.71.2
      release: RELEASE-NAME
      operator: objectscale-operator
      product: objectscale
    annotations:
        com.dellemc.kahm.subscribed: "true"
data:
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/fluxd/templates/configs-confd-template.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#

apiVersion: v1
kind: ConfigMap
metadata:
  name: RELEASE-NAME-fluxd-confd-template
  labels:
    app.kubernetes.io/name: RELEASE-NAME-fluxd
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
data:
  fluxd_flex.hl.json.toml: |+
    [template]
    src = "fluxd_flex.hl.json.tmpl"
    dest = "/etc/fluxd/hl.json"
    keys = [
        "/replicas",
    ]
    reload_cmd = "pkill fluxd && pkill nginx"
  fluxd_flex.env.toml: |+
    [template]
    src = "fluxd_flex.env.tmpl"
    dest = "/etc/fluxd/fluxd.env"
    keys = [
        "/replicas",
    ]
    reload_cmd = "pkill fluxd && pkill nginx"
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/fluxd/templates/configs-template.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: RELEASE-NAME-fluxd-configs-templates
  labels:
    app: "RELEASE-NAME-fluxd"
    chart: "fluxd-0.54.0"
    release: RELEASE-NAME
data:
  fluxd_flex.hl.json.tmpl: |-
    {
      "range-selection-enabled": true,
      "store-sync-enabled": true,
      "store-type": "k8s",
      "root-store-location": "fluxd-hostlookup-influxdb",
      "start-sleep-max": "30s",
      "update-interval": "5m",
      "check-interval": "5m",
      "writer-check-interval": "200s",
      "history-duration": "120h",
      "init-retry-interval": "20s",
      "request-timeout": "30s",
      "startup-ranges-fill-timeout": "3m",
      "startup-ping-timeout": "20s",
      "online-ping-interval": "30s",
      "online-ping-retries": 3,{{- $replicas := atoi (getv "/replicas" "1") }}
    {{- $replicas_per_partition := atoi (getenv "INFLUXDB_REPLICAS_PER_PARTITION" "3") }}
      {{- $partitions_count := div $replicas $replicas_per_partition }}
      "scale-partitions-count": {{ $partitions_count }},
      "scale-replicas-per-partition": {{ $replicas_per_partition }},
      "replicas-config-map-name": "RELEASE-NAME-influxdb-replicas",
      "replicas-config-name": "replicas.json"
    }
  fluxd_flex.env.tmpl: |-
    {{- $release_name := getenv "RELEASE_NAME" "" -}}
    {{- $release_namespace := getenv "RELEASE_NAMESPACE" "" -}}
    {{- $tls_enabled := getenv "TLS_ENABLED" "" -}}
    {{- $replicas := atoi (getv "/replicas" "1") -}}STORAGE_HOSTS=
    {{- range $i, $e := seq 1 ($replicas) -}}
    {{- if $i}},{{end -}}
    {{- if eq $tls_enabled "true" -}}127.0.0.1{{$i}}:8{{$i}}86
    {{- else -}}{{- $release_name }}-influxdb-{{$i}}.{{ $release_name }}-influxdb.{{ $release_namespace }}.svc.cluster.local:8086
    {{- end -}}
    {{- end }}
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/fluxd/templates/logger-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: RELEASE-NAME-fluxd-logger-config
  labels:
    app: "RELEASE-NAME-fluxd"
    chart: "fluxd-0.54.0"
    release: RELEASE-NAME
data:
  logger.json: |-
    {
      "maxsize": 50,
      "maxbackups": 1,
      "maxage": 60,
      "compress": false
    }
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/grafana/templates/dashboards.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "RELEASE-NAME-grafana-dashboards-internal"
  labels:
    release: RELEASE-NAME
data:
  capacity_ec.json: |-
    {
      "__inputs": [],
      "__requires": [
        {
          "type": "grafana",
          "id": "grafana",
          "name": "Grafana",
          "version": "6.2.5ecs"
        },
        {
          "type": "panel",
          "id": "graph",
          "name": "Graph",
          "version": ""
        },
        {
          "type": "panel",
          "id": "table",
          "name": "Table",
          "version": ""
        }
      ],
      "annotations": {
        "list": [
          {
            "builtIn": 1,
            "datasource": "-- Grafana --",
            "enable": true,
            "hide": true,
            "iconColor": "rgba(0, 211, 255, 1)",
            "name": "Annotations & Alerts",
            "type": "dashboard"
          }
        ]
      },
      "editable": true,
      "gnetId": null,
      "graphTooltip": 0,
      "id": null,
      "links": [],
      "panels": [
        {
          "columns": [],
          "fontSize": "100%",
          "gridPos": {
            "h": 3,
            "w": 24,
            "x": 0,
            "y": 0
          },
          "id": 2,
          "links": [],
          "options": {},
          "pageSize": null,
          "scroll": true,
          "showHeader": true,
          "sort": {
            "col": 0,
            "desc": true
          },
          "styles": [
            {
              "alias": "Time",
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "pattern": "Time",
              "type": "hidden"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "decimals": 2,
              "pattern": "Field",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Measurement",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Value",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "Coding Rate",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "coding_rate",
              "thresholds": [],
              "type": "number",
              "unit": "Bps"
            },
            {
              "alias": "Coded (%)",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "coded_ratio",
              "thresholds": [],
              "type": "number",
              "unit": "percentunit"
            },
            {
              "alias": "Total Coded Data",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "total_coded_data",
              "thresholds": [],
              "type": "number",
              "unit": "bytes"
            },
            {
              "alias": "Total Coding Data",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "total_coding_data",
              "thresholds": [],
              "type": "number",
              "unit": "bytes"
            },
            {
              "alias": "Est. Time to Complete",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 1,
              "mappingType": 1,
              "pattern": "est_time",
              "thresholds": [],
              "type": "number",
              "unit": "s"
            }
          ],
          "targets": [
            {
              "query": "import \"csv\"\ndefault = csv.from(csv:\"#datatype,string,long,string,double\n#group,false,false,true,false\n#default,_result,,,\n,result,table,_field,_value\n,,100,total_coding_data,0\")\n\ndata = from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_ec_region\"\r and r._field == \"total_coding_data\")\r\n|> range($range)\r\n|> last()\r\n|> keep(columns: [\"_field\", \"_value\"])\n\nunion(tables: [default, data])\n\r\n\r\r\r\n|> pivot(rowKey:[], columnKey: [\"_field\"], valueColumn: \"_value\")\n",
              "refId": "B",
              "resultFormat": "table"
            },
            {
              "query": "import \"csv\"\ndefault = csv.from(csv:\"#datatype,string,long,string,double\n#group,false,false,true,false\n#default,_result,,,\n,result,table,_field,_value\n,,100,total_coded_data,0\")\n\ndata = from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_ec_region\"\r and r._field == \"total_coded_data\")\r\n|> range($range)\r\n|> last()\r\n|> keep(columns: [\"_field\", \"_value\"])\n\nunion(tables: [default, data])\n\r\n\r\r\r\n\r\n|> pivot(rowKey:[], columnKey: [\"_field\"], valueColumn: \"_value\")",
              "refId": "A",
              "resultFormat": "table"
            },
            {
              "query": "import \"csv\"\ndefault = csv.from(csv:\"#datatype,string,long,string,double\n#group,false,false,true,false\n#default,_result,,,\n,result,table,_field,_value\n,,100,total_coding_data,0\n,,101,total_coded_data,0\")\n\ndata = from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_ec_region\"\r and (r._field == \"total_coding_data\" or r._field == \"total_coded_data\"))\r\n|> range($range)\r\n|> last()\r\n|> keep(columns: [\"_field\", \"_value\"])\n\nunion(tables: [default, data])\n\r\n\r\r\r\n\r\n|> pivot(rowKey:[], columnKey: [\"_field\"], valueColumn: \"_value\")\n|> map(fn: (r) => ({\n    coded_ratio:if r.total_coding_data <= 0 then 0.0\n                else if r.total_coded_data > r.total_coding_data then 1.0\n                else r.total_coded_data / r.total_coding_data\n}))\n",
              "refId": "D",
              "resultFormat": "table"
            },
            {
              "query": "import \"csv\"\ndefault = csv.from(csv:\"#datatype,string,long,string,double\n#group,false,false,true,false\n#default,_result,,,\n,result,table,_field,_value\n,,100,coding_rate,0\")\n\ndata = from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_ec_rate_region\"\r and r._field == \"coding_rate\")\r\n|> range($range)\r\n|> last()\n\r\n|> keep(columns: [\"_field\", \"_value\"])\n\nunion(tables: [default, data])\n\r\n\r\r\r\n\r\n|> pivot(rowKey:[], columnKey: [\"_field\"], valueColumn: \"_value\")",
              "refId": "C",
              "resultFormat": "table"
            },
            {
              "query": "import \"csv\"\ndefault = csv.from(csv:\"#datatype,string,long,string,double\n#group,false,false,true,false\n#default,_result,,,\n,result,table,_field,_value\n,,100,total_coding_data,0\n,,101,total_coded_data,0\n,,102,coding_rate,0\")\n\ndata = from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => (r._measurement == \"cq_capacity_ec_region\"\r and (r._field == \"total_coding_data\" or r._field == \"total_coded_data\")) or (r._measurement == \"cq_capacity_ec_rate_region\"\r and r._field == \"coding_rate\"))\r\n|> range($range)\r\n|> last()\r\n|> keep(columns: [\"_field\", \"_value\"])\n\nunion(tables: [default, data])\n\r\n|> pivot(rowKey:[], columnKey: [\"_field\"], valueColumn: \"_value\")\n|> map(fn: (r) => ({\n       pending_data: r.total_coding_data - r.total_coded_data,\n       coding_rate: r.coding_rate\n       }))\n|> map(fn: (r) => ({\n       est_time: if r.pending_data > 0 then r.pending_data / (r.coding_rate) else 0.0\n       }))",
              "refId": "E",
              "resultFormat": "table"
            }
          ],
          "timeFrom": null,
          "timeShift": null,
          "title": "Erasure Encoding",
          "transform": "table",
          "type": "table"
        },
        {
          "collapsed": true,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 3
          },
          "id": 4,
          "panels": [
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "fill": 1,
              "gridPos": {
                "h": 8,
                "w": 12,
                "x": 0,
                "y": 4
              },
              "id": 6,
              "legend": {
                "avg": false,
                "current": true,
                "max": false,
                "min": false,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_ec_region\"\r and r._field == \"total_coding_data\")\r\n|> range($range)\r\n|> keep(columns: [\"_value\", \"_time\"])\n|> map(fn: (r) => ({_value: if r._value < 0 then 0.0 else r._value, _time: r._time}))",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Total Coding Data",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "bytes",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "fill": 1,
              "gridPos": {
                "h": 8,
                "w": 12,
                "x": 12,
                "y": 4
              },
              "id": 7,
              "legend": {
                "avg": false,
                "current": true,
                "max": false,
                "min": false,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_ec_region\"\r and r._field == \"total_coded_data\")\r\n|> range($range)\r\n|> keep(columns: [\"_value\", \"_time\"])\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Total Coded Data",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "bytes",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "fill": 1,
              "gridPos": {
                "h": 8,
                "w": 12,
                "x": 0,
                "y": 12
              },
              "id": 9,
              "legend": {
                "avg": false,
                "current": true,
                "max": false,
                "min": false,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_ec_region\"\r and (r._field == \"total_coding_data\" or r._field == \"total_coded_data\"))\r\n|> range($range)\r\n|> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n|> map(fn: (r) => ({_value:\n   if r.total_coding_data <= 0 then 0.0\n   else if r.total_coded_data > r.total_coding_data then 1.0\n   else r.total_coded_data / r.total_coding_data,\n   _time: r._time}))\n|> keep(columns: [\"_value\", \"_time\"])\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Coded (%)",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 2,
                  "format": "percentunit",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "fill": 1,
              "gridPos": {
                "h": 8,
                "w": 12,
                "x": 12,
                "y": 12
              },
              "id": 8,
              "legend": {
                "avg": false,
                "current": true,
                "max": false,
                "min": false,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_ec_rate_region\"\r and r._field == \"coding_rate\")\r\n|> range($range)\r\n|> keep(columns: [\"_value\", \"_time\"])\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Coding Rate (per second)",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "Bps",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            }
          ],
          "title": "History",
          "type": "row"
        }
      ],
      "refresh": false,
      "schemaVersion": 18,
      "style": "dark",
      "tags": [],
      "templating": {
        "list": []
      },
      "time": {
        "from": "now-24h",
        "to": "now"
      },
      "timepicker": {
        "refresh_intervals": [
          "5s",
          "10s",
          "30s",
          "1m",
          "5m",
          "15m",
          "30m",
          "1h",
          "2h",
          "1d"
        ],
        "time_options": [
          "5m",
          "15m",
          "1h",
          "6h",
          "12h",
          "24h",
          "2d",
          "7d",
          "30d"
        ]
      },
      "timezone": "",
      "title": "Erasure Encoding",
      "uid": "V1uHcOKWk",
      "version": 5
    }
  capacity_overview.json: |-
    {
      "__inputs": [
        {
          "name": "DS_FLUX",
          "label": "Flux",
          "description": "",
          "type": "datasource",
          "pluginId": "grafana-influxdb-flux-datasource",
          "pluginName": "Flux (InfluxDB) [BETA]"
        }
      ],
      "__requires": [
        {
          "type": "grafana",
          "id": "grafana",
          "name": "Grafana",
          "version": "6.2.5ecs"
        },
        {
          "type": "datasource",
          "id": "grafana-influxdb-flux-datasource",
          "name": "Flux (InfluxDB) [BETA]",
          "version": "5.2.11"
        },
        {
          "type": "panel",
          "id": "graph",
          "name": "Graph",
          "version": ""
        },
        {
          "type": "panel",
          "id": "table",
          "name": "Table",
          "version": ""
        }
      ],
      "annotations": {
        "list": [
          {
            "builtIn": 1,
            "datasource": "-- Grafana --",
            "enable": true,
            "hide": true,
            "iconColor": "rgba(0, 211, 255, 1)",
            "name": "Annotations & Alerts",
            "type": "dashboard"
          }
        ]
      },
      "editable": true,
      "gnetId": null,
      "graphTooltip": 0,
      "id": null,
      "iteration": 1594925974683,
      "links": [
        {
          "asDropdown": true,
          "icon": "external link",
          "tags": [
            "Capacity"
          ],
          "title": "Related dashboards",
          "type": "dashboards"
        }
      ],
      "panels": [
        {
          "columns": [],
          "description": "Summary  by all Object Stores,  shows last values.",
          "fontSize": "100%",
          "gridPos": {
            "h": 3,
            "w": 24,
            "x": 0,
            "y": 0
          },
          "id": 17,
          "links": [],
          "options": {},
          "pageSize": null,
          "scroll": true,
          "showHeader": true,
          "sort": {
            "col": 0,
            "desc": true
          },
          "styles": [
            {
              "alias": "Time",
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "pattern": "Time",
              "type": "hidden"
            },
            {
              "alias": "$1",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "/vl[0-3]_(.*)/",
              "thresholds": [],
              "type": "number",
              "unit": "bytes"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Measurement",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Field",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Value",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "decimals": 2,
              "pattern": "/.*/",
              "thresholds": [],
              "type": "number",
              "unit": "short"
            }
          ],
          "targets": [
            {
              "query": "from(bucket: \"monitoring_vdc\")\n  |> filter(fn: (r) => r._measurement == \"cq_capacity_region\"\n                       and (r._field == \"total_i\" or r._field == \"used\"\n                            or r._field == \"available\" or r._field == \"reserved\"\n                            or r._field == \"offline\"))\n  |> range($range)\n  |> last()\n  |> keep(columns: [\"_time\", \"_field\", \"_value\"])\n  |> pivot(rowKey:[\"_time\"],columnKey: [\"_field\"],valueColumn: \"_value\")\n  |> map(fn: (r) => ({\"vl0_Total\": r.total_i, \"vl1_Used\": r.used, \"vl2_Available\": r.available, \"vl3_Reserved\": r.reserved}))\n",
              "refId": "A",
              "resultFormat": "table"
            }
          ],
          "timeFrom": null,
          "timeShift": null,
          "title": "Capacity",
          "transform": "table",
          "type": "table"
        },
        {
          "collapsed": true,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 3
          },
          "id": 19,
          "panels": [
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "Summary  by all Object Stores for Total available capacity",
              "fill": 1,
              "gridPos": {
                "h": 8,
                "w": 8,
                "x": 0,
                "y": 4
              },
              "id": 11,
              "legend": {
                "avg": false,
                "current": false,
                "max": false,
                "min": false,
                "show": true,
                "total": false,
                "values": false
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_capacity_region\" and r._field == \"total_i\")\n|> range($range)\n|> group()\n|> keep(columns: [\"_time\", \"_value\", \"_field\"])\n|> set(key: \"_field\", value: \"Total\")",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Total",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 2,
                  "format": "bytes",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "Summary  by all Object Stores for total Used capacity",
              "fill": 1,
              "gridPos": {
                "h": 8,
                "w": 8,
                "x": 8,
                "y": 4
              },
              "id": 12,
              "legend": {
                "avg": false,
                "current": false,
                "max": false,
                "min": false,
                "show": true,
                "total": false,
                "values": false
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_capacity_region\" and r._field == \"used\")\n|> range($range)\n|> group()\n|> keep(columns: [\"_time\", \"_value\", \"_field\"])\n|> set(key: \"_field\", value: \"Used\")\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Used",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 2,
                  "format": "bytes",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "Summary  by all Object Stores for total Available(free) capacity",
              "fill": 1,
              "gridPos": {
                "h": 8,
                "w": 8,
                "x": 16,
                "y": 4
              },
              "id": 13,
              "legend": {
                "avg": false,
                "current": false,
                "max": false,
                "min": false,
                "show": true,
                "total": false,
                "values": false
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_capacity_region\" and r._field == \"available\")\n|> range($range)\n|> group()\n|> keep(columns: [\"_time\", \"_value\", \"_field\"])\n|> set(key: \"_field\", value: \"Available\")\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Available",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 2,
                  "format": "bytes",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            }
          ],
          "title": "Capacity History",
          "type": "row"
        },
        {
          "collapsed": true,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 4
          },
          "id": 21,
          "panels": [
            {
              "columns": [],
              "description": "Info  by each Object Store separately,  shows last values.",
              "fontSize": "100%",
              "gridPos": {
                "h": 7,
                "w": 24,
                "x": 0,
                "y": 5
              },
              "id": 15,
              "links": [],
              "options": {},
              "pageSize": 8,
              "scroll": true,
              "showHeader": true,
              "sort": {
                "col": 3,
                "desc": false
              },
              "styles": [
                {
                  "alias": "Time",
                  "dateFormat": "YYYY-MM-DD HH:mm:ss",
                  "pattern": "Time",
                  "type": "hidden"
                },
                {
                  "alias": "$1",
                  "colorMode": null,
                  "colors": [
                    "rgba(245, 54, 54, 0.9)",
                    "rgba(237, 129, 40, 0.89)",
                    "rgba(50, 172, 45, 0.97)"
                  ],
                  "dateFormat": "YYYY-MM-DD HH:mm:ss",
                  "decimals": 2,
                  "mappingType": 1,
                  "pattern": "/vl[1-5]_(.*)/",
                  "thresholds": [],
                  "type": "number",
                  "unit": "bytes"
                },
                {
                  "alias": "",
                  "colorMode": null,
                  "colors": [
                    "rgba(245, 54, 54, 0.9)",
                    "rgba(237, 129, 40, 0.89)",
                    "rgba(50, 172, 45, 0.97)"
                  ],
                  "dateFormat": "YYYY-MM-DD HH:mm:ss",
                  "decimals": 2,
                  "mappingType": 1,
                  "pattern": "Time",
                  "thresholds": [],
                  "type": "hidden",
                  "unit": "short"
                },
                {
                  "alias": "",
                  "colorMode": null,
                  "colors": [
                    "rgba(245, 54, 54, 0.9)",
                    "rgba(237, 129, 40, 0.89)",
                    "rgba(50, 172, 45, 0.97)"
                  ],
                  "dateFormat": "YYYY-MM-DD HH:mm:ss",
                  "decimals": 2,
                  "mappingType": 1,
                  "pattern": "Measurement",
                  "thresholds": [],
                  "type": "hidden",
                  "unit": "short"
                },
                {
                  "alias": "",
                  "colorMode": null,
                  "colors": [
                    "rgba(245, 54, 54, 0.9)",
                    "rgba(237, 129, 40, 0.89)",
                    "rgba(50, 172, 45, 0.97)"
                  ],
                  "dateFormat": "YYYY-MM-DD HH:mm:ss",
                  "decimals": 2,
                  "mappingType": 1,
                  "pattern": "Field",
                  "thresholds": [],
                  "type": "hidden",
                  "unit": "short"
                },
                {
                  "alias": "Release Name",
                  "colorMode": null,
                  "colors": [
                    "rgba(245, 54, 54, 0.9)",
                    "rgba(237, 129, 40, 0.89)",
                    "rgba(50, 172, 45, 0.97)"
                  ],
                  "dateFormat": "YYYY-MM-DD HH:mm:ss",
                  "decimals": 2,
                  "mappingType": 1,
                  "pattern": "release_name",
                  "thresholds": [],
                  "type": "string",
                  "unit": "short"
                },
                {
                  "alias": "",
                  "colorMode": null,
                  "colors": [
                    "rgba(245, 54, 54, 0.9)",
                    "rgba(237, 129, 40, 0.89)",
                    "rgba(50, 172, 45, 0.97)"
                  ],
                  "dateFormat": "YYYY-MM-DD HH:mm:ss",
                  "decimals": 2,
                  "mappingType": 1,
                  "pattern": "Value",
                  "thresholds": [],
                  "type": "hidden",
                  "unit": "short"
                },
                {
                  "alias": "",
                  "colorMode": null,
                  "colors": [
                    "rgba(245, 54, 54, 0.9)",
                    "rgba(237, 129, 40, 0.89)",
                    "rgba(50, 172, 45, 0.97)"
                  ],
                  "decimals": 2,
                  "pattern": "/.*/",
                  "thresholds": [],
                  "type": "number",
                  "unit": "short"
                }
              ],
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_vdc\")\n  |> filter(fn: (r) => r._measurement == \"cq_capacity_vdc\"\n                       and (r._field == \"total_i\" or r._field == \"used\"\n                            or r._field == \"available\" or r._field == \"reserved\"\n                            or r._field == \"offline\" or r._field == \"used\"))\n  |> range($range)\n  |> last()\n  |> keep(columns: [\"_time\", \"_field\", \"_value\", \"release_name\"])\n  |> pivot(rowKey:[\"_time\"],columnKey: [\"_field\"],valueColumn: \"_value\")\n  |> map(fn: (r) => ({\"vl1_Total\": r.total_i, \"vl2_Used\": r.used, \"vl3_Available\": r.available, \"vl4_Reserved\": r.reserved, \"vl5_Offline\":  r.offline}))\n",
                  "refId": "A",
                  "resultFormat": "table"
                }
              ],
              "timeFrom": null,
              "timeShift": null,
              "title": "",
              "transform": "table",
              "type": "table"
            }
          ],
          "title": "ObjectStores",
          "type": "row"
        },
        {
          "collapsed": true,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 5
          },
          "id": 10,
          "panels": [
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "Info by selected Object Store in filter for Total available capacity",
              "fill": 1,
              "gridPos": {
                "h": 8,
                "w": 8,
                "x": 0,
                "y": 14
              },
              "id": 6,
              "legend": {
                "avg": false,
                "current": false,
                "max": false,
                "min": false,
                "show": true,
                "total": false,
                "values": false
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_capacity_vdc\"\nand r.release_name == \"$release_name\"\nand r._field == \"total_i\")\n|> range($range)\n|> keep(columns: [\"_time\", \"_value\", \"_field\", \"release_name\"])\n|> set(key: \"_field\", value: \"Total\")\n|> rename(columns: {release_name: \"ObjectStore\"})",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Total",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 2,
                  "format": "bytes",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "Info by selected Object Store in filter for total Used capacity",
              "fill": 1,
              "gridPos": {
                "h": 8,
                "w": 8,
                "x": 8,
                "y": 14
              },
              "id": 7,
              "legend": {
                "avg": false,
                "current": false,
                "max": false,
                "min": false,
                "show": true,
                "total": false,
                "values": false
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_capacity_vdc\"\nand r.release_name == \"$release_name\"\nand r._field == \"used\")\n|> range($range)\n|> keep(columns: [\"_time\", \"_value\", \"_field\", \"release_name\"])\n|> set(key: \"_field\", value: \"Used\")\n|> rename(columns: {release_name: \"ObjectStore\"})",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Used",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 2,
                  "format": "bytes",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "Info by selected Object Store in filter for total Available(free) capacity",
              "fill": 1,
              "gridPos": {
                "h": 8,
                "w": 8,
                "x": 16,
                "y": 14
              },
              "id": 8,
              "legend": {
                "avg": false,
                "current": false,
                "max": false,
                "min": false,
                "show": true,
                "total": false,
                "values": false
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_capacity_vdc\"\nand r.release_name == \"$release_name\"\nand r._field == \"available\")\n|> range($range)\n|> keep(columns: [\"_time\", \"_value\", \"_field\", \"release_name\"])\n|> set(key: \"_field\", value: \"Available\")\n|> rename(columns: {release_name: \"ObjectStore\"})",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Available",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 2,
                  "format": "bytes",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            }
          ],
          "title": "Capacity History by ObjectStore ($release_name)",
          "type": "row"
        }
      ],
      "refresh": false,
      "schemaVersion": 18,
      "style": "dark",
      "tags": [
        "Capacity"
      ],
      "templating": {
        "list": [
          {
            "allValue": null,
            "current": {},
            "datasource": "${DS_FLUX}",
            "definition": "from(bucket:\"monitoring_vdc\")|> range(start: -24h)|> filter(fn:(r) => r._measurement == \"cq_capacity_vdc\")|> keep(columns: [\"release_name\"])|> group(columns:[\"release_name\"])|> distinct(column:\"release_name\")",
            "hide": 0,
            "includeAll": false,
            "label": "Object Store",
            "multi": false,
            "name": "release_name",
            "options": [],
            "query": "from(bucket:\"monitoring_vdc\")|> range(start: -24h)|> filter(fn:(r) => r._measurement == \"cq_capacity_vdc\")|> keep(columns: [\"release_name\"])|> group(columns:[\"release_name\"])|> distinct(column:\"release_name\")",
            "refresh": 1,
            "regex": "",
            "skipUrlSync": false,
            "sort": 0,
            "tagValuesQuery": "",
            "tags": [],
            "tagsQuery": "",
            "type": "query",
            "useTags": false
          }
        ]
      },
      "time": {
        "from": "now-24h",
        "to": "now"
      },
      "timepicker": {
        "refresh_intervals": [
          "5s",
          "10s",
          "30s",
          "1m",
          "5m",
          "15m",
          "30m",
          "1h",
          "2h",
          "1d"
        ],
        "time_options": [
          "5m",
          "15m",
          "1h",
          "6h",
          "12h",
          "24h",
          "2d",
          "7d",
          "30d"
        ]
      },
      "timezone": "",
      "title": "Capacity - Overview",
      "uid": "6e2ZkHtWk",
      "version": 1
    }
  capacity_used.json: |-
    {
      "__inputs": [],
      "__requires": [
        {
          "type": "grafana",
          "id": "grafana",
          "name": "Grafana",
          "version": "6.2.5ecs"
        },
        {
          "type": "panel",
          "id": "singlestat",
          "name": "Singlestat",
          "version": ""
        }
      ],
      "annotations": {
        "list": [
          {
            "builtIn": 1,
            "datasource": "-- Grafana --",
            "enable": true,
            "hide": true,
            "iconColor": "rgba(0, 211, 255, 1)",
            "name": "Annotations & Alerts",
            "type": "dashboard"
          }
        ]
      },
      "description": "",
      "editable": true,
      "gnetId": 1375,
      "graphTooltip": 0,
      "id": null,
      "links": [
        {
          "asDropdown": true,
          "icon": "external link",
          "keepTime": true,
          "tags": [
            "Capacity"
          ],
          "title": "Related dashboards",
          "type": "dashboards"
        }
      ],
      "panels": [
        {
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 0
          },
          "id": 96,
          "title": "Total",
          "type": "row"
        },
        {
          "cacheTimeout": null,
          "colorBackground": false,
          "colorPostfix": false,
          "colorPrefix": false,
          "colorValue": false,
          "colors": [
            "#299c46",
            "rgba(237, 129, 40, 0.89)",
            "#d44a3a"
          ],
          "decimals": 2,
          "description": "Total physical capacity assigned for this Object Scale",
          "format": "bytes",
          "gauge": {
            "maxValue": 100,
            "minValue": 0,
            "show": false,
            "thresholdLabels": false,
            "thresholdMarkers": true
          },
          "gridPos": {
            "h": 4,
            "w": 24,
            "x": 0,
            "y": 1
          },
          "id": 83,
          "interval": null,
          "links": [],
          "mappingType": 1,
          "mappingTypes": [
            {
              "name": "value to text",
              "value": 1
            },
            {
              "name": "range to text",
              "value": 2
            }
          ],
          "maxDataPoints": 100,
          "nullPointMode": "connected",
          "nullText": null,
          "options": {},
          "postfix": "",
          "postfixFontSize": "80%",
          "prefix": "",
          "prefixFontSize": "50%",
          "rangeMaps": [
            {
              "from": "null",
              "text": "N/A",
              "to": "null"
            }
          ],
          "sparkline": {
            "fillColor": "rgba(31, 118, 189, 0.18)",
            "full": false,
            "lineColor": "rgb(31, 120, 193)",
            "show": true
          },
          "tableColumn": "",
          "targets": [
            {
              "query": "from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_region\" and r._field == \"total_i\")\n|> range($range)\r\n|> last()\r",
              "refId": "B"
            }
          ],
          "thresholds": "",
          "title": "Total Capacity",
          "type": "singlestat",
          "valueFontSize": "80%",
          "valueMaps": [
            {
              "op": "=",
              "text": "N/A",
              "value": "null"
            }
          ],
          "valueName": "current"
        },
        {
          "cacheTimeout": null,
          "colorBackground": false,
          "colorPostfix": false,
          "colorPrefix": false,
          "colorValue": false,
          "colors": [
            "#299c46",
            "rgba(237, 129, 40, 0.89)",
            "#d44a3a"
          ],
          "decimals": 2,
          "description": "Physical disk space used",
          "format": "bytes",
          "gauge": {
            "maxValue": 100,
            "minValue": 0,
            "show": false,
            "thresholdLabels": false,
            "thresholdMarkers": true
          },
          "gridPos": {
            "h": 4,
            "w": 6,
            "x": 0,
            "y": 5
          },
          "id": 84,
          "interval": null,
          "links": [],
          "mappingType": 1,
          "mappingTypes": [
            {
              "name": "value to text",
              "value": 1
            },
            {
              "name": "range to text",
              "value": 2
            }
          ],
          "maxDataPoints": 100,
          "nullPointMode": "connected",
          "nullText": null,
          "options": {},
          "postfix": "",
          "postfixFontSize": "80%",
          "prefix": "",
          "prefixFontSize": "50%",
          "rangeMaps": [
            {
              "from": "null",
              "text": "N/A",
              "to": "null"
            }
          ],
          "sparkline": {
            "fillColor": "rgba(31, 118, 189, 0.18)",
            "full": false,
            "lineColor": "rgb(31, 120, 193)",
            "show": true
          },
          "tableColumn": "",
          "targets": [
            {
              "query": "from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_region\" and r._field == \"used\")\n|> range($range)\r\n|> last()\r",
              "refId": "B"
            }
          ],
          "thresholds": "",
          "title": "Used",
          "type": "singlestat",
          "valueFontSize": "80%",
          "valueMaps": [
            {
              "op": "=",
              "text": "N/A",
              "value": "null"
            }
          ],
          "valueName": "current"
        },
        {
          "cacheTimeout": null,
          "colorBackground": false,
          "colorPostfix": false,
          "colorPrefix": false,
          "colorValue": false,
          "colors": [
            "#299c46",
            "rgba(237, 129, 40, 0.89)",
            "#d44a3a"
          ],
          "decimals": 2,
          "description": "Free physical capacity ",
          "format": "bytes",
          "gauge": {
            "maxValue": 100,
            "minValue": 0,
            "show": false,
            "thresholdLabels": false,
            "thresholdMarkers": true
          },
          "gridPos": {
            "h": 4,
            "w": 6,
            "x": 6,
            "y": 5
          },
          "id": 89,
          "interval": null,
          "links": [],
          "mappingType": 1,
          "mappingTypes": [
            {
              "name": "value to text",
              "value": 1
            },
            {
              "name": "range to text",
              "value": 2
            }
          ],
          "maxDataPoints": 100,
          "nullPointMode": "connected",
          "nullText": null,
          "options": {},
          "postfix": "",
          "postfixFontSize": "80%",
          "prefix": "",
          "prefixFontSize": "50%",
          "rangeMaps": [
            {
              "from": "null",
              "text": "N/A",
              "to": "null"
            }
          ],
          "sparkline": {
            "fillColor": "rgba(31, 118, 189, 0.18)",
            "full": false,
            "lineColor": "rgb(31, 120, 193)",
            "show": true
          },
          "tableColumn": "",
          "targets": [
            {
              "query": "from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_region\" and r._field == \"available\")\n|> range($range)\r\n|> last()\r",
              "refId": "B"
            }
          ],
          "thresholds": "",
          "title": "Free",
          "type": "singlestat",
          "valueFontSize": "80%",
          "valueMaps": [
            {
              "op": "=",
              "text": "N/A",
              "value": "null"
            }
          ],
          "valueName": "current"
        },
        {
          "cacheTimeout": null,
          "colorBackground": false,
          "colorPostfix": false,
          "colorPrefix": false,
          "colorValue": false,
          "colors": [
            "#299c46",
            "rgba(237, 129, 40, 0.89)",
            "#d44a3a"
          ],
          "decimals": 2,
          "description": "Reserved physical capacity in case user used-up all capacity",
          "format": "bytes",
          "gauge": {
            "maxValue": 100,
            "minValue": 0,
            "show": false,
            "thresholdLabels": false,
            "thresholdMarkers": true
          },
          "gridPos": {
            "h": 4,
            "w": 6,
            "x": 12,
            "y": 5
          },
          "id": 85,
          "interval": null,
          "links": [],
          "mappingType": 1,
          "mappingTypes": [
            {
              "name": "value to text",
              "value": 1
            },
            {
              "name": "range to text",
              "value": 2
            }
          ],
          "maxDataPoints": 100,
          "nullPointMode": "connected",
          "nullText": null,
          "options": {},
          "postfix": "",
          "postfixFontSize": "80%",
          "prefix": "",
          "prefixFontSize": "50%",
          "rangeMaps": [
            {
              "from": "null",
              "text": "N/A",
              "to": "null"
            }
          ],
          "sparkline": {
            "fillColor": "rgba(31, 118, 189, 0.18)",
            "full": false,
            "lineColor": "rgb(31, 120, 193)",
            "show": true
          },
          "tableColumn": "",
          "targets": [
            {
              "query": "from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_region\" and r._field == \"reserved\")\n|> range($range)\r\n|> last()\r",
              "refId": "B"
            }
          ],
          "thresholds": "",
          "title": "Reserved",
          "type": "singlestat",
          "valueFontSize": "80%",
          "valueMaps": [
            {
              "op": "=",
              "text": "N/A",
              "value": "null"
            }
          ],
          "valueName": "current"
        },
        {
          "cacheTimeout": null,
          "colorBackground": false,
          "colorPostfix": false,
          "colorPrefix": false,
          "colorValue": false,
          "colors": [
            "#299c46",
            "rgba(237, 129, 40, 0.89)",
            "#d44a3a"
          ],
          "decimals": 2,
          "description": "Offline capacity in Object Scale",
          "format": "bytes",
          "gauge": {
            "maxValue": 100,
            "minValue": 0,
            "show": false,
            "thresholdLabels": false,
            "thresholdMarkers": true
          },
          "gridPos": {
            "h": 4,
            "w": 6,
            "x": 18,
            "y": 5
          },
          "id": 88,
          "interval": null,
          "links": [],
          "mappingType": 1,
          "mappingTypes": [
            {
              "name": "value to text",
              "value": 1
            },
            {
              "name": "range to text",
              "value": 2
            }
          ],
          "maxDataPoints": 100,
          "nullPointMode": "connected",
          "nullText": null,
          "options": {},
          "postfix": "",
          "postfixFontSize": "80%",
          "prefix": "",
          "prefixFontSize": "50%",
          "rangeMaps": [
            {
              "from": "null",
              "text": "N/A",
              "to": "null"
            }
          ],
          "sparkline": {
            "fillColor": "rgba(31, 118, 189, 0.18)",
            "full": false,
            "lineColor": "rgb(31, 120, 193)",
            "show": true
          },
          "tableColumn": "",
          "targets": [
            {
              "query": "from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_region\" and r._field == \"offline\")\n|> range($range)\r\n|> last()\r",
              "refId": "B"
            }
          ],
          "thresholds": "",
          "title": "Offline",
          "type": "singlestat",
          "valueFontSize": "80%",
          "valueMaps": [
            {
              "op": "=",
              "text": "N/A",
              "value": "null"
            }
          ],
          "valueName": "current"
        },
        {
          "collapsed": true,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 9
          },
          "id": 93,
          "panels": [
            {
              "cacheTimeout": null,
              "colorBackground": false,
              "colorPostfix": false,
              "colorPrefix": false,
              "colorValue": false,
              "colors": [
                "#299c46",
                "rgba(237, 129, 40, 0.89)",
                "#d44a3a"
              ],
              "decimals": 2,
              "description": "Physical disk space used",
              "format": "bytes",
              "gauge": {
                "maxValue": 100,
                "minValue": 0,
                "show": false,
                "thresholdLabels": false,
                "thresholdMarkers": true
              },
              "gridPos": {
                "h": 4,
                "w": 24,
                "x": 0,
                "y": 10
              },
              "id": 94,
              "interval": null,
              "links": [],
              "mappingType": 1,
              "mappingTypes": [
                {
                  "name": "value to text",
                  "value": 1
                },
                {
                  "name": "range to text",
                  "value": 2
                }
              ],
              "maxDataPoints": 100,
              "nullPointMode": "connected",
              "nullText": null,
              "options": {},
              "postfix": "",
              "postfixFontSize": "80%",
              "prefix": "",
              "prefixFontSize": "50%",
              "rangeMaps": [
                {
                  "from": "null",
                  "text": "N/A",
                  "to": "null"
                }
              ],
              "sparkline": {
                "fillColor": "rgba(31, 118, 189, 0.18)",
                "full": false,
                "lineColor": "rgb(31, 120, 193)",
                "show": true
              },
              "tableColumn": "",
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_region\" and r._field == \"used\")\n|> range($range)\r\n|> last()\r",
                  "refId": "B"
                }
              ],
              "thresholds": "",
              "title": "Used",
              "type": "singlestat",
              "valueFontSize": "80%",
              "valueMaps": [
                {
                  "op": "=",
                  "text": "N/A",
                  "value": "null"
                }
              ],
              "valueName": "current"
            },
            {
              "cacheTimeout": null,
              "colorBackground": false,
              "colorPostfix": false,
              "colorPrefix": false,
              "colorValue": false,
              "colors": [
                "#299c46",
                "rgba(237, 129, 40, 0.89)",
                "#d44a3a"
              ],
              "decimals": 2,
              "description": "Physical space used for user injected data",
              "format": "bytes",
              "gauge": {
                "maxValue": 100,
                "minValue": 0,
                "show": false,
                "thresholdLabels": false,
                "thresholdMarkers": true
              },
              "gridPos": {
                "h": 4,
                "w": 6,
                "x": 0,
                "y": 14
              },
              "id": 90,
              "interval": null,
              "links": [],
              "mappingType": 1,
              "mappingTypes": [
                {
                  "name": "value to text",
                  "value": 1
                },
                {
                  "name": "range to text",
                  "value": 2
                }
              ],
              "maxDataPoints": 100,
              "nullPointMode": "connected",
              "nullText": null,
              "options": {},
              "postfix": "",
              "postfixFontSize": "80%",
              "prefix": "",
              "prefixFontSize": "50%",
              "rangeMaps": [
                {
                  "from": "null",
                  "text": "N/A",
                  "to": "null"
                }
              ],
              "sparkline": {
                "fillColor": "rgba(31, 118, 189, 0.18)",
                "full": false,
                "lineColor": "rgb(31, 120, 193)",
                "show": true
              },
              "tableColumn": "",
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_used_region\" and r._field == \"user_data\")\n|> range($range)\r\n|> last()\r",
                  "refId": "B"
                }
              ],
              "thresholds": "",
              "title": "User Data",
              "type": "singlestat",
              "valueFontSize": "80%",
              "valueMaps": [
                {
                  "op": "=",
                  "text": "N/A",
                  "value": "null"
                }
              ],
              "valueName": "current"
            },
            {
              "cacheTimeout": null,
              "colorBackground": false,
              "colorPostfix": false,
              "colorPrefix": false,
              "colorValue": false,
              "colors": [
                "#299c46",
                "rgba(237, 129, 40, 0.89)",
                "#d44a3a"
              ],
              "decimals": 2,
              "description": "Metadata size (without overhead)",
              "format": "bytes",
              "gauge": {
                "maxValue": 100,
                "minValue": 0,
                "show": false,
                "thresholdLabels": false,
                "thresholdMarkers": true
              },
              "gridPos": {
                "h": 4,
                "w": 6,
                "x": 6,
                "y": 14
              },
              "id": 91,
              "interval": null,
              "links": [],
              "mappingType": 1,
              "mappingTypes": [
                {
                  "name": "value to text",
                  "value": 1
                },
                {
                  "name": "range to text",
                  "value": 2
                }
              ],
              "maxDataPoints": 100,
              "nullPointMode": "connected",
              "nullText": null,
              "options": {},
              "postfix": "",
              "postfixFontSize": "80%",
              "prefix": "",
              "prefixFontSize": "50%",
              "rangeMaps": [
                {
                  "from": "null",
                  "text": "N/A",
                  "to": "null"
                }
              ],
              "sparkline": {
                "fillColor": "rgba(31, 118, 189, 0.18)",
                "full": false,
                "lineColor": "rgb(31, 120, 193)",
                "show": true
              },
              "tableColumn": "",
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_used_region\" and r._field == \"meta_data\")\n|> range($range)\r\n|> last()\r",
                  "refId": "B"
                }
              ],
              "thresholds": "",
              "title": "Metadata",
              "type": "singlestat",
              "valueFontSize": "80%",
              "valueMaps": [
                {
                  "op": "=",
                  "text": "N/A",
                  "value": "null"
                }
              ],
              "valueName": "current"
            },
            {
              "cacheTimeout": null,
              "colorBackground": false,
              "colorPostfix": false,
              "colorPrefix": false,
              "colorValue": false,
              "colors": [
                "#299c46",
                "rgba(237, 129, 40, 0.89)",
                "#d44a3a"
              ],
              "decimals": 2,
              "description": "User data protection overhead",
              "format": "bytes",
              "gauge": {
                "maxValue": 100,
                "minValue": 0,
                "show": false,
                "thresholdLabels": false,
                "thresholdMarkers": true
              },
              "gridPos": {
                "h": 4,
                "w": 6,
                "x": 12,
                "y": 14
              },
              "id": 100,
              "interval": null,
              "links": [],
              "mappingType": 1,
              "mappingTypes": [
                {
                  "name": "value to text",
                  "value": 1
                },
                {
                  "name": "range to text",
                  "value": 2
                }
              ],
              "maxDataPoints": 100,
              "nullPointMode": "connected",
              "nullText": null,
              "options": {},
              "postfix": "",
              "postfixFontSize": "80%",
              "prefix": "",
              "prefixFontSize": "50%",
              "rangeMaps": [
                {
                  "from": "null",
                  "text": "N/A",
                  "to": "null"
                }
              ],
              "sparkline": {
                "fillColor": "rgba(31, 118, 189, 0.18)",
                "full": false,
                "lineColor": "rgb(31, 120, 193)",
                "show": true
              },
              "tableColumn": "",
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_used_region\" and r._field == \"protection_overhead_user\")\n|> range($range)\r\n|> last()\r",
                  "refId": "B"
                }
              ],
              "thresholds": "",
              "title": "Protection Overhead User Data",
              "type": "singlestat",
              "valueFontSize": "80%",
              "valueMaps": [
                {
                  "op": "=",
                  "text": "N/A",
                  "value": "null"
                }
              ],
              "valueName": "current"
            },
            {
              "cacheTimeout": null,
              "colorBackground": false,
              "colorPostfix": false,
              "colorPrefix": false,
              "colorValue": false,
              "colors": [
                "#299c46",
                "rgba(237, 129, 40, 0.89)",
                "#d44a3a"
              ],
              "decimals": 2,
              "description": "Metadata protection overhead",
              "format": "bytes",
              "gauge": {
                "maxValue": 100,
                "minValue": 0,
                "show": false,
                "thresholdLabels": false,
                "thresholdMarkers": true
              },
              "gridPos": {
                "h": 4,
                "w": 6,
                "x": 18,
                "y": 14
              },
              "id": 101,
              "interval": null,
              "links": [],
              "mappingType": 1,
              "mappingTypes": [
                {
                  "name": "value to text",
                  "value": 1
                },
                {
                  "name": "range to text",
                  "value": 2
                }
              ],
              "maxDataPoints": 100,
              "nullPointMode": "connected",
              "nullText": null,
              "options": {},
              "postfix": "",
              "postfixFontSize": "80%",
              "prefix": "",
              "prefixFontSize": "50%",
              "rangeMaps": [
                {
                  "from": "null",
                  "text": "N/A",
                  "to": "null"
                }
              ],
              "sparkline": {
                "fillColor": "rgba(31, 118, 189, 0.18)",
                "full": false,
                "lineColor": "rgb(31, 120, 193)",
                "show": true
              },
              "tableColumn": "",
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_used_region\" and r._field == \"protection_overhead_metadata\")\n|> range($range)\r\n|> last()\r",
                  "refId": "B"
                }
              ],
              "thresholds": "",
              "title": "Protection Overhead Metadata",
              "type": "singlestat",
              "valueFontSize": "80%",
              "valueMaps": [
                {
                  "op": "=",
                  "text": "N/A",
                  "value": "null"
                }
              ],
              "valueName": "current"
            }
          ],
          "title": "Used",
          "type": "row"
        },
        {
          "collapsed": true,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 10
          },
          "id": 98,
          "panels": [
            {
              "cacheTimeout": null,
              "colorBackground": false,
              "colorPostfix": false,
              "colorPrefix": false,
              "colorValue": false,
              "colors": [
                "#299c46",
                "rgba(237, 129, 40, 0.89)",
                "#d44a3a"
              ],
              "decimals": 2,
              "description": "Offline capacity in Object Scale",
              "format": "bytes",
              "gauge": {
                "maxValue": 100,
                "minValue": 0,
                "show": false,
                "thresholdLabels": false,
                "thresholdMarkers": true
              },
              "gridPos": {
                "h": 4,
                "w": 24,
                "x": 0,
                "y": 11
              },
              "id": 99,
              "interval": null,
              "links": [],
              "mappingType": 1,
              "mappingTypes": [
                {
                  "name": "value to text",
                  "value": 1
                },
                {
                  "name": "range to text",
                  "value": 2
                }
              ],
              "maxDataPoints": 100,
              "nullPointMode": "connected",
              "nullText": null,
              "options": {},
              "postfix": "",
              "postfixFontSize": "80%",
              "prefix": "",
              "prefixFontSize": "50%",
              "rangeMaps": [
                {
                  "from": "null",
                  "text": "N/A",
                  "to": "null"
                }
              ],
              "sparkline": {
                "fillColor": "rgba(31, 118, 189, 0.18)",
                "full": false,
                "lineColor": "rgb(31, 120, 193)",
                "show": true
              },
              "tableColumn": "",
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_region\" and r._field == \"offline\")\n|> range($range)\r\n|> last()\r",
                  "refId": "B"
                }
              ],
              "thresholds": "",
              "title": "Offline",
              "type": "singlestat",
              "valueFontSize": "80%",
              "valueMaps": [
                {
                  "op": "=",
                  "text": "N/A",
                  "value": "null"
                }
              ],
              "valueName": "current"
            },
            {
              "cacheTimeout": null,
              "colorBackground": false,
              "colorPostfix": false,
              "colorPrefix": false,
              "colorValue": false,
              "colors": [
                "#299c46",
                "rgba(237, 129, 40, 0.89)",
                "#d44a3a"
              ],
              "decimals": 2,
              "description": "Recovered or not used capacity for offline node/disk",
              "format": "bytes",
              "gauge": {
                "maxValue": 100,
                "minValue": 0,
                "show": false,
                "thresholdLabels": false,
                "thresholdMarkers": true
              },
              "gridPos": {
                "h": 4,
                "w": 12,
                "x": 0,
                "y": 15
              },
              "id": 87,
              "interval": null,
              "links": [],
              "mappingType": 1,
              "mappingTypes": [
                {
                  "name": "value to text",
                  "value": 1
                },
                {
                  "name": "range to text",
                  "value": 2
                }
              ],
              "maxDataPoints": 100,
              "nullPointMode": "connected",
              "nullText": null,
              "options": {},
              "postfix": "",
              "postfixFontSize": "80%",
              "prefix": "",
              "prefixFontSize": "50%",
              "rangeMaps": [
                {
                  "from": "null",
                  "text": "N/A",
                  "to": "null"
                }
              ],
              "sparkline": {
                "fillColor": "rgba(31, 118, 189, 0.18)",
                "full": false,
                "lineColor": "rgb(31, 120, 193)",
                "show": true
              },
              "tableColumn": "",
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_region\" and r._field == \"offline_recovered\")\n|> range($range)\r\n|> last()\r",
                  "refId": "B"
                }
              ],
              "thresholds": "",
              "title": "Recovered",
              "type": "singlestat",
              "valueFontSize": "80%",
              "valueMaps": [
                {
                  "op": "=",
                  "text": "N/A",
                  "value": "null"
                }
              ],
              "valueName": "current"
            },
            {
              "cacheTimeout": null,
              "colorBackground": false,
              "colorPostfix": false,
              "colorPrefix": false,
              "colorValue": false,
              "colors": [
                "#299c46",
                "rgba(237, 129, 40, 0.89)",
                "#d44a3a"
              ],
              "decimals": 2,
              "description": "Unrecovered capacity for offline node/disk (which is not removed from system yet)",
              "format": "bytes",
              "gauge": {
                "maxValue": 100,
                "minValue": 0,
                "show": false,
                "thresholdLabels": false,
                "thresholdMarkers": true
              },
              "gridPos": {
                "h": 4,
                "w": 12,
                "x": 12,
                "y": 15
              },
              "id": 86,
              "interval": null,
              "links": [],
              "mappingType": 1,
              "mappingTypes": [
                {
                  "name": "value to text",
                  "value": 1
                },
                {
                  "name": "range to text",
                  "value": 2
                }
              ],
              "maxDataPoints": 100,
              "nullPointMode": "connected",
              "nullText": null,
              "options": {},
              "postfix": "",
              "postfixFontSize": "80%",
              "prefix": "",
              "prefixFontSize": "50%",
              "rangeMaps": [
                {
                  "from": "null",
                  "text": "N/A",
                  "to": "null"
                }
              ],
              "sparkline": {
                "fillColor": "rgba(31, 118, 189, 0.18)",
                "full": false,
                "lineColor": "rgb(31, 120, 193)",
                "show": true
              },
              "tableColumn": "",
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_vdc\")\r\n|> filter(fn: (r) => r._measurement == \"cq_capacity_region\" and r._field == \"offline_unrecovered\")\n|> range($range)\r\n|> last()\r",
                  "refId": "B"
                }
              ],
              "thresholds": "",
              "title": "Unrecovered",
              "type": "singlestat",
              "valueFontSize": "80%",
              "valueMaps": [
                {
                  "op": "=",
                  "text": "N/A",
                  "value": "null"
                }
              ],
              "valueName": "current"
            }
          ],
          "title": "Offline",
          "type": "row"
        }
      ],
      "refresh": false,
      "schemaVersion": 18,
      "style": "dark",
      "tags": [
        "Capacity"
      ],
      "templating": {
        "list": []
      },
      "time": {
        "from": "now-24h",
        "to": "now"
      },
      "timepicker": {
        "refresh_intervals": [
          "5s",
          "10s",
          "30s",
          "1m",
          "5m",
          "15m",
          "30m",
          "1h",
          "2h",
          "1d"
        ],
        "time_options": [
          "5m",
          "15m",
          "1h",
          "6h",
          "12h",
          "24h",
          "2d",
          "7d",
          "30d"
        ]
      },
      "timezone": "",
      "title": "Capacity Utilization: Used Capacity",
      "uid": "cuuci-cUEkca5W2",
      "version": 2
    }
  data_access_performance_overview.json: |-
    {
      "__inputs": [
        {
          "name": "DS_FLUX",
          "label": "Flux",
          "description": "",
          "type": "datasource",
          "pluginId": "grafana-influxdb-flux-datasource",
          "pluginName": "Flux (InfluxDB) [BETA]"
        }
      ],
      "__requires": [
        {
          "type": "grafana",
          "id": "grafana",
          "name": "Grafana",
          "version": "5.3.3"
        },
        {
          "type": "datasource",
          "id": "grafana-influxdb-flux-datasource",
          "name": "Flux (InfluxDB) [BETA]",
          "version": "5.2.11"
        },
        {
          "type": "panel",
          "id": "graph",
          "name": "Graph",
          "version": "5.0.0"
        },
        {
          "type": "panel",
          "id": "table",
          "name": "Table",
          "version": "5.0.0"
        }
      ],
      "annotations": {
        "list": [
          {
            "builtIn": 1,
            "datasource": "-- Grafana --",
            "enable": true,
            "hide": true,
            "iconColor": "rgba(0, 211, 255, 1)",
            "name": "Annotations & Alerts",
            "type": "dashboard"
          }
        ]
      },
      "editable": true,
      "gnetId": null,
      "graphTooltip": 0,
      "id": null,
      "links": [
        {
          "asDropdown": true,
          "icon": "external link",
          "keepTime": true,
          "tags": [
            "Data Access Performance"
          ],
          "title": "Related dashboards",
          "type": "dashboards"
        }
      ],
      "panels": [
        {
          "columns": [],
          "datasource": "${DS_FLUX}",
          "fontSize": "110%",
          "gridPos": {
            "h": 3,
            "w": 24,
            "x": 0,
            "y": 0
          },
          "id": 157,
          "links": [],
          "pageSize": null,
          "scroll": false,
          "showHeader": true,
          "sort": {
            "col": 3,
            "desc": true
          },
          "styles": [
            {
              "alias": "Time",
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "pattern": "Time",
              "type": "hidden"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Measurement",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Field",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "System Failures",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": null,
              "mappingType": 1,
              "pattern": "b_system_errors",
              "thresholds": [],
              "type": "number",
              "unit": "locale"
            },
            {
              "alias": "Successful requests",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": null,
              "mappingType": 1,
              "pattern": "a_succeed_request_counter",
              "thresholds": [],
              "type": "number",
              "unit": "locale"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Value",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "User Failures",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": null,
              "mappingType": 1,
              "pattern": "c_user_errors",
              "thresholds": [],
              "type": "number",
              "unit": "locale"
            },
            {
              "alias": "Failures % Rate",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 3,
              "mappingType": 1,
              "pattern": "d_error_rate",
              "thresholds": [],
              "type": "number",
              "unit": "percentunit"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "decimals": 2,
              "pattern": "/.*/",
              "thresholds": [],
              "type": "number",
              "unit": "short"
            }
          ],
          "targets": [
            {
              "query": "// need this 'default' table to substitute possibly missing sys_errors table if errors were not registered by ECS service\nimport \"csv\"\ndefault_sys_errors = csv.from(csv:\"#datatype,string,long,string,long\n#group,false,false,true,false\n#default,_result,,,\n,result,table,_field,_value\n,,100,succeed_request_counter_i,0\n,,101,system_errors_i,0\n,,102,user_errors_i,0\")\n\ntotals = from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_performance_transaction_delta\")\n|> range($range)\n|> keep(columns:[\"_time\", \"_field\", \"_value\"])\n|> sum()\n|> fill(column: \"_value\", value: 0)\n\nsys_errors = from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_performance_error_delta\")\n|> range($range)\n|> keep(columns:[\"_time\", \"_field\", \"_value\"])\n|> sum()\n|> fill(column: \"_value\", value: 0)\n\nunion(tables: [default_sys_errors, totals, sys_errors])\n|> pivot(rowKey:[], columnKey: [\"_field\"], valueColumn: \"_value\")\n// map does not save non-group columns\n|> map(fn:(r) => ({\na_succeed_request_counter: r.succeed_request_counter_i,\nb_system_errors: r.system_errors_i,\nc_user_errors: r.user_errors_i,\nd_error_rate: float(v:r.system_errors_i+r.user_errors_i)/\nfloat(v:r.system_errors_i+r.user_errors_i+r.succeed_request_counter_i\n// this trick is needed because failed+succeed can be 0, avoid printing NaN in this case\n+int(v:bool(v:(r.system_errors_i+r.user_errors_i+r.succeed_request_counter_i)==0)))}))\n\n",
              "refId": "A",
              "resultFormat": "table"
            }
          ],
          "title": "Transaction Summary",
          "transform": "table",
          "type": "table"
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": "${DS_FLUX}",
          "decimals": null,
          "description": "Rate of successful requests and failures per second",
          "fill": 1,
          "gridPos": {
            "h": 9,
            "w": 12,
            "x": 0,
            "y": 3
          },
          "id": 147,
          "legend": {
            "alignAsTable": false,
            "avg": true,
            "current": false,
            "max": true,
            "min": true,
            "rightSide": false,
            "show": true,
            "sortDesc": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 2,
          "links": [],
          "nullPointMode": "null",
          "percentage": false,
          "pointradius": 2,
          "points": true,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "time_int = int(v:$__range_to_s) - int(v:$__range_from_s)\nmin_window = 300\nmax_windows = 200\nsec_in_ns = 1000000000\nwindow_len = time_int / max_windows / min_window * min_window\nis_min_window = window_len < min_window\nwindow_len = (int(v:(is_min_window)) * min_window) + (int(v:(not is_min_window)) * window_len)\nwl_dur = duration(v:window_len * sec_in_ns)\nstart_dt = time(v:((int(v:$__range_from_s)/window_len) - 2) * window_len * sec_in_ns)\nend_dt = time(v:((int(v:$__range_to_s)/window_len) + 1) * window_len * sec_in_ns)\n\nfrom(bucket: \"monitoring_vdc\") |> filter(fn: (r) => r._measurement == \"cq_performance_transaction\" )\n  |> range(start: start_dt, stop: end_dt)  \n  |> keep(columns:[\"_time\", \"_field\", \"_value\"])  \n  |> window(every:wl_dur)\n  |> mean()\n  |> group(columns:[\"_field\"]) \n  |> rename(columns: {_start: \"_time\"})\n",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeShift": null,
          "title": "TPS (success/failure)",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "transparent": false,
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "decimals": null,
              "format": "short",
              "label": "",
              "logBase": 1,
              "max": null,
              "min": "0",
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {
            " total_read_requests_size": "#6ed0e0",
            " total_write_requests_size": "#e24d42"
          },
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": "${DS_FLUX}",
          "decimals": null,
          "description": "Data access bandwidth of successful requests per second",
          "fill": 4,
          "gridPos": {
            "h": 9,
            "w": 12,
            "x": 12,
            "y": 3
          },
          "id": 155,
          "legend": {
            "alignAsTable": false,
            "avg": true,
            "current": true,
            "max": true,
            "min": true,
            "rightSide": false,
            "show": true,
            "sortDesc": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 2,
          "links": [],
          "nullPointMode": "null",
          "percentage": false,
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": true,
          "steppedLine": false,
          "targets": [
            {
              "query": "time_int = int(v:$__range_to_s) - int(v:$__range_from_s)\nmin_window = 300\nmax_windows = 200\nsec_in_ns = 1000000000\nwindow_len = time_int / max_windows / min_window * min_window\nis_min_window = window_len < min_window\nwindow_len = (int(v:(is_min_window)) * min_window) + (int(v:(not is_min_window)) * window_len)\nwl_dur = duration(v:window_len * sec_in_ns)\nstart_dt = time(v:((int(v:$__range_from_s)/window_len) - 2) * window_len * sec_in_ns)\nend_dt = time(v:((int(v:$__range_to_s)/window_len) + 1) * window_len * sec_in_ns)\n\nfrom(bucket: \"monitoring_vdc\") |> filter(fn: (r) => r._measurement == \"cq_performance_throughput\" )\n|> range(start: start_dt, stop: end_dt) \n|> keep(columns:[\"_time\", \"_field\", \"_value\"]) \n|> window(every:wl_dur)\n|> mean()\n|> group(columns:[\"_field\"]) \n|> rename(columns: {_start: \"_time\"})\n\n",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeShift": null,
          "title": "Bandwidth (read/write)",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "transparent": false,
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "decimals": null,
              "format": "Bps",
              "label": "",
              "logBase": 1,
              "max": null,
              "min": "0",
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": "${DS_FLUX}",
          "decimals": null,
          "description": "Rate of failed requests per second, split by error type (user/system)",
          "fill": 9,
          "gridPos": {
            "h": 9,
            "w": 12,
            "x": 0,
            "y": 12
          },
          "id": 144,
          "legend": {
            "alignAsTable": false,
            "avg": true,
            "current": false,
            "hideEmpty": true,
            "hideZero": true,
            "max": true,
            "min": true,
            "rightSide": false,
            "show": true,
            "sortDesc": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 0,
          "links": [],
          "nullPointMode": "null",
          "percentage": false,
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": true,
          "steppedLine": true,
          "targets": [
            {
              "query": "time_int = int(v:$__range_to_s) - int(v:$__range_from_s)\nmin_window = 300\nmax_windows = 200\nsec_in_ns = 1000000000\nwindow_len = time_int / max_windows / min_window * min_window\nis_min_window = window_len < min_window\nwindow_len = (int(v:(is_min_window)) * min_window) + (int(v:(not is_min_window)) * window_len)\nwl_dur = duration(v:window_len * sec_in_ns)\nstart_dt = time(v:((int(v:$__range_from_s)/window_len) - 2) * window_len * sec_in_ns)\nend_dt = time(v:((int(v:$__range_to_s)/window_len) + 1) * window_len * sec_in_ns)\n\n\nfrom(bucket: \"monitoring_vdc\") |> filter(fn: (r) => r._measurement == \"cq_performance_error\" )\n|> range(start: start_dt, stop: end_dt) \n|> keep(columns:[\"_time\", \"_field\", \"_value\"]) \n|> window(every:wl_dur)\n|> mean()\n|> group(columns:[\"_field\"]) \n|> rename(columns: {_start: \"_time\"})\n",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeShift": null,
          "title": "Failed Requests/s by error type (user/system)",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": "0",
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": "${DS_FLUX}",
          "decimals": null,
          "description": "Latency of read/write requests",
          "fill": 1,
          "gridPos": {
            "h": 9,
            "w": 12,
            "x": 12,
            "y": 12
          },
          "id": 152,
          "legend": {
            "alignAsTable": false,
            "avg": true,
            "current": true,
            "max": true,
            "min": true,
            "rightSide": false,
            "show": true,
            "sortDesc": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 2,
          "links": [],
          "nullPointMode": "null",
          "percentage": false,
          "pointradius": 0.5,
          "points": true,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "time_int = int(v:$__range_to_s) - int(v:$__range_from_s)\nmin_window = 300\nmax_windows = 200\nsec_in_ns = 1000000000\nwindow_len = time_int / max_windows / min_window * min_window\nis_min_window = window_len < min_window\nwindow_len = (int(v:(is_min_window)) * min_window) + (int(v:(not is_min_window)) * window_len)\nwl_dur = duration(v:window_len * sec_in_ns)\nstart_dt = time(v:((int(v:$__range_from_s)/window_len) - 2) * window_len * sec_in_ns)\nend_dt = time(v:((int(v:$__range_to_s)/window_len) + 1) * window_len * sec_in_ns)\n\n\nall = from(bucket: \"monitoring_vdc\") \n    |> filter(fn: (r) => r._measurement == \"cq_performance_latency\" )  \n    |> range(start: start_dt, stop: end_dt)  \n    |> window(every:wl_dur)\n    |> mean()\n    |> group(columns:[\"_field\",\"id\"])\n\n// can't simple rename ttfb_read to Read, ti... and similarly for ttlb_write\n// when they are in same stream\n// TODO think about possible optimizations:\n// 1. use function? didn't work at first approach, flux can't see it\n// 2. use join with another table created from CSV\n\nreads = all |> filter(fn: (r) => r.id == \"ttfb_read\" )\n    |> set(key: \"id\", value: \"Read, time to first byte\")\n\nwrites = all |> filter(fn: (r) => r.id == \"ttlb_write\" )\n    |> set(key: \"id\", value: \"Write, time to last byte\")\n\nunion(tables: [reads, writes])|> map(fn:(r) => ({_time: r._start, _value: r._value, _field: r.id + \", \" + r._field })) |>drop(columns:[\"id\"])\n\n\n    \n\n\n",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeShift": null,
          "title": "Latency",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "transparent": false,
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "decimals": null,
              "format": "ms",
              "label": "",
              "logBase": 1,
              "max": null,
              "min": "0",
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "collapsed": true,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 21
          },
          "id": 149,
          "panels": [
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "datasource": "${DS_FLUX}",
              "decimals": null,
              "description": "Rate of successful requests per second, by method",
              "fill": 9,
              "gridPos": {
                "h": 9,
                "w": 12,
                "x": 0,
                "y": 22
              },
              "id": 143,
              "legend": {
                "alignAsTable": true,
                "avg": true,
                "current": false,
                "hideEmpty": true,
                "hideZero": true,
                "max": true,
                "min": true,
                "rightSide": true,
                "show": true,
                "sort": null,
                "sortDesc": null,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 0,
              "links": [],
              "nullPointMode": "null",
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": true,
              "steppedLine": false,
              "targets": [
                {
                  "query": "time_int = int(v:$__range_to_s) - int(v:$__range_from_s)\nmin_window = 300\nmax_windows = 200\nsec_in_ns = 1000000000\nwindow_len = time_int / max_windows / min_window * min_window\nis_min_window = window_len < min_window\nwindow_len = (int(v:(is_min_window)) * min_window) + (int(v:(not is_min_window)) * window_len)\nwl_dur = duration(v:window_len * sec_in_ns)\nstart_dt = time(v:((int(v:$__range_from_s)/window_len) - 2) * window_len * sec_in_ns)\nend_dt = time(v:((int(v:$__range_to_s)/window_len) + 1) * window_len * sec_in_ns)\n\n\nfrom(bucket: \"monitoring_vdc\") |> filter(fn: (r) => r._measurement == \"cq_performance_transaction_method\" and r._field == \"succeed_request_counter\" )\n|> range(start: start_dt, stop: end_dt) \n|> keep(columns:[\"_time\", \"_value\", \"method\"]) \n|> window(every:wl_dur)\n|> mean()\n|> group(columns:[\"_field\", \"method\"]) \n|> rename(columns: {_start: \"_time\"})\n\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeShift": null,
              "title": "Successful Requests/s by Method",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": null,
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "datasource": "${DS_FLUX}",
              "decimals": null,
              "description": "Rate of successful requests per second, by node",
              "fill": 9,
              "gridPos": {
                "h": 9,
                "w": 12,
                "x": 12,
                "y": 22
              },
              "id": 141,
              "legend": {
                "alignAsTable": true,
                "avg": true,
                "current": false,
                "max": true,
                "min": true,
                "rightSide": true,
                "show": true,
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": true,
              "steppedLine": false,
              "targets": [
                {
                  "query": "time_int = int(v:$__range_to_s) - int(v:$__range_from_s)\nmin_window = 300\nmax_windows = 200\nsec_in_ns = 1000000000\nwindow_len = time_int / max_windows / min_window * min_window\nis_min_window = window_len < min_window\nwindow_len = (int(v:(is_min_window)) * min_window) + (int(v:(not is_min_window)) * window_len)\nwl_dur = duration(v:window_len * sec_in_ns)\nstart_dt = time(v:((int(v:$__range_from_s)/window_len) - 2) * window_len * sec_in_ns)\nend_dt = time(v:((int(v:$__range_to_s)/window_len) + 1) * window_len * sec_in_ns)\n\n\nfrom(bucket: \"monitoring_main\") |> filter(fn: (r) => r._measurement == \"statDataHead_performance_internal_transactions\" and r._field == \"succeed_request_counter\"  )\n\n|> range(start: start_dt, stop: end_dt) \n|> keep(columns:[\"_time\", \"_value\", \"host\"]) \n|> derivative(nonNegative: true)\n// see MONITORING-194 for details about next 2 lines\n|> window(every:wl_dur)\n|> mean()\n|> group(columns:[\"_field\", \"host\"]) \n|> rename(columns: {_start: \"_time\", host: \"node\"})\n\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeShift": null,
              "title": "Successful Requests/s by Node",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "datasource": "${DS_FLUX}",
              "decimals": null,
              "description": "Rate of successful requests per second, by Protocol",
              "fill": 9,
              "gridPos": {
                "h": 9,
                "w": 12,
                "x": 0,
                "y": 31
              },
              "id": 153,
              "legend": {
                "alignAsTable": true,
                "avg": true,
                "current": false,
                "hideEmpty": true,
                "hideZero": true,
                "max": true,
                "min": true,
                "rightSide": true,
                "show": true,
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 0,
              "links": [],
              "nullPointMode": "null",
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": true,
              "steppedLine": false,
              "targets": [
                {
                  "query": "time_int = int(v:$__range_to_s) - int(v:$__range_from_s)\nmin_window = 300\nmax_windows = 200\nsec_in_ns = 1000000000\nwindow_len = time_int / max_windows / min_window * min_window\nis_min_window = window_len < min_window\nwindow_len = (int(v:(is_min_window)) * min_window) + (int(v:(not is_min_window)) * window_len)\nwl_dur = duration(v:window_len * sec_in_ns)\nstart_dt = time(v:((int(v:$__range_from_s)/window_len) - 2) * window_len * sec_in_ns)\nend_dt = time(v:((int(v:$__range_to_s)/window_len) + 1) * window_len * sec_in_ns)\n\nfrom(bucket: \"monitoring_vdc\") |> filter(fn: (r) => r._measurement == \"cq_performance_transaction_head\" and r._field == \"succeed_request_counter\" )\n|> range(start: start_dt, stop: end_dt) \n|> keep(columns:[\"_time\", \"_value\", \"head\"]) \n|> window(every:wl_dur)\n|> mean()\n|> group(columns:[\"_field\", \"head\"]) \n|> rename(columns: {_start: \"_time\", head: \"protocol\"})\n\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeShift": null,
              "title": "Successful Requests/s by Protocol",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": null,
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            }
          ],
          "title": "Successful requests drill down",
          "type": "row"
        },
        {
          "collapsed": true,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 22
          },
          "id": 151,
          "panels": [
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "datasource": "${DS_FLUX}",
              "decimals": null,
              "description": "Rate of failed requests per second, split by method",
              "fill": 9,
              "gridPos": {
                "h": 9,
                "w": 12,
                "x": 0,
                "y": 41
              },
              "id": 146,
              "legend": {
                "alignAsTable": true,
                "avg": true,
                "current": false,
                "hideEmpty": true,
                "hideZero": true,
                "max": true,
                "min": true,
                "rightSide": true,
                "show": true,
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 0,
              "links": [],
              "nullPointMode": "null",
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": true,
              "steppedLine": true,
              "targets": [
                {
                  "query": "time_int = int(v:$__range_to_s) - int(v:$__range_from_s)\nmin_window = 300\nmax_windows = 200\nsec_in_ns = 1000000000\nwindow_len = time_int / max_windows / min_window * min_window\nis_min_window = window_len < min_window\nwindow_len = (int(v:(is_min_window)) * min_window) + (int(v:(not is_min_window)) * window_len)\nwl_dur = duration(v:window_len * sec_in_ns)\nstart_dt = time(v:((int(v:$__range_from_s)/window_len) - 2) * window_len * sec_in_ns)\nend_dt = time(v:((int(v:$__range_to_s)/window_len) + 1) * window_len * sec_in_ns)\n\n\nfrom(bucket: \"monitoring_vdc\") |> filter(fn: (r) => r._measurement == \"cq_performance_transaction_method\" and r._field == \"failed_request_counter\" )\n|> range(start: start_dt, stop: end_dt) \n|> keep(columns:[\"_time\", \"_value\", \"method\"]) \n|> window(every:wl_dur)\n|> mean()\n|> group(columns:[\"_field\", \"method\"]) \n|> rename(columns: {_start: \"_time\"})\n\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeShift": null,
              "title": "Failed Requests/s by Method",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "datasource": "${DS_FLUX}",
              "decimals": null,
              "description": "Rate of failed requests per second, split by node",
              "fill": 9,
              "gridPos": {
                "h": 9,
                "w": 12,
                "x": 12,
                "y": 41
              },
              "id": 142,
              "legend": {
                "alignAsTable": true,
                "avg": true,
                "current": false,
                "hideEmpty": true,
                "hideZero": true,
                "max": true,
                "min": true,
                "rightSide": true,
                "show": true,
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 0,
              "links": [],
              "nullPointMode": "null",
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": true,
              "steppedLine": true,
              "targets": [
                {
                  "query": "time_int = int(v:$__range_to_s) - int(v:$__range_from_s)\nmin_window = 300\nmax_windows = 200\nsec_in_ns = 1000000000\nwindow_len = time_int / max_windows / min_window * min_window\nis_min_window = window_len < min_window\nwindow_len = (int(v:(is_min_window)) * min_window) + (int(v:(not is_min_window)) * window_len)\nwl_dur = duration(v:window_len * sec_in_ns)\nstart_dt = time(v:((int(v:$__range_from_s)/window_len) - 2) * window_len * sec_in_ns)\nend_dt = time(v:((int(v:$__range_to_s)/window_len) + 1) * window_len * sec_in_ns)\n\n\nfrom(bucket: \"monitoring_main\") |> filter(fn: (r) => r._measurement == \"statDataHead_performance_internal_transactions\" and r._field == \"failed_request_counter\"  )\n|> range(start: start_dt, stop: end_dt) \n|> keep(columns:[\"_time\", \"_value\", \"host\"]) \n|> derivative(nonNegative: true)\n// see MONITORING-194 for details about next 2 lines\n|> window(every:wl_dur)\n|> mean()\n|> group(columns:[\"_field\", \"host\"]) \n|> rename(columns: {_start: \"_time\", host: \"node\"})",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeShift": null,
              "title": "Failed Requests/s by Node",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "datasource": "${DS_FLUX}",
              "decimals": null,
              "description": "Rate of failed requests per second, split by Protocol",
              "fill": 9,
              "gridPos": {
                "h": 9,
                "w": 12,
                "x": 0,
                "y": 50
              },
              "id": 154,
              "legend": {
                "alignAsTable": true,
                "avg": true,
                "current": false,
                "hideEmpty": true,
                "hideZero": true,
                "max": true,
                "min": true,
                "rightSide": true,
                "show": true,
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 0,
              "links": [],
              "nullPointMode": "null",
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": true,
              "steppedLine": true,
              "targets": [
                {
                  "query": "time_int = int(v:$__range_to_s) - int(v:$__range_from_s)\nmin_window = 300\nmax_windows = 200\nsec_in_ns = 1000000000\nwindow_len = time_int / max_windows / min_window * min_window\nis_min_window = window_len < min_window\nwindow_len = (int(v:(is_min_window)) * min_window) + (int(v:(not is_min_window)) * window_len)\nwl_dur = duration(v:window_len * sec_in_ns)\nstart_dt = time(v:((int(v:$__range_from_s)/window_len) - 2) * window_len * sec_in_ns)\nend_dt = time(v:((int(v:$__range_to_s)/window_len) + 1) * window_len * sec_in_ns)\n\n\nfrom(bucket: \"monitoring_vdc\") |> filter(fn: (r) => r._measurement == \"cq_performance_transaction_head\" and r._field == \"failed_request_counter\" )\n|> range(start: start_dt, stop: end_dt) \n|> keep(columns:[\"_time\", \"_value\", \"head\"]) \n|> window(every:wl_dur)\n|> mean()\n|> group(columns:[\"_field\", \"head\"]) \n|> rename(columns: {_start: \"_time\", head: \"protocol\"})\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeShift": null,
              "title": "Failed Requests/s by Protocol",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "datasource": "${DS_FLUX}",
              "decimals": null,
              "description": "Rate of failed requests per second, split by error code",
              "fill": 10,
              "gridPos": {
                "h": 9,
                "w": 12,
                "x": 12,
                "y": 50
              },
              "id": 145,
              "legend": {
                "alignAsTable": true,
                "avg": true,
                "current": false,
                "hideEmpty": true,
                "hideZero": true,
                "max": true,
                "min": true,
                "rightSide": true,
                "show": true,
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 0,
              "links": [],
              "nullPointMode": "null",
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": true,
              "steppedLine": true,
              "targets": [
                {
                  "query": "time_int = int(v:$__range_to_s) - int(v:$__range_from_s)\nmin_window = 300\nmax_windows = 200\nsec_in_ns = 1000000000\nwindow_len = time_int / max_windows / min_window * min_window\nis_min_window = window_len < min_window\nwindow_len = (int(v:(is_min_window)) * min_window) + (int(v:(not is_min_window)) * window_len)\nwl_dur = duration(v:window_len * sec_in_ns)\nstart_dt = time(v:((int(v:$__range_from_s)/window_len) - 2) * window_len * sec_in_ns)\nend_dt = time(v:((int(v:$__range_to_s)/window_len) + 1) * window_len * sec_in_ns)\n\n\nfrom(bucket: \"monitoring_vdc\") |> filter(fn: (r) => r._measurement == \"cq_performance_error_code\" and r._field == \"error_counter\" )\n|> range(start: start_dt, stop: end_dt) \n|> keep(columns:[\"_time\", \"_value\", \"code\"]) \n|> window(every:wl_dur)\n|> mean()\n|> group(columns:[\"_field\", \"code\"]) \n|> rename(columns: {_start: \"_time\"})\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeShift": null,
              "title": "Failed Requests/s by error code",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            }
          ],
          "title": "Failures drill down",
          "type": "row"
        }
      ],
      "refresh": false,
      "schemaVersion": 16,
      "style": "dark",
      "tags": [
        "Data Access Performance"
      ],
      "templating": {
        "list": []
      },
      "time": {
        "from": "now-24h",
        "to": "now"
      },
      "timepicker": {
        "refresh_intervals": [
          "5s",
          "10s",
          "30s",
          "1m",
          "5m",
          "15m",
          "30m",
          "1h",
          "2h",
          "1d"
        ],
        "time_options": [
          "5m",
          "15m",
          "1h",
          "6h",
          "12h",
          "24h",
          "2d",
          "7d",
          "30d"
        ]
      },
      "timezone": "",
      "title": "Data Access Performance - Overview",
      "uid": "JXFhFS6mz",
      "version": 5
    }
  gc_capacity_reclaimed.json: |-
    {
      "__inputs": [
        {
          "name": "DS_FLUX",
          "label": "Flux",
          "description": "",
          "type": "datasource",
          "pluginId": "grafana-influxdb-flux-datasource",
          "pluginName": "Flux (InfluxDB) [BETA]"
        }
      ],
      "__requires": [
        {
          "type": "grafana",
          "id": "grafana",
          "name": "Grafana",
          "version": "6.2.5"
        },
        {
          "type": "datasource",
          "id": "grafana-influxdb-flux-datasource",
          "name": "Flux (InfluxDB) [BETA]",
          "version": "5.2.11"
        },
        {
          "type": "panel",
          "id": "graph",
          "name": "Graph",
          "version": ""
        },
        {
          "type": "panel",
          "id": "table",
          "name": "Table",
          "version": ""
        }
      ],
      "annotations": {
        "list": [
          {
            "builtIn": 1,
            "datasource": "-- Grafana --",
            "enable": true,
            "hide": true,
            "iconColor": "rgba(0, 211, 255, 1)",
            "name": "Annotations & Alerts",
            "type": "dashboard"
          }
        ]
      },
      "editable": true,
      "gnetId": null,
      "graphTooltip": 0,
      "id": null,
      "links": [
        {
          "asDropdown": true,
          "icon": "external link",
          "keepTime": true,
          "tags": [
            "Garbage Collection"
          ],
          "title": "Related dashboards",
          "type": "dashboards"
        }
      ],
      "panels": [
        {
          "columns": [],
          "fontSize": "100%",
          "gridPos": {
            "h": 3,
            "w": 24,
            "x": 0,
            "y": 0
          },
          "id": 100,
          "links": [],
          "options": {},
          "pageSize": null,
          "scroll": true,
          "showHeader": true,
          "sort": {
            "col": null,
            "desc": false
          },
          "styles": [
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Capacity Reclaimed",
              "thresholds": [],
              "type": "number",
              "unit": "bytes"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "User Data Reclaimed",
              "thresholds": [],
              "type": "number",
              "unit": "bytes"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "System Metadata Reclaimed",
              "thresholds": [],
              "type": "number",
              "unit": "bytes"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "decimals": 2,
              "pattern": "/.*/",
              "thresholds": [],
              "type": "hidden",
              "unit": "bytes"
            }
          ],
          "targets": [
            {
              "query": "userReclaimed = from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_gc_data_region\" and r._field == \"user_gc_reclaimed\")\n|> range($range\r)\n|> last()\n|> keep(columns: [\"_time\", \"_value\"]) \n\nsystemReclaimed = from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_gc_data_region\" and r._field == \"system_gc_reclaimed\")\n|> range($range\r)\n|> last()\n|> keep(columns: [\"_time\", \"_value\"]) \n  \nunion(tables: [userReclaimed,systemReclaimed])\n|>sum()\n|> rename(columns:{_value: \"Capacity Reclaimed\"})",
              "refId": "A",
              "resultFormat": "table"
            },
            {
              "query": "\nfrom(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_gc_data_region\" and r._field == \"user_gc_reclaimed\")\n|> range($range\r)\n|> last()\n|> keep(columns: [\"_time\", \"_value\"]) \n|> rename(columns:{_value: \"User Data Reclaimed\"})",
              "refId": "B",
              "resultFormat": "table"
            },
            {
              "query": "from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_gc_data_region\" and r._field == \"system_gc_reclaimed\")\n|> range($range\r)\n|> last()\n|> keep(columns: [\"_time\", \"_value\"]) \n|> rename(columns:{_value: \"System Metadata Reclaimed\"})",
              "refId": "C",
              "resultFormat": "table"
            }
          ],
          "timeFrom": null,
          "timeShift": null,
          "title": "Capacity Reclaimed",
          "transform": "table",
          "type": "table"
        },
        {
          "collapsed": true,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 3
          },
          "id": 90,
          "panels": [
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "datasource": "${DS_FLUX}",
              "fill": 1,
              "gridPos": {
                "h": 8,
                "w": 12,
                "x": 0,
                "y": 4
              },
              "id": 99,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "total": true,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "extended_range_start = int(v:$__range_from_s) - 7200\nsafe_range_start = int(v:$__range_from_s) - 3600\nfrom(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_gc_data_region\" and r._field == \"user_gc_reclaimed\")\n|> range(start: extended_range_start,stop:int(v:$__range_to_s)\r)\n|> difference(nonNegative: true)\n|> fill(column: \"_value\", value: 0)\n|> range(start: safe_range_start,stop:int(v:$__range_to_s)\r)",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "User Data Reclaimed",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "bits",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "datasource": "${DS_FLUX}",
              "fill": 1,
              "gridPos": {
                "h": 8,
                "w": 12,
                "x": 12,
                "y": 4
              },
              "id": 98,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": false,
                "max": false,
                "min": false,
                "show": true,
                "total": true,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "extended_range_start = int(v:$__range_from_s) - 7200\nsafe_range_start = int(v:$__range_from_s) - 3600\nfrom(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_gc_data_region\" and r._field == \"system_gc_reclaimed\")\n|> range(start: extended_range_start,stop:int(v:$__range_to_s)\r)\n|> difference(nonNegative: true)\n|> fill(column: \"_value\", value: 0)\n|> range(start: safe_range_start,stop:int(v:$__range_to_s)\r)\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "System Metadata Reclaimed",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "bits",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            }
          ],
          "title": "History Capacity Reclaimed",
          "type": "row"
        }
      ],
      "refresh": false,
      "schemaVersion": 18,
      "style": "dark",
      "tags": [
        "Garbage Collection"
      ],
      "templating": {
        "list": []
      },
      "time": {
        "from": "now-24h",
        "to": "now"
      },
      "timepicker": {
        "hidden": false,
        "refresh_intervals": [
          "5s",
          "10s",
          "30s",
          "1m",
          "5m",
          "15m",
          "30m",
          "1h",
          "2h",
          "1d"
        ],
        "time_options": [
          "5m",
          "15m",
          "1h",
          "6h",
          "12h",
          "24h",
          "2d",
          "7d",
          "30d"
        ]
      },
      "timezone": "utc",
      "title": "Garbage Collection: Capacity Reclaimed",
      "uid": "CRRPA51QMZzc",
      "version": 1
    }
  gc_garbage_detected.json: |-
    {
      "__inputs": [],
      "__requires": [
        {
          "type": "grafana",
          "id": "grafana",
          "name": "Grafana",
          "version": "6.2.5"
        },
        {
          "type": "panel",
          "id": "table",
          "name": "Table",
          "version": ""
        }
      ],
      "annotations": {
        "list": [
          {
            "builtIn": 1,
            "datasource": "-- Grafana --",
            "enable": true,
            "hide": true,
            "iconColor": "rgba(0, 211, 255, 1)",
            "name": "Annotations & Alerts",
            "type": "dashboard"
          }
        ]
      },
      "editable": true,
      "gnetId": null,
      "graphTooltip": 0,
      "id": null,
      "links": [
        {
          "asDropdown": true,
          "icon": "external link",
          "keepTime": true,
          "tags": [
            "Garbage Collection"
          ],
          "title": "Related dashboards",
          "type": "dashboards"
        }
      ],
      "panels": [
        {
          "columns": [],
          "fontSize": "100%",
          "gridPos": {
            "h": 4,
            "w": 24,
            "x": 0,
            "y": 0
          },
          "id": 95,
          "links": [],
          "options": {},
          "pageSize": null,
          "scroll": true,
          "showHeader": true,
          "sort": {
            "col": null,
            "desc": false
          },
          "styles": [
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Total Garbage Detected",
              "thresholds": [],
              "type": "number",
              "unit": "bytes"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Capacity Reclaimed",
              "thresholds": [],
              "type": "number",
              "unit": "bytes"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Capacity Pending Reclamation",
              "thresholds": [],
              "type": "number",
              "unit": "bytes"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Un-Reclaimable Garbage",
              "thresholds": [],
              "type": "number",
              "unit": "bytes"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "/.*/",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            }
          ],
          "targets": [
            {
              "query": "userReclaimed = from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_gc_data_region\" and r._field == \"user_gc_reclaimed\")\n|> range($range\r)\n|> last()\n|> keep(columns: [\"_time\", \"_value\"]) \n\nsystemReclaimed = from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_gc_data_region\" and r._field == \"system_gc_reclaimed\")\n|> range($range\r)\n|> last()\n|> keep(columns: [\"_time\", \"_value\"])\n\nuserPending = from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_gc_data_region\" and r._field == \"user_gc_pending\")\n|> range($range\r)\n|> last()\n|> keep(columns: [\"_time\", \"_value\"]) \n\nsystemPending = from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_gc_data_region\" and r._field == \"system_gc_pending\")\n|> range($range\r)\n|> last()\n|> keep(columns: [\"_time\", \"_value\"])\n\nuserUnReclaimed = from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_gc_data_region\" and r._field == \"user_gc_unreclaim\")\n|> range($range\r)\n|> last()\n|> keep(columns: [\"_time\", \"_value\"]) \n\nsystemUnReclaimed = from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_gc_data_region\" and r._field == \"system_gc_unreclaim\")\n|> range($range\r)\n|> last()\n|> keep(columns: [\"_time\", \"_value\"]) \n\n\nunion(tables: [userPending,systemPending,userUnReclaimed,systemUnReclaimed,userReclaimed,systemReclaimed ])\n|>sum()\n|> rename(columns:{_value: \"Total Garbage Detected\"})\n\n",
              "refId": "A",
              "resultFormat": "table"
            },
            {
              "query": "userReclaimed = from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_gc_data_region\" and r._field == \"user_gc_reclaimed\")\n|> range($range\r)\n|> last()\n|> keep(columns: [\"_time\", \"_value\"]) \n\nsystemReclaimed = from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_gc_data_region\" and r._field == \"system_gc_reclaimed\")\n|> range($range\r)\n|> last()\n|> keep(columns: [\"_time\", \"_value\"]) \n\nunion(tables: [userReclaimed,systemReclaimed])\n|>sum()\n|> rename(columns:{_value: \"Capacity Reclaimed\"})",
              "refId": "B",
              "resultFormat": "table"
            },
            {
              "query": "userPending = from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_gc_data_region\" and r._field == \"user_gc_pending\")\n|> range($range\r)\n|> last()\n|> keep(columns: [\"_time\", \"_value\"]) \n\nsystemPending = from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_gc_data_region\" and r._field == \"system_gc_pending\")\n|> range($range\r)\n|> last()\n|> keep(columns: [\"_time\", \"_value\"]) \n  \nunion(tables: [userPending,systemPending])\n|>sum()\n|> rename(columns:{_value: \"Capacity Pending Reclamation\"})",
              "refId": "C",
              "resultFormat": "table"
            },
            {
              "query": "userUnReclaimed = from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_gc_data_region\" and r._field == \"user_gc_unreclaim\")\n|> range($range\r)\n|> last()\n|> keep(columns: [\"_time\", \"_value\"]) \n\nsystemUnReclaimed = from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_gc_data_region\" and r._field == \"system_gc_unreclaim\")\n|> range($range\r)\n|> last()\n|> keep(columns: [\"_time\", \"_value\"]) \n\nunion(tables: [userUnReclaimed,systemUnReclaimed])\n|>sum()\n|> rename(columns:{_value: \"Un-Reclaimable Garbage\"})",
              "refId": "D",
              "resultFormat": "table"
            }
          ],
          "timeFrom": null,
          "timeShift": null,
          "title": "Garbage Detected",
          "transform": "table",
          "type": "table"
        }
      ],
      "refresh": false,
      "schemaVersion": 18,
      "style": "dark",
      "tags": [
        "Garbage Collection"
      ],
      "templating": {
        "list": []
      },
      "time": {
        "from": "now-24h",
        "to": "now"
      },
      "timepicker": {
        "hidden": false,
        "refresh_intervals": [
          "5s",
          "10s",
          "30s",
          "1m",
          "5m",
          "15m",
          "30m",
          "1h",
          "2h",
          "1d"
        ],
        "time_options": [
          "5m",
          "15m",
          "1h",
          "6h",
          "12h",
          "24h",
          "2d",
          "7d",
          "30d"
        ]
      },
      "timezone": "utc",
      "title": "Garbage Collection: Garbage Detected",
      "uid": "GCRPA51QMZzc",
      "version": 1
    }
  node_rebalancing.json: |-
    {
      "__inputs": [],
      "__requires": [
        {
          "type": "grafana",
          "id": "grafana",
          "name": "Grafana",
          "version": "6.2.5"
        },
        {
          "type": "panel",
          "id": "graph",
          "name": "Graph",
          "version": ""
        },
        {
          "type": "panel",
          "id": "table",
          "name": "Table",
          "version": ""
        }
      ],
      "annotations": {
        "list": [
          {
            "builtIn": 1,
            "datasource": "-- Grafana --",
            "enable": true,
            "hide": true,
            "iconColor": "rgba(0, 211, 255, 1)",
            "name": "Annotations & Alerts",
            "type": "dashboard"
          }
        ]
      },
      "editable": true,
      "gnetId": null,
      "graphTooltip": 0,
      "id": null,
      "links": [],
      "panels": [
        {
          "columns": [],
          "description": "The table displays the lastest values for the selected time range.",
          "fontSize": "100%",
          "gridPos": {
            "h": 3,
            "w": 24,
            "x": 0,
            "y": 0
          },
          "id": 8,
          "links": [],
          "options": {},
          "pageSize": null,
          "scroll": true,
          "showHeader": true,
          "sort": {
            "col": 3,
            "desc": true
          },
          "styles": [
            {
              "alias": "Time",
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "pattern": "Time",
              "type": "hidden"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Measurement",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Field",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Value",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Data Rebalanced",
              "thresholds": [],
              "type": "number",
              "unit": "bytes"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Pending Rebalancing",
              "thresholds": [],
              "type": "number",
              "unit": "bytes"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "/Rate of Rebalance./",
              "thresholds": [],
              "type": "number",
              "unit": "bytes"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "decimals": 2,
              "pattern": "/.*/",
              "thresholds": [],
              "type": "number",
              "unit": "short"
            }
          ],
          "targets": [
            {
              "query": "from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_rebalancing_region\" and r._field == \"data_rebalanced\")\n|> range($range)\n|> last()\n|> keep(columns: [\"_value\"])\n|> rename(columns:{_value:\"Data Rebalanced\"})",
              "refId": "A",
              "resultFormat": "table"
            },
            {
              "query": "from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_rebalancing_region\" and r._field == \"pending_rebalance\")\n|> range($range)\n|> last()\n|> keep(columns: [\"_value\"])\n|> rename(columns:{_value:\"Pending Rebalancing\"})",
              "refId": "B",
              "resultFormat": "table"
            },
            {
              "query": "\nfrom(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_rebalancing_region\" and r._field == \"data_rebalanced\")\n|> range($range)\n|> derivative(unit:24h, nonNegative: true, columns: [\"_value\"])\n|> range($range)\n|> last()\n|> keep(columns: [\"_value\"])\n|> rename(columns:{_value:\"Rate of Rebalance (per day)\"})",
              "refId": "C",
              "resultFormat": "table"
            }
          ],
          "title": "Node Rebalancing Overview",
          "transform": "table",
          "type": "table"
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "description": "History of the amount of data that has been rebalanced.",
          "fill": 1,
          "gridPos": {
            "h": 9,
            "w": 12,
            "x": 0,
            "y": 3
          },
          "id": 10,
          "legend": {
            "alignAsTable": true,
            "avg": false,
            "current": true,
            "max": true,
            "min": true,
            "show": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "null",
          "options": {},
          "percentage": false,
          "pointradius": 5,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_rebalancing_region\" and r._field == \"data_rebalanced\")\n|> range($range)\n|> drop(columns: [\"_measurement\"])\n|> set(key: \"_field\", value: \"Data Rebalanced\")",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Data Rebalanced",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "bytes",
              "label": "",
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": "",
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "description": "History of the amount of data that is in the rebalance queue but has not been rebalanced yet.",
          "fill": 1,
          "gridPos": {
            "h": 9,
            "w": 12,
            "x": 12,
            "y": 3
          },
          "id": 11,
          "legend": {
            "alignAsTable": true,
            "avg": false,
            "current": true,
            "max": true,
            "min": true,
            "show": true,
            "sortDesc": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "null",
          "options": {},
          "percentage": false,
          "pointradius": 5,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_rebalancing_region\" and r._field == \"pending_rebalance\")\n|> range($range)\n|> drop(columns: [\"_measurement\"])\n|> set(key: \"_field\", value: \"Pending Rebalancing\")",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Pending Rebalancing",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "bytes",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "description": "History of the incremental amount of data that was rebalanced for 24 hours.",
          "fill": 1,
          "gridPos": {
            "h": 9,
            "w": 24,
            "x": 0,
            "y": 12
          },
          "id": 13,
          "legend": {
            "alignAsTable": true,
            "avg": false,
            "current": true,
            "max": true,
            "min": true,
            "show": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "null",
          "options": {},
          "percentage": false,
          "pointradius": 5,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_rebalancing_region\" and r._field == \"data_rebalanced\")\n|> range($range)\n|> drop(columns: [\"_measurement\"])\n|> derivative(unit:24h, nonNegative: true, columns: [\"_value\"])\n|> range($range)\n|> set(key: \"_field\", value: \"Rate\")",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Rate of Rebalance (per day)",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "bytes",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        }
      ],
      "refresh": false,
      "schemaVersion": 18,
      "style": "dark",
      "tags": [],
      "templating": {
        "list": []
      },
      "time": {
        "from": "now-24h",
        "to": "now"
      },
      "timepicker": {
        "refresh_intervals": [
          "5s",
          "10s",
          "30s",
          "1m",
          "5m",
          "15m",
          "30m",
          "1h",
          "2h",
          "1d"
        ],
        "time_options": [
          "5m",
          "15m",
          "1h",
          "6h",
          "12h",
          "24h",
          "2d",
          "7d",
          "30d"
        ]
      },
      "timezone": "",
      "title": "Node Rebalancing",
      "uid": "hVVoixVZz",
      "version": 1
    }
  objectstore_availability.json: |-
    {
      "__inputs": [],
      "__requires": [
        {
          "type": "grafana",
          "id": "grafana",
          "name": "Grafana",
          "version": "6.2.5ecs"
        },
        {
          "type": "panel",
          "id": "table",
          "name": "Table",
          "version": ""
        }
      ],
      "annotations": {
        "list": [
          {
            "builtIn": 1,
            "datasource": "-- Grafana --",
            "enable": true,
            "hide": true,
            "iconColor": "rgba(0, 211, 255, 1)",
            "name": "Annotations & Alerts",
            "type": "dashboard"
          }
        ]
      },
      "editable": true,
      "gnetId": null,
      "graphTooltip": 0,
      "id": null,
      "links": [],
      "panels": [
        {
          "columns": [],
          "fontSize": "100%",
          "gridPos": {
            "h": 8,
            "w": 14,
            "x": 0,
            "y": 0
          },
          "id": 2,
          "links": [],
          "options": {},
          "pageSize": null,
          "scroll": true,
          "showHeader": true,
          "sort": {
            "col": 0,
            "desc": true
          },
          "styles": [
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "decimals": 2,
              "pattern": "Measurement",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Time",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Field",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "Object Store",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "release_name",
              "thresholds": [],
              "type": "number",
              "unit": "short"
            },
            {
              "alias": "Status",
              "colorMode": "value",
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "#C4162A",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Value",
              "thresholds": [
                "0",
                "1"
              ],
              "type": "string",
              "unit": "short",
              "valueMaps": [
                {
                  "text": "Stopped",
                  "value": "0"
                },
                {
                  "text": "Running",
                  "value": "1"
                }
              ]
            }
          ],
          "targets": [
            {
              "query": "// get all known release names for 30 days(TODO: make correction of this period)\nknown=from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_disk_bandwidth\")\n|> range(start: -30d)\n|> last()\n|> keep(columns: [\"release_name\", \"_value\", \"_time\"])\n//mark all known by old impossible date\n|> timeShift(duration: -99999d)\n//mark all known by unique date\n//|> set(key: \"_time\", value: \"\")\n//|> fill(column: \"_time\", value: 1970-01-01 04:00:00)\n\n// get only \"live\" relese names for last day\nactual=from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_disk_bandwidth\")\n|> range(start: -30m)\n|> last()\n|> keep(columns: [\"release_name\", \"_time\", \"_value\"])\n\nunion(tables: [known, actual])\n// separate unique release names\n|> group(columns: [\"release_name\"])\n|> sort(columns:[\"_time\"])\n//after this, release names with impossible old timestamp are suggested as disabled\n|> last()\n|> map(fn: (r) => ({\r\n      release_name: r.release_name,\r\n      _value:\r\n         if r._time <= 1870-01-01 04:00:00 then 0\r\n         else 1\n    }))",
              "refId": "A",
              "resultFormat": "table"
            }
          ],
          "timeFrom": null,
          "timeShift": null,
          "title": "Object Store Status",
          "transform": "table",
          "type": "table"
        }
      ],
      "schemaVersion": 18,
      "style": "dark",
      "tags": [],
      "templating": {
        "list": []
      },
      "time": {
        "from": "now-30d",
        "to": "now"
      },
      "timepicker": {
        "refresh_intervals": [
          "15m",
          "30m",
          "1h",
          "2h",
          "1d"
        ],
        "time_options": [
          "15m",
          "1h",
          "6h",
          "12h",
          "24h",
          "2d",
          "7d",
          "30d"
        ]
      },
      "timezone": "",
      "title": "Object Store Availability Status",
      "uid": "ZjIv-pfGk",
      "version": 12
    }
  recovery_status.json: |
    {
      "__inputs": [],
      "__requires": [
        {
          "type": "grafana",
          "id": "grafana",
          "name": "Grafana",
          "version": "6.2.5"
        },
        {
          "type": "panel",
          "id": "graph",
          "name": "Graph",
          "version": ""
        },
        {
          "type": "panel",
          "id": "table",
          "name": "Table",
          "version": ""
        }
      ],
      "annotations": {
        "list": [
          {
            "builtIn": 1,
            "datasource": "-- Grafana --",
            "enable": true,
            "hide": true,
            "iconColor": "rgba(0, 211, 255, 1)",
            "name": "Annotations & Alerts",
            "type": "dashboard"
          }
        ]
      },
      "editable": true,
      "gnetId": null,
      "graphTooltip": 0,
      "id": null,
      "links": [],
      "panels": [
        {
          "columns": [],
          "description": "The table displays the latest values of the logical size of the data yet to be recovered, the rate at which data is being recovered and time to recovery completion in the selected time range.",
          "fontSize": "100%",
          "gridPos": {
            "h": 3,
            "w": 24,
            "x": 0,
            "y": 0
          },
          "id": 10,
          "links": [],
          "options": {},
          "pageSize": null,
          "scroll": true,
          "showHeader": true,
          "sort": {
            "col": 0,
            "desc": true
          },
          "styles": [
            {
              "alias": " Amount of Data to be Recovered ",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "data",
              "thresholds": [],
              "type": "number",
              "unit": "bytes"
            },
            {
              "alias": "Recovery Rate (per second)",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "rate",
              "thresholds": [],
              "type": "number",
              "unit": "bytes"
            },
            {
              "alias": "Time to Completion",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "ETC",
              "preserveFormat": false,
              "rangeMaps": [
                {
                  "from": "",
                  "text": "",
                  "to": ""
                }
              ],
              "sanitize": false,
              "thresholds": [],
              "type": "number",
              "unit": "s",
              "valueMaps": [
                {
                  "text": "N/A",
                  "value": "0"
                }
              ]
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Time",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Measurement",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Field",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Value",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            }
          ],
          "targets": [
            {
              "query": "a = from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_recover_status_region\" and r._field == \"data_to_recover\")\n|> range($range)\n|> keep(columns: [\"_time\", \"_value\"])\n|> last()\n|> keep(columns: [\"_value\"])\n|> rename(columns:{_value:\"data\"})\n|> yield(name: \"1\")\n\noffset = 21600\r\nextended_range_start = int(v:$__range_to_s) - offset\r\nextended_range_stop = int(v:$__range_to_s)\nb = from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_recover_status_region\" and r._field == \"data_recovered\")\n|> range(start: extended_range_start, stop: extended_range_stop)\n|> window(every: 15m)\n|> last()\n|> keep(columns: [\"_time\", \"_value\"])\n|> derivative(nonNegative: true, columns: [\"_value\"])\n|> mean()\n|> rename(columns: {_value: \"rate\"})\n|> yield(name: \"2\")\n\njoin(tables: {aa: a, bb: b})\n|> map(fn: (r) => ({\"ETC\": \n                    if (r.data > 0 and r.rate > 0) then string(v:float(v:r.data)/r.rate) else \"-\",\n                    \"range\": \"$range\"}))\n|> map(fn: (r) => ({ETC: if ((r.range =~ /stop/)) then \"-\" else r.ETC})",
              "refId": "A",
              "resultFormat": "table"
            }
          ],
          "timeFrom": null,
          "timeShift": null,
          "title": "Recovery Status",
          "transform": "table",
          "type": "table"
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "description": "History of the amount of data pending recovery in the selected time range.",
          "fill": 1,
          "gridPos": {
            "h": 9,
            "w": 12,
            "x": 0,
            "y": 3
          },
          "id": 4,
          "legend": {
            "alignAsTable": true,
            "avg": false,
            "current": true,
            "hideEmpty": false,
            "hideZero": false,
            "max": true,
            "min": true,
            "show": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "null",
          "options": {},
          "percentage": false,
          "pointradius": 1,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "from(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_recover_status_region\" and r._field == \"data_to_recover\")\n|> range($range)\n|> keep(columns: [\"_time\", \"_value\"])\n|> set(key: \"_field\", value: \"Amount of Data to be Recovered\")",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Amount of Data to be Recovered",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "decimals": 1,
              "format": "bytes",
              "label": "",
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "bytes",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": false
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "description": "History of the rate at which data was recovered.",
          "fill": 1,
          "gridPos": {
            "h": 9,
            "w": 12,
            "x": 12,
            "y": 3
          },
          "id": 6,
          "legend": {
            "alignAsTable": true,
            "avg": false,
            "current": true,
            "max": true,
            "min": true,
            "rightSide": false,
            "show": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "null",
          "options": {},
          "percentage": false,
          "pointradius": 5,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "offset = 300\r\nextended_range_start = int(v:$__range_from_s) - offset\r\nextended_range_stop = int(v:$__range_to_s)\nfrom(bucket: \"monitoring_vdc\")\n|> filter(fn: (r) => r._measurement == \"cq_recover_status_region\" and r._field == \"data_recovered\")\n|> range(start: extended_range_start, stop: extended_range_stop)\n|> keep(columns: [\"_time\", \"_value\"])\n|> derivative(nonNegative: true, columns: [\"_value\"])\n|> range($range)\n|> set(key: \"_field\", value: \"Recovery Rate\")",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Recovery Rate (per second)",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "bytes",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": false
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        }
      ],
      "refresh": false,
      "schemaVersion": 18,
      "style": "dark",
      "tags": [],
      "templating": {
        "list": []
      },
      "time": {
        "from": "now-24h",
        "to": "now"
      },
      "timepicker": {
        "refresh_intervals": [
          "5s",
          "10s",
          "30s",
          "1m",
          "5m",
          "15m",
          "30m",
          "1h",
          "2h",
          "1d"
        ],
        "time_options": [
          "5m",
          "15m",
          "1h",
          "6h",
          "12h",
          "24h",
          "2d",
          "7d",
          "30d"
        ]
      },
      "timezone": "",
      "title": "Recovery Status",
      "uid": "9t61eCnZk",
      "version": 1
    }
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/grafana/templates/dashboards.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "RELEASE-NAME-grafana-dashboards-internal-oe"
  labels:
    release: RELEASE-NAME
data:
  baremetal-csi.json: |-
    {
      "__inputs": [
        {
          "name": "DS_FLUX",
          "label": "Flux",
          "description": "",
          "type": "datasource",
          "pluginId": "grafana-influxdb-flux-datasource",
          "pluginName": "Flux (InfluxDB) [BETA]"
        }
      ],
      "__requires": [
        {
          "type": "grafana",
          "id": "grafana",
          "name": "Grafana",
          "version": "6.2.5ecs"
        },
        {
          "type": "datasource",
          "id": "grafana-influxdb-flux-datasource",
          "name": "Flux (InfluxDB) [BETA]",
          "version": "5.2.12"
        },
        {
          "type": "panel",
          "id": "graph",
          "name": "Graph",
          "version": ""
        },
        {
          "type": "panel",
          "id": "table",
          "name": "Table",
          "version": ""
        }
      ],
      "annotations": {
        "list": [
          {
            "builtIn": 1,
            "datasource": "-- Grafana --",
            "enable": true,
            "hide": true,
            "iconColor": "rgba(0, 211, 255, 1)",
            "name": "Annotations & Alerts",
            "type": "dashboard"
          }
        ]
      },
      "editable": true,
      "gnetId": null,
      "graphTooltip": 0,
      "id": null,
      "iteration": 1612835412958,
      "links": [],
      "panels": [
        {
          "columns": [],
          "fontSize": "130%",
          "gridPos": {
            "h": 3,
            "w": 24,
            "x": 0,
            "y": 0
          },
          "id": 42,
          "links": [],
          "options": {},
          "pageSize": 1,
          "scroll": false,
          "showHeader": true,
          "sort": {
            "col": 0,
            "desc": true
          },
          "styles": [
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Time",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Measurement",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Field",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            },
            {
              "alias": "",
              "colorMode": null,
              "colors": [
                "rgba(245, 54, 54, 0.9)",
                "rgba(237, 129, 40, 0.89)",
                "rgba(50, 172, 45, 0.97)"
              ],
              "dateFormat": "YYYY-MM-DD HH:mm:ss",
              "decimals": 2,
              "mappingType": 1,
              "pattern": "Value",
              "thresholds": [],
              "type": "hidden",
              "unit": "short"
            }
          ],
          "targets": [
            {
              "query": "from(bucket: \"monitoring_op\")\n  |> filter(fn: (r) => r._measurement == \"csi_build_info\")   \n  |> range($range)\n  |> keep(columns: [\"branch\",\"revision\",\"version\"])\n  |> unique(column: \"version\")\n  \n",
              "refId": "A",
              "resultFormat": "table"
            }
          ],
          "timeFrom": null,
          "timeShift": null,
          "title": "CSI Baremetal build information",
          "transform": "table",
          "transparent": true,
          "type": "table"
        },
        {
          "collapsed": true,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 3
          },
          "id": 13,
          "panels": [
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "fill": 1,
              "gridPos": {
                "h": 7,
                "w": 12,
                "x": 0,
                "y": 4
              },
              "id": 7,
              "legend": {
                "alignAsTable": false,
                "avg": false,
                "current": false,
                "hideEmpty": false,
                "hideZero": false,
                "max": true,
                "min": true,
                "rightSide": false,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")\n  |> filter(fn: (r) => r._measurement == \"csi_go_goroutines\" and r.app==\"csi-baremetal-controller\" )   \n  |> range($range)\n  |> keep(columns:[\"_time\", \"_value\", \"pod_name\"])\n  |> rename(columns: {pod_name: \"_measurement\"})",
                  "refId": "A",
                  "resultFormat": "time_series"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Goroutines - Controller",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "decimals": null,
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "fill": 1,
              "gridPos": {
                "h": 7,
                "w": 12,
                "x": 12,
                "y": 4
              },
              "id": 2,
              "legend": {
                "alignAsTable": false,
                "avg": false,
                "current": false,
                "hideEmpty": false,
                "hideZero": false,
                "max": true,
                "min": true,
                "rightSide": false,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")\n  |> filter(fn: (r) => r._measurement == \"csi_go_goroutines\" and r.app==\"csi-baremetal-node\" )   \n  |> range($range)\n  |> keep(columns:[\"_time\", \"_value\", \"pod_name\"])\n  |> rename(columns: {pod_name: \"_measurement\"})",
                  "refId": "A",
                  "resultFormat": "time_series"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Goroutines - Nodes",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "decimals": null,
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "",
              "fill": 1,
              "gridPos": {
                "h": 7,
                "w": 12,
                "x": 0,
                "y": 11
              },
              "id": 8,
              "legend": {
                "avg": false,
                "current": false,
                "max": true,
                "min": true,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")\n  |> filter(fn: (r) => r._measurement == \"csi_process_open_fds\" and r.app==\"csi-baremetal-controller\" )   \n  |> range($range)\n  |> keep(columns:[\"_time\", \"_value\", \"pod_name\"])\n  |> rename(columns: {pod_name: \"_measurement\"})",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Open file descriptors - Controller",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "",
              "fill": 1,
              "gridPos": {
                "h": 7,
                "w": 12,
                "x": 12,
                "y": 11
              },
              "id": 4,
              "legend": {
                "avg": false,
                "current": false,
                "max": true,
                "min": true,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")\n  |> filter(fn: (r) => r._measurement == \"csi_process_open_fds\" and r.app==\"csi-baremetal-node\" )   \n  |> range($range)\n  |> keep(columns:[\"_time\", \"_value\", \"pod_name\"])\n  |> rename(columns: {pod_name: \"_measurement\"})",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Open file descriptors - Nodes",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "",
              "fill": 1,
              "gridPos": {
                "h": 7,
                "w": 12,
                "x": 0,
                "y": 18
              },
              "id": 10,
              "legend": {
                "avg": false,
                "current": false,
                "max": true,
                "min": true,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")\n  |> filter(fn: (r) => r._measurement == \"csi_process_virtual_memory_bytes\" and r.app==\"csi-baremetal-controller\" )   \n  |> range($range)\n  |> keep(columns:[\"_time\", \"_value\", \"pod_name\"])\n  |> rename(columns: {pod_name: \"_measurement\"})",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Virtual Memory - Controller",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "",
              "fill": 1,
              "gridPos": {
                "h": 7,
                "w": 12,
                "x": 12,
                "y": 18
              },
              "id": 9,
              "legend": {
                "avg": false,
                "current": false,
                "max": true,
                "min": true,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")\n  |> filter(fn: (r) => r._measurement == \"csi_process_virtual_memory_bytes\" and r.app==\"csi-baremetal-node\" )   \n  |> range($range)\n  |> keep(columns:[\"_time\", \"_value\", \"pod_name\"])\n  |> rename(columns: {pod_name: \"_measurement\"})",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Virtual Memory - Nodes",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "",
              "fill": 1,
              "gridPos": {
                "h": 7,
                "w": 12,
                "x": 0,
                "y": 25
              },
              "id": 27,
              "legend": {
                "avg": false,
                "current": false,
                "max": true,
                "min": true,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")\n  |> filter(fn: (r) => r._measurement == \"csi_process_resident_memory_bytes\" and r.app==\"csi-baremetal-controller\" )   \n  |> range($range)\n  |> keep(columns:[\"_time\", \"_value\", \"pod_name\"])\n  |> rename(columns: {pod_name: \"_measurement\"})",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Resident Memory - Controller",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "",
              "fill": 1,
              "gridPos": {
                "h": 7,
                "w": 12,
                "x": 12,
                "y": 25
              },
              "id": 28,
              "legend": {
                "avg": false,
                "current": false,
                "max": true,
                "min": true,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")\n  |> filter(fn: (r) => r._measurement == \"csi_process_resident_memory_bytes\" and r.app==\"csi-baremetal-node\" )   \n  |> range($range)\n  |> keep(columns:[\"_time\", \"_value\", \"pod_name\"])\n  |> rename(columns: {pod_name: \"_measurement\"})",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Resident Memory - Nodes",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            }
          ],
          "title": "Process metrics",
          "type": "row"
        },
        {
          "collapsed": true,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 4
          },
          "id": 15,
          "panels": [
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "",
              "fill": 1,
              "gridPos": {
                "h": 7,
                "w": 12,
                "x": 0,
                "y": 5
              },
              "id": 17,
              "legend": {
                "avg": false,
                "current": false,
                "hideZero": true,
                "max": true,
                "min": true,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")  \n|> filter(fn: (r) => r._measurement == \"csi_grpc_server_handling_seconds\" and r.app==\"csi-baremetal-controller\" and r._field!=\"sum\" and r._field!=\"count\")\n|> range($range)\n|> keep(columns:[\"_time\", \"_value\",\"_field\", \"pod_name\",\"_measurement\",\"grpc_method\"])\n|> difference(nonNegative: true)\n|> group(columns: [\"_time\", \"pod_name\",\"grpc_method\"])\n|> map(fn:(r) => ({le: float(v:r._field), _value: float(v:r._value)})) \n|> histogramQuantile(quantile: 0.9)\n|> group(columns: [\"pod_name\",\"grpc_method\"])\n|> rename(columns: {pod_name: \"_measurement\"})",
                  "refId": "A",
                  "resultFormat": "time_series"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "90%-tile latency of all requests - Controller",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 3,
                  "format": "s",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "",
              "fill": 1,
              "gridPos": {
                "h": 7,
                "w": 12,
                "x": 12,
                "y": 5
              },
              "id": 18,
              "legend": {
                "avg": false,
                "current": false,
                "hideEmpty": false,
                "hideZero": true,
                "max": true,
                "min": true,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")  \n|> filter(fn: (r) => r._measurement == \"csi_grpc_server_handling_seconds\" and r.app==\"csi-baremetal-node\" and r._field!=\"sum\" and r._field!=\"count\")\n|> range($range)\n|> keep(columns:[\"_time\", \"_value\",\"_field\", \"pod_name\",\"_measurement\",\"grpc_method\"])\n|> difference(nonNegative: true)\n|> group(columns: [\"_time\", \"pod_name\",\"grpc_method\"])\n|> map(fn:(r) => ({le: float(v:r._field), _value: float(v:r._value)})) \n|> histogramQuantile(quantile: 0.9)\n|> group(columns: [\"pod_name\",\"grpc_method\"])\n|> rename(columns: {pod_name: \"_measurement\"})",
                  "refId": "A",
                  "resultFormat": "time_series"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "90%-tile latency of all requests - Node",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 3,
                  "format": "s",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "",
              "fill": 1,
              "gridPos": {
                "h": 7,
                "w": 12,
                "x": 0,
                "y": 12
              },
              "id": 22,
              "legend": {
                "avg": false,
                "current": false,
                "hideZero": true,
                "max": true,
                "min": true,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")  \n|> filter(fn: (r) => r._measurement == \"csi_grpc_server_handling_seconds\" and r.app==\"csi-baremetal-controller\" and (r._field==\"sum\" or r._field==\"count\"))\n|> range($range)\n|> keep(columns:[\"_time\", \"_value\",\"_field\", \"pod_name\",\"grpc_method\"])\n|> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n|> map(fn:(r) => ({_time:r._time, _value : r.sum/r.count})) \n|> difference(nonNegative: true)",
                  "refId": "A",
                  "resultFormat": "time_series"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Average duration of requests - Controller",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 3,
                  "format": "s",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "",
              "fill": 1,
              "gridPos": {
                "h": 7,
                "w": 12,
                "x": 12,
                "y": 12
              },
              "id": 23,
              "legend": {
                "avg": false,
                "current": false,
                "hideZero": true,
                "max": true,
                "min": true,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")  \n|> filter(fn: (r) => r._measurement == \"csi_grpc_server_handling_seconds\" and r.app==\"csi-baremetal-node\" and (r._field==\"sum\" or r._field==\"count\"))\n|> range($range)\n|> keep(columns:[\"_time\", \"_value\",\"_field\", \"pod_name\",\"grpc_method\"])\n|> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n|> map(fn:(r) => ({_time:r._time, _value : r.sum/r.count})) \n|> difference(nonNegative: true)",
                  "refId": "A",
                  "resultFormat": "time_series"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Average duration of requests - Node",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 3,
                  "format": "s",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "fill": 1,
              "gridPos": {
                "h": 8,
                "w": 12,
                "x": 0,
                "y": 19
              },
              "id": 26,
              "legend": {
                "avg": false,
                "current": false,
                "hideZero": true,
                "max": false,
                "min": false,
                "show": true,
                "total": false,
                "values": false
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")  \n|> filter(fn: (r) => r._measurement == \"csi_grpc_server_started_total\" and r.app==\"csi-baremetal-controller\")\n|> range($range)\n|> keep(columns:[\"_time\", \"_value\",\"_field\", \"pod_name\",\"_measurement\",])\n|> group(columns: [\"_time\", \"pod_name\"])\n|> sum()\n|> group(columns: [\"pod_name\"])\n|> difference(nonNegative: true)\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Number of requests per pod - Controller",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "fill": 1,
              "gridPos": {
                "h": 8,
                "w": 12,
                "x": 12,
                "y": 19
              },
              "id": 21,
              "legend": {
                "avg": false,
                "current": false,
                "hideZero": true,
                "max": false,
                "min": false,
                "show": true,
                "total": false,
                "values": false
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")  \n|> filter(fn: (r) => r._measurement == \"csi_grpc_server_started_total\" and r.app==\"csi-baremetal-node\")\n|> range($range)\n|> keep(columns:[\"_time\", \"_value\",\"_field\", \"pod_name\",\"_measurement\",])\n|> group(columns: [\"_time\", \"pod_name\"])\n|> sum()\n|> group(columns: [\"pod_name\"])\n|> difference(nonNegative: true)\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Number of requests per pod - Node",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "fill": 1,
              "gridPos": {
                "h": 8,
                "w": 12,
                "x": 0,
                "y": 27
              },
              "id": 20,
              "legend": {
                "avg": false,
                "current": false,
                "hideZero": true,
                "max": false,
                "min": false,
                "show": true,
                "total": false,
                "values": false
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")  \n|> filter(fn: (r) => r._measurement == \"csi_grpc_server_started_total\" and r.app==\"csi-baremetal-controller\")\n|> range($range)\n|> keep(columns:[\"_time\", \"_value\", \"pod_name\",\"grpc_method\"])\n|> group(columns: [\"pod_name\",\"grpc_method\"])\n|> difference(nonNegative: true)\n\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Number of requests per pod by method - Controller",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "fill": 1,
              "gridPos": {
                "h": 8,
                "w": 12,
                "x": 12,
                "y": 27
              },
              "id": 24,
              "legend": {
                "avg": false,
                "current": false,
                "hideZero": true,
                "max": false,
                "min": false,
                "show": true,
                "total": false,
                "values": false
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")  \n|> filter(fn: (r) => r._measurement == \"csi_grpc_server_started_total\" and r.app==\"csi-baremetal-node\")\n|> range($range)\n|> keep(columns:[\"_time\", \"_value\", \"pod_name\",\"grpc_method\"])\n|> group(columns: [\"pod_name\",\"grpc_method\"])\n|> difference(nonNegative: true)\n\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Number of requests per pod by method - Node",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            }
          ],
          "repeat": null,
          "title": "GRPC metrics - Overview",
          "type": "row"
        },
        {
          "collapsed": true,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 5
          },
          "id": 30,
          "panels": [
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "",
              "fill": 1,
              "gridPos": {
                "h": 7,
                "w": 12,
                "x": 0,
                "y": 6
              },
              "id": 31,
              "legend": {
                "avg": false,
                "current": false,
                "hideZero": true,
                "max": true,
                "min": true,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")  \n|> filter(fn: (r) => r._measurement == \"csi_grpc_server_handling_seconds\" and r.app==\"csi-baremetal-controller\" and r._field!=\"sum\" and r._field!=\"count\" and r.grpc_method==\"${controller_method}\")\n|> range($range)\n|> keep(columns:[\"_time\", \"_value\",\"_field\", \"pod_name\",\"_measurement\",\"grpc_method\"])\n|> difference(nonNegative: true)\n|> group(columns: [\"_time\", \"pod_name\",\"grpc_method\"])\n|> map(fn:(r) => ({le: float(v:r._field), _value: float(v:r._value)})) \n|> histogramQuantile(quantile: 0.9)\n|> group(columns: [\"pod_name\",\"grpc_method\"])\n|> rename(columns: {pod_name: \"_measurement\"})",
                  "refId": "A",
                  "resultFormat": "time_series"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "90%-tile latency of method - Controller",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 3,
                  "format": "s",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "",
              "fill": 1,
              "gridPos": {
                "h": 7,
                "w": 12,
                "x": 12,
                "y": 6
              },
              "id": 32,
              "legend": {
                "avg": false,
                "current": false,
                "hideZero": true,
                "max": true,
                "min": true,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")  \n|> filter(fn: (r) => r._measurement == \"csi_grpc_server_handling_seconds\" and r.app==\"csi-baremetal-controller\" and (r._field==\"sum\" or r._field==\"count\") and r.grpc_method==\"${controller_method}\")\n|> range($range)\n|> keep(columns:[\"_time\", \"_value\",\"_field\", \"pod_name\",\"grpc_method\"])\n|> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n|> map(fn:(r) => ({_time:r._time, _value : r.sum/r.count})) \n|> difference(nonNegative: true)",
                  "refId": "A",
                  "resultFormat": "time_series"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Average duration of requests of method - Controller",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 3,
                  "format": "s",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "fill": 1,
              "gridPos": {
                "h": 8,
                "w": 12,
                "x": 0,
                "y": 13
              },
              "id": 35,
              "legend": {
                "avg": false,
                "current": false,
                "hideZero": true,
                "max": false,
                "min": false,
                "show": true,
                "total": false,
                "values": false
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")  \n|> filter(fn: (r) => r._measurement == \"csi_grpc_server_started_total\" and r.app==\"csi-baremetal-controller\" and r.grpc_method==\"${controller_method}\")\n|> range($range)\n|> keep(columns:[\"_time\", \"_value\",\"_field\", \"pod_name\",\"_measurement\",])\n|> group(columns: [\"_time\", \"pod_name\"])\n|> sum()\n|> group(columns: [\"pod_name\"])\n|> difference(nonNegative: true)\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Number of requests of method - Controller",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "fill": 1,
              "gridPos": {
                "h": 8,
                "w": 12,
                "x": 12,
                "y": 13
              },
              "id": 37,
              "legend": {
                "avg": false,
                "current": false,
                "hideZero": true,
                "max": false,
                "min": false,
                "show": true,
                "total": false,
                "values": false
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")  \n|> filter(fn: (r) => r._measurement == \"csi_grpc_server_started_total\" and r.app==\"csi-baremetal-controller\" and r.grpc_method==\"${controller_method}\")\n|> range($range)\n|> keep(columns:[\"_time\", \"_value\", \"pod_name\",\"grpc_method\"])\n|> group(columns: [\"pod_name\",\"grpc_method\"])\n|> difference(nonNegative: true)\n\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Number of requests of method- Controller",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "",
              "fill": 1,
              "gridPos": {
                "h": 7,
                "w": 12,
                "x": 0,
                "y": 21
              },
              "id": 33,
              "legend": {
                "avg": false,
                "current": false,
                "hideEmpty": false,
                "hideZero": true,
                "max": true,
                "min": true,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")  \n|> filter(fn: (r) => r._measurement == \"csi_grpc_server_handling_seconds\" and r.app==\"csi-baremetal-node\" and r._field!=\"sum\" and r._field!=\"count\" and r.grpc_method==\"${node_method}\")\n|> range($range)\n|> keep(columns:[\"_time\", \"_value\",\"_field\", \"pod_name\",\"_measurement\",\"grpc_method\"])\n|> difference(nonNegative: true)\n|> group(columns: [\"_time\", \"pod_name\",\"grpc_method\"])\n|> map(fn:(r) => ({le: float(v:r._field), _value: float(v:r._value)})) \n|> histogramQuantile(quantile: 0.9)\n|> group(columns: [\"pod_name\",\"grpc_method\"])\n|> rename(columns: {pod_name: \"_measurement\"})",
                  "refId": "A",
                  "resultFormat": "time_series"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "90%-tile latency of method by pods - Node",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 3,
                  "format": "s",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "",
              "fill": 1,
              "gridPos": {
                "h": 7,
                "w": 12,
                "x": 12,
                "y": 21
              },
              "id": 34,
              "legend": {
                "avg": false,
                "current": false,
                "hideZero": true,
                "max": true,
                "min": true,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")  \n|> filter(fn: (r) => r._measurement == \"csi_grpc_server_handling_seconds\" and r.app==\"csi-baremetal-node\" and (r._field==\"sum\" or r._field==\"count\") and r.grpc_method==\"${node_method}\")\n|> range($range)\n|> keep(columns:[\"_time\", \"_value\",\"_field\", \"pod_name\",\"grpc_method\"])\n|> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n|> map(fn:(r) => ({_time:r._time, _value : r.sum/r.count})) \n|> difference(nonNegative: true)",
                  "refId": "A",
                  "resultFormat": "time_series"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Average duration of method by pods - Node",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 3,
                  "format": "s",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "",
              "fill": 1,
              "gridPos": {
                "h": 7,
                "w": 12,
                "x": 0,
                "y": 28
              },
              "id": 39,
              "legend": {
                "avg": false,
                "current": false,
                "hideEmpty": false,
                "hideZero": true,
                "max": true,
                "min": true,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")  \n|> filter(fn: (r) => r._measurement == \"csi_grpc_server_handling_seconds\" and r.app==\"csi-baremetal-node\" and r._field!=\"sum\" and r._field!=\"count\" and r.pod_name==\"${node_pod}\")\n|> range($range)\n|> keep(columns:[\"_time\", \"_value\",\"_field\", \"pod_name\",\"_measurement\",\"grpc_method\"])\n|> difference(nonNegative: true)\n|> group(columns: [\"_time\", \"pod_name\",\"grpc_method\"])\n|> map(fn:(r) => ({le: float(v:r._field), _value: float(v:r._value)})) \n|> histogramQuantile(quantile: 0.9)\n|> group(columns: [\"pod_name\",\"grpc_method\"])\n|> rename(columns: {pod_name: \"_measurement\"})",
                  "refId": "A",
                  "resultFormat": "time_series"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "90%-tile latency on pod by methods - Node",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 3,
                  "format": "s",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "",
              "fill": 1,
              "gridPos": {
                "h": 7,
                "w": 12,
                "x": 12,
                "y": 28
              },
              "id": 40,
              "legend": {
                "avg": false,
                "current": false,
                "hideZero": true,
                "max": true,
                "min": true,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")  \n|> filter(fn: (r) => r._measurement == \"csi_grpc_server_handling_seconds\" and r.app==\"csi-baremetal-node\" and (r._field==\"sum\" or r._field==\"count\") and r.grpc_method==\"${node_method}\" and r.pod_name==\"${node_pod}\")\n|> range($range)\n|> keep(columns:[\"_time\", \"_value\",\"_field\", \"pod_name\",\"grpc_method\"])\n|> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n|> map(fn:(r) => ({_time:r._time, _value : r.sum/r.count})) \n|> difference(nonNegative: true)",
                  "refId": "A",
                  "resultFormat": "time_series"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Average duration on pod by method - Node",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 3,
                  "format": "s",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "fill": 1,
              "gridPos": {
                "h": 8,
                "w": 12,
                "x": 0,
                "y": 35
              },
              "id": 36,
              "legend": {
                "avg": false,
                "current": false,
                "hideZero": true,
                "max": false,
                "min": false,
                "show": true,
                "total": false,
                "values": false
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")  \n|> filter(fn: (r) => r._measurement == \"csi_grpc_server_started_total\" and r.app==\"csi-baremetal-node\" and r.pod_name==\"${node_pod}\")\n|> range($range)\n|> keep(columns:[\"_time\", \"_value\",\"_field\", \"pod_name\",\"_measurement\",])\n|> group(columns: [\"_time\", \"pod_name\"])\n|> sum()\n|> group(columns: [\"pod_name\"])\n|> difference(nonNegative: true)\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Number of requests on pod - Node",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "fill": 1,
              "gridPos": {
                "h": 8,
                "w": 12,
                "x": 12,
                "y": 35
              },
              "id": 38,
              "legend": {
                "avg": false,
                "current": false,
                "hideZero": true,
                "max": false,
                "min": false,
                "show": true,
                "total": false,
                "values": false
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")  \n|> filter(fn: (r) => r._measurement == \"csi_grpc_server_started_total\" and r.app==\"csi-baremetal-node\" and r.pod_name==\"${node_pod}\" and r.grpc_method==\"${node_method}\" )\n|> range($range)\n|> keep(columns:[\"_time\", \"_value\", \"pod_name\",\"grpc_method\"])\n|> group(columns: [\"pod_name\",\"grpc_method\"])\n|> difference(nonNegative: true)\n\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Number of requests per pod by method - Node",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            }
          ],
          "title": "GRPC metrics - Detailed",
          "type": "row"
        },
        {
          "collapsed": true,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 6
          },
          "id": 62,
          "panels": [
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "",
              "fill": 1,
              "gridPos": {
                "h": 7,
                "w": 12,
                "x": 0,
                "y": 7
              },
              "id": 60,
              "legend": {
                "avg": false,
                "current": false,
                "hideZero": true,
                "max": true,
                "min": true,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")  \n|> filter(fn: (r) => r._measurement == \"csi_reconcile_duration_seconds\" and r.app==\"csi-baremetal-node\" and r._field!=\"sum\" and r._field!=\"count\")\n|> range($range)\n|> keep(columns:[\"_time\", \"_value\",\"_field\", \"pod_name\",\"_measurement\",\"type\"])\n|> difference(nonNegative: true)\n|> group(columns: [\"_time\", \"pod_name\",\"type\"])\n|> map(fn:(r) => ({le: float(v:r._field), _value: float(v:r._value)})) \n|> histogramQuantile(quantile: 0.9)\n|> group(columns: [\"pod_name\",\"type\"])\n|> rename(columns: {pod_name: \"_measurement\"})",
                  "refId": "A",
                  "resultFormat": "time_series"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "90%-tile latency of all reconcile methods ",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 3,
                  "format": "s",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "",
              "fill": 1,
              "gridPos": {
                "h": 7,
                "w": 12,
                "x": 12,
                "y": 7
              },
              "id": 66,
              "legend": {
                "avg": false,
                "current": false,
                "hideZero": true,
                "max": true,
                "min": true,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")  \n|> filter(fn: (r) => r._measurement == \"csi_reconcile_duration_seconds\" and r.app==\"csi-baremetal-node\" and r._field!=\"sum\" and r._field!=\"count\" and r.pod_name==\"${node_pod}\")\n|> range($range)\n|> keep(columns:[\"_time\", \"_value\",\"_field\", \"pod_name\",\"_measurement\",\"type\"])\n|> difference(nonNegative: true)\n|> group(columns: [\"_time\", \"pod_name\",\"type\"])\n|> map(fn:(r) => ({le: float(v:r._field), _value: float(v:r._value)})) \n|> histogramQuantile(quantile: 0.9)\n|> group(columns: [\"pod_name\",\"type\"])\n|> rename(columns: {pod_name: \"_measurement\"})",
                  "refId": "A",
                  "resultFormat": "time_series"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "90%-tile latency of all reconcile methods on pod",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 3,
                  "format": "s",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            }
          ],
          "repeat": null,
          "title": "Reconcile",
          "type": "row"
        },
        {
          "collapsed": true,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 7
          },
          "id": 44,
          "panels": [
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "",
              "fill": 1,
              "gridPos": {
                "h": 7,
                "w": 24,
                "x": 0,
                "y": 8
              },
              "id": 45,
              "legend": {
                "avg": false,
                "current": false,
                "hideZero": true,
                "max": true,
                "min": true,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "hide": true,
                  "query": "from(bucket: \"monitoring_op\")  \n|> filter(fn: (r) => r._measurement == \"csi_kubeclient_execution_duration_seconds\" and r.app==\"csi-baremetal-controller\" and r._field!=\"sum\" and r._field!=\"count\")\n|> range($range)\n|> keep(columns:[\"_time\", \"_value\",\"_field\", \"pod_name\",\"_measurement\",\"method\"])\n|> difference(nonNegative: true)\n|> group(columns: [\"_time\", \"pod_name\",\"method\"])\n|> map(fn:(r) => ({le: float(v:r._field), _value: float(v:r._value)})) \n|> histogramQuantile(quantile: 0.9)\n|> group(columns: [\"pod_name\",\"method\"])\n|> rename(columns: {pod_name: \"_measurement\"})",
                  "refId": "A",
                  "resultFormat": "time_series"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "90%-tile latency of all requests - Controller",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 3,
                  "format": "s",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "",
              "fill": 1,
              "gridPos": {
                "h": 7,
                "w": 24,
                "x": 0,
                "y": 15
              },
              "id": 46,
              "legend": {
                "avg": false,
                "current": false,
                "hideZero": true,
                "max": true,
                "min": true,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "hide": true,
                  "query": "from(bucket: \"monitoring_op\")  \n|> filter(fn: (r) => r._measurement == \"csi_kubeclient_execution_duration_seconds\" and r.app==\"csi-baremetal-node\" and r._field!=\"sum\" and r._field!=\"count\")\n|> range($range)\n|> keep(columns:[\"_time\", \"_value\",\"_field\", \"pod_name\",\"_measurement\",\"method\"])\n|> difference(nonNegative: true)\n|> group(columns: [\"_time\", \"pod_name\",\"method\"])\n|> map(fn:(r) => ({le: float(v:r._field), _value: float(v:r._value)})) \n|> histogramQuantile(quantile: 0.9)\n|> group(columns: [\"pod_name\",\"method\"])\n|> rename(columns: {pod_name: \"_measurement\"})",
                  "refId": "A",
                  "resultFormat": "time_series"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "90%-tile latency of all requests - Node",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 3,
                  "format": "s",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "",
              "fill": 1,
              "gridPos": {
                "h": 7,
                "w": 12,
                "x": 0,
                "y": 22
              },
              "id": 69,
              "legend": {
                "avg": false,
                "current": false,
                "hideZero": true,
                "max": true,
                "min": true,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "hide": true,
                  "query": "from(bucket: \"monitoring_op\")  \n|> filter(fn: (r) => r._measurement == \"csi_kubeclient_execution_duration_seconds\" and r.app==\"csi-baremetal-node\" and r._field!=\"sum\" and r._field!=\"count\" and r.pod_name==\"${node_pod}\")\n|> range($range)\n|> keep(columns:[\"_time\", \"_value\",\"_field\", \"pod_name\",\"_measurement\",\"method\"])\n|> difference(nonNegative: true)\n|> group(columns: [\"_time\", \"pod_name\",\"method\"])\n|> map(fn:(r) => ({le: float(v:r._field), _value: float(v:r._value)})) \n|> histogramQuantile(quantile: 0.9)\n|> group(columns: [\"pod_name\",\"method\"])\n|> rename(columns: {pod_name: \"_measurement\"})",
                  "refId": "A",
                  "resultFormat": "time_series"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "90%-tile latency of all requests on pod - Node",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 3,
                  "format": "s",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "",
              "fill": 1,
              "gridPos": {
                "h": 7,
                "w": 12,
                "x": 12,
                "y": 22
              },
              "id": 68,
              "legend": {
                "avg": false,
                "current": false,
                "hideZero": true,
                "max": true,
                "min": true,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "hide": true,
                  "query": "from(bucket: \"monitoring_op\")  \n|> filter(fn: (r) => r._measurement == \"csi_kubeclient_execution_duration_seconds\" and r.app==\"csi-baremetal-node\" and r._field!=\"sum\" and r._field!=\"count\" and r.method==\"${kubeclient_method}\")\n|> range($range)\n|> keep(columns:[\"_time\", \"_value\",\"_field\", \"pod_name\",\"_measurement\",\"method\"])\n|> difference(nonNegative: true)\n|> group(columns: [\"_time\", \"pod_name\",\"method\"])\n|> map(fn:(r) => ({le: float(v:r._field), _value: float(v:r._value)})) \n|> histogramQuantile(quantile: 0.9)\n|> group(columns: [\"pod_name\",\"method\"])\n|> rename(columns: {pod_name: \"_measurement\"})",
                  "refId": "A",
                  "resultFormat": "time_series"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "90%-tile latency of all requests on pods by method - Node",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 3,
                  "format": "s",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            }
          ],
          "title": "Kube client",
          "type": "row"
        },
        {
          "collapsed": true,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 8
          },
          "id": 51,
          "panels": [
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "",
              "fill": 1,
              "gridPos": {
                "h": 7,
                "w": 12,
                "x": 0,
                "y": 9
              },
              "id": 57,
              "legend": {
                "avg": false,
                "current": false,
                "hideZero": true,
                "max": true,
                "min": true,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")  \n|> filter(fn: (r) => r._measurement == \"csi_partition_operations_duration\" and r.app==\"csi-baremetal-node\" and r._field!=\"sum\" and r._field!=\"count\")\n|> range($range)\n|> keep(columns:[\"_time\", \"_value\",\"_field\", \"pod_name\",\"_measurement\",\"method\"])\n|> difference(nonNegative: true)\n|> group(columns: [\"_time\", \"pod_name\",\"method\"])\n|> map(fn:(r) => ({le: float(v:r._field), _value: float(v:r._value)})) \n|> histogramQuantile(quantile: 0.9)\n|> group(columns: [\"pod_name\",\"method\"])\n|> rename(columns: {pod_name: \"_measurement\"})",
                  "refId": "A",
                  "resultFormat": "time_series"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "90%-tile latency of all partition methods - Node",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 3,
                  "format": "s",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "",
              "fill": 1,
              "gridPos": {
                "h": 7,
                "w": 12,
                "x": 12,
                "y": 9
              },
              "id": 65,
              "legend": {
                "avg": false,
                "current": false,
                "hideZero": true,
                "max": true,
                "min": true,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")  \n|> filter(fn: (r) => r._measurement == \"csi_volume_operations_duration\" and r.app==\"csi-baremetal-controller\" and r._field!=\"sum\" and r._field!=\"count\")\n|> range($range)\n|> keep(columns:[\"_time\", \"_value\",\"_field\", \"pod_name\",\"_measurement\",\"method\"])\n|> difference(nonNegative: true)\n|> group(columns: [\"_time\", \"pod_name\",\"method\"])\n|> map(fn:(r) => ({le: float(v:r._field), _value: float(v:r._value)})) \n|> histogramQuantile(quantile: 0.9)\n|> group(columns: [\"pod_name\",\"method\"])\n|> rename(columns: {pod_name: \"_measurement\"})",
                  "refId": "A",
                  "resultFormat": "time_series"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "90%-tile latency of all volume methods - Controller",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 3,
                  "format": "s",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "",
              "fill": 1,
              "gridPos": {
                "h": 7,
                "w": 12,
                "x": 0,
                "y": 16
              },
              "id": 70,
              "legend": {
                "avg": false,
                "current": false,
                "hideZero": true,
                "max": true,
                "min": true,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")  \n|> filter(fn: (r) => r._measurement == \"csi_partition_operations_duration\" and r.app==\"csi-baremetal-node\" and r._field!=\"sum\" and r._field!=\"count\" and r.method==\"${partition_method}\")\n|> range($range)\n|> keep(columns:[\"_time\", \"_value\",\"_field\", \"pod_name\",\"_measurement\",\"method\"])\n|> difference(nonNegative: true)\n|> group(columns: [\"_time\", \"pod_name\",\"method\"])\n|> map(fn:(r) => ({le: float(v:r._field), _value: float(v:r._value)})) \n|> histogramQuantile(quantile: 0.9)\n|> group(columns: [\"pod_name\",\"method\"])\n|> rename(columns: {pod_name: \"_measurement\"})",
                  "refId": "A",
                  "resultFormat": "time_series"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "90%-tile latency of partition method on nodes by method - Node",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 3,
                  "format": "s",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "",
              "fill": 1,
              "gridPos": {
                "h": 7,
                "w": 12,
                "x": 12,
                "y": 16
              },
              "id": 71,
              "legend": {
                "avg": false,
                "current": false,
                "hideZero": true,
                "max": true,
                "min": true,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")  \n|> filter(fn: (r) => r._measurement == \"csi_volume_operations_duration\" and r.app==\"csi-baremetal-controller\" and r._field!=\"sum\" and r._field!=\"count\"  and r.method==\"${volume_method}\")\n|> range($range)\n|> keep(columns:[\"_time\", \"_value\",\"_field\", \"pod_name\",\"_measurement\",\"method\"])\n|> difference(nonNegative: true)\n|> group(columns: [\"_time\", \"pod_name\",\"method\"])\n|> map(fn:(r) => ({le: float(v:r._field), _value: float(v:r._value)})) \n|> histogramQuantile(quantile: 0.9)\n|> group(columns: [\"pod_name\",\"method\"])\n|> rename(columns: {pod_name: \"_measurement\"})",
                  "refId": "A",
                  "resultFormat": "time_series"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "90%-tile latency of  volume method on nodes by methods - Controller",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 3,
                  "format": "s",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            }
          ],
          "title": "Partition and Volume operations",
          "type": "row"
        },
        {
          "collapsed": true,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 9
          },
          "id": 48,
          "panels": [
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "",
              "fill": 1,
              "gridPos": {
                "h": 7,
                "w": 12,
                "x": 0,
                "y": 10
              },
              "id": 49,
              "legend": {
                "avg": false,
                "current": false,
                "hideZero": false,
                "max": true,
                "min": true,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")  \n|> filter(fn: (r) => r._measurement == \"csi_ac_reservation_duration\" and r._field!=\"sum\" and r._field!=\"count\")\n|> range($range)\n|> keep(columns:[\"_time\", \"_value\",\"_field\", \"pod_name\",\"_measurement\",\"method\"])\n|> difference(nonNegative: true)\n|> group(columns: [\"_time\", \"pod_name\",\"method\"])\n|> map(fn:(r) => ({le: float(v:r._field), _value: float(v:r._value)})) \n|> histogramQuantile(quantile: 0.9)\n|> group(columns: [\"pod_name\",\"method\"])\n|> rename(columns: {pod_name: \"_measurement\"})",
                  "refId": "A",
                  "resultFormat": "time_series"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "90%-tile latency of ac reservation",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 3,
                  "format": "s",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "",
              "fill": 1,
              "gridPos": {
                "h": 7,
                "w": 12,
                "x": 12,
                "y": 10
              },
              "id": 72,
              "legend": {
                "avg": false,
                "current": false,
                "hideZero": false,
                "max": true,
                "min": true,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")  \n|> filter(fn: (r) => r._measurement == \"csi_ac_reservation_duration\" and r._field!=\"sum\" and r._field!=\"count\")\n|> range($range)",
                  "refId": "A",
                  "resultFormat": "time_series"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "90%-tile latency of ac reservation",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 3,
                  "format": "s",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            }
          ],
          "title": "Extender",
          "type": "row"
        },
        {
          "collapsed": true,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 10
          },
          "id": 55,
          "panels": [
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "",
              "fill": 1,
              "gridPos": {
                "h": 7,
                "w": 12,
                "x": 0,
                "y": 11
              },
              "id": 58,
              "legend": {
                "avg": false,
                "current": false,
                "hideZero": true,
                "max": true,
                "min": true,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")  \n|> filter(fn: (r) => r._measurement == \"csi_discovery_duration_seconds\" and r.app==\"csi-baremetal-node\" and r._field!=\"sum\" and r._field!=\"count\")\n|> range($range)\n|> keep(columns:[\"_time\", \"_value\",\"_field\", \"pod_name\",\"_measurement\"])\n|> difference(nonNegative: true)\n|> group(columns: [\"_time\", \"pod_name\"])\n|> map(fn:(r) => ({le: float(v:r._field), _value: float(v:r._value)})) \n|> histogramQuantile(quantile: 0.9)\n|> group(columns: [\"pod_name\"])\n|> rename(columns: {pod_name: \"_measurement\"})",
                  "refId": "A",
                  "resultFormat": "time_series"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "90%-tile latency of discovery method",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 3,
                  "format": "s",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": 0,
              "description": "",
              "fill": 1,
              "gridPos": {
                "h": 7,
                "w": 12,
                "x": 12,
                "y": 11
              },
              "id": 59,
              "legend": {
                "alignAsTable": false,
                "avg": false,
                "current": false,
                "hideZero": false,
                "max": true,
                "min": true,
                "show": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")  \n|> filter(fn: (r) => r._measurement == \"csi_discovery_drive_count\")\n|> range($range)\n|> keep(columns:[\"_time\", \"_value\", \"pod_name\"])",
                  "refId": "A",
                  "resultFormat": "time_series"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Drive count",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "decimals": null,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            }
          ],
          "title": "Drive manager",
          "type": "row"
        }
      ],
      "refresh": false,
      "schemaVersion": 18,
      "style": "dark",
      "tags": [],
      "templating": {
        "list": [
          {
            "allValue": null,
            "current": {},
            "datasource": "${DS_FLUX}",
            "definition": "from(bucket: \"monitoring_op\") |> filter(fn: (r) => r._measurement == \"csi_grpc_server_started_total\" and r.app==\"csi-baremetal-controller\")     |> range($range)     |> group(columns:[\"pod_name\"])     |> distinct(column:\"pod_name\")",
            "hide": 0,
            "includeAll": false,
            "label": null,
            "multi": false,
            "name": "controller_pod",
            "options": [],
            "query": "from(bucket: \"monitoring_op\") |> filter(fn: (r) => r._measurement == \"csi_grpc_server_started_total\" and r.app==\"csi-baremetal-controller\")     |> range($range)     |> group(columns:[\"pod_name\"])     |> distinct(column:\"pod_name\")",
            "refresh": 2,
            "regex": "",
            "skipUrlSync": false,
            "sort": 0,
            "tagValuesQuery": "",
            "tags": [],
            "tagsQuery": "",
            "type": "query",
            "useTags": false
          },
          {
            "allValue": null,
            "current": {},
            "datasource": "${DS_FLUX}",
            "definition": "from(bucket: \"monitoring_op\") |> filter(fn: (r) => r._measurement == \"csi_grpc_server_started_total\" and  r.app==\"csi-baremetal-controller\" )     |> range($range)     |> group(columns:[\"grpc_method\"])     |> distinct(column:\"grpc_method\")",
            "hide": 0,
            "includeAll": false,
            "label": null,
            "multi": false,
            "name": "controller_method",
            "options": [],
            "query": "from(bucket: \"monitoring_op\") |> filter(fn: (r) => r._measurement == \"csi_grpc_server_started_total\" and  r.app==\"csi-baremetal-controller\" )     |> range($range)     |> group(columns:[\"grpc_method\"])     |> distinct(column:\"grpc_method\")",
            "refresh": 2,
            "regex": "",
            "skipUrlSync": false,
            "sort": 0,
            "tagValuesQuery": "",
            "tags": [],
            "tagsQuery": "",
            "type": "query",
            "useTags": false
          },
          {
            "allValue": null,
            "current": {},
            "datasource": "${DS_FLUX}",
            "definition": "from(bucket: \"monitoring_op\") |> filter(fn: (r) => r._measurement == \"csi_grpc_server_started_total\" and r.app==\"csi-baremetal-node\")     |> range($range)     |> group(columns:[\"pod_name\"])     |> distinct(column:\"pod_name\")",
            "hide": 0,
            "includeAll": false,
            "label": null,
            "multi": false,
            "name": "node_pod",
            "options": [],
            "query": "from(bucket: \"monitoring_op\") |> filter(fn: (r) => r._measurement == \"csi_grpc_server_started_total\" and r.app==\"csi-baremetal-node\")     |> range($range)     |> group(columns:[\"pod_name\"])     |> distinct(column:\"pod_name\")",
            "refresh": 2,
            "regex": "",
            "skipUrlSync": false,
            "sort": 0,
            "tagValuesQuery": "",
            "tags": [],
            "tagsQuery": "",
            "type": "query",
            "useTags": false
          },
          {
            "allValue": null,
            "current": {},
            "datasource": "${DS_FLUX}",
            "definition": "from(bucket: \"monitoring_op\") |> filter(fn: (r) => r._measurement == \"csi_grpc_server_started_total\" and  r.app==\"csi-baremetal-node\")     |> range($range)     |> group(columns:[\"grpc_method\"])     |> distinct(column:\"grpc_method\")",
            "hide": 0,
            "includeAll": false,
            "label": null,
            "multi": false,
            "name": "node_method",
            "options": [],
            "query": "from(bucket: \"monitoring_op\") |> filter(fn: (r) => r._measurement == \"csi_grpc_server_started_total\" and  r.app==\"csi-baremetal-node\")     |> range($range)     |> group(columns:[\"grpc_method\"])     |> distinct(column:\"grpc_method\")",
            "refresh": 2,
            "regex": "",
            "skipUrlSync": false,
            "sort": 0,
            "tagValuesQuery": "",
            "tags": [],
            "tagsQuery": "",
            "type": "query",
            "useTags": false
          },
          {
            "allValue": null,
            "current": {},
            "datasource": "${DS_FLUX}",
            "definition": "from(bucket: \"monitoring_op\") |> filter(fn: (r) => r._measurement == \"csi_kubeclient_execution_duration_seconds\" and  r.app==\"csi-baremetal-node\")     |> range($range)     |> group(columns:[\"method\"])     |> distinct(column:\"method\")",
            "hide": 0,
            "includeAll": false,
            "label": null,
            "multi": false,
            "name": "kubeclient_method",
            "options": [],
            "query": "from(bucket: \"monitoring_op\") |> filter(fn: (r) => r._measurement == \"csi_kubeclient_execution_duration_seconds\" and  r.app==\"csi-baremetal-node\")     |> range($range)     |> group(columns:[\"method\"])     |> distinct(column:\"method\")",
            "refresh": 2,
            "regex": "",
            "skipUrlSync": false,
            "sort": 0,
            "tagValuesQuery": "",
            "tags": [],
            "tagsQuery": "",
            "type": "query",
            "useTags": false
          },
          {
            "allValue": null,
            "current": {},
            "datasource": "${DS_FLUX}",
            "definition": "from(bucket: \"monitoring_op\") |> filter(fn: (r) => r._measurement == \"csi_partition_operations_duration\")     |> range($range)     |> group(columns:[\"method\"])     |> distinct(column:\"method\")",
            "hide": 0,
            "includeAll": false,
            "label": null,
            "multi": false,
            "name": "partition_method",
            "options": [],
            "query": "from(bucket: \"monitoring_op\") |> filter(fn: (r) => r._measurement == \"csi_partition_operations_duration\")     |> range($range)     |> group(columns:[\"method\"])     |> distinct(column:\"method\")",
            "refresh": 2,
            "regex": "",
            "skipUrlSync": false,
            "sort": 0,
            "tagValuesQuery": "",
            "tags": [],
            "tagsQuery": "",
            "type": "query",
            "useTags": false
          },
          {
            "allValue": null,
            "current": {},
            "datasource": "${DS_FLUX}",
            "definition": "from(bucket: \"monitoring_op\") |> filter(fn: (r) => r._measurement == \"csi_volume_operations_duration\")     |> range($range)     |> group(columns:[\"method\"])     |> distinct(column:\"method\")",
            "hide": 0,
            "includeAll": false,
            "label": null,
            "multi": false,
            "name": "volume_method",
            "options": [],
            "query": "from(bucket: \"monitoring_op\") |> filter(fn: (r) => r._measurement == \"csi_volume_operations_duration\")     |> range($range)     |> group(columns:[\"method\"])     |> distinct(column:\"method\")",
            "refresh": 2,
            "regex": "",
            "skipUrlSync": false,
            "sort": 0,
            "tagValuesQuery": "",
            "tags": [],
            "tagsQuery": "",
            "type": "query",
            "useTags": false
          }
        ]
      },
      "time": {
        "from": "now-24h",
        "to": "now"
      },
      "timepicker": {
        "refresh_intervals": [
          "15m",
          "30m",
          "1h",
          "2h",
          "1d"
        ],
        "time_options": [
          "15m",
          "1h",
          "6h",
          "12h",
          "24h",
          "2d",
          "7d",
          "30d"
        ]
      },
      "timezone": "",
      "title": "CSI Baremetal",
      "uid": "W1AYHhBGz",
      "version": 9
    }
  internal_monitoring_health.json: |-
    {
      "__inputs": [
        {
          "name": "DS_FLUX",
          "label": "Flux",
          "description": "",
          "type": "datasource",
          "pluginId": "grafana-influxdb-flux-datasource",
          "pluginName": "Flux (InfluxDB) [BETA]"
        }
      ],
      "__requires": [
        {
          "type": "grafana",
          "id": "grafana",
          "name": "Grafana",
          "version": "6.2.5ecs"
        },
        {
          "type": "datasource",
          "id": "grafana-influxdb-flux-datasource",
          "name": "Flux (InfluxDB) [BETA]",
          "version": "5.2.12"
        },
        {
          "type": "panel",
          "id": "graph",
          "name": "Graph",
          "version": ""
        }
      ],
      "annotations": {
        "list": [
          {
            "builtIn": 1,
            "datasource": "-- Grafana --",
            "enable": true,
            "hide": true,
            "iconColor": "rgba(0, 211, 255, 1)",
            "name": "Annotations & Alerts",
            "type": "dashboard"
          }
        ]
      },
      "description": "(\"server single\")",
      "editable": true,
      "gnetId": 1375,
      "graphTooltip": 0,
      "id": null,
      "links": [],
      "panels": [
        {
          "collapsed": true,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 0
          },
          "id": 23,
          "panels": [
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 1,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 0,
                "y": 1
              },
              "id": 31,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"procstat\" and r.host =~ /${host:pipe}/ and r._field == \"memory_rss\" and r.process_name == \"telegraf\")\n  |> range($range)\n  |> keep(columns: [\"_time\", \"_value\", \"host\"])",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "RSS Memory, OS View",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": null,
                  "format": "bytes",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 0,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 8,
                "y": 1
              },
              "id": 32,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"procstat\" and r.host =~ /${host:pipe}/ and r._field == \"cpu_usage\" and r.process_name == \"telegraf\")\n  |> range($range)\n  |> keep(columns: [\"_time\", \"_value\", \"host\"])",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "CPU Usage",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 1,
                  "format": "percent",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 0,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 16,
                "y": 1
              },
              "id": 33,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"procstat\" and r.host =~ /${host:pipe}/ and r._field == \"num_fds\" and r.process_name == \"telegraf\")\n  |> range($range)\n  |> keep(columns: [\"_time\", \"_value\", \"host\"])",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Number of File Handles",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 1,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 0,
                "y": 11
              },
              "id": 10,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": true,
              "renderer": "flot",
              "repeat": null,
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"tsdb_telegraf_internal_gather\" and r.input == \"influxdb_listener\" and r._field == \"metrics_gathered\")\n  |> range($range)\n  |> derivative(nonNegative: true, unit:5m)\n  |> keep(columns: [\"_time\", \"tag\", \"_value\", \"host\", \"input\"])",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Metrics Received in 5 minutes",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 1,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 8,
                "y": 11
              },
              "id": 16,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": true,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"tsdb_telegraf_internal_write\" and r.output == \"influxdb\" and r._field == \"metrics_written\" and r.output == \"influxdb\")\n  |> range($range)\n  |> derivative(nonNegative: true, unit:5m)\n  |> keep(columns: [\"_time\", \"tag\", \"_value\", \"host\"])",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Metrics Sent to InfluxDB in 5 mintues",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 1,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 16,
                "y": 11
              },
              "id": 66,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": true,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"tsdb_telegraf_internal_write\" and r.output == \"influxdb\" and r._field == \"metrics_dropped\" and r.output == \"influxdb\")\n  |> range($range)\n  |> derivative(nonNegative: true, unit:5m)\n  |> keep(columns: [\"_time\", \"tag\", \"_value\", \"host\"])",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Metrics Dropped in 5 mintues",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 1,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 0,
                "y": 21
              },
              "id": 18,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"tsdb_telegraf_internal_gather\" and r.input == \"influxdb\" and r._field == \"gather_time_ns\")\n  |> range($range)\n  |> derivative(nonNegative: true, unit:5m)\n  |> keep(columns: [\"_time\", \"tag\", \"_value\", \"host\", \"input\"])",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Maximum Time to Gather Metrics",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": null,
                  "format": "ns",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 1,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 8,
                "y": 21
              },
              "id": 19,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"tsdb_telegraf_internal_write\" and r.output == \"influxdb\" and r._field == \"write_time_ns\")\n  |> range($range)\n  |> derivative(nonNegative: true, unit:5m)\n  |> keep(columns: [\"_time\", \"tag\", \"_value\", \"host\", \"output\"])",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Time to Write Metrics to InfluxDB",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": null,
                  "format": "ns",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 1,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 16,
                "y": 21
              },
              "id": 17,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": true,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"tsdb_telegraf_internal_write\" and r._field == \"buffer_size\" and r.output == \"influxdb\")\n  |> range($range)\n  |> keep(columns: [\"_time\", \"tag\", \"_value\", \"host\"])",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Buffer Size",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            }
          ],
          "title": "Telegraf Instances",
          "type": "row"
        },
        {
          "collapsed": true,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 1
          },
          "id": 21,
          "panels": [
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 1,
              "gridPos": {
                "h": 9,
                "w": 8,
                "x": 0,
                "y": 12
              },
              "id": 34,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"procstat\" and r._field == \"memory_rss\" and r.process_name == \"influxd\")\n  |> range($range)\n  |> keep(columns: [\"_time\", \"_value\", \"host\"])",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "RSS Memory, OS View",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": null,
                  "format": "bytes",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 0,
              "gridPos": {
                "h": 9,
                "w": 8,
                "x": 8,
                "y": 12
              },
              "id": 35,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"procstat\" and r._field == \"cpu_usage\" and r.process_name == \"influxd\")\n  |> range($range)\n  |> keep(columns: [\"_time\", \"_value\", \"host\"])",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "CPU Usage",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 1,
                  "format": "percent",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 0,
              "gridPos": {
                "h": 9,
                "w": 8,
                "x": 16,
                "y": 12
              },
              "id": 36,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"procstat\" and r._field == \"num_fds\" and r.process_name == \"influxd\")\n  |> range($range)\n  |> keep(columns: [\"_time\", \"_value\", \"host\"])",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Number of File Handles",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 1,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 0,
                "y": 21
              },
              "id": 24,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": true,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"tsdb_influxdb_database\" and r._field == \"numMeasurements\")\n  |> range($range)\n  |> keep(columns: [\"_time\", \"_value\", \"host\", \"database\"])\n",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Number of Measurements",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": null,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 1,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 8,
                "y": 21
              },
              "id": 25,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": true,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"tsdb_influxdb_database\" and r._field == \"numSeries\")\n  |> range($range)\n  |> keep(columns: [\"_time\", \"_value\", \"host\", \"database\"])",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Number of Series",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": null,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "description": "Size of /opt/emc/caspian/fabric/agent/services/object/data/influxdb/",
              "editable": true,
              "error": false,
              "fill": 1,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 16,
                "y": 21
              },
              "id": 26,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": false,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": true,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"disk\" and (r._field == \"used\" or r._field == \"free\") and r.host =~ /influxdb/ and r.path == \"/pv\")\n  |> range($range)\n  |> keep(columns: [\"_start\", \"_stop\", \"_time\", \"_value\", \"host\", \"_field\"])",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Storage Disk Space",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": null,
                  "format": "bytes",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 1,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 0,
                "y": 31
              },
              "id": 27,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": true,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_main\")\r\n  |> filter(fn: (r) => r._measurement == \"tsdb_influxdb_httpd\" and r._field == \"pointsWrittenOK\")\n  |> range($range)\n  |> derivative(nonNegative: true, unit:1s)\n  |> keep(columns: [\"_time\", \"_value\", \"host\"])  \n  \n",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Points Written per second",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": null,
                  "format": "wps",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 1,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 8,
                "y": 31
              },
              "id": 40,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"procstat\" and r._field == \"read_bytes\" and r.process_name == \"influxd\")\n  |> range($range)\n  |> derivative(nonNegative: true, unit:1s)\n  |> keep(columns: [\"_time\", \"_value\", \"host\", \"_field\"])\n  \n",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                },
                {
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"procstat\" and r._field == \"write_bytes\" and r.process_name == \"influxd\")\n  |> range($range)\n  |> derivative(nonNegative: true, unit:1s)\n  |> keep(columns: [\"_time\", \"_value\", \"host\", \"_field\"])\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Disk IO rate (bytes per second)",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "Bps",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 1,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 16,
                "y": 31
              },
              "id": 28,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": true,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": true,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"tsdb_influxdb_queryExecutor\" and r._field == \"queriesExecuted\")\n  |> range($range)\n  |> derivative(nonNegative: true, unit:5m)\n  |> keep(columns: [\"_time\", \"_value\", \"host\"])\n  \n  \n",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "SQL Queries Executed in 5 minutes",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 1,
              "gridPos": {
                "h": 9,
                "w": 8,
                "x": 0,
                "y": 41
              },
              "id": 50,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": true,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_main\")\r\n  |> filter(fn: (r) => r._measurement == \"tsdb_influxdb_httpd\" and r._field == \"writeReqBytes\")\n  |> range($range)\n  |> keep(columns: [\"_time\", \"_value\", \"host\"])\n\n\n  \n  \n",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Data Ingest Rate over HTTP, bytes per second",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "Bps",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            }
          ],
          "title": "InfluxDB Instances",
          "type": "row"
        },
        {
          "collapsed": true,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 2
          },
          "id": 15,
          "panels": [
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 1,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 0,
                "y": 3
              },
              "id": 37,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"procstat\" and r.host =~ /${host:pipe}/ and r._field == \"memory_rss\" and r.process_name == \"fluxd\")\n  |> range($range)\n  |> keep(columns: [\"_time\", \"_value\", \"host\"])",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "RSS Memory, OS View",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": null,
                  "format": "bytes",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 0,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 8,
                "y": 3
              },
              "id": 38,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"procstat\" and r.host =~ /${host:pipe}/ and r._field == \"cpu_usage\" and r.process_name == \"fluxd\")\n  |> range($range)\n  |> keep(columns: [\"_time\", \"_value\", \"host\"])",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "CPU Usage",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 1,
                  "format": "percent",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 0,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 16,
                "y": 3
              },
              "id": 39,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"procstat\" and r.host =~ /${host:pipe}/ and r._field == \"num_fds\" and r.process_name == \"fluxd\")\n  |> range($range)\n  |> keep(columns: [\"_time\", \"_value\", \"host\"])",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Number of File Handles",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 10,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 0,
                "y": 13
              },
              "id": 29,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 0,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": true,
              "steppedLine": true,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"tsdb_fluxd_http_api_requests_total\" and r.path =~ /query/)\n  |> range($range)\n  |> keep(columns: [\"_time\", \"_value\", \"address\", \"status\", \"path\"])\n  |> derivative(nonNegative: true, unit:5m)\n  |> drop(columns: [\"path\"])\n  |> window(every:5m)\n  |> sum()\n  |> rename(columns: {_start: \"_time\"})\n  |> group(columns:[\"address\", \"status\"])\n  \n  \n",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Number of Requests in 5 minutes",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": true,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 0,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 8,
                "y": 13
              },
              "id": 30,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": true,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "max",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": false,
              "linewidth": 2,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 3,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": true,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "sum = from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"tsdb_fluxd_http_api_request_duration_seconds\" and r._field == \"sum\" and r.path == \"/query\")\n  |> range($range)\n  |> derivative(nonNegative: true, unit:5m)\n  |> keep(columns: [\"_time\", \"_start\", \"_stop\", \"address\", \"status\", \"_value\"])\n  \ncount = from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"tsdb_fluxd_http_api_request_duration_seconds\" and r._field == \"count\" and r.path == \"/query\")\n  |> range($range)\n  |> derivative(nonNegative: true, unit:5m)\n  |> keep(columns: [\"_time\", \"_start\", \"_stop\", \"address\", \"status\", \"_value\"])\n\njoin(tables: {sum:sum, count:count}, on: [\"_time\", \"_start\", \"_stop\", \"address\", \"status\"])\r\n  |> map(fn: (r) => ({_value: r._value_sum / r._value_count, _time: r._time}))\n  ",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Response Time by result",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "s",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 0,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 16,
                "y": 13
              },
              "id": 67,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": true,
                "rightSide": false,
                "show": true,
                "sort": "min",
                "sortDesc": false,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 0.5,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "        \nfrom(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"tsdb_fluxd_host_state\")\n  |> range($range)\n  |> group(columns: [\"_time\",\"address\"], mode:\"by\")\n  |> sum()\n  |> group(columns: [\"address\"], mode:\"by\")\n",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Number of connected InfluxDB",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 10,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 0,
                "y": 23
              },
              "id": 68,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": true,
                "max": true,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": false,
              "linewidth": 0,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 3,
              "points": true,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": true,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"tsdb_fluxd_host_state_change_total\" and r.status ==\"DISCONNECTED\")\n  |> range($range)\n  |> keep(columns: [\"_time\",\"_start\", \"_stop\",\"_value\", \"address\",\"hostport\"])\n  |> difference()\n  |> filter(fn: (r) => r[\"_value\"] > 0)\n  \n  \n  \n  \n",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Number of Disconnects",
              "tooltip": {
                "msResolution": false,
                "shared": false,
                "sort": 1,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "description": "- Number of single InfluxDB selections in 5 minutes\n- Number of failed selections caused by expired host selection data",
              "editable": true,
              "error": false,
              "fill": 0,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 8,
                "y": 23
              },
              "id": 86,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": true,
                "rightSide": false,
                "show": true,
                "sort": "min",
                "sortDesc": false,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 0.5,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\n\r|> filter(fn: (r) => r._measurement == \"tsdb_fluxd_host_selected\" and r._field == \"counter\")\r\n\r|> range($range)\n\r|> keep(columns: [\"_time\", \"_value\", \"address\", \"hostport\"])\r\n\r|> difference(nonNegative: true)\r\n\r|> fill(column: \"_value\", value: 0)\r\n\r|> drop(columns: [\"hostport\"])\r\n|> window(every:5m)\n|> sum()\r\n|> rename(columns: {_start: \"_time\"})\r\n|> group(columns: [\"address\"])\n\r\r|> set(key: \"_field\", value: \"Successful\")\n\n",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                },
                {
                  "query": "from(bucket: \"monitoring_op\")\n\r|> filter(fn: (r) => r._measurement == \"tsdb_fluxd_hl_expired_detected\" and r._field == \"counter\" and r.host =~ /${host:pipe}/)\r\n\r|> range($range)\n\r|> keep(columns: [\"_time\", \"_value\", \"address\"])\r\n\r|> difference(nonNegative: true)\r\n\r|> fill(column: \"_value\", value: 0)\r\n\r\r|> set(key: \"_field\", value: \"Failed due to expired data\")\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Number of InfluxDB Selections in 5 Minutes",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "description": "Number of queries executed on local Flux engine",
              "editable": true,
              "error": false,
              "fill": 10,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 16,
                "y": 23
              },
              "id": 87,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 0,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": true,
              "steppedLine": true,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"tsdb_fluxd_query_control_executing_duration_seconds\" and r._field =~ /count/)\n  |> range($range)\n  |> keep(columns: [\"_time\", \"_value\", \"address\"])\n  |> derivative(nonNegative: true, unit:5m)\n",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Number of Queries Executed in 5 minutes",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "description": "Number of queries forwarded and executed on remote Fluxd instances",
              "editable": true,
              "error": false,
              "fill": 10,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 0,
                "y": 33
              },
              "id": 88,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 0,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": true,
              "steppedLine": true,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"tsdb_fluxd_http_lb_request_forwarded\" and r._field =~ /count/)\n  |> range($range)\n  |> keep(columns: [\"_time\", \"_value\", \"address\"])\n  |> derivative(nonNegative: true, unit:5m)",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Number of Queries Forwarded in 5 minutes",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "Total number of internal fluxd errors (internal panics counter)",
              "fill": 1,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 8,
                "y": 33
              },
              "id": 90,
              "legend": {
                "avg": false,
                "current": false,
                "max": false,
                "min": false,
                "show": true,
                "total": false,
                "values": false
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\") \n   |> filter(fn: (r) => r._measurement == \"tsdb_fluxd_query_control_panics_total\" and r._field == \"counter\")\n   |> range($range)\n   |> keep(columns: [\"_time\", \"_value\", \"address\"])",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Flux Internal Errors",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            }
          ],
          "title": "Fluxd Instances",
          "type": "row"
        },
        {
          "collapsed": true,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 3
          },
          "id": 53,
          "panels": [
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 1,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 0,
                "y": 44
              },
              "id": 55,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"procstat\" and r.host =~ /${host:pipe}/ and r._field == \"memory_rss\" and (r.process_name == \"throttler\" or r.process_name == \"grafana-server\"))\n  |> range($range)\n  |> keep(columns: [\"_time\", \"_value\", \"host\", \"process_name\"])",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "RSS Memory, OS View",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": null,
                  "format": "bytes",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 0,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 8,
                "y": 44
              },
              "id": 57,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"procstat\" and r.host =~ /${host:pipe}/ and r._field == \"cpu_usage\" and (r.process_name == \"throttler\" or r.process_name == \"grafana-server\"))\n  |> range($range)\n  |> keep(columns: [\"_time\", \"_value\", \"host\", \"process_name\"])",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "CPU Usage",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 1,
                  "format": "percent",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 0,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 16,
                "y": 44
              },
              "id": 59,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"procstat\" and r.host =~ /${host:pipe}/ and r._field == \"num_fds\" and (r.process_name == \"throttler\" or r.process_name == \"grafana-server\"))\n  |> range($range)\n  |> keep(columns: [\"_time\", \"_value\", \"host\", \"process_name\"])",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Number of File Handles",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 0,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 0,
                "y": 54
              },
              "id": 76,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": true,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 1,
              "points": true,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"cquerier_fluxd_requests_total\")\n  |> range($range)\n  |> difference(nonNegative:true)\n  |> keep(columns: [\"_time\", \"_value\", \"type\", \"host\", \"status\"])\n",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Total CQ processing rate",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 0,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 8,
                "y": 54
              },
              "id": 78,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": true,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 1,
              "points": true,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"cquerier_telegraf_requests_total\")\n  |> range($range)\n  |> difference(nonNegative:true)\n  |> keep(columns: [\"_time\", \"_value\", \"type\", \"host\", \"status\"])\n",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "CQ Telegraf requests rate",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 0,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 16,
                "y": 54
              },
              "id": 80,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": true,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": true,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": true,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_vdc\")\r\n  |> filter(fn: (r) => r._measurement =~ /^cq_.*_metadata$/ and r._field == \"_done\")\n  |> range($range)\n  |> keep(columns: [\"_time\", \"_value\", \"_measurement\"])\n",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "CQ progress done status by name",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 0,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 0,
                "y": 64
              },
              "id": 82,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": true,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 1,
              "points": true,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"cquerier_succeeded_cq_total\" and r.type == \"current\")\n  |> range($range)\n  |> difference(nonNegative:true)\n  |> keep(columns: [\"_time\", \"_value\", \"cqname\"])\n",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Number of successfully processed \"current\" CQ by name",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 0,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 8,
                "y": 64
              },
              "id": 84,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": true,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 1,
              "points": true,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"cquerier_succeeded_cq_total\" and r.type == \"history\")\n  |> range($range)\n  |> difference(nonNegative:true)\n  |> keep(columns: [\"_time\", \"_value\", \"cqname\", \"type\"])\n",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Number of successfully processed \"history\" CQ by name",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 0,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 16,
                "y": 64
              },
              "id": 74,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": true,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": true,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"cquerier_exceeded_maxretry_total\")\n  |> range($range)\n  |> keep(columns: [\"_time\",\"_value\", \"host\", \"cqname\"]) \n  |> derivative(nonNegative: true, unit: 5m)\n  |> filter(fn: (r) => r[\"_value\"] > 0)\n  \n  \n  \n  \n",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Number of CQ exceeded max-retry count per 5 min, per query",
              "tooltip": {
                "msResolution": false,
                "shared": false,
                "sort": 1,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 0,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 0,
                "y": 74
              },
              "id": 69,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": true,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"cquerier_fluxd_requests_total\" and r.status!=\"ok\")\n  |> range($range)\n  |> difference()\n  |> keep(columns: [\"_time\", \"_value\", \"host\", \"status\", \"type\"])\n  |> filter(fn: (r) => r[\"_value\"] > 0)\n",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "CQ number of bad requests to Fluxd",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 0,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 8,
                "y": 74
              },
              "id": 70,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": true,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 1,
              "points": true,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"cquerier_exceeded_maxretry_common_total\")\n  |> range($range)\n  |> keep(columns: [\"_time\",\"_value\", \"host\"])\n  |> derivative(nonNegative: true, unit: 5m)\n  |> filter(fn: (r) => r[\"_value\"] > 0)\n  \n  \n  \n  \n",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Number of CQ exceeded max-retry count per 5 min",
              "tooltip": {
                "msResolution": false,
                "shared": false,
                "sort": 1,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 0,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 16,
                "y": 74
              },
              "id": 85,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": true,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"cquerier_non_completed_history_cq_total\")\n  |> range($range)\n  |> difference(nonNegative:true)\n  |> keep(columns: [\"_time\", \"_value\", \"host\"])\n",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "CQ number of  non completed history processing",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            }
          ],
          "title": "Throttler and Grafana instances",
          "type": "row"
        },
        {
          "collapsed": true,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 4
          },
          "id": 61,
          "panels": [
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "datasource": "${DS_FLUX}",
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 1,
              "gridPos": {
                "h": 8,
                "w": 12,
                "x": 0,
                "y": 15
              },
              "id": 62,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "percentage": false,
              "pointradius": 2,
              "points": true,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement =~ /_stat_client_performance$/ and r._field == \"primitives_count\" and r.host =~ /${host:pipe}/)\n  |> range($range)\n  |> drop(columns: [\"_measurement\", \"_field\", \"node_id\", \"tag\", \"host\", \"_start\", \"_stop\"])\n\n",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeShift": null,
              "title": "Number of Primitives per Service",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": null,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "datasource": "${DS_FLUX}",
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 1,
              "gridPos": {
                "h": 8,
                "w": 12,
                "x": 12,
                "y": 15
              },
              "id": 63,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "percentage": false,
              "pointradius": 2,
              "points": true,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement =~ /_stat_client_performance$/ and r._field == \"exported_points\" and r.host =~ /${host:pipe}/)\n  |> range($range)\n  |> drop(columns: [\"_measurement\", \"_field\", \"node_id\", \"tag\", \"host\", \"_start\", \"_stop\"])\n  |> derivative(nonNegative: true)\n",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeShift": null,
              "title": "Exported Points (lines) per second",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": null,
                  "format": "wps",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "datasource": "${DS_FLUX}",
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 1,
              "gridPos": {
                "h": 8,
                "w": 12,
                "x": 0,
                "y": 23
              },
              "id": 64,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": false,
                "hideEmpty": true,
                "hideZero": true,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": true,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "percentage": false,
              "pointradius": 2,
              "points": true,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": true,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement =~ /_stat_client_performance$/ and r._field == \"influxdb_buffer_loss\" and r.host =~ /${host:pipe}/)\n  |> range($range)\n  |> drop(columns: [\"_measurement\", \"_field\", \"node_id\", \"tag\", \"host\", \"_start\", \"_stop\"])\n  |> difference(nonNegative:true)\n\n",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeShift": null,
              "title": "Events of InfluxDB buffer loss",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": null,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "datasource": "${DS_FLUX}",
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 1,
              "gridPos": {
                "h": 8,
                "w": 12,
                "x": 12,
                "y": 23
              },
              "id": 65,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "percentage": false,
              "pointradius": 2,
              "points": true,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement =~ /_stat_client_performance$/ and r._field == \"push_interval_sec\" and r.host =~ /${host:pipe}/)\n  |> range($range)\n  |> keep(columns: [\"_time\", \"_value\", \"process\"])\n",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeShift": null,
              "title": "Maximum Push Interval in seconds",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": null,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            }
          ],
          "title": "Statclient meta-monitoring",
          "type": "row"
        },
        {
          "collapsed": true,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 5
          },
          "id": 93,
          "panels": [
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 1,
              "gridPos": {
                "h": 9,
                "w": 8,
                "x": 0,
                "y": 6
              },
              "id": 94,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"procstat\" and r._field == \"memory_rss\" and r.process_name == \"rsyslogd\")\n  |> range($range)\n  |> keep(columns: [\"_time\", \"_value\", \"host\"])",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "RSS Memory, OS View",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": null,
                  "format": "bytes",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 0,
              "gridPos": {
                "h": 9,
                "w": 8,
                "x": 8,
                "y": 6
              },
              "id": 95,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"procstat\" and r._field == \"cpu_usage\" and r.process_name == \"rsyslogd\")\n  |> range($range)\n  |> keep(columns: [\"_time\", \"_value\", \"host\"])",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "CPU Usage",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 1,
                  "format": "percent",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 0,
              "gridPos": {
                "h": 9,
                "w": 8,
                "x": 16,
                "y": 6
              },
              "id": 96,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"procstat\" and r._field == \"num_fds\" and r.process_name == \"rsyslogd\")\n  |> range($range)\n  |> keep(columns: [\"_time\", \"_value\", \"host\"])",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Number of File Handles",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "editable": true,
              "error": false,
              "fill": 1,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 0,
                "y": 15
              },
              "id": 97,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"procstat\" and r._field == \"read_bytes\" and r.process_name == \"rsyslogd\")\n  |> range($range)\n  |> derivative(nonNegative: true, unit:1s)\n  |> keep(columns: [\"_time\", \"_value\", \"host\", \"_field\"])\n  \n",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                },
                {
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"procstat\" and r._field == \"write_bytes\" and r.process_name == \"rsyslogd\")\n  |> range($range)\n  |> derivative(nonNegative: true, unit:1s)\n  |> keep(columns: [\"_time\", \"_value\", \"host\", \"_field\"])\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Disk IO rate (bytes per second)",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": 0,
                  "format": "Bps",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {
                "undefined": "#1F78C1"
              },
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "description": "Size of /opt/emc/caspian/fabric/agent/services/object/data/influxdb/",
              "editable": true,
              "error": false,
              "fill": 1,
              "gridPos": {
                "h": 10,
                "w": 8,
                "x": 8,
                "y": 15
              },
              "id": 92,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "hideEmpty": false,
                "hideZero": false,
                "max": false,
                "min": false,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": false,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 6,
              "nullPointMode": "connected",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": true,
              "renderer": "flot",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "alias": "space: free, $tag_path",
                  "dsType": "influxdb",
                  "groupBy": [
                    {
                      "params": [
                        "$interval"
                      ],
                      "type": "time"
                    },
                    {
                      "params": [
                        "path"
                      ],
                      "type": "tag"
                    },
                    {
                      "params": [
                        "null"
                      ],
                      "type": "fill"
                    }
                  ],
                  "measurement": "disk",
                  "policy": "default",
                  "query": "from(bucket: \"monitoring_op\")\r\n  |> filter(fn: (r) => r._measurement == \"disk\" and (r._field == \"used\" or r._field == \"free\") and r.host =~ /rsyslog/ and r.path == \"/pv\")\n  |> range($range)\n  |> keep(columns: [\"_start\", \"_stop\", \"_time\", \"_value\", \"host\", \"_field\"])",
                  "refId": "B",
                  "resultFormat": "time_series",
                  "select": [
                    [
                      {
                        "params": [
                          "free"
                        ],
                        "type": "field"
                      },
                      {
                        "params": [],
                        "type": "mean"
                      }
                    ]
                  ],
                  "tags": [
                    {
                      "key": "host",
                      "operator": "=~",
                      "value": "/^$host$/"
                    }
                  ]
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "Storage Disk Space",
              "tooltip": {
                "msResolution": false,
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": null,
                  "format": "bytes",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": true
                },
                {
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": "0",
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            }
          ],
          "title": "Rsyslog",
          "type": "row"
        }
      ],
      "refresh": false,
      "schemaVersion": 18,
      "style": "dark",
      "tags": [],
      "templating": {
        "list": []
      },
      "time": {
        "from": "now-24h",
        "to": "now"
      },
      "timepicker": {
        "refresh_intervals": [
          "5s",
          "10s",
          "30s",
          "1m",
          "5m",
          "15m",
          "30m",
          "1h",
          "2h",
          "1d"
        ],
        "time_options": [
          "5m",
          "15m",
          "1h",
          "6h",
          "12h",
          "24h",
          "2d",
          "7d",
          "30d"
        ]
      },
      "timezone": "",
      "title": "(OE) Internal Monitoring Health",
      "uid": "o5ijgcIWz",
      "version": 1
    }
  rsyslog_statistics.json: |-
    {
      "annotations": {
        "list": [
          {
            "builtIn": 1,
            "datasource": "-- Grafana --",
            "enable": true,
            "hide": true,
            "iconColor": "rgba(0, 211, 255, 1)",
            "name": "Annotations & Alerts",
            "type": "dashboard"
          }
        ]
      },
      "editable": true,
      "gnetId": null,
      "graphTooltip": 0,
      "id": 13,
      "iteration": 1618574254521,
      "links": [],
      "panels": [
        {
          "collapsed": false,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 0
          },
          "id": 29,
          "panels": [],
          "title": "imtcp",
          "type": "row"
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "description": "submitted â total number of messages submitted for processing since startup",
          "fill": 1,
          "gridPos": {
            "h": 8,
            "w": 24,
            "x": 0,
            "y": 1
          },
          "id": 36,
          "legend": {
            "alignAsTable": true,
            "avg": true,
            "current": true,
            "max": true,
            "min": true,
            "show": true,
            "sort": "current",
            "sortDesc": true,
            "total": true,
            "values": true
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "maxPerRow": 2,
          "nullPointMode": "null",
          "options": {},
          "percentage": false,
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "repeat": "imtcp",
          "repeatDirection": "h",
          "scopedVars": {
            "imtcp": {
              "selected": false,
              "text": "imtcp(10514)",
              "value": "imtcp(10514)"
            }
          },
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "query": "from(bucket: \"monitoring_op\")\n|> filter(fn: (r) => r._measurement == \"rsyslog_metrics\" and r.origin == \"imtcp\" and r.host =~ /$host/ and r.name == \"$imtcp\")\n|> range($range)\n|> group(columns: [\"_field\", \"host\"])\n|> keep(columns:[\"_time\", \"_value\",\"_field\", \"host\"])\n|> difference(nonNegative: true)\n",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "$imtcp",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": false
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "collapsed": true,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 33
          },
          "id": 15,
          "panels": [
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "utime - user time used in microseconds\n\nstime - system time used in microseconds\n\n",
              "fill": 0,
              "gridPos": {
                "h": 8,
                "w": 24,
                "x": 0,
                "y": 2
              },
              "id": 22,
              "legend": {
                "alignAsTable": true,
                "avg": true,
                "current": true,
                "max": true,
                "min": true,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 2,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "repeat": "impstats",
              "repeatDirection": "h",
              "scopedVars": {
                "impstats": {
                  "selected": false,
                  "text": "resource-usage",
                  "value": "resource-usage"
                }
              },
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")\n|> filter(fn: (r) => r._measurement == \"rsyslog_metrics\" and r.origin == \"impstats\" and r.host =~ /$host/ and r.name == \"$impstats\" and (r._field == \"utime\" or r._field == \"stime\"))\n|> range($range)\n|> group(columns: [\"_field\", \"host\"])\n|> keep(columns:[\"_time\", \"_value\",\"_field\", \"host\"])\n|> difference(nonNegative: true)",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "$impstats (utime stime)",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "Âµs",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "flops",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "maxrss - maximum resident set size",
              "fill": 1,
              "gridPos": {
                "h": 8,
                "w": 24,
                "x": 0,
                "y": 18
              },
              "id": 82,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "max": true,
                "min": true,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 2,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "repeat": "impstats",
              "repeatDirection": "h",
              "scopedVars": {
                "impstats": {
                  "selected": false,
                  "text": "resource-usage",
                  "value": "resource-usage"
                }
              },
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")\n|> filter(fn: (r) => r._measurement == \"rsyslog_metrics\" and r.origin == \"impstats\" and r.host =~ /$host/ and r.name == \"$impstats\" and r._field == \"maxrss\")\n|> range($range)\n|> group(columns: [\"_field\", \"host\"])\n|> keep(columns:[\"_time\", \"_value\",\"_field\", \"host\"])\n|> difference(nonNegative: true)\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "$impstats (maxrss)",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "bytes",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "minflt - total number of minor faults\n\nmajflt - total number of major faults\n\ninblock - number of filesystem input operations\n\noublock - number of filesystem output operations\n\nnvcsw - number of voluntary context switches\n\nnivcsw - number of involuntary context switches",
              "fill": 1,
              "gridPos": {
                "h": 8,
                "w": 24,
                "x": 0,
                "y": 34
              },
              "id": 84,
              "legend": {
                "alignAsTable": true,
                "avg": false,
                "current": true,
                "max": true,
                "min": true,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": false,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 2,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "repeat": "impstats",
              "repeatDirection": "h",
              "scopedVars": {
                "impstats": {
                  "selected": false,
                  "text": "resource-usage",
                  "value": "resource-usage"
                }
              },
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")\n|> filter(fn: (r) => r._measurement == \"rsyslog_metrics\" and r.origin == \"impstats\" and r.host =~ /$host/ and r.name == \"$impstats\" and (r._field == \"minflt\" or r._field == \"majflt\" or r._field == \"inblock\" or r._field == \"oublock\" or r._field == \"nvcsw\" or r._field == \"nivcsw\"))\n|> range($range)\n|> group(columns: [\"_field\", \"host\"])\n|> keep(columns:[\"_time\", \"_value\",\"_field\", \"host\"])\n|> difference(nonNegative: true)\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "$impstats (minflt majflt inblock oublock nvcsw nivcsw)",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            }
          ],
          "title": "impstats",
          "type": "row"
        },
        {
          "collapsed": true,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 34
          },
          "id": 43,
          "panels": [
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "requests â total number of requests made to obtain a dynafile\n\nlevel0 â requests for the current active file, so no real cache lookup needed to be done. These are extremely good.\n\nmissed â cache misses, where the required file did not reside in cache. Even with a perfect cache, there will be at least one miss per file.\n\nevicted â the number of times a file needed to be evicted from the cache as it ran out of space.\n\nmaxused â the maximum number of cache entries ever used.\n\nclosetimeouts â  tells how often a file was closed due to timeout settings (âcloseTimeoutâ action parameter).\n\n",
              "fill": 1,
              "gridPos": {
                "h": 8,
                "w": 12,
                "x": 0,
                "y": 3
              },
              "id": 45,
              "legend": {
                "alignAsTable": true,
                "avg": true,
                "current": true,
                "max": true,
                "min": true,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": true,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 2,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "repeat": "omfile",
              "repeatDirection": "h",
              "scopedVars": {
                "omfile": {
                  "selected": false,
                  "text": "dynafile cache RemoteLogSavePathOnlyMsg",
                  "value": "dynafile cache RemoteLogSavePathOnlyMsg"
                }
              },
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")\n|> filter(fn: (r) => r._measurement == \"rsyslog_metrics\" and r.origin == \"omfile\" and r.host =~ /$host/ and r.name == \"$omfile\")\n|> range($range)\n|> group(columns: [\"_field\", \"host\"])\n|> keep(columns:[\"_time\", \"_value\",\"_field\", \"host\"])\n|> difference(nonNegative: true)",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "$omfile",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "requests â total number of requests made to obtain a dynafile\n\nlevel0 â requests for the current active file, so no real cache lookup needed to be done. These are extremely good.\n\nmissed â cache misses, where the required file did not reside in cache. Even with a perfect cache, there will be at least one miss per file.\n\nevicted â the number of times a file needed to be evicted from the cache as it ran out of space.\n\nmaxused â the maximum number of cache entries ever used.\n\nclosetimeouts â  tells how often a file was closed due to timeout settings (âcloseTimeoutâ action parameter).\n\n",
              "fill": 1,
              "gridPos": {
                "h": 8,
                "w": 12,
                "x": 12,
                "y": 3
              },
              "id": 91,
              "legend": {
                "alignAsTable": true,
                "avg": true,
                "current": true,
                "max": true,
                "min": true,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": true,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 2,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "repeat": null,
              "repeatDirection": "h",
              "repeatIteration": 1618571376035,
              "repeatPanelId": 45,
              "scopedVars": {
                "omfile": {
                  "selected": false,
                  "text": "dynafile cache RemoteLogSavePathOnlyMsgFB",
                  "value": "dynafile cache RemoteLogSavePathOnlyMsgFB"
                }
              },
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")\n|> filter(fn: (r) => r._measurement == \"rsyslog_metrics\" and r.origin == \"omfile\" and r.host =~ /$host/ and r.name == \"$omfile\")\n|> range($range)\n|> group(columns: [\"_field\", \"host\"])\n|> keep(columns:[\"_time\", \"_value\",\"_field\", \"host\"])\n|> difference(nonNegative: true)",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "$omfile",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "requests â total number of requests made to obtain a dynafile\n\nlevel0 â requests for the current active file, so no real cache lookup needed to be done. These are extremely good.\n\nmissed â cache misses, where the required file did not reside in cache. Even with a perfect cache, there will be at least one miss per file.\n\nevicted â the number of times a file needed to be evicted from the cache as it ran out of space.\n\nmaxused â the maximum number of cache entries ever used.\n\nclosetimeouts â  tells how often a file was closed due to timeout settings (âcloseTimeoutâ action parameter).\n\n",
              "fill": 1,
              "gridPos": {
                "h": 8,
                "w": 12,
                "x": 0,
                "y": 11
              },
              "id": 92,
              "legend": {
                "alignAsTable": true,
                "avg": true,
                "current": true,
                "max": true,
                "min": true,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": true,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 2,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "repeat": null,
              "repeatDirection": "h",
              "repeatIteration": 1618571376035,
              "repeatPanelId": 45,
              "scopedVars": {
                "omfile": {
                  "selected": false,
                  "text": "dynafile cache RemoteLogSavePathRSYSLOG_FileFormat",
                  "value": "dynafile cache RemoteLogSavePathRSYSLOG_FileFormat"
                }
              },
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")\n|> filter(fn: (r) => r._measurement == \"rsyslog_metrics\" and r.origin == \"omfile\" and r.host =~ /$host/ and r.name == \"$omfile\")\n|> range($range)\n|> group(columns: [\"_field\", \"host\"])\n|> keep(columns:[\"_time\", \"_value\",\"_field\", \"host\"])\n|> difference(nonNegative: true)",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "$omfile",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            }
          ],
          "title": "omfile",
          "type": "row"
        },
        {
          "collapsed": true,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 35
          },
          "id": 6,
          "panels": [
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "description": "processed â total number of messages processed by this action.\n\nfailed â total number of messages that failed during processing. \n\nsuspended  â total number of times this action suspended itself.\n\nsuspended.duration â the total number of seconds this action was disabled. \n\nresumed â total number of times this action resumed itself. ",
              "fill": 1,
              "gridPos": {
                "h": 8,
                "w": 12,
                "x": 0,
                "y": 4
              },
              "id": 8,
              "legend": {
                "alignAsTable": true,
                "avg": true,
                "current": true,
                "max": true,
                "min": true,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": true,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 2,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "repeat": "coreaction",
              "repeatDirection": "h",
              "scopedVars": {
                "coreaction": {
                  "selected": false,
                  "text": "action-0-omprog",
                  "value": "action-0-omprog"
                }
              },
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")\n|> filter(fn: (r) => r._measurement == \"rsyslog_metrics\" and r.origin == \"core.action\" and r.host =~ /$host/ and r.name == \"$coreaction\")\n|> range($range)\n|> group(columns: [\"_field\", \"host\"])\n|> keep(columns:[\"_time\", \"_value\", \"_field\", \"host\"])\n|> difference(nonNegative: true)\n\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "$coreaction",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": null,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "description": "processed â total number of messages processed by this action.\n\nfailed â total number of messages that failed during processing. \n\nsuspended  â total number of times this action suspended itself.\n\nsuspended.duration â the total number of seconds this action was disabled. \n\nresumed â total number of times this action resumed itself. ",
              "fill": 1,
              "gridPos": {
                "h": 8,
                "w": 12,
                "x": 12,
                "y": 4
              },
              "id": 93,
              "legend": {
                "alignAsTable": true,
                "avg": true,
                "current": true,
                "max": true,
                "min": true,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": true,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 2,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "repeat": null,
              "repeatDirection": "h",
              "repeatIteration": 1618574107067,
              "repeatPanelId": 8,
              "scopedVars": {
                "coreaction": {
                  "selected": false,
                  "text": "action-1-mmpstrucdata",
                  "value": "action-1-mmpstrucdata"
                }
              },
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")\n|> filter(fn: (r) => r._measurement == \"rsyslog_metrics\" and r.origin == \"core.action\" and r.host =~ /$host/ and r.name == \"$coreaction\")\n|> range($range)\n|> group(columns: [\"_field\", \"host\"])\n|> keep(columns:[\"_time\", \"_value\", \"_field\", \"host\"])\n|> difference(nonNegative: true)\n\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "$coreaction",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": null,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "description": "processed â total number of messages processed by this action.\n\nfailed â total number of messages that failed during processing. \n\nsuspended  â total number of times this action suspended itself.\n\nsuspended.duration â the total number of seconds this action was disabled. \n\nresumed â total number of times this action resumed itself. ",
              "fill": 1,
              "gridPos": {
                "h": 8,
                "w": 12,
                "x": 0,
                "y": 12
              },
              "id": 94,
              "legend": {
                "alignAsTable": true,
                "avg": true,
                "current": true,
                "max": true,
                "min": true,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": true,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 2,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "repeat": null,
              "repeatDirection": "h",
              "repeatIteration": 1618574107067,
              "repeatPanelId": 8,
              "scopedVars": {
                "coreaction": {
                  "selected": false,
                  "text": "action-2-builtin:omfile",
                  "value": "action-2-builtin:omfile"
                }
              },
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")\n|> filter(fn: (r) => r._measurement == \"rsyslog_metrics\" and r.origin == \"core.action\" and r.host =~ /$host/ and r.name == \"$coreaction\")\n|> range($range)\n|> group(columns: [\"_field\", \"host\"])\n|> keep(columns:[\"_time\", \"_value\", \"_field\", \"host\"])\n|> difference(nonNegative: true)\n\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "$coreaction",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": null,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "description": "processed â total number of messages processed by this action.\n\nfailed â total number of messages that failed during processing. \n\nsuspended  â total number of times this action suspended itself.\n\nsuspended.duration â the total number of seconds this action was disabled. \n\nresumed â total number of times this action resumed itself. ",
              "fill": 1,
              "gridPos": {
                "h": 8,
                "w": 12,
                "x": 12,
                "y": 12
              },
              "id": 95,
              "legend": {
                "alignAsTable": true,
                "avg": true,
                "current": true,
                "max": true,
                "min": true,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": true,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 2,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "repeat": null,
              "repeatDirection": "h",
              "repeatIteration": 1618574107067,
              "repeatPanelId": 8,
              "scopedVars": {
                "coreaction": {
                  "selected": false,
                  "text": "action-3-builtin:omfile",
                  "value": "action-3-builtin:omfile"
                }
              },
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")\n|> filter(fn: (r) => r._measurement == \"rsyslog_metrics\" and r.origin == \"core.action\" and r.host =~ /$host/ and r.name == \"$coreaction\")\n|> range($range)\n|> group(columns: [\"_field\", \"host\"])\n|> keep(columns:[\"_time\", \"_value\", \"_field\", \"host\"])\n|> difference(nonNegative: true)\n\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "$coreaction",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": null,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            },
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "decimals": null,
              "description": "processed â total number of messages processed by this action.\n\nfailed â total number of messages that failed during processing. \n\nsuspended  â total number of times this action suspended itself.\n\nsuspended.duration â the total number of seconds this action was disabled. \n\nresumed â total number of times this action resumed itself. ",
              "fill": 1,
              "gridPos": {
                "h": 8,
                "w": 12,
                "x": 0,
                "y": 20
              },
              "id": 96,
              "legend": {
                "alignAsTable": true,
                "avg": true,
                "current": true,
                "max": true,
                "min": true,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": true,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 2,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "repeat": null,
              "repeatDirection": "h",
              "repeatIteration": 1618574107067,
              "repeatPanelId": 8,
              "scopedVars": {
                "coreaction": {
                  "selected": false,
                  "text": "action-4-builtin:omfile",
                  "value": "action-4-builtin:omfile"
                }
              },
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")\n|> filter(fn: (r) => r._measurement == \"rsyslog_metrics\" and r.origin == \"core.action\" and r.host =~ /$host/ and r.name == \"$coreaction\")\n|> range($range)\n|> group(columns: [\"_field\", \"host\"])\n|> keep(columns:[\"_time\", \"_value\", \"_field\", \"host\"])\n|> difference(nonNegative: true)\n\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "$coreaction",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "decimals": null,
                  "format": "short",
                  "label": "",
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            }
          ],
          "title": "core.action",
          "type": "row"
        },
        {
          "collapsed": true,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 36
          },
          "id": 4,
          "panels": [
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "description": "size â currently active messages in queue\n\nenqueued â total number of messages enqueued into this queue since startup\n\nmaxsize â maximum number of active messages the queue ever held\n\nfull â number of times the queue was actually full and could not accept additional messages\n\ndiscarded.full â number of messages discarded because the queue was full\n\ndiscarded.nf â number of messages discarded because the queue was nearly full. Starting at this point, messages of lower-than-configured severity are discarded to save space for higher severity ones.",
              "fill": 1,
              "gridPos": {
                "h": 11,
                "w": 24,
                "x": 0,
                "y": 5
              },
              "id": 2,
              "legend": {
                "alignAsTable": true,
                "avg": true,
                "current": true,
                "max": true,
                "min": true,
                "rightSide": false,
                "show": true,
                "sort": "current",
                "sortDesc": true,
                "total": true,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 2,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "repeat": "corequeue",
              "repeatDirection": "h",
              "scopedVars": {
                "corequeue": {
                  "selected": false,
                  "text": "main Q",
                  "value": "main Q"
                }
              },
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")\n|> filter(fn: (r) => r._measurement == \"rsyslog_metrics\" and r.origin == \"core.queue\" and r.host =~ /$host/ and r.name == \"$corequeue\")\n|> range($range)\n|> group(columns: [\"_field\", \"host\"])\n|> keep(columns:[\"_time\", \"_value\", \"_field\", \"host\"])\n|> difference(nonNegative: true)\n",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "$corequeue",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            }
          ],
          "repeat": null,
          "title": "core.queue",
          "type": "row"
        },
        {
          "collapsed": true,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 37
          },
          "id": 49,
          "panels": [
            {
              "aliasColors": {},
              "bars": false,
              "dashLength": 10,
              "dashes": false,
              "fill": 1,
              "gridPos": {
                "h": 8,
                "w": 12,
                "x": 0,
                "y": 6
              },
              "id": 51,
              "legend": {
                "alignAsTable": true,
                "avg": true,
                "current": true,
                "max": true,
                "min": true,
                "show": true,
                "total": true,
                "values": true
              },
              "lines": true,
              "linewidth": 1,
              "links": [],
              "maxPerRow": 2,
              "nullPointMode": "null",
              "options": {},
              "percentage": false,
              "pointradius": 2,
              "points": false,
              "renderer": "flot",
              "repeat": "dynstats",
              "repeatDirection": "h",
              "seriesOverrides": [],
              "spaceLength": 10,
              "stack": false,
              "steppedLine": false,
              "targets": [
                {
                  "query": "from(bucket: \"monitoring_op\")\n|> filter(fn: (r) => r._measurement == \"rsyslog_metrics\" and r.origin == \"dynstats\" and r.host =~ /$host/ and r.name == \"$dynstats\")\n|> range($range)\n|> group(columns: [\"_field\", \"host\"])\n|> keep(columns:[\"_time\", \"_value\", \"_field\", \"host\"])\n|> difference(nonNegative: true)",
                  "refId": "A"
                }
              ],
              "thresholds": [],
              "timeFrom": null,
              "timeRegions": [],
              "timeShift": null,
              "title": "$dynstats",
              "tooltip": {
                "shared": true,
                "sort": 0,
                "value_type": "individual"
              },
              "type": "graph",
              "xaxis": {
                "buckets": null,
                "mode": "time",
                "name": null,
                "show": true,
                "values": []
              },
              "yaxes": [
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": true
                },
                {
                  "format": "short",
                  "label": null,
                  "logBase": 1,
                  "max": null,
                  "min": null,
                  "show": false
                }
              ],
              "yaxis": {
                "align": false,
                "alignLevel": null
              }
            }
          ],
          "title": "dynstats",
          "type": "row"
        }
      ],
      "schemaVersion": 18,
      "style": "dark",
      "tags": [],
      "templating": {
        "list": [
          {
            "allValue": null,
            "current": {
              "selected": true,
              "text": "All",
              "value": "$__all"
            },
            "datasource": "Flux",
            "definition": "from(bucket: \"monitoring_op\")|> filter(fn: (r) => r._measurement == \"rsyslog_metrics\" and r.origin == \"core.queue\" and r.name =~ /.*/)|> range($range)|> group(columns:[\"name\"])|> distinct(column:\"name\")",
            "hide": 2,
            "includeAll": true,
            "label": null,
            "multi": true,
            "name": "corequeue",
            "options": [],
            "query": "from(bucket: \"monitoring_op\")|> filter(fn: (r) => r._measurement == \"rsyslog_metrics\" and r.origin == \"core.queue\" and r.name =~ /.*/)|> range($range)|> group(columns:[\"name\"])|> distinct(column:\"name\")",
            "refresh": 1,
            "regex": "",
            "skipUrlSync": false,
            "sort": 1,
            "tagValuesQuery": "",
            "tags": [],
            "tagsQuery": "",
            "type": "query",
            "useTags": false
          },
          {
            "allValue": null,
            "current": {
              "selected": true,
              "text": "All",
              "value": "$__all"
            },
            "datasource": "Flux",
            "definition": "from(bucket: \"monitoring_op\")|> filter(fn: (r) => r._measurement == \"rsyslog_metrics\" and r.origin == \"core.action\" and r.name =~ /.*/)|> range($range)|> group(columns:[\"name\"])|> distinct(column:\"name\")",
            "hide": 2,
            "includeAll": true,
            "label": null,
            "multi": true,
            "name": "coreaction",
            "options": [],
            "query": "from(bucket: \"monitoring_op\")|> filter(fn: (r) => r._measurement == \"rsyslog_metrics\" and r.origin == \"core.action\" and r.name =~ /.*/)|> range($range)|> group(columns:[\"name\"])|> distinct(column:\"name\")",
            "refresh": 1,
            "regex": "",
            "skipUrlSync": false,
            "sort": 1,
            "tagValuesQuery": "",
            "tags": [],
            "tagsQuery": "",
            "type": "query",
            "useTags": false
          },
          {
            "allValue": null,
            "current": {
              "selected": true,
              "text": "All",
              "value": "$__all"
            },
            "datasource": "Flux",
            "definition": "from(bucket: \"monitoring_op\")|> filter(fn: (r) => r._measurement == \"rsyslog_metrics\" and r.origin == \"impstats\" and r.name =~ /.*/)|> range($range)|> group(columns:[\"name\"])|> distinct(column:\"name\")",
            "hide": 2,
            "includeAll": true,
            "label": null,
            "multi": true,
            "name": "impstats",
            "options": [],
            "query": "from(bucket: \"monitoring_op\")|> filter(fn: (r) => r._measurement == \"rsyslog_metrics\" and r.origin == \"impstats\" and r.name =~ /.*/)|> range($range)|> group(columns:[\"name\"])|> distinct(column:\"name\")",
            "refresh": 1,
            "regex": "",
            "skipUrlSync": false,
            "sort": 1,
            "tagValuesQuery": "",
            "tags": [],
            "tagsQuery": "",
            "type": "query",
            "useTags": false
          },
          {
            "allValue": null,
            "current": {
              "selected": true,
              "text": "All",
              "value": "$__all"
            },
            "datasource": "Flux",
            "definition": "from(bucket: \"monitoring_op\")|> filter(fn: (r) => r._measurement == \"rsyslog_metrics\" and r.origin == \"imtcp\" and r.name =~ /.*/)|> range($range)|> group(columns:[\"name\"])|> distinct(column:\"name\")",
            "hide": 2,
            "includeAll": true,
            "label": null,
            "multi": true,
            "name": "imtcp",
            "options": [],
            "query": "from(bucket: \"monitoring_op\")|> filter(fn: (r) => r._measurement == \"rsyslog_metrics\" and r.origin == \"imtcp\" and r.name =~ /.*/)|> range($range)|> group(columns:[\"name\"])|> distinct(column:\"name\")",
            "refresh": 1,
            "regex": "",
            "skipUrlSync": false,
            "sort": 1,
            "tagValuesQuery": "",
            "tags": [],
            "tagsQuery": "",
            "type": "query",
            "useTags": false
          },
          {
            "allValue": null,
            "current": {
              "selected": true,
              "text": "All",
              "value": "$__all"
            },
            "datasource": "Flux",
            "definition": "from(bucket: \"monitoring_op\")|> filter(fn: (r) => r._measurement == \"rsyslog_metrics\" and r.origin == \"omfile\" and r.name =~ /.*/)|> range($range)|> group(columns:[\"name\"])|> distinct(column:\"name\")",
            "hide": 2,
            "includeAll": true,
            "label": null,
            "multi": true,
            "name": "omfile",
            "options": [],
            "query": "from(bucket: \"monitoring_op\")|> filter(fn: (r) => r._measurement == \"rsyslog_metrics\" and r.origin == \"omfile\" and r.name =~ /.*/)|> range($range)|> group(columns:[\"name\"])|> distinct(column:\"name\")",
            "refresh": 1,
            "regex": "",
            "skipUrlSync": false,
            "sort": 1,
            "tagValuesQuery": "",
            "tags": [],
            "tagsQuery": "",
            "type": "query",
            "useTags": false
          },
          {
            "allValue": null,
            "current": {
              "selected": true,
              "text": "All",
              "value": "$__all"
            },
            "datasource": "Flux",
            "definition": "from(bucket: \"monitoring_op\")|> filter(fn: (r) => r._measurement == \"rsyslog_metrics\" and r.origin == \"dynstats\" and r.name =~ /.*/)|> range($range)|> group(columns:[\"name\"])|> distinct(column:\"name\")",
            "hide": 2,
            "includeAll": true,
            "label": null,
            "multi": true,
            "name": "dynstats",
            "options": [],
            "query": "from(bucket: \"monitoring_op\")|> filter(fn: (r) => r._measurement == \"rsyslog_metrics\" and r.origin == \"dynstats\" and r.name =~ /.*/)|> range($range)|> group(columns:[\"name\"])|> distinct(column:\"name\")",
            "refresh": 1,
            "regex": "",
            "skipUrlSync": false,
            "sort": 1,
            "tagValuesQuery": "",
            "tags": [],
            "tagsQuery": "",
            "type": "query",
            "useTags": false
          },
          {
            "allValue": null,
            "current": {
              "selected": true,
              "tags": [],
              "text": "ecs-flex-rsyslog-0",
              "value": [
                "ecs-flex-rsyslog-0"
              ]
            },
            "datasource": "Flux",
            "definition": "from(bucket: \"monitoring_op\")|> filter(fn: (r) => r._measurement == \"rsyslog_metrics\")|> range($range)|> group(columns:[\"host\"])|> distinct(column:\"host\")",
            "hide": 0,
            "includeAll": false,
            "label": null,
            "multi": true,
            "name": "host",
            "options": [],
            "query": "from(bucket: \"monitoring_op\")|> filter(fn: (r) => r._measurement == \"rsyslog_metrics\")|> range($range)|> group(columns:[\"host\"])|> distinct(column:\"host\")",
            "refresh": 1,
            "regex": "",
            "skipUrlSync": false,
            "sort": 1,
            "tagValuesQuery": "",
            "tags": [],
            "tagsQuery": "",
            "type": "query",
            "useTags": false
          }
        ]
      },
      "time": {
        "from": "now-24h",
        "to": "now"
      },
      "timepicker": {
        "refresh_intervals": [
          "15m",
          "30m",
          "1h",
          "2h",
          "1d"
        ],
        "time_options": [
          "15m",
          "1h",
          "6h",
          "12h",
          "24h",
          "2d",
          "7d",
          "30d"
        ]
      },
      "timezone": "",
      "title": "Rsyslog Statistics",
      "uid": "INwjItXMk",
      "version": 9
    }
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/grafana/templates/grafana-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: RELEASE-NAME-grafana-grafana-ini
  labels:
    app: "RELEASE-NAME-grafana"
    chart: "grafana-0.54.0"
    release: RELEASE-NAME
data:
  grafana.ini: |+
    ##################### Grafana Configuration #####################
    # possible values : production, development
    app_mode = production

    # instance name, defaults to HOSTNAME environment variable value or hostname if HOSTNAME var is empty
    instance_name = ${HOSTNAME}

    #################################### Paths ###############################
    [paths]
    # Path to where grafana can store temp files, sessions, and the sqlite3 db (if that is used)
    # we use /data/grafana
    ;data = /var/lib/grafana

    # Temporary files in `data` directory older than given duration will be removed
    temp_data_lifetime = 24h

    # Directory where grafana can store logs
    logs = /var/log/grafana

    # Directory where grafana will automatically scan and look for plugins
    plugins = /plugins

    # folder that contains provisioning config files that grafana will apply on startup and while running.
    ;provisioning = conf/provisioning

    #################################### Server ##############################
    [server]
    # Protocol (http, https, socket)
    ;protocol = http

    # The ip address to bind to, empty will bind to all interfaces
    ;http_addr =

    # The http port to use
    ;http_port = 3000

    # Redirect to correct domain if host header does not match domain
    # Prevents DNS rebinding attacks
    ;enforce_domain = false
    # The public facing domain name used to access grafana from a browser
    ;domain = localhost

    # The full public facing url
    root_url = %(protocol)s://%(domain)s

    # Log web requests
    ## Set to true for Grafana to log all HTTP requests (not just errors). These are logged as Info level events to grafana log.
    router_logging = true

    # the path relative working path
    static_root_path = /grafana/public

    # enable gzip
    ;enable_gzip = false

    # https certs & key file
    ;cert_file =
    ;cert_key =

    # Unix socket path
    ;socket = /tmp/grafana.sock

    #################################### Database ############################
    [database]
    # You can configure the database connection by specifying type, host, name, user and password
    # as separate properties or as on string using the url property.

    # Either "mysql", "postgres" or "sqlite3", it's your choice
    ;type = sqlite3
    ;host = 127.0.0.1:3306
    ;name = grafana
    ;user = root
    # If the password contains # or ; you have to wrap it with triple quotes. Ex """#password;"""
    ;password =
    # Use either URL or the previous fields to configure the database
    # Example: mysql://user:secret@host:port/database
    ;url =

    # Max idle conn setting default is 2
    ;max_idle_conn = 2

    # Max conn setting default is 0 (mean not set)
    ;max_open_conn =

    # Connection Max Lifetime default is 14400 (means 14400 seconds or 4 hours)
    ;conn_max_lifetime = 14400

    # Set to true to log the sql calls and execution times.
    ;log_queries =

    # For "postgres", use either "disable", "require" or "verify-full"
    # For "mysql", use either "true", "false", or "skip-verify".
    ;ssl_mode = disable

    ;ca_cert_path =
    ;client_key_path =
    ;client_cert_path =
    ;server_cert_name =

    # For "sqlite3" only, path relative to data_path setting
    ;path = grafana.db

    # For "sqlite3" only. cache mode setting used for connecting to the database
    ;cache_mode = private

    #################################### Cache server #############################
    [remote_cache]
    # Either "redis", "memcached" or "database" default is "database"
    ;type = database

    # cache connectionstring options
    # database: will use Grafana primary database.
    # redis: config like redis server e.g. `addr=127.0.0.1:6379,pool_size=100,db=0`. Only addr is required.
    # memcache: 127.0.0.1:11211
    ;connstr =

    #################################### Data proxy ###########################
    [dataproxy]

    # This enables data proxy logging, default is false
    ;logging = false

    # How long the data proxy should wait before timing out default is 30 (seconds)
    ;timeout = 30

    # If enabled and user is not anonymous, data proxy will add X-Grafana-User header with username into the request, default is false.
    ;send_user_header = false

    #################################### Analytics ###########################
    [analytics]
    # Server reporting, sends usage counters to stats.grafana.org every 24 hours.
    # No ip addresses are being tracked, only simple counters to track
    # running instances, dashboard and error counts. It is very helpful to us.
    # Change this option to false to disable reporting.
    reporting_enabled = false

    # Set to false to disable all checks to https://grafana.com
    # for new versions (grafana itself and plugins), check is used
    # in some UI views to notify that grafana or plugin update exists
    # This option does not cause any auto updates, nor send any information
    # only a GET request to https://grafana.com to get latest versions
    check_for_updates = false

    # Google Analytics universal tracking code, only enabled if you specify an id here
    ;google_analytics_ua_id =

    # Google Tag Manager ID, only enabled if you specify an id here
    ;google_tag_manager_id =

    #################################### Security ############################
    [security]
    # default admin user, created on startup
    admin_user = grafana_admin

    # default admin password, can be changed before first start of grafana, or in profile settings
    admin_password = grafana_admin

    # used for signing
    ;secret_key =

    # disable gravatar profile images
    disable_gravatar = true

    # data source proxy whitelist (ip_or_domain:port separated by spaces)
    ;data_source_proxy_whitelist =

    # disable protection against brute force login attempts
    ;disable_brute_force_login_protection = false

    # set to true if you host Grafana behind HTTPS. default is false.
    cookie_secure = false

    # set cookie SameSite attribute. defaults to `lax`. can be set to "lax", "strict" and "none"
    ;cookie_samesite = lax

    # When false, the HTTP header X-Frame-Options: deny will be set in Grafana HTTP responses which
    # will instruct browsers to not allow rendering Grafana in a <frame>, <iframe>, <embed> or <object>.
    # The main goal is to mitigate the risk of Clickjacking. Default is false.
    allow_embedding = true

    # Set to true if you want to enable http strict transport security (HSTS) response header.
    # This is only sent when HTTPS is enabled in this configuration.
    # HSTS tells browsers that the site should only be accessed using HTTPS.
    # The default will change to true in the next minor release, 6.3.
    ;strict_transport_security = false

    # Sets how long a browser should cache HSTS. Only applied if strict_transport_security is enabled.
    ;strict_transport_security_max_age_seconds = 86400

    # Set to true if to enable HSTS preloading option. Only applied if strict_transport_security is enabled.
    ;strict_transport_security_preload = false

    # Set to true if to enable the HSTS includeSubDomains option. Only applied if strict_transport_security is enabled.
    ;strict_transport_security_subdomains = false

    # Set to true to enable the X-Content-Type-Options response header.
    # The X-Content-Type-Options response HTTP header is a marker used by the server to indicate that the MIME types advertised
    # in the Content-Type headers should not be changed and be followed. The default will change to true in the next minor release, 6.3.
    ;x_content_type_options = false

    # Set to true to enable the X-XSS-Protection header, which tells browsers to stop pages from loading
    # when they detect reflected cross-site scripting (XSS) attacks. The default will change to true in the next minor release, 6.3.
    ;x_xss_protection = false


    #################################### Snapshots ###########################
    [snapshots]
    # snapshot sharing options
    external_enabled = false
    external_snapshot_url =
    ;external_snapshot_name = Publish to snapshot.raintank.io

    # remove expired snapshot
    ;snapshot_remove_expired = true

    #################################### Dashboards ##################

    [dashboards]
    # Number dashboard versions to keep (per dashboard). Default: 20, Minimum: 1
    ;versions_to_keep = 20

    #################################### Users ###############################
    [users]
    # disable user signup / registration
    allow_sign_up = false

    # Allow non admin users to create organizations
    ;allow_org_create = false

    # Set to true to automatically assign new users to the default organization (id 1)
    ;auto_assign_org = true

    # Set this value to automatically add new users to the provided organization (if auto_assign_org above is set to true)
    auto_assign_org_id = 1

    # Default role new users will be automatically assigned (if auto_assign_org above is set to true)
    auto_assign_org_role = Viewer

    # Require email validation before sign up completes
    ;verify_email_enabled = false

    # Background text for the user field on the login page
    ;login_hint = email or username
    ;password_hint = password

    # Default UI theme ("dark" or "light")
    default_theme = dark

    # External user management
    ;external_manage_link_url =
    ;external_manage_link_name =
    ;external_manage_info =

    # Viewers can edit/inspect dashboard settings in the browser. But not save the dashboard.
    ;viewers_can_edit = false

    # Editors can administrate dashboard, folders and teams they create
    ;editors_can_admin = false

    [auth]
    # Login cookie name
    login_cookie_name = grafana_session

    # The lifetime (days) an authenticated user can be inactive before being required to login at next visit. Default is 7 days.
    login_maximum_inactive_lifetime_days = 1

    # The maximum lifetime (days) an authenticated user can be logged in since login time before being required to login. Default is 30 days.
    login_maximum_lifetime_days = 1

    # How often should auth tokens be rotated for authenticated users when being active. The default is each 10 minutes.
    token_rotation_interval_minutes = 10

    # Set to true to disable (hide) the login form, useful if you use OAuth
    disable_login_form = false

    # Set to true to disable the signout link in the side menu. useful if you use auth.proxy
    disable_signout_menu = false

    # URL to redirect the user to after sign out
    signout_redirect_url =

    # Set to true to attempt login with OAuth automatically, skipping the login screen.
    # This setting is ignored if multiple OAuth providers are configured.
    oauth_auto_login = false

    #################################### Anonymous Auth ######################
    [auth.anonymous]
    # enable anonymous access
    ;enabled = false

    # specify organization name that should be used for unauthenticated users
    ;org_name = Main Org.

    # specify role for unauthenticated users
    ;org_role = Viewer

    #################################### Github Auth #########################
    [auth.github]
    ;enabled = false
    ;allow_sign_up = true
    ;client_id = some_id
    ;client_secret = some_secret
    ;scopes = user:email,read:org
    auth_url =
    token_url =
    api_url =
    ;team_ids =
    ;allowed_organizations =

    #################################### GitLab Auth #########################
    [auth.gitlab]
    ;enabled = false
    ;allow_sign_up = true
    ;client_id = some_id
    ;client_secret = some_secret
    ;scopes = api
    auth_url =
    token_url =
    api_url =
    ;allowed_groups =

    #################################### Google Auth #########################
    [auth.google]
    ;enabled = false
    ;allow_sign_up = true
    ;client_id = some_client_id
    ;client_secret = some_client_secret
    scopes =
    auth_url =
    token_url =
    api_url =
    ;allowed_domains =
    ;hosted_domain =

    #################################### Grafana.com Auth ####################
    # legacy key names (so they work in env variables)
    [auth.grafananet]
    ;enabled = false
    ;allow_sign_up = true
    ;client_id = some_id
    ;client_secret = some_secret
    ;scopes = user:email
    ;allowed_organizations =

    [auth.grafana_com]
    ;enabled = false
    ;allow_sign_up = true
    ;client_id = some_id
    ;client_secret = some_secret
    ;scopes = user:email
    ;allowed_organizations =

    #################################### Generic OAuth #######################
    [auth.generic_oauth]
    ;name = OAuth
    ;enabled = false
    ;allow_sign_up = true
    ;client_id = some_id
    ;client_secret = some_secret
    ;scopes = user:email
    ;email_attribute_name = email:primary
    auth_url =
    token_url =
    api_url =
    ;team_ids =
    ;allowed_organizations =
    ;tls_skip_verify_insecure = false
    ;tls_client_cert =
    ;tls_client_key =
    ;tls_client_ca =
    ;send_client_credentials_via_post = false


    #################################### Basic Auth ##########################
    [auth.basic]
    enabled = true

    #################################### Auth Proxy ##########################
    [auth.proxy]
    ;enabled = false
    ;header_name =
    ;header_property = username
    ;auto_sign_up = true
    ;ldap_sync_ttl = 60
    ## Limit where auth proxy requests come from by configuring a list of IP addresses.
    ## This can be used to prevent users spoofing the X-WEBAUTH-USER header.
    ;whitelist =
    ;headers =

    #################################### Auth LDAP ###########################
    [auth.ldap]
    ;enabled = false
    ;config_file = /etc/grafana/ldap.toml
    ;allow_sign_up = true

    # LDAP backround sync (Enterprise only)
    ;sync_cron = @hourly
    ;active_sync_enabled = false

    #################################### SMTP / Emailing #####################
    [smtp]
    ;enabled = false
    ;host = localhost:25
    ;user =
    # If the password contains # or ; you have to wrap it with triple quotes. Ex """#password;"""
    ;password =
    ;cert_file =
    ;key_file =
    ;skip_verify = false
    ;from_address = admin@grafana.localhost
    ;from_name = Grafana
    ;ehlo_identity =

    [emails]
    ;welcome_email_on_sign_up = false
    ;templates_pattern = emails/*.html

    #################################### Logging ##########################
     [log]
    # Either "console", "file", "syslog". Default is console and file
    # Use space to separate multiple modes, e.g. "console file"
    ;mode = console file

    # Either "debug", "info", "warn", "error", "critical", default is "info"
    level = debug

    # optional settings to set different levels for specific loggers. Ex filters = sqlstore:debug
    ;filters =

    # For "console" mode only
    [log.console]
    ;level =

    # log line format, valid options are text, console and json
    ;format = console

    # For "file" mode only
    [log.file]
    ;level =

    # log line format, valid options are text, console and json
    ;format = text

    # This enables automated log rotate(switch of following options), default is true
    ;log_rotate = true

    # Max line number of single file, default is 1000000
    ;max_lines = 1000000

    # Max size shift of single file, default is 28 means 1 << 28, 256MB
    ;max_size_shift = 28

    # Segment log daily, default is true
    ;daily_rotate = true

    # Expired days of log file(delete after max days), default is 7
    ;max_days = 7

    [log.syslog]
    ;level =

    # log line format, valid options are text, console and json
    ;format = text

    # Syslog network type and address. This can be udp, tcp, or unix. If left blank, the default unix endpoints will be used.
    ;network =
    ;address =

    # Syslog facility. user, daemon and local0 through local7 are valid.
    ;facility =

    # Syslog tag. By default, the process' argv[0] is used.
    ;tag =

    #################################### Usage Quotas ########################
    [quota]
    ;enabled = false

    #### set quotas to -1 to make unlimited. ####
    # limit number of users per Org.
    ;org_user = 10

    # limit number of dashboards per Org.
    ;org_dashboard = 100

    # limit number of data_sources per Org.
    ;org_data_source = 10

    # limit number of api_keys per Org.
    ;org_api_key = 10

    # limit number of orgs a user can create.
    ;user_org = 10

    # Global limit of users.
    ;global_user = -1

    # global limit of orgs.
    ;global_org = -1

    # global limit of dashboards
    ;global_dashboard = -1

    # global limit of api_keys
    ;global_api_key = -1

    # global limit on number of logged in users.
    ;global_session = -1

    #################################### Alerting ############################
    [alerting]
    # Disable alerting engine & UI features
    enabled = false
    # Makes it possible to turn off alert rule execution but alerting UI is visible
    execute_alerts = false

    # Default setting for new alert rules. Defaults to categorize error and timeouts as alerting. (alerting, keep_state)
    ;error_or_timeout = alerting

    # Default setting for how Grafana handles nodata or null values in alerting. (alerting, no_data, keep_state, ok)
    ;nodata_or_nullvalues = no_data

    # Alert notifications can include images, but rendering many images at the same time can overload the server
    # This limit will protect the server from render overloading and make sure notifications are sent out quickly
    ;concurrent_render_limit = 5

    # Default setting for alert calculation timeout. Default value is 30
    ;evaluation_timeout_seconds = 30

    # Default setting for alert notification timeout. Default value is 30
    ;notification_timeout_seconds = 30

    # Default setting for max attempts to sending alert notifications. Default value is 3
    ;max_attempts = 3


    #################################### Explore #############################
    [explore]
    # Enable the Explore section
    enabled = false

    #################################### Internal Grafana Metrics ############
    # Metrics available at HTTP API Url /metrics
    [metrics]
    enabled           = true
    ;interval_seconds  = 10

    #If both are set, basic auth will be required for the metrics endpoint.
    ;basic_auth_username =
    ;basic_auth_password =

    # Send internal Grafana metrics to graphite
    [metrics.graphite]
    # Enable by setting the address setting (ex localhost:2003)
    ;address =
    ;prefix = prod.grafana.%(instance_name)s.

    [grafana_net]
    url =

    [grafana_com]
    url =

    #################################### Distributed tracing ############
    [tracing.jaeger]
    # jaeger destination (ex localhost:6831)
    ;address =
    # tag that will always be included in when creating new spans. ex (tag1:value1,tag2:value2)
    ;always_included_tag =
    # Type specifies the type of the sampler: const, probabilistic, rateLimiting, or remote
    ;sampler_type = const
    # jaeger samplerconfig param
    # for "const" sampler, 0 or 1 for always false/true respectively
    # for "probabilistic" sampler, a probability between 0 and 1
    # for "rateLimiting" sampler, the number of spans per second
    # for "remote" sampler, param is the same as for "probabilistic"
    # and indicates the initial sampling rate before the actual one
    # is received from the mothership
    ;sampler_param = 1

    #################################### External Image Storage ##############
    [external_image_storage]
    # You can choose between (s3, webdav, gcs, azure_blob, local)
    ;provider =

    [external_image_storage.s3]
    ;bucket_url =
    ;bucket =
    ;region =
    ;path =
    ;access_key =
    ;secret_key =

    [external_image_storage.webdav]
    ;url =
    ;username =
    ;password =
    ;public_url =

    [external_image_storage.gcs]
    ;key_file =
    ;bucket =
    ;path =

    [external_image_storage.azure_blob]
    ;account_name =
    ;account_key =
    ;container_name =

    [external_image_storage.local]
    # does not require any configuration

    [rendering]
    # Options to configure external image rendering server like https://github.com/grafana/grafana-image-renderer
    ;server_url =
    ;callback_url =

    [panels]
    # here for to support old env variables, can remove after a few months
    ;enable_alpha = false
    ;disable_sanitize_html = false

    [plugins]
    ;enable_alpha = false
    ;app_tls_skip_verify_insecure = false

    [enterprise]
    ;license_path =
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/grafana/templates/provision_profile.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
apiVersion: v1
kind: ConfigMap
metadata:
  name: "RELEASE-NAME-grafana-profile"
  labels:
    release: RELEASE-NAME
data:
  profile.conf: |+
    {
        "internal": {
            "db_dir": "/dashboards_flex/internal",
            "username": "grafana_admin",
            "password": "grafana_admin",
            "home_dashboard": "Data Access Performance - Overview"
        },
        "internal_oe": {
            "db_dir": "/dashboards_flex/internal_oe",
            "username": "grafana_admin",
            "password": "grafana_admin",
            "home_dashboard": null,
            "folder_permissions": {
                "defaults": {},
                "view_mode": {
                    "emcservice": "view",
                    "emcmonitor": "view"
                },
                "edit_mode": {
                    "emcservice": "edit",
                    "emcmonitor": "view"
                }
            }
        }
    }
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/influxdb/templates/config.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#

apiVersion: v1
kind: ConfigMap
metadata:
  name: "RELEASE-NAME-influxdb"
  labels:
    release: RELEASE-NAME
data:
  influxdb.conf: |+
    reporting-disabled = true
    bind-address = ":8088"

    [meta]
      dir = "/data/influxdb/meta"
      retention-autocreate = true
      logging-enabled = true

    [data]
      dir = "/data/influxdb/data"
      wal-dir = "/data/influxdb/wal"
      query-log-enabled = true
      cache-max-memory-size = 1073741824
      cache-snapshot-memory-size = 26214400
      cache-snapshot-write-cold-duration = "10m0s"
      compact-full-write-cold-duration = "4h0m0s"
      max-series-per-database = 1000000
      max-values-per-tag = 100000
      index-version = "tsi1"
      trace-logging-enabled = false

    [coordinator]
      write-timeout = "10s"
      max-concurrent-queries = 0
      query-timeout = "0s"
      log-queries-after = "0s"
      max-select-point = 0
      max-select-series = 0
      max-select-buckets = 0

    [retention]
      enabled = true
      check-interval = "30m0s"

    [shard-precreation]
      enabled = true
      check-interval = "10m0s"
      advance-period = "30m0s"

    [admin]
      enabled = false
      bind-address = ":8083"
      https-enabled = false
      https-certificate = "/etc/ssl/influxdb.pem"

    [monitor]
      store-enabled = false
      store-database = "_internal"
      store-interval = "10s"

    [subscriber]
      enabled = true
      http-timeout = "30s"
      insecure-skip-verify = false
      ca-certs = ""
      write-concurrency = 40
      write-buffer-size = 1000

    [http]
      enabled = true
      bind-address = ":8086"
      flux-enabled = true
      auth-enabled = false
      log-enabled = true
      write-tracing = false
      pprof-enabled = true
      https-enabled = false
      https-certificate = "/etc/ssl/influxdb.pem"
      https-private-key = ""
      max-row-limit = 10000
      max-connection-limit = 0
      shared-secret = "beetlejuicebeetlejuicebeetlejuice"
      realm = "InfluxDB"
      unix-socket-enabled = false
      bind-socket = "/var/run/influxdb.sock"

    [logging]
      format =  "auto"
      level =  "info"
      supress-logo = false
  endpoints.json: |+
    [
      {
        "id": "RELEASE-NAME-influxdb-0",
        "partition_id": "0",
        "ip": "RELEASE-NAME-influxdb-0.RELEASE-NAME-influxdb.dellemc-sf426-domain-c45.svc.cluster.local",
        "http_port": "8086",
        "rpc_port": "8088"

      },
      {
        "id": "RELEASE-NAME-influxdb-1",
        "partition_id": "0",
        "ip": "RELEASE-NAME-influxdb-1.RELEASE-NAME-influxdb.dellemc-sf426-domain-c45.svc.cluster.local",
        "http_port": "8086",
        "rpc_port": "8088"

      },
      {
        "id": "RELEASE-NAME-influxdb-2",
        "partition_id": "0",
        "ip": "RELEASE-NAME-influxdb-2.RELEASE-NAME-influxdb.dellemc-sf426-domain-c45.svc.cluster.local",
        "http_port": "8086",
        "rpc_port": "8088"

      }
    ]
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/influxdb/templates/cron-config.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#

apiVersion: v1
kind: ConfigMap
metadata:
  name: RELEASE-NAME-influxdb-cron-config
  labels:
    app.kubernetes.io/instance: RELEASE-NAME
data:
  restore_downtime_ranges_cmd: |+
    SHELL=/bin/bash
    @hourly root source /etc/pod.env; /restore_downtime_ranges.sh cron 127.0.0.1 8086 &>> /var/log/recover.log
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/influxdb/templates/init-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "RELEASE-NAME-influxdb-init"
  labels:
    release: RELEASE-NAME
data:
  init.iql: |
    CREATE DATABASE "monitoring_main" WITH DURATION 60d SHARD DURATION 10d NAME "default"
    CREATE DATABASE "monitoring_op" WITH DURATION 5d SHARD DURATION 5d NAME "default"
    CREATE DATABASE "monitoring_last" WITH DURATION 1d SHARD DURATION 1d NAME "default"
    CREATE DATABASE "monitoring_vdc" WITH DURATION 60d SHARD DURATION 10d NAME "default"
    CREATE DATABASE "monitoring_meta" WITH DURATION 60d SHARD DURATION 10d NAME "default"
    CREATE DATABASE "monitoring_rt" WITH DURATION 1h SHARD DURATION 1h NAME "default"
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/influxdb/templates/replicas-config.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#

apiVersion: v1
kind: ConfigMap
metadata:
  name: RELEASE-NAME-influxdb-replicas
  labels:
    release: RELEASE-NAME
# data values will be filled via influxdb-operator
# it is not possible to use replicas field here
# as in this case ConfigMap data wll be reset to default values when using helm upgrade
# and all influxdb partitions history information will be lost.
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/influxdb/templates/telegraf-sidecar-config.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#

apiVersion: v1
kind: ConfigMap
metadata:
  name: RELEASE-NAME-influxdb-telegraf-sidecar-custom-config
  labels:
    app.kubernetes.io/instance: RELEASE-NAME
data:
  custom.conf: |+

    [[inputs.influxdb]]
      ## Works with InfluxDB debug endpoints out of the box,
      ## but other services can use this format too.
      ## See the influxdb plugin's README for more details.

      ## Multiple URLs from which to read InfluxDB-formatted JSON
      ## Default is "http://localhost:8086/debug/vars".
      interval = "300s"
      urls = [
      "http://127.0.0.1:8086/debug/vars"
      ]
      name_prefix = "tsdb_"

    [[inputs.procstat]]
      interval = "300s"
      # need using full path to executable, because native PIDFinder match exe pattern as substring in `exe` symlink.
      exe = "^/usr/bin/influxd$"
      pid_finder = "native"
      # 'exe' and 'pattern' are excluded here and below to unify columns in Flux tables
      # measurement 'procstat_lookup' is not necessary for our use cases
      tagexclude = ["exe"]
      namedrop = ["procstat_lookup"]
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/prometheus-alerts/templates/alertmanager_config.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
apiVersion: v1
kind: ConfigMap
metadata:
  name: "RELEASE-NAME-prometheus-alerts-alertmanager-config"
  labels:
    app: "RELEASE-NAME-prometheus-alerts"
    chart: "prometheus-alerts-0.54.0"
    release: RELEASE-NAME
data:
  alertmanager.yaml: |-
    route:
      group_by: [...]

      # When a new group of alerts is created by an incoming alert, wait at
      # least 'group_wait' to send the initial notification.
      # This way ensures that you get multiple alerts for the same group that start
      # firing shortly after another are batched together on the first
      # notification.
      group_wait: 1s

      # When the first notification was sent, wait 'group_interval' to send a batch
      # of new alerts that started firing for that group.
      group_interval: 5m

      # If an alert has successfully been sent, wait 'repeat_interval' to
      # resend them.
      repeat_interval: 2h

      # A default receiver
      receiver: k8s

    receivers:
      - name: 'k8s'
        k8sevent_configs:
          - namespace: "dellemc-sf426-domain-c45"
            application: "objectscale-monitoring"
            component: "objectscale-monitoring"
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/prometheus-alerts/templates/alerts_config.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
apiVersion: v1
kind: ConfigMap
metadata:
  name: "RELEASE-NAME-prometheus-alerts-alerts-config"
  labels:
    app: "RELEASE-NAME-prometheus-alerts"
    chart: "prometheus-alerts-0.54.0"
    release: RELEASE-NAME
data:
  process.tmpl: |-
    |> map(fn: (r) => ({
        _value: r._value,
        type: r._type,
        symptom_id:
           if r._type == "Info" then "{{ index .Symptoms "Info" }}"
           else if r._type == "Warning" then "{{ index .Symptoms "Warning" }}"
           else if r._type == "Error" then "{{ index .Symptoms "Error" }}"
           else if r._type == "Critical" then "{{ index .Symptoms "Critical" }}"
           else ""
    }))
  alerts.yaml: |-
    groups:
      - name: "objectscale-monitoring"
        rules:
          - alert: "CAP_1111"
            range: 30m
            expr: |-
              // alert on low total objstore capacity
              
              thrsh_warning=70
              thrsh_error=80
              thrsh_critical=85
              
              from(bucket: "monitoring_vdc")
              |> filter(fn: (r) => r._measurement == "cq_capacity_region" and (r._field == "used" or r._field == "total_i"))
              |> range(start: {{ .Start }}, stop: {{ .Stop }})
              |> last()
              |> pivot(rowKey:["_time"], columnKey: ["_field"], valueColumn: "_value")
              |> group(columns: ["release_name"])
              |> map(fn: (r) => ({_value: (r.used*100)/r.total_i}))
              |> keep(columns: ["_value", "release_name"])
              |> filter(fn: (r) => r._value >= thrsh_warning)
              |> map(fn: (r) => ({
                _value: r._value,
                _type: if r._value >= thrsh_critical then "Critical"
                  else if r._value >= thrsh_error then "Error"
                  else "Warning", 
                threshold: if r._value >= thrsh_critical then string(v: thrsh_critical)
                  else if r._value >= thrsh_error then string(v: thrsh_error)
                  else string(v: thrsh_warning)}))
              |> group(columns: ["release_name", "threshold"])
              
            annotations:
              reason: "High usage objectscale space"
              message: "Objectscale capacity usage is {{ $value }}%, crosses threshold value {{ $labels.threshold }}%"
            symptoms:
              - id: OBJSC-MON-1111
                types:
                  - Warning
              - id: OBJSC-MON-1112
                types:
                  - Error
              - id: OBJSC-MON-1113
                types:
                  - Critical
          - alert: "MH_4019"
            range: 30m
            expr: |-
              // Simple check for telegraf system metrics availability
              // In fact by such query we only checking liveness of telegraf component
              
              import "csv"
              
              // fictive data to handle empty response case
              d = "#datatype,string,long,long
              #group,false,false,false
              #default,_result,,
              ,result,table,_value
              ,,0,0
              "
              
              f = csv.from(csv: d)
              
              m = from(bucket: "monitoring_op")
              |> filter(fn: (r) => r._measurement =~ /tsdb_telegraf_internal_.*/)
              |> range(start: {{ .Start }}, stop: {{ .Stop }})
              |> last()
              |> group()
              
              union(tables:[m,f])
              |> count()
              // we have one fictive record for case of no data from m query, so compare with 2
              |> filter(fn: (r) => r._value < 2)
              |> map(fn: (r) => ({
              // keep value to not fail in process.tmpl
                  _value: r._value,
                  _reason: "No data is pushed to the monitoring framework for the last 30 minutes",
                  _message: "Data recorded in TSDB is lagging by 30 mins",
                  _type: "Critical"
                }))
              
            annotations:
              reason: "No data has been pushed to the objectscale monitoring framework for the last 30 minutes"
              message: "No data has been pushed to the objectscale monitoring framework for the last 30 minutes"
            symptoms:
              - id: OBJSC-MON-4019
                types:
                  - Critical
          - alert: "OBJSC_MON_4021"
            range: 35m
            expr: |-
              threshold = 1800000000000 //30 minutes in nanoseconds
              
              all=from(bucket: "monitoring_op")
              |> filter(fn: (r) => r._measurement == "kubernetes_persistentvolumeclaim" and r.pvc_name =~ /influxdb-[0-9]+/ and r._value > 0)
              |> range(start: {{ .Start }}, stop: {{ .Stop }})
              |> keep(columns: ["_time", "pvc_name", "_value"])
              |> group(columns: ["pvc_name", "_value"])
              
              first=all |> first()
              last=all |> last()
              
              join(tables: {f:first, l:last}, on: ["pvc_name", "_value"])
              |> map(fn: (r) => ({duration: uint(v:r._time_l)-uint(v:r._time_f), _value: r._value }))
              |> filter(fn: (r) => r.duration >= threshold)
              |> map(fn: (r) => ({
                  _value: r._value,
                  _reason: "InfluxDB PVC " + r.pvc_name + " has a bad state for the last 30 minutes",
                  _message: "InfluxDB PVC " + r.pvc_name + " has a bad state for the last 30 minutes",
                  _type: "Critical"
                }))
              |> group(columns: ["pvc_name", "_message", "_reason"])
            annotations:
              reason: "{{ $labels._reason }}"
              message: "{{ $labels._message }}"
            symptoms:
              - id: OBJSC-MON-4021
                types:
                  - Critical
          - alert: "OBJSC_MON_4022"
            range: 35m
            expr: |-
              threshold = 1800000000000 //30 minutes in nanoseconds
              
              all=from(bucket: "monitoring_op")
              |> filter(fn: (r) => r._measurement == "kubernetes_persistentvolumeclaim" and r.pvc_name =~ /rsyslog-[0-9]+/ and r._value > 0)
              |> range(start: {{ .Start }}, stop: {{ .Stop }})
              |> keep(columns: ["_time", "pvc_name", "_value"])
              |> group(columns: ["pvc_name", "_value"])
              
              first=all |> first()
              last=all |> last()
              
              join(tables: {f:first, l:last}, on: ["pvc_name", "_value"])
              |> map(fn: (r) => ({duration: uint(v:r._time_l)-uint(v:r._time_f), _value: r._value }))
              |> filter(fn: (r) => r.duration >= threshold)
              |> map(fn: (r) => ({
                  _value: r._value,
                  _reason: "Rsyslog PVC " + r.pvc_name + " has a bad state for the last 30 minutes",
                  _message: "Rsyslog PVC " + r.pvc_name + " has a bad state for the last 30 minutes",
                  _type: "Critical"
                }))
              |> group(columns: ["pvc_name", "_message", "_reason"])
            annotations:
              reason: "{{ $labels._reason }}"
              message: "{{ $labels._message }}"
            symptoms:
              - id: OBJSC-MON-4022
                types:
                  - Critical
          - alert: "OBJSC_MON_4023"
            range: 30m
            expr: |-
              thrsh_warning=70
              thrsh_error=80
              thrsh_critical=90
              
              from(bucket: "monitoring_op")
              |> filter(fn: (r) => r._measurement == "disk"
                and r.host =~ /influxdb-[0-9]+/
                and r._field == "used_percent"
                and r.path == "/pv")
              |> range(start: {{ .Start }}, stop: {{ .Stop }})
              |> last()
              |> keep(columns: ["host", "_value"])
              |> filter(fn: (r) => r._value >= thrsh_warning)
              |> map(fn: (r) => ({
                _value: int(v: r._value),
                _type: if r._value >= thrsh_critical then "Critical"
                  else if r._value >= thrsh_error then "Error"
                  else "Warning",
                threshold: if r._value >= thrsh_critical then string(v: thrsh_critical)
                  else if r._value >= thrsh_error then string(v: thrsh_error)
                  else string(v: thrsh_warning)}))
              |> group(columns: ["threshold"])
            annotations:
              reason: "Low free space of InfluxDB PVC"
              message: "InfluxDB PVC usage is {{ $value }}%, crosses threshold value {{ $labels.threshold }}%"
            symptoms:
              - id: OBJSC-MON-4023
                types:
                  - Warning
              - id: OBJSC-MON-4024
                types:
                  - Error
              - id: OBJSC-MON-4025
                types:
                  - Critical
          - alert: "OBJSC_MON_4026"
            range: 30m
            expr: |-
              thrsh_warning=70
              thrsh_error=80
              thrsh_critical=90
              
              from(bucket: "monitoring_op")
              |> filter(fn: (r) => r._measurement == "disk"
                and r.host =~ /rsyslog-[0-9]+/
                and r._field == "used_percent"
                and r.path == "/pv")
              |> range(start: {{ .Start }}, stop: {{ .Stop }})
              |> last()
              |> keep(columns: ["host", "_value"])
              |> filter(fn: (r) => r._value >= thrsh_warning)
              |> map(fn: (r) => ({
                _value: int(v: r._value),
                _type: if r._value >= thrsh_critical then "Critical"
                  else if r._value >= thrsh_error then "Error"
                  else "Warning",
                threshold: if r._value >= thrsh_critical then string(v: thrsh_critical)
                  else if r._value >= thrsh_error then string(v: thrsh_error)
                  else string(v: thrsh_warning)}))
              |> group(columns: ["threshold"])
            annotations:
              reason: "Low free space of Rsyslog PVC"
              message: "Rsyslog PVC usage is {{ $value }}%, crosses threshold value {{ $labels.threshold }}%"
            symptoms:
              - id: OBJSC-MON-4026
                types:
                  - Warning
              - id: OBJSC-MON-4027
                types:
                  - Error
              - id: OBJSC-MON-4028
                types:
                  - Critical
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/prometheus-alerts/templates/prometheus_config.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
apiVersion: v1
kind: ConfigMap
metadata:
  name: "RELEASE-NAME-prometheus-alerts-config"
  labels:
    app: "RELEASE-NAME-prometheus-alerts"
    chart: "prometheus-alerts-0.54.0"
    release: RELEASE-NAME
data:
  prometheus.yaml: |-
    global:
      evaluation_interval: 5m

    rule_files:
      - /etc/alerts/alerts.yaml

    alerting:
      alertmanagers:
        - static_configs:
            - targets: ['localhost:9093']

    fluxd:
      url: "http://RELEASE-NAME-fluxd.dellemc-sf426-domain-c45.svc.cluster.local:8093/api/v3/query"

      process_template: "/etc/alerts/process.tmpl"
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/rsyslog-client/templates/cleanup-logs.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#

apiVersion: v1
kind: ConfigMap
metadata:
  name: RELEASE-NAME-rsyslog-client-cleanup-logs-script
  labels:
    app.kubernetes.io/name: RELEASE-NAME-rsyslog-client
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.54.0"
    app.kubernetes.io/part-of: RELEASE-NAME
    helm.sh/chart: rsyslog-client-0.54.0
    release: RELEASE-NAME
data:
  cleanup_logs.sh: |+
    #!/bin/bash

    # get customized watermarks from env file if provided
    if [[ -f /etc/pod.env ]];then
        source /etc/pod.env
    fi

    _log(){
        msg="$*"
        if [[ -n "$msg" ]] ; then
            echo "$(date "+%m%d%Y %T")":  "$msg"
        fi
    }

    MONITORING_LOGS="/var/log"
    _log "Started cleanup script. Logs folder: ${MONITORING_LOGS}"

    test -d "${MONITORING_LOGS}"            || exit 3

    # check if another instance is running (slowly) already
    SELF=$(basename "$0")
    if pidof -o %PPID -x "$SELF" > /dev/null; then
        exit 4
    fi

    while getopts m: flag
    do
        case "${flag}" in
            m) run_mode=${OPTARG};;
        esac
    done

    configure_logrotate=false
    if [[ "$run_mode" == "server" ]]; then
        configure_logrotate=true
    fi

    fs_size_kb=$(df --output=size ${MONITORING_LOGS} | grep -v '1K-blocks')
    fs_size=$(( $fs_size_kb * 1024 ))

    if $configure_logrotate; then
        # TODO: add alert on script failure
        _log "Run /etc/logrotate_autoconf.py script"
        python3 /etc/logrotate_autoconf.py -s ${fs_size} -c /etc/svc_logs_priority_conf.json >> "${MONITORING_LOGS}/logrotate_autoconf.log" 2>&1
    fi

    _log "Run /etc/run_logrotate.sh script with redirecting to /var/log/logrotate.log"
    /etc/run_logrotate.sh >> /var/log/logrotate.log 2>&1

    # only remove compressed log files for now
    LOG_FILE_PATTERN="*.log*.gz" # the index/timestamp could be before or after the .log infix

    CHECK_INTERVAL=10

    du_high_watermark="${LOGS_SIZE_HIGH_WATERMARK:-204800}"
    du_low_watermark="${LOGS_SIZE_LOW_WATERMARK:-153600}"

    # some log files might not get compressed in error conditions,
    # compress them if not modified for a day.
    # assume the file name will be like
    #     messages-20140825-1409004745
    #     rm.log.20140826-165818
    NOT_COMPRESSED_PATTERN=".*20[0-9]{6}-[0-9]{6,10}$"
    find -L "${MONITORING_LOGS}" -regextype posix-egrep -regex "${NOT_COMPRESSED_PATTERN}" \
        -mmin +60 -exec gzip -f {} +

    LOGS_DISK_USAGE=$(du -skL "${MONITORING_LOGS}" | cut -f1)
    _log "Disk usage: $LOGS_DISK_USAGE. High watermark: ${du_high_watermark}."

    if [[ "$LOGS_DISK_USAGE" -gt ${du_high_watermark} ]]; then
        # TODO: alert if this part is executed
        _log "Perform cleanup"

        LOG_LIST_FILE=/tmp/log_list

        # list files in time order
        find -L "${MONITORING_LOGS}" \( -name "${LOG_FILE_PATTERN}" \) \
            -exec stat -c "%Y %n" {} + | sort -n | awk '{print $2}' > ${LOG_LIST_FILE}

        # remove one by one
        i=0
        while read -r file; do
            rm -f "$file"
            _log "Removed $file"

            # check du less frequently to speed up removal
            i=$(( i + 1 ))
            if [[ $(( i % CHECK_INTERVAL)) -eq 0 ]]; then
              usage="$(du -skL ${MONITORING_LOGS} | cut -f1)"
              _log "Disk usage: ${usage}"
              if [[ "${usage}" -le "${du_low_watermark}" ]]; then
                _log "Disk usage ${usage} is below low watermark ${du_low_watermark}"
                break
              fi
            fi
        done < ${LOG_LIST_FILE}

        rm -f ${LOG_LIST_FILE}
    fi
    _log "Finished cleanup script"
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/rsyslog-client/templates/cron-config.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#

apiVersion: v1
kind: ConfigMap
metadata:
  name: RELEASE-NAME-rsyslog-client-cron-config
  labels:
    app.kubernetes.io/name: RELEASE-NAME-rsyslog-client
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.54.0"
    app.kubernetes.io/part-of: RELEASE-NAME
    helm.sh/chart: rsyslog-client-0.54.0
    release: RELEASE-NAME
data:
  cron_logrotate: |+
    * * * * *      root    /etc/cleanup_logs.sh >> /var/log/cleanup_logs.log 2>&1
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/rsyslog-client/templates/logrotate-config.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#

apiVersion: v1
kind: ConfigMap
metadata:
  name: RELEASE-NAME-rsyslog-client-logrotate-config
  labels:
    app.kubernetes.io/name: RELEASE-NAME-rsyslog-client
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.54.0"
    app.kubernetes.io/part-of: RELEASE-NAME
    helm.sh/chart: rsyslog-client-0.54.0
    release: RELEASE-NAME
data:
  svc: |+
    /var/log/*.log
    {
      missingok
      copytruncate
      nocreate
      nosharedscripts
      size=10M
      maxage 14
      rotate 10
      notifempty
      compress
      dateext
      dateformat .%Y%m%d-%H%M%S
    }
  logrotate.conf: |+
    # see "man logrotate" for details
    # rotate log files daily
    daily

    # keep rotated logs for 14 days max
    maxage 14

    # rotate 10 by default
    rotate 10

    # use date as a suffix of the rotated file
    dateext

    # Add a dateformat
    dateformat .%Y%m%d-%H%M%S

    # max size is 5 MB
    size 5M

    # Compress log files
    compress

    # comment these to switch compression to use gzip or another
    # compression scheme
    compresscmd /usr/bin/gzip
    uncompresscmd /usr/bin/gunzip

    # rotate logs as root
    su root root

    # RPM packages drop log rotation information into this directory
    include /etc/logrotate.d
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/rsyslog-client/templates/rsyslog-client-config.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#

apiVersion: v1
kind: ConfigMap
metadata:
  name: RELEASE-NAME-rsyslog-client-config
  # namespace is required for resources created by objectscale-vsphere
  namespace: dellemc-sf426-domain-c45
  labels:
    app.kubernetes.io/name: RELEASE-NAME-rsyslog-client
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.54.0"
    app.kubernetes.io/part-of: RELEASE-NAME
    helm.sh/chart: rsyslog-client-0.54.0
    release: RELEASE-NAME
data:
  rsyslog.conf.template: |+
    #### MODULES ####

    # input module: file
    module(load="imfile")

    #### GLOBAL DIRECTIVES ####

    #### RULES ####

    # input log files
    input(type="imfile"
          File="/var/log/*.log"
          Tag="RELEASE-NAME"
          addMetadata="on"
          Ruleset="handle_multiple_logs"
          Facility="local0"
    )

    _STDOUT_CONF_

    ruleset(name="handle_multiple_logs") {
      # http://www.rsyslog.com/doc/v8-stable/rainerscript/functions.html
      # re_extract(expr, re, match, submatch, no-found)
      set $.suffix=re_extract($!metadata!filename, "(.*)/([^/]*)", 0, 2, "all.log");
      set $.pod_name=getenv("POD_NAME");
      call sendToLogserver
    }

    ruleset(name="handle_stdout_logs") {
      # http://www.rsyslog.com/doc/v8-stable/rainerscript/functions.html
      # re_extract(expr, re, match, submatch, no-found)
      set $.container_name=re_extract($!metadata!filename, "(.*)/([^/]*)/([^/]*)", 0, 2, "unknown_container");
      set $.log_name=re_extract($!metadata!filename, "(.*)/([^/]*)", 0, 2, "all.log");
      set $.suffix= $.container_name & ".stdout." & $.log_name;
      set $.pod_name=getenv("POD_NAME");
      call sendToLogserver
    }

    # output template
    template(name="FileFormat" type="string"
    string= "<%PRI%>%TIMESTAMP% %HOSTNAME% %syslogtag%__%$.pod_name%__%$.suffix%%msg:::sp-if-no-1st-sp%%msg:::drop-last-lf%\n"
            )

    ruleset(name="sendToLogserver") {
      action(type="omfwd"
          Target="_RSYSLOG_POD_NAME_.RELEASE-NAME-rsyslog.dellemc-sf426-domain-c45.svc.cluster.local"
          Port="10514"
          Protocol="tcp"
          Template="FileFormat" )
    #    action.resumeRetryCount=100
    #    queue.type=linkedList queue.size=10000)
    }
  rsyslog_stdout.conf.template: |+
    input(type="imfile"
          File="_CONTAINER_DIR_/*.log"
          Tag="RELEASE-NAME"
          addMetadata="on"
          Ruleset="handle_stdout_logs"
          Facility="local0"
    )
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/rsyslog/templates/configmap.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#

apiVersion: v1
kind: ConfigMap
metadata:
  name: RELEASE-NAME-rsyslog
  labels:
    app.kubernetes.io/name: RELEASE-NAME-rsyslog
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.54.0"
    app.kubernetes.io/part-of: RELEASE-NAME
    helm.sh/chart: rsyslog-0.54.0
    release: RELEASE-NAME
data:
  rsyslog.conf: |+
    #### MODULES ####
    # rsyslog stat metrics module
    module(load="impstats"
      interval="300"
      # without stream logging ruleset will not work
      log.syslog="on"
      log.file="/var/log/rsyslog_metrics"
      format="json"
      ruleset="ProcessStats"
    )

    # output module, run custom bin
    module(load="omprog")

    # input module: unix socket
    module(load="imtcp")

    # input module: structured data parser
    module(load="mmpstrucdata")

    #### RULES ####

    # avoid conversion of tabs to #011 characters
    global(
      parser.escapecontrolcharactertab="off"
    )

    template(name="jsonLogForwardFormat" type="string"
         string="{\"cluster\":\"unknown\",\"host\":\"%$.my_hostname%\",\"message\":\"%rawmsg:::json%\"}\n")

    # input unix socket
    input(type="imtcp" port="10514" ruleset="RemoteLogProcess")

    # output template
    # With ':2:$' we cut incoming msg from second symbol till the end of line so by this way we remove unexpected 'extra space'
    # according with %PROPERTY_NAME[:FROM_CHAR:TO_CHAR:OPTION]%
    # More info in OBSDEF-4384
    template(name="OnlyMsg" type="string" string="%msg:2:$:drop-last-lf%\n")

    # output template for messages from fluent-bit
    template(name="OnlyMsgFB" type="string" string="%msg:::drop-last-lf%\n")

    # 3 duplicated templates with different names to fix "duplicated" metrics from impstat
    # output file path
    template(name="RemoteLogSavePathOnlyMsgFB" type="list") {
        constant(value="/var/log")
        constant(value="/")
        property(name="$.logpath" )
    }
    # output file path
    template(name="RemoteLogSavePathOnlyMsg" type="list") {
        constant(value="/var/log")
        constant(value="/")
        property(name="$.logpath" )
    }
    # output file path
    template(name="RemoteLogSavePathRSYSLOG_FileFormat" type="list") {
        constant(value="/var/log")
        constant(value="/")
        property(name="$.logpath" )
    }

    # process rsyslog metrics ruleset
    ruleset(name="ProcessStats") {
        action(
          type="omprog"
          binary="/usr/bin/python3 /etc/process_rsyslog_stat.py"
        )
    }

    # output ruleset
    ruleset(name="RemoteLogProcess") {
        # For facility local7 (23) set log filename from k8s structured data provided by fluent-bit
        if ( $syslogfacility == 23 ) then
        {
            action(type="mmpstrucdata")
            set $.logpath = $!rfc5424-sd!kubernetes!release & "/" & $!rfc5424-sd!kubernetes!pod_name & "/" & $!rfc5424-sd!kubernetes!container_name & ".stdout.log";
            action(type="omfile" dynaFileCacheSize="1024" dynaFile="RemoteLogSavePathOnlyMsgFB" template="OnlyMsgFB"
            flushOnTXEnd="off" asyncWriting="on" flushInterval="1" ioBufferSize="64k")
        } else if ( $syslogfacility >= 16 ) then
        # For facilities local0-6 set log filename from $programname field: replace __ with /
        # Message has arbitary format, syslog fields are not used
        {
            set $.logpath = replace($programname, "__", "/");
            action(type="omfile" dynaFileCacheSize="1024" dynaFile="RemoteLogSavePathOnlyMsg" template="OnlyMsg"
            flushOnTXEnd="off" asyncWriting="on" flushInterval="1" ioBufferSize="64k")
        # Logs with filename defined from facility
        # Message has syslog format, syslog fields are used
        } else {
            if (($syslogfacility == 0)) then {
                set $.logpath = "kern";
            } else if (($syslogfacility == 4) or ($syslogfacility == 10)) then {
                set $.logpath = "auth";
            } else if (($syslogfacility == 9) or ($syslogfacility == 15)) then {
                set $.logpath = "cron";
            } else {
                set $.logpath ="syslog";
            }
            # Built-in template RSYSLOG_FileFormat: High-precision timestamps and timezone information
            action(type="omfile" dynaFileCacheSize="1024" dynaFile="RemoteLogSavePathRSYSLOG_FileFormat" template="RSYSLOG_FileFormat"
            flushOnTXEnd="off" asyncWriting="on" flushInterval="1" ioBufferSize="64k")
        }
    }

  process_rsyslog_stat.py: |+
    #
    # Copyright [2021] Dell Inc. or its subsidiaries.
    # All Rights Reserved.
    #
    # This software contains the intellectual property of Dell Inc.
    # or is licensed to Dell Inc. from third parties. Use of this
    # software and the intellectual property contained therein is expressly
    # limited to the terms and conditions of the License Agreement under which
    # it is provided by or on behalf of Dell Inc. or its subsidiaries.
    #
    #
    
    import argparse
    import json
    import logging
    import os
    import traceback
    
    
    def configure_logger():
        logger = logging.getLogger("rsyslog_metrics_parser")
        logger.setLevel(logging.DEBUG)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch = logging.FileHandler("/var/log/rsyslog_metrics_parse.log")
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger
    
    
    def parse_rsyslog_json(input_file, output_file):
        result = []
    
        with open(input_file, 'r+') as fr:
            all_lines = fr.readlines()
            fr.seek(0, os.SEEK_SET)
            fr.truncate()
    
        for line in all_lines:
            # skip empty lines
            if not line.strip():
                continue
            date, jsonstr = line.split(': ', 1)
            jmetrics = json.loads(jsonstr)
    
            jmetrics.update({'_time': date})
            result.append(jmetrics)
    
        with open(output_file, 'w') as fw:
            json.dump(result, fw, sort_keys=True, indent=4)
    
    
    if __name__ == '__main__':
        mylogger = configure_logger()
        argparser = argparse.ArgumentParser(description='Prepare json file with rsyslog metrics for telegraf')
        argparser.add_argument('-i', '--input',
                               default='/var/log/rsyslog_metrics',
                               type=str,
                               help='Path to the input file with json rsyslog metrics')
        argparser.add_argument('-o', '--output',
                               default='/var/log/rsyslog_metrics_parsed.json',
                               type=str,
                               help='Path to the parsed output file for telegraf')
        args = argparser.parse_args()
        try:
            parse_rsyslog_json(args.input, args.output)
        except Exception as e:
            mylogger.error("Some unexpected error happened during parsing: {}".format(e))
            mylogger.error(traceback.format_exc())
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/rsyslog/templates/cron-config.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#

apiVersion: v1
kind: ConfigMap
metadata:
  name: RELEASE-NAME-rsyslog-cron-config
  labels:
    app.kubernetes.io/name: RELEASE-NAME-rsyslog
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.54.0"
    app.kubernetes.io/part-of: RELEASE-NAME
    helm.sh/chart: rsyslog-0.54.0
    release: RELEASE-NAME
data:
  cron_logrotate: |+
    * * * * *      root    /etc/cleanup_logs.sh -m server >> /var/log/cleanup_logs.log 2>&1
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/rsyslog/templates/logrotate-config.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#

apiVersion: v1
kind: ConfigMap
metadata:
  name: RELEASE-NAME-rsyslog-logrotate-config
  labels:
    app.kubernetes.io/name: RELEASE-NAME-rsyslog
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.54.0"
    app.kubernetes.io/part-of: RELEASE-NAME
    helm.sh/chart: rsyslog-0.54.0
    release: RELEASE-NAME
data:
  svc_logs_priority_conf.json: |+
    {
      "defaults": {
        "__comment": "These parameters are used if they not specified obviously for individual logs and affect directly calculation result",
        "rotation_size": "5MB",
        "retention_days": 30,
        "weight_for_undefined": 2
      },
      "config": {
        "atlas":{
          "global_weight_lim": 50,
          "retention_days": 60,
          "files":{}
        },
        "blob":{
          "global_weight_lim": 50,
          "retention_days": 60,
          "rotation_size": "50MB",
          "files":{}
        },
        "bookkeeper":{
          "files":{}
        },
        "cm":{
          "global_weight_lim": 50,
          "retention_days": 60,
          "rotation_size": "50MB",
          "files":{}
        },
        "control":{
          "global_weight_lim": 50,
          "retention_days": 60,
          "files":{}
        },
        "cp":{
          "files":{}
        },
        "diag":{
          "global_weight_lim": 50,
          "retention_days": 60,
          "files":{}
        },
        "fabric-proxy":{
          "global_weight_lim": 50,
          "retention_days": 60,
          "files":{}
        },
        "fluxd":{
          "global_weight_lim": 10,
          "retention_days": 60,
          "files":{}
        },
        "geoservice":{
          "global_weight_lim": 50,
          "retention_days": 60,
          "rotation_size": "50MB",
          "files":{}
        },
        "geo":{
          "global_weight_lim": 50,
          "retention_days": 60,
          "files":{}
        },
        "grafana":{
          "global_weight_lim": 10,
          "retention_days": 60,
          "files":{
            "boot.log": {
              "rotation_size": "200KB",
              "local_weight_lim": 10
            },
            "confd.log": {
              "rotation_size": "200KB",
              "local_weight_lim": 10
            },
            "fluxd.log": {
              "local_weight_lim": 60
            },
            "grafana-server.log": {
              "local_weight_lim": 60
            },
            "grafana_init.log": {
              "rotation_size": "200KB",
              "local_weight_lim": 20
            }
          }
        },
        "influxdb":{
          "global_weight_lim": 10,
          "retention_days": 60,
          "files": {}
        },
        "management-gateway":{
          "global_weight_lim": 50,
          "retention_days": 60,
          "files":{}
        },
        "metering":{
          "global_weight_lim": 50,
          "retention_days": 60,
          "rotation_size": "50MB",
          "files":{}
        },
        "objmt":{
          "files":{}
        },
        "event":{
          "global_weight_lim": 50,
          "retention_days": 60,
          "rotation_size": "50MB",
          "files":{}
        },
        "objectsvc":{
          "global_weight_lim": 50,
          "retention_days": 60,
          "rotation_size": "50MB",
          "files":{}
        },
        "ons":{
          "files":{}
        },
        "nds":{
          "files":{}
        },
        "pravega":{
          "global_weight_lim": 50,
          "retention_days": 60,
          "files":{}
        },
        "pravega-controller":{
          "global_weight_lim": 50,
          "retention_days": 60,
          "files":{}
        },
        "rep":{
          "files":{}
        },
        "resource":{
          "global_weight_lim": 50,
          "retention_days": 60,
          "files":{}
        },
        "rm":{
          "global_weight_lim": 50,
          "retention_days": 60,
          "rotation_size": "50MB",
          "files":{}
        },
        "s3":{
          "global_weight_lim": 50,
          "retention_days": 60,
          "rotation_size": "50MB",
          "files":{}
        },
        "segment-store":{
          "files":{}
        },
        "sm":{
          "global_weight_lim": 50,
          "retention_days": 60,
          "rotation_size": "50MB",
          "files":{}
        },
        "sr":{
          "global_weight_lim": 50,
          "retention_days": 60,
          "rotation_size": "50MB",
          "files":{}
        },
        "ss":{
          "global_weight_lim": 50,
          "retention_days": 60,
          "rotation_size": "50MB",
          "files":{}
        },
        "ssm":{
          "global_weight_lim": 50,
          "retention_days": 60,
          "rotation_size": "50MB",
          "files":{}
        },
        "storage-topology-tree":{
          "files":{}
        },
        "telegraf":{
          "global_weight_lim": 10,
          "retention_days": 60,
          "files":{}
        },
        "telegraf-prom":{
          "global_weight_lim": 10,
          "retention_days": 60,
          "files":{}
        },
        "throttler":{
          "global_weight_lim": 10,
          "retention_days": 60,
          "files":{}
        },
        "zookeeper":{
          "global_weight_lim": 50,
          "retention_days": 60,
          "rotation_size": "50MB",
          "files":{}
        }
      }
    }

  logrotate.conf: |+
    # see "man logrotate" for details
    # rotate log files daily
    daily

    # keep rotated logs for 14 days max
    maxage 14

    # rotate 10 by default
    rotate 10

    # use date as a suffix of the rotated file
    dateext

    # Add a dateformat
    dateformat .%Y%m%d-%H%M%S

    # max size is 5 MB
    size 5M

    # Compress log files
    compress

    # comment these to switch compression to use gzip or another
    # compression scheme
    compresscmd /usr/bin/gzip
    uncompresscmd /usr/bin/gunzip

    # rotate logs as root
    su root root

    # RPM packages drop log rotation information into this directory
    include /etc/logrotate.d
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/rsyslog/templates/telegraf-sidecar-config.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#

apiVersion: v1
kind: ConfigMap
metadata:
  name: RELEASE-NAME-rsyslog-telegraf-sidecar-custom-config
  labels:
    app.kubernetes.io/name: RELEASE-NAME-rsyslog
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.54.0"
    app.kubernetes.io/part-of: RELEASE-NAME
    helm.sh/chart: rsyslog-0.54.0
    release: RELEASE-NAME
data:
  custom.conf: |+

    [[inputs.procstat]]
      interval = "300s"
      # need using full path to executable, because native PIDFinder match exe pattern as substring in `exe` symlink.
      exe = "^/usr/sbin/rsyslogd$"
      pid_finder = "native"
      # 'exe' and 'pattern' are excluded here and below to unify columns in Flux tables
      # measurement 'procstat_lookup' is not necessary for our use cases
      tagexclude = ["exe"]
      namedrop = ["procstat_lookup"]

    [[inputs.file]]
      files = ["/pv/rsyslog_metrics_parsed.json"]
      name_override = "rsyslog_metrics"
      data_format = "json"
      json_time_key = "_time"
      json_time_format = "Mon Jan _2 15:04:05 2006"
      tag_keys = ["name", "origin"]
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/telegraf-sidecar/templates/telegraf-config.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#

apiVersion: v1
kind: ConfigMap
metadata:
  name: RELEASE-NAME-telegraf-sidecar
  labels:
    app.kubernetes.io/instance: RELEASE-NAME
data:
  telegraf.conf: |+# Configuration for telegraf agent
    [ agent ]
      ## Default data collection interval for all inputs
      ## Set to 10 seconds to make sure data is sent to output as soon as possible
      interval = "10s"

      ## Default flushing interval for all outputs. You shouldn't set this below
      ## interval. Maximum flush_interval will be flush_interval + flush_jitter
      flush_interval = "10s"

      ## Jitter the flush interval by a random amount. This is primarily to avoid
      ## large write spikes for users running a large number of telegraf instances.
      ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
      flush_jitter = "10s"

      debug = true

      ## Following limitation of batch size and buffer limit ensures memory use <70MB
      ## when 2 InfluxDB instances are down.
      ## See README.md and MONITORING-241
      metric_batch_size = 1000
      metric_buffer_limit = 4000

    [[outputs.influxdb]]
      skip_database_creation = true
      urls = ["http://RELEASE-NAME-telegraf.dellemc-sf426-domain-c45.svc.cluster.local:11002"]
      timeout = "30s"
      database = "default"
      retention_policy = "default"

    # Read metrics about disk usage by mount point
    [[inputs.disk]]
      interval = "300s"
      ## By default stats will be gathered for all mount points.
      ## Set mount_points will restrict the stats to only the specified mount points.
      mount_points = ["/", "/pv"]
      fieldpass = ["free", "used", "total", "used_percent", "inodes*"]

    [[processors.override]]
      namepass = [ "disk" ]
      tagexclude = ["device", "fstype", "mode"]
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/telegraf/templates/configmap-confd-template.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
apiVersion: v1
kind: ConfigMap
metadata:
  name: RELEASE-NAME-telegraf-confd-template
  labels:
    app.kubernetes.io/name: RELEASE-NAME-telegraf
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
data:
  telegraf_flex.toml: |+
    [template]
    src = "telegraf_flex.conf.tmpl"
    dest = "/etc/telegraf/telegraf.conf"
    keys = [
        "/replicas",
    ]
    reload_cmd = "pkill -SIGHUP telegraf"
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/telegraf/templates/configmap-template.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
apiVersion: v1
kind: ConfigMap
metadata:
  name: RELEASE-NAME-telegraf-config-template
  labels:
    app.kubernetes.io/name: RELEASE-NAME-telegraf
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
data:
  telegraf_flex.conf.tmpl: |+
    [global_tags]
      release_name = "RELEASE-NAME"
    [agent]
      collection_jitter = "0s"
      debug = false
      flush_interval = "10s"
      flush_jitter = "0s"
      interval = "10s"
      logfile = ""
      metric_batch_size = 1000
      metric_buffer_limit = 10000
      omit_hostname = true
      precision = ""
      quiet = false
      round_interval = true
    [[processors.override]]
      namepass = [
        "tsdb_influxdb_httpd"
      ]
      tagexclude = [
        "node_id",
        "ip"
      ]
    
    [[inputs.influxdb_listener]]
      read_timeout = "30s"
      service_address = ":11002"
      write_timeout = "30s"
    [[inputs.internal]]
      collect_memstats = true
      interval = "300s"
      name_prefix = "tsdb_telegraf_"
      [inputs.internal.tags]
        host = "$HOSTNAME"
        tag = "system"
    [[inputs.prometheus]]
      bearer_token = "/var/run/secrets/kubernetes.io/serviceaccount/token"
      insecure_skip_verify = true
      interval = "$COLLECTION_INTERVAL"
      kubernetes_label_selector = "app.kubernetes.io/name=RELEASE-NAME-fluxd"
      monitor_kubernetes_pods = true
      monitor_kubernetes_pods_namespace = "dellemc-sf426-domain-c45"
      name_prefix = "tsdb_fluxd_"
      [inputs.prometheus.tags]
        tag = "system"
    [[inputs.prometheus]]
      bearer_token = "/var/run/secrets/kubernetes.io/serviceaccount/token"
      insecure_skip_verify = true
      interval = "$COLLECTION_INTERVAL"
      kubernetes_label_selector = "app.kubernetes.io/name=csi-baremetal"
      monitor_kubernetes_pods = true
      monitor_kubernetes_pods_namespace = "dellemc-sf426-domain-c45"
      name_prefix = "csi_"
      tagexclude = [
        "cni.projectcalico.org/podIP",
        "cni.projectcalico.org/podIPs",
        "controller-revision-hash",
        "pod-template-generation",
        "pod-template-hash",
        "prometheus.io/path",
        "prometheus.io/port",
        "prometheus.io/scrape",
        "app.kubernetes.io/name",
        "role"
      ]
      [inputs.prometheus.tags]
        host = "$HOSTNAME"
    [[inputs.prometheus]]
      insecure_skip_verify = true
      interval = "$COLLECTION_INTERVAL"
      kubernetes_services = [
        "http://RELEASE-NAME-throttler.dellemc-sf426-domain-c45.svc.cluster.local:8094/metrics"
      ]
      monitor_kubernetes_pods = false
      [inputs.prometheus.tags]
        host = "throttler"
        tag = "system"
    [[inputs.kube_inventory]]
      bearer_token = "/var/run/secrets/kubernetes.io/serviceaccount/token"
      insecure_skip_verify = true
      interval = "$COLLECTION_INTERVAL"
      namespace = ""
      resource_include = [
        "persistentvolumeclaims"
      ]
      tagexclude = [
        "phase"
      ]
      url = "https://kubernetes.default.svc"
    {{- $replicas := atoi (getv "/replicas" "1") }}
    {{- $replicas_per_partition := atoi (getenv "INFLUXDB_REPLICAS_PER_PARTITION" "3") }}
    {{- $partitions_count := div $replicas $replicas_per_partition }}{{range $i, $e := seq 1 ($replicas)}}
  
    [[outputs.influxdb]]
      urls = ["http://RELEASE-NAME-influxdb-{{$i}}.RELEASE-NAME-influxdb.dellemc-sf426-domain-c45.svc.cluster.local:8086"]
      database = "monitoring_main"
      insecure_skip_verify = true
      namepass = ["tsdb_influxdb_httpd"]
      retention_policy = "default"
      skip_database_creation = true
      tagexclude = ["cluster", "release_name"]
      [outputs.influxdb.tagpass]
        host = ["RELEASE-NAME-influxdb-{{$i}}"]
  
    [[outputs.influxdb]]
      urls = ["http://RELEASE-NAME-influxdb-{{$i}}.RELEASE-NAME-influxdb.dellemc-sf426-domain-c45.svc.cluster.local:8086"]
      database = "monitoring_op"
      insecure_skip_verify = true
      namepass = ["tsdb_influxdb_httpd"]
      retention_policy = "default"
      skip_database_creation = true
      tagexclude = ["cluster", "release_name"]
      [outputs.influxdb.tagpass]
        host = ["RELEASE-NAME-influxdb-{{$i}}"]
  
    [[outputs.influxdb]]
      urls = ["http://RELEASE-NAME-influxdb-{{$i}}.RELEASE-NAME-influxdb.dellemc-sf426-domain-c45.svc.cluster.local:8086"]
      database = "monitoring_last"
      insecure_skip_verify = true
      namepass = ["tsdb_influxdb_httpd"]
      retention_policy = "default"
      skip_database_creation = true
      tagexclude = ["cluster", "release_name"]
      [outputs.influxdb.tagpass]
        host = ["RELEASE-NAME-influxdb-{{$i}}"]
  
    [[outputs.influxdb]]
      urls = ["http://RELEASE-NAME-influxdb-{{$i}}.RELEASE-NAME-influxdb.dellemc-sf426-domain-c45.svc.cluster.local:8086"]
      database = "monitoring_vdc"
      insecure_skip_verify = true
      namepass = ["tsdb_influxdb_httpd"]
      retention_policy = "default"
      skip_database_creation = true
      tagexclude = ["cluster", "release_name"]
      [outputs.influxdb.tagpass]
        host = ["RELEASE-NAME-influxdb-{{$i}}"]{{- end }}
    {{ $release_name := getenv "RELEASE_NAME" "" }}
    {{ $release_namespace := getenv "RELEASE_NAMESPACE" "" }}
    {{ $scheme := getenv "SCHEME" "http" }}{{range $i, $e := seq 1 ($replicas)}}{{- $urls := print $scheme "://" $release_name "-influxdb-" $i "." $release_name "-influxdb." $release_namespace ".svc.cluster.local:8086" }}
    {{ $partition := div $i $replicas_per_partition -}}[[outputs.influxdb]]{{- if ne $urls "" }}
      urls = ["{{$urls}}"]{{- end }}
      database = "monitoring_op"
      fielddrop = [
        "*Timestamp"
      ]
      insecure_skip_verify = true
      namepass = [
        "tsdb_fluxd_http_api_request_duration_seconds",
        "tsdb_fluxd_http_api_requests_total",
        "tsdb_fluxd_host_state_change_total",
        "tsdb_fluxd_host_state",
        "tsdb_fluxd_host_selected",
        "tsdb_fluxd_host_selection_failed",
        "tsdb_fluxd_hl_*",
        "tsdb_fluxd_query_control_executing_duration_seconds",
        "tsdb_fluxd_http_lb_request_forwarded",
        "tsdb_fluxd_query_control_panics_total",
        "tsdb_influxdb",
        "tsdb_influxdb_database",
        "tsdb_influxdb_queryExecutor",
        "tsdb_telegraf_internal_gather",
        "tsdb_telegraf_internal_write",
        "cquerier_*",
        "disk",
        "procstat",
        "csi_*",
        "kubernetes_persistentvolumeclaim",
        "rsyslog_metrics"
      ]
      retention_policy = "default"
      skip_database_creation = true
      tagexclude = [
        "vdc",
        "storage_pool",
        "cluster",
        "release_name"
      ]
      timeout = "30s"{{- if ne $partitions_count 1 }}
      [outputs.influxdb.hashpass]
        partitionpass = {{$partition}}
        partitions = {{$partitions_count}}{{- end }}
    [[outputs.influxdb]]{{- if ne $urls "" }}
      urls = ["{{$urls}}"]{{- end }}
      database = "monitoring_vdc"
      insecure_skip_verify = true
      namepass = [
        "cq_*"
      ]
      retention_policy = "default"
      skip_database_creation = true
      tagexclude = [
        "host",
        "node_id",
        "vdc",
        "storage_pool",
        "cluster"
      ]
      timeout = "30s"{{- if ne $partitions_count 1 }}
      [outputs.influxdb.hashpass]
        partitionpass = {{$partition}}
        partitions = {{$partitions_count}}{{- end }}
    
    {{ end -}}
    {{- $urls := "" }}
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/throttler/templates/config_throttler.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: RELEASE-NAME-throttler-config
  labels:
    app: "RELEASE-NAME-throttler"
    chart: "throttler-0.54.0"
    release: RELEASE-NAME
data:
  throttler.conf: |+
    ### Throttler configuration file.
    ###
    ### [throttler]
    ###
    ### Contains the parameters to configure throttler engine.
    ###
    [throttler]
      # Used to detect count of iterations which should be done by throttler before shutdown.
      # By default, iterations-count is set to 0 which means that iterations count is unlimited.
      iterations-count = 0

      # Used to detect which metrics should be throttled: "service", "system", "all"
      throttle-metrics-type = "system"

      # Used to detect throttler scrape interval.
      scrape-interval-minutes = 5

      # Used to detect maximum available metrics' ingest rate (points per second).
      max-ingest-rate = 350

      # Used to detect maximum available metrics' cardinality.
      max-metric-cardinality = 10000

      # Used to increase current metrics push interval to time series database
      # and pull interval (for system metrics) if the InfluxDB exceeded its limit
      increase-metrics-interval-sec = 60

      # Set the directory for all throttler's log messages
      log-dir = "/var/log"

    ###
    ### [influx]
    ### Contains the list with the necessary parameters for creating the connections to the InfluxDB instances.
    ### These instances are used to detect current ingest rate per each time series database.
    ###
    [influx]
      # List of InfluxDB endpoints in this format: host:port, separated by comma.
      endpoints = ["RELEASE-NAME-influxdb-0.RELEASE-NAME-influxdb.dellemc-sf426-domain-c45.svc.cluster.local:8086,RELEASE-NAME-influxdb-1.RELEASE-NAME-influxdb.dellemc-sf426-domain-c45.svc.cluster.local:8086,RELEASE-NAME-influxdb-2.RELEASE-NAME-influxdb.dellemc-sf426-domain-c45.svc.cluster.local:8086"]

    ###
    ### [cf]
    ###
    ### Contains the parameters which are needed for communication with the cf service REST interface.
    ###
    [cf]
      # Node with cf instance.
      host = "127.0.0.1"

      # Used to get auth token for the further communication.
      username = "emcservice"

      # Port of the service which is listening all incoming requests.
      port = 4443

      # Http scheme which is used for cf requests.
      http-scheme = "https"

      # Url to get auth token
      auth-token-url = "/login"

      # Base url for all cf specific requests.
      auth-token-file = "/data/throttler/conf/.authcount"

    ###
    ### [http]
    ###
    ### Contains the parameters for http client.
    ###
    [http]
      # Timeout for the outgoing http requests.
      timeout-sec = 30

    ###
    ### [cq]
    ###
    ### Contains the parameters for CQ service.
    ###
    [cq]
      # Timeout for the outgoing http requests.
      fluxd-url = "http://RELEASE-NAME-fluxd.dellemc-sf426-domain-c45.svc.cluster.local:8093/api/v3/query"
      # Telegraf URL is sent to Fluxd with http.to() function
      # and should be handled on Fluxd side
      telegraf-url = "http://RELEASE-NAME-telegraf.dellemc-sf426-domain-c45.svc.cluster.local:11002/write"
      interval = "5m"
      template-folder = "/etc/cq_flex"

    [alerter]
      fluxd-url = "http://RELEASE-NAME-fluxd.dellemc-sf426-domain-c45.svc.cluster.local:8093/api/v3/query"
      interval = "5m"
      alerts-folder = "/etc/alerter/"
      alerts-conf-path = "/etc/alerter/alerts.yaml"
      event-template = "event.tmpl"

    [fluxd-alerter]
      conf-path = "/etc/fluxd-alerter/config.yaml"

    [influxdb-replicas]
      replicas-config-map-name = "RELEASE-NAME-influxdb-replicas"
      replicas-config-name = "replicas.json"
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/throttler/templates/cq.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "RELEASE-NAME-throttler-cq"
  labels:
    release: RELEASE-NAME
data:
  CQ.json: |+
    [
      {
        "template":"object-stores.tmpl",
        "min-depth":"5m",
        "max-depth":"5m",
        "start-offset":"0m",
        "keep-offset":"0m",
        "max-age":"5m",
        "target":"cq_object_stores",
        "value-columns":["_value"],
        "tag-columns":["name"],
        "params":{
          "namespace":"dellemc-sf426-domain-c45"
        },
        "max-retry": 3,
        "sync-query": false
      },
      {
        "template":"capacity-region.tmpl",
        "min-depth":"5m",
        "max-depth":"1h",
        "start-offset":"-6h",
        "keep-offset":"5h",
        "max-age":"1440h",
        "target":"cq_capacity_region",
        "value-columns":["total_i", "used", "available", "reserved", "offline",
          "offline_recovered", "offline_unrecovered"],
        "max-retry": 3,
        "sync-query": false
      },
      {
        "template":"capacity-data-being-processed-region.tmpl",
        "min-depth":"5m",
        "max-depth":"1h",
        "start-offset":"-1h",
        "keep-offset":"0m",
        "max-age":"1440h",
        "target":"cq_capacity_data_being_processed_region",
        "value-columns":["data_being_processed"],
        "max-retry": 3,
        "sync-query": false
      },
      {
        "template":"capacity-used-region.tmpl",
        "min-depth":"5m",
        "max-depth":"1h",
        "start-offset":"-6h",
        "keep-offset":"5h",
        "max-age":"1440h",
        "target":"cq_capacity_used_region",
        "value-columns":["meta_data", "protection_overhead_wo_geo", "protection_overhead_user", "protection_overhead_metadata",
          "system_gc_pending", "system_gc_reclaimed",
          "system_gc_unreclaim", "user_data", "user_gc_pending", "user_gc_reclaimed", "user_gc_unreclaim"],
        "max-retry": 3,
        "sync-query": false
      },
      {
        "template":"capacity-ec-region.tmpl",
        "min-depth":"5m",
        "max-depth":"1h",
        "max-age":"1440h",
        "start-offset":"-6h",
        "keep-offset":"5h",
        "target":"cq_capacity_ec_region",
        "value-columns":["total_coded_data", "total_coding_data"],
        "max-retry":3,
        "sync-query":false
      },
      {
        "template":"capacity-ec-rate-region.tmpl",
        "min-depth":"5m",
        "max-depth":"1h",
        "max-age":"1440h",
        "start-offset":"-6h",
        "keep-offset":"5h",
        "target":"cq_capacity_ec_rate_region",
        "value-columns":["coding_rate"],
        "max-retry":3,
        "sync-query":false
      },
      {
        "template":"rebalance-region.tmpl",
        "min-depth":"5m",
        "max-depth":"1h",
        "max-age":"1440h",
        "start-offset":"-6h",
        "keep-offset":"5h",
        "target":"cq_rebalancing_region",
        "value-columns":["data_rebalanced", "pending_rebalance"],
        "max-retry":3,
        "sync-query":false
      },
      {
        "template":"recover-status-region.tmpl",
        "min-depth":"5m",
        "max-depth":"1h",
        "max-age":"1440h",
        "start-offset":"-6h",
        "keep-offset":"5h",
        "target":"cq_recover_status_region",
        "value-columns":["data_to_recover", "data_recovered"],
        "max-retry":3,
        "sync-query":false
      },
      {
        "template":"gc-stats-region.tmpl",
        "min-depth":"5m",
        "max-depth":"1h",
        "max-age":"1440h",
        "start-offset":"-6h",
        "keep-offset":"5h",
        "target":"cq_gc_data_region",
        "value-columns": ["user_gc_pending", "user_gc_unreclaim", "system_gc_pending", "system_gc_unreclaim", "system_gc_reclaimed", "user_gc_reclaimed"],
        "max-retry": 3,
        "sync-query": false
      },
      {
        "template":"latency-region.tmpl",
        "min-depth":"5m",
        "max-depth":"1h",
        "start-offset": "-30m",
        "keep-offset": "20m",
        "max-age": "1440h",
        "target":"cq_performance_latency_region",
    
        "value-columns":["p50","p99"],
        "tag-columns":["id"],
        "max-retry": 3,
        "sync-query": false
      }
    ]
    
  capacity-data-being-processed-region.tmpl: |+
    import "http"
    import "csv"
    
    padding = csv.from(csv:"#datatype,string,long,dateTime:RFC3339,dateTime:RFC3339,long,string
    #group,false,false,true,false,false,true
    #default,_result,,,,,
    ,result,table,_stop,_time,_value,_field
    ,,0,{{ .Stop }},1970-01-01T00:00:00Z,0,data_being_processed")
    
    last_os = from(bucket: "monitoring_vdc")
    |> filter(fn: (r) => r._measurement == "cq_object_stores")
    |> range(start: {{ .Start }}, stop: {{ .Stop }})
    |> last()
    |> keep(columns:["_time", "_value"])
    |> sort(columns:["_time"])
    |> last()
    
    all_os = from(bucket: "monitoring_vdc")
    |> filter(fn: (r) => r._measurement == "cq_object_stores")
    |> range(start: {{ .Start }}, stop: {{ .Stop }})
    |> last()
    
    // keep only objectstores present in last known point
    objectstores = join(tables: {all_os: all_os, last_os: last_os}, on: ["_time"])
    |> keep(columns:["_stop", "name"])
    |> rename(columns: {_stop: "_time", name: "release_name"})
    
    data = from(bucket: "monitoring_vdc")
    |> filter(fn: (r) => r._measurement == "cq_capacity_data_being_processed" and
                         r._field == "data_being_processed")
    |> range(start: {{ .Start }}, stop: {{ .Stop }})
    |> last()
    |> keep(columns:["_stop", "_field", "_value", "release_name"])
    |> rename(columns: {_stop: "_time"})
    
    res = join(tables: {objectstores: objectstores, data: data}, on: ["_time", "release_name"])
    |> keep(columns:["_time", "_field", "_value"])
    |> sum()
    |> map(fn: (r) => ({_stop:{{ .Stop }}, _value: r._value}))
    
    union(tables: [res, padding])
        |> group(columns:["_field"])
        |> last()
        |> pivot(rowKey:["_stop"],columnKey: ["_field"],valueColumn: "_value")
        |> rename(columns: {_stop: "_time"})
    
  capacity-ec-rate-region.tmpl: |+
    import "http"
    import "csv"
    
    padding = csv.from(csv:"#datatype,string,long,dateTime:RFC3339,dateTime:RFC3339,double,string
    #group,false,false,true,false,false,true
    #default,_result,,,,,
    ,result,table,_stop,_time,_value,_field
    ,,0,{{ .Stop }},1970-01-01T00:00:00Z,0,coding_rate")
    
    last_os = from(bucket: "monitoring_vdc")
    |> filter(fn: (r) => r._measurement == "cq_object_stores")
    |> range(start: {{ .Start }}, stop: {{ .Stop }})
    |> last()
    |> keep(columns:["_time", "_value"])
    |> sort(columns:["_time"])
    |> last()
    
    all_os = from(bucket: "monitoring_vdc")
    |> filter(fn: (r) => r._measurement == "cq_object_stores")
    |> range(start: {{ .Start }}, stop: {{ .Stop }})
    |> last()
    
    // keep only objectstores present in last known point
    objectstores = join(tables: {all_os: all_os, last_os: last_os}, on: ["_time"])
    |> keep(columns:["_stop", "name"])
    |> rename(columns: {_stop: "_time", name: "release_name"})
    
    data = from(bucket: "monitoring_vdc")
    |> filter(fn: (r) => r._measurement == "cq_capacity_ec_rate" and r._field == "coding_rate")
    |> range(start: {{ .Start }}, stop: {{ .Stop }})
    |> last()
    |> keep(columns:["_stop", "_field", "_value", "release_name"])
    |> rename(columns: {_stop: "_time"})
    
    res = join(tables: {objectstores: objectstores, data: data}, on: ["_time", "release_name"])
    |> keep(columns:["_time", "_field", "_value"])
    |> sum()
    |> map(fn: (r) => ({_stop:{{ .Stop }}, _value: r._value}))
    
    union(tables: [res, padding])
        |> group(columns:["_field"])
        |> last()
        |> pivot(rowKey:["_stop"],columnKey: ["_field"],valueColumn: "_value")
        |> rename(columns: {_stop: "_time"})
    
  capacity-ec-region.tmpl: |+
    import "http"
    import "csv"
    
    padding = csv.from(csv:"#datatype,string,long,dateTime:RFC3339,dateTime:RFC3339,double,string
    #group,false,false,true,false,false,true
    #default,_result,,,,,
    ,result,table,_stop,_time,_value,_field
    ,,0,{{ .Stop }},1970-01-01T00:00:00Z,0,total_coded_data
    ,,1,{{ .Stop }},1970-01-01T00:00:00Z,0,total_coding_data")
    
    last_os = from(bucket: "monitoring_vdc")
    |> filter(fn: (r) => r._measurement == "cq_object_stores")
    |> range(start: {{ .Start }}, stop: {{ .Stop }})
    |> last()
    |> keep(columns:["_time", "_value"])
    |> sort(columns:["_time"])
    |> last()
    
    all_os = from(bucket: "monitoring_vdc")
    |> filter(fn: (r) => r._measurement == "cq_object_stores")
    |> range(start: {{ .Start }}, stop: {{ .Stop }})
    |> last()
    
    // keep only objectstores present in last known point
    objectstores = join(tables: {all_os: all_os, last_os: last_os}, on: ["_time"])
    |> keep(columns:["_stop", "name"])
    |> rename(columns: {_stop: "_time", name: "release_name"})
    
    data = from(bucket: "monitoring_vdc")
    |> filter(fn: (r) => r._measurement == "cq_capacity_ec" and (r._field == "total_coded_data" or r._field == "total_coding_data"))
    |> range(start:{{ .Start }},stop:{{ .Stop }})
    |> last()
    |> keep(columns:["_stop", "_field", "_value", "release_name"])
    |> rename(columns: {_stop: "_time"})
    
    res = join(tables: {objectstores: objectstores, data: data}, on: ["_time", "release_name"])
    |> keep(columns:["_time", "_field", "_value"])
    |> sum()
    |> map(fn: (r) => ({_stop:{{ .Stop }}, _value: r._value}))
    
    union(tables: [res, padding])
        |> group(columns:["_field"])
        |> last()
        |> pivot(rowKey:["_stop"],columnKey: ["_field"],valueColumn: "_value")
        |> rename(columns: {_stop: "_time"})
    
  capacity-region.tmpl: |+
    import "http"
    import "csv"
    
    // Aggregated capacity by region: total, used, available, reserved
    // Depends on capacity-vdc CQ: MONITORING-795
    
    padding = csv.from(csv:"#datatype,string,long,dateTime:RFC3339,dateTime:RFC3339,long,string
    #group,false,false,true,false,false,true
    #default,_result,,,,,
    ,result,table,_stop,_time,_value,_field
    ,,0,{{ .Stop }},1970-01-01T00:00:00Z,0,total_i
    ,,1,{{ .Stop }},1970-01-01T00:00:00Z,0,used
    ,,2,{{ .Stop }},1970-01-01T00:00:00Z,0,available
    ,,3,{{ .Stop }},1970-01-01T00:00:00Z,0,reserved
    ,,4,{{ .Stop }},1970-01-01T00:00:00Z,0,offline
    ,,5,{{ .Stop }},1970-01-01T00:00:00Z,0,offline_recovered
    ,,6,{{ .Stop }},1970-01-01T00:00:00Z,0,offline_unrecovered")
    
    last_os = from(bucket: "monitoring_vdc")
    |> filter(fn: (r) => r._measurement == "cq_object_stores")
    |> range(start: {{ .Start }}, stop: {{ .Stop }})
    |> last()
    |> keep(columns:["_time", "_value"])
    |> sort(columns:["_time"])
    |> last()
    
    all_os = from(bucket: "monitoring_vdc")
    |> filter(fn: (r) => r._measurement == "cq_object_stores")
    |> range(start: {{ .Start }}, stop: {{ .Stop }})
    |> last()
    
    // keep only objectstores present in last known point
    objectstores = join(tables: {all_os: all_os, last_os: last_os}, on: ["_time"])
    |> keep(columns:["_stop", "name"])
    |> rename(columns: {_stop: "_time", name: "release_name"})
    
    data = from(bucket: "monitoring_vdc")
    |> filter(fn: (r) => r._measurement == "cq_capacity_vdc" and
                         (r._field == "total_i" or r._field == "used"
                         or r._field == "available" or r._field == "reserved"
                         or r._field == "offline"
                         or r._field == "offline_recovered" or r._field == "offline_unrecovered"))
    |> range(start: {{ .Start }}, stop: {{ .Stop }})
    |> last()
    |> keep(columns:["_stop", "_field", "_value", "release_name"])
    |> rename(columns: {_stop: "_time"})
    
    res = join(tables: {objectstores: objectstores, data: data}, on: ["_time", "release_name"])
    |> keep(columns:["_time", "_field", "_value"])
    |> sum()
    |> map(fn: (r) => ({_stop:{{ .Stop }}, _value: r._value}))
    
    union(tables: [res, padding])
        |> group(columns:["_field"])
        |> last()
        |> pivot(rowKey:["_stop"],columnKey: ["_field"],valueColumn: "_value")
        |> rename(columns: {_stop: "_time"})
    
  capacity-used-region.tmpl: |+
    import "http"
    import "csv"
    
    // Aggregated used capacity by region: to calculate user data, system metadata, protection overhead, garbage
    // Depends on gc-stats, capacity-used-elements CQ: MONITORING-795
    
    padding = csv.from(csv:"#datatype,string,long,dateTime:RFC3339,dateTime:RFC3339,long,string
    #group,false,false,true,false,false,true
    #default,_result,,,,,
    ,result,table,_stop,_time,_value,_field
    ,,0,{{ .Stop }},1970-01-01T00:00:00Z,0,data_being_processed
    ,,1,{{ .Stop }},1970-01-01T00:00:00Z,0,meta_data
    ,,2,{{ .Stop }},1970-01-01T00:00:00Z,0,protection_overhead_wo_geo
    ,,3,{{ .Stop }},1970-01-01T00:00:00Z,0,protection_overhead_user
    ,,4,{{ .Stop }},1970-01-01T00:00:00Z,0,protection_overhead_metadata
    ,,5,{{ .Stop }},1970-01-01T00:00:00Z,0,system_gc_pending
    ,,6,{{ .Stop }},1970-01-01T00:00:00Z,0,system_gc_reclaimed
    ,,7,{{ .Stop }},1970-01-01T00:00:00Z,0,system_gc_unreclaim
    ,,8,{{ .Stop }},1970-01-01T00:00:00Z,0,user_data
    ,,9,{{ .Stop }},1970-01-01T00:00:00Z,0,user_gc_pending
    ,,10,{{ .Stop }},1970-01-01T00:00:00Z,0,user_gc_reclaimed
    ,,11,{{ .Stop }},1970-01-01T00:00:00Z,0,user_gc_unreclaim")
    
    last_os = from(bucket: "monitoring_vdc")
    |> filter(fn: (r) => r._measurement == "cq_object_stores")
    |> range(start: {{ .Start }}, stop: {{ .Stop }})
    |> last()
    |> keep(columns:["_time", "_value"])
    |> sort(columns:["_time"])
    |> last()
    
    all_os = from(bucket: "monitoring_vdc")
    |> filter(fn: (r) => r._measurement == "cq_object_stores")
    |> range(start: {{ .Start }}, stop: {{ .Stop }})
    |> last()
    
    // keep only objectstores present in last known point
    objectstores = join(tables: {all_os: all_os, last_os: last_os}, on: ["_time"])
    |> keep(columns:["_stop", "name"])
    |> rename(columns: {_stop: "_time", name: "release_name"})
    
    data = from(bucket: "monitoring_vdc")
    |> filter(fn: (r) => r._measurement == "cq_gc_data" or
                         r._measurement == "cq_capacity_used_elements")
    |> range(start:{{ .Start }}, stop:{{ .Stop }})
    |> last()
    |> keep(columns:["_stop", "_field", "_value", "release_name"])
    |> rename(columns: {_stop: "_time"})
    
    res = join(tables: {objectstores: objectstores, data: data}, on: ["_time", "release_name"])
    |> keep(columns:["_time", "_field", "_value"])
    |> sum()
    |> map(fn: (r) => ({_stop:{{ .Stop }}, _value: r._value}))
    
    union(tables: [res, padding])
        |> group(columns:["_field"])
        |> last()
        |> pivot(rowKey:["_stop"],columnKey: ["_field"],valueColumn: "_value")
        |> rename(columns: {_stop: "_time"})
    
  gc-stats-region.tmpl: |+
    import "http"
    import "csv"
    
    padding = csv.from(csv:"#datatype,string,long,dateTime:RFC3339,dateTime:RFC3339,long,string
    #group,false,false,true,false,false,true
    #default,_result,,,,,
    ,result,table,_stop,_time,_value,_field
    ,,0,{{ .Stop }},1970-01-01T00:00:00Z,0,user_gc_pending
    ,,1,{{ .Stop }},1970-01-01T00:00:00Z,0,user_gc_unreclaim
    ,,2,{{ .Stop }},1970-01-01T00:00:00Z,0,system_gc_pending
    ,,3,{{ .Stop }},1970-01-01T00:00:00Z,0,system_gc_unreclaim
    ,,4,{{ .Stop }},1970-01-01T00:00:00Z,0,system_gc_reclaimed
    ,,5,{{ .Stop }},1970-01-01T00:00:00Z,0,user_gc_reclaimed")
    
    last_os = from(bucket: "monitoring_vdc")
    |> filter(fn: (r) => r._measurement == "cq_object_stores")
    |> range(start: {{ .Start }}, stop: {{ .Stop }})
    |> last()
    |> keep(columns:["_time", "_value"])
    |> sort(columns:["_time"])
    |> last()
    
    all_os = from(bucket: "monitoring_vdc")
    |> filter(fn: (r) => r._measurement == "cq_object_stores")
    |> range(start: {{ .Start }}, stop: {{ .Stop }})
    |> last()
    
    // keep only objectstores present in last known point
    objectstores = join(tables: {all_os: all_os, last_os: last_os}, on: ["_time"])
    |> keep(columns:["_stop", "name"])
    |> rename(columns: {_stop: "_time", name: "release_name"})
    
    data = from(bucket: "monitoring_vdc")
    |> filter(fn: (r) => r._measurement == "cq_gc_data")
    |> range(start: {{ .Start }}, stop: {{ .Stop }})
    |> last()
    |> keep(columns:["_stop", "_field", "_value", "release_name"])
    |> rename(columns: {_stop: "_time"})
    
    res = join(tables: {objectstores: objectstores, data: data}, on: ["_time", "release_name"])
    |> keep(columns:["_time", "_field", "_value"])
    |> sum()
    |> map(fn: (r) => ({_stop:{{ .Stop }}, _value: r._value}))
    
    union(tables: [res, padding])
        |> group(columns:["_field"])
        |> last()
        |> pivot(rowKey:["_stop"],columnKey: ["_field"],valueColumn: "_value")
        |> rename(columns: {_stop: "_time"})
  latency-region.tmpl: |+
    import "http"
    import "csv"
    
    // Stub for regional latency metric - MONITORING-1074
    
    csv.from(csv:"#datatype,string,long,string,dateTime:RFC3339,double,double
    #group,false,false,false,false,false,false
    #default,_result,,,,,
    ,result,table,id,_time,p50,p99
    ,,0,ttfb_read,{{ .Stop }},0,0
    ,,0,ttlb_write,{{ .Stop }},0,0")
  object-stores.tmpl: |+
    import "http"
    import "graphql"
    
    graphql.from(
    query:    "{viewer (namespace: \"{{ .Params.namespace }}\") {objectStores {edges { node {name}}}}}",
    datapath: "viewer.objectStores.edges.[].node.name"
    )
    |> map(fn: (r) => ({
      _time:{{ .Stop }},
      name: r._value
      _value: 1
      }))
    
  rebalance-region.tmpl: |+
    import "http"
    import "csv"
    
    padding = csv.from(csv:"#datatype,string,long,dateTime:RFC3339,dateTime:RFC3339,long,string
    #group,false,false,true,false,false,true
    #default,_result,,,,,
    ,result,table,_stop,_time,_value,_field
    ,,0,{{ .Stop }},1970-01-01T00:00:00Z,0,data_rebalanced
    ,,1,{{ .Stop }},1970-01-01T00:00:00Z,0,pending_rebalance")
    
    last_os = from(bucket: "monitoring_vdc")
    |> filter(fn: (r) => r._measurement == "cq_object_stores")
    |> range(start: {{ .Start }}, stop: {{ .Stop }})
    |> last()
    |> keep(columns:["_time", "_value"])
    |> sort(columns:["_time"])
    |> last()
    
    all_os = from(bucket: "monitoring_vdc")
    |> filter(fn: (r) => r._measurement == "cq_object_stores")
    |> range(start: {{ .Start }}, stop: {{ .Stop }})
    |> last()
    
    // keep only objectstores present in last known point
    objectstores = join(tables: {all_os: all_os, last_os: last_os}, on: ["_time"])
    |> keep(columns:["_stop", "name"])
    |> rename(columns: {_stop: "_time", name: "release_name"})
    
    data = from(bucket: "monitoring_vdc")
    |> filter(fn: (r) => r._measurement == "cq_node_rebalancing_summary" and (r._field == "data_rebalanced" or r._field == "pending_rebalance"))
    |> range(start:{{ .Start }},stop:{{ .Stop }})
    |> last()
    |> keep(columns:["_stop", "_field", "_value", "release_name"])
    |> rename(columns: {_stop: "_time"})
    
    res = join(tables: {objectstores: objectstores, data: data}, on: ["_time", "release_name"])
    |> keep(columns:["_time", "_field", "_value"])
    |> sum()
    |> map(fn: (r) => ({_stop:{{ .Stop }}, _value: r._value}))
    
    union(tables: [res, padding])
        |> group(columns:["_field"])
        |> last()
        |> pivot(rowKey:["_stop"],columnKey: ["_field"],valueColumn: "_value")
        |> rename(columns: {_stop: "_time"})
  recover-status-region.tmpl: |+
    import "http"
    import "csv"
    
    padding = csv.from(csv:"#datatype,string,long,dateTime:RFC3339,dateTime:RFC3339,long,string
    #group,false,false,true,false,false,true
    #default,_result,,,,,
    ,result,table,_stop,_time,_value,_field
    ,,0,{{ .Stop }},1970-01-01T00:00:00Z,0,data_to_recover
    ,,1,{{ .Stop }},1970-01-01T00:00:00Z,0,data_recovered",
    )
    
    last_os = from(bucket: "monitoring_vdc")
    |> filter(fn: (r) => r._measurement == "cq_object_stores")
    |> range(start: {{ .Start }}, stop: {{ .Stop }})
    |> last()
    |> keep(columns:["_time", "_value"])
    |> sort(columns:["_time"])
    |> last()
    
    all_os = from(bucket: "monitoring_vdc")
    |> filter(fn: (r) => r._measurement == "cq_object_stores")
    |> range(start: {{ .Start }}, stop: {{ .Stop }})
    |> last()
    
    // keep only objectstores present in last known point
    objectstores = join(tables: {all_os: all_os, last_os: last_os}, on: ["_time"])
    |> keep(columns:["_stop", "name"])
    |> rename(columns: {_stop: "_time", name: "release_name"})
    
    data = from(bucket: "monitoring_vdc")
    |> filter(fn: (r) => r._measurement == "cq_recover_status_summary" and (r._field == "data_to_recover" or r._field == "data_recovered"))
    |> range(start:{{ .Start }},stop:{{ .Stop }})
    |> last()
    |> keep(columns:["_stop", "_field", "_value", "release_name"])
    |> rename(columns: {_stop: "_time"})
    
    res = join(tables: {objectstores: objectstores, data: data}, on: ["_time", "release_name"])
    |> keep(columns:["_time", "_field", "_value"])
    |> sum()
    |> map(fn: (r) => ({_stop:{{ .Stop }}, _value: r._value}))
    
    union(tables: [res, padding])
        |> group(columns:["_field"])
        |> last()
        |> pivot(rowKey:["_stop"],columnKey: ["_field"],valueColumn: "_value")
        |> rename(columns: {_stop: "_time"})
  tohttp.tmpl: |+
    |> http.to(url:"{{.Telegraf}}", method:"POST", name:"{{.Target}}", timeout:{{.HTTPToTimeout}}, timeColumn:"_time"{{if .Tags}}, tagColumns:[{{range $i, $e:=.Tags}}{{if $i}},{{end}}"{{.}}"{{end}}]{{end}}{{if .Values}}, valueColumns:[{{range $i, $e:=.Values}}{{if $i}},{{end}}"{{.}}"{{end}}]{{end}})
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/throttler/templates/fluxd_alerter.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#

apiVersion: v1
kind: ConfigMap
metadata:
  name: "RELEASE-NAME-throttler-fluxd-alerter"
  labels:
    app: "RELEASE-NAME-throttler"
    chart: "throttler-0.54.0"
    release: RELEASE-NAME
data:
  config.yaml: |-
    enabled: true
    prefix: OBJSC-MON
    symptoms:
      Critical: 4020
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/throttler/templates/logger.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: RELEASE-NAME-throttler-logger-config
  labels:
    app: "RELEASE-NAME-throttler"
    chart: "throttler-0.54.0"
    release: RELEASE-NAME
data:
  logger.json: |+
    {
      "maxsize": 10,
      "maxbackups": 20,
      "maxage": 14,
      "compress": true
    }
---
# Source: objectscale-manager/charts/objectscale-monitoring/templates/app_config.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#

# Config map with event rules for KAHM
apiVersion: v1
kind: ConfigMap
metadata:
  # By KAHM rules name must be <APPLICATION_NAME>-app-config
  name: objectscale-monitoring-app-config
  labels:
    app: "RELEASE-NAME-objectscale-monitoring"
    chart: "objectscale-monitoring-3.7.0-1186.91aed4d8"
    release: RELEASE-NAME
  annotations:
    com.dellemc.kahm.subscribed: "true"
data:
  eventRules: |-
    issueRules:
      
      - description: "Percent of used objectscale capacity crosses threshold"
        name: "Objectscale Capacity"
        defaultAutoClearTimeOut: 60
        issueCategory: Auto
        matchOnList:
          - matchon:
              # WARNING
              - label: SymptomID
                value: OBJSC-MON-1111
          - matchon:
              # ERROR
              - label: SymptomID
                value: OBJSC-MON-1112
          - matchon:
              # CRITICAL
              - label: SymptomID
                value: OBJSC-MON-1113
        notifiers:
          - objectscale-supportassist-ese
      
      
      - description: "No data has been pushed to the objectscale monitoring framework for the last 30 minutes"
        name: "Objectscale Monitoring Health"
        defaultAutoClearTimeOut: 60
        issueCategory: Auto
        matchOnList:
          - matchon:
              # CRITICAL
              - label: SymptomID
                value: OBJSC-MON-4019
        notifiers:
          - objectscale-supportassist-ese
      
      
      - description: "Fluxd has not responded for the last 30 minutes"
        name: "MonitoringFluxd"
        defaultAutoClearTimeOut: 60
        issueCategory: Auto
        matchOnList:
          - matchon:
              # CRITICAL
              - label: SymptomID
                value: OBJSC-MON-4020
        notifiers:
          - objectscale-supportassist-ese
      
      
      - description: "InfluxDB PVC has a bad state for the last 30 minutes"
        name: "InfluxDB PVC"
        defaultAutoClearTimeOut: 60
        issueCategory: Auto
        matchOnList:
          - matchon:
              # CRITICAL
              - label: SymptomID
                value: OBJSC-MON-4021
        notifiers:
          - objectscale-supportassist-ese
      
      
      - description: "Rsyslog PVC has a bad state for the last 30 minutes"
        name: "Rsyslog PVC"
        defaultAutoClearTimeOut: 60
        issueCategory: Auto
        matchOnList:
          - matchon:
              # CRITICAL
              - label: SymptomID
                value: OBJSC-MON-4022
        notifiers:
          - objectscale-supportassist-ese
      
      
      - description: "Percent of used InfluxDB capacity crosses threshold"
        name: "InfluxDB low disk space"
        defaultAutoClearTimeOut: 60
        issueCategory: Auto
        matchOnList:
          - matchon:
              # WARNING
              - label: SymptomID
                value: OBJSC-MON-4023
          - matchon:
              # ERROR
              - label: SymptomID
                value: OBJSC-MON-4024
          - matchon:
              # CRITICAL
              - label: SymptomID
                value: OBJSC-MON-4025
        notifiers:
          - objectscale-supportassist-ese
      
      
      - description: "Percent of used Rsyslog capacity crosses threshold"
        name: "Rsyslog low disk space"
        defaultAutoClearTimeOut: 60
        issueCategory: Auto
        matchOnList:
          - matchon:
              # WARNING
              - label: SymptomID
                value: OBJSC-MON-4026
          - matchon:
              # ERROR
              - label: SymptomID
                value: OBJSC-MON-4027
          - matchon:
              # CRITICAL
              - label: SymptomID
                value: OBJSC-MON-4028
        notifiers:
          - objectscale-supportassist-ese
      
  eventRemedies: |-
    symptoms:
      
      - symptomid: OBJSC-MON-1111
        description: "Percent of used objectscale capacity crosses WARNING threshold"
        remedies:
          - Please check objectsores capacity usage and take actions to prevent overflow
      - symptomid: OBJSC-MON-1112
        description: "Percent of used objectscale capacity crosses ERROR threshold"
        remedies:
          - Please check objectsores capacity usage and take actions to prevent overflow, otherwise write operations may be locked
      - symptomid: OBJSC-MON-1113
        description: "Percent of used objectscale capacity crosses CRITICAL threshold"
        remedies:
          - Now some of objectstores may be in read only mode. Please check objectsores capacity usage and take actions to unblock them
      
      
      - symptomid: OBJSC-MON-4019
        description: "No data has been pushed to the objectscale monitoring framework for the last 30 minutes"
        remedies:
          - KB https://support.emc.com/kb/536249
      
      
      - symptomid: OBJSC-MON-4020
        description: Fluxd has not responded for the last 30 minutes
        remedies:
          - Please check fluxd service status
      
      
      - symptomid: OBJSC-MON-4020
        description: "InfluxDB PVC has a bad status for the last 30 minutes"
        remedies:
          - Please check InfluxDB PVC status and take actions to fix it
      
      
      - symptomid: OBJSC-MON-4020
        description: "Rsyslog PVC has a bad status for the last 30 minutes"
        remedies:
          - Please check Rsyslog PVC status and take actions to fix it
      
      
      - symptomid: OBJSC-MON-4023
        description: "Percent of used InfluxDB capacity crosses WARNING threshold"
        remedies:
          - Please check InfluxDB capacity usage and take actions to prevent overflow
      - symptomid: OBJSC-MON-4024
        description: "Percent of used InfluxDB capacity crosses ERROR threshold"
        remedies:
          - Please check InfluxDB capacity usage and take actions to prevent overflow, otherwise write operations may be locked
      - symptomid: OBJSC-MON-4025
        description: "Percent of used InfluxDB capacity crosses CRITICAL threshold"
        remedies:
          - Now some of InfluxDB may be in read only mode. Please check InfluxDB capacity usage and take actions to unblock them
      
      
      - symptomid: OBJSC-MON-4026
        description: "Percent of used Rsyslog capacity crosses WARNING threshold"
        remedies:
          - Please check Rsyslog capacity usage and take actions to prevent overflow
      - symptomid: OBJSC-MON-4027
        description: "Percent of used Rsyslog capacity crosses ERROR threshold"
        remedies:
          - Please check Rsyslog capacity usage and take actions to prevent overflow, otherwise write operations may be locked
      - symptomid: OBJSC-MON-4028
        description: "Percent of used Rsyslog capacity crosses CRITICAL threshold"
        remedies:
          - Now some of Rsyslog may be in read only mode. Please check Rsyslog capacity usage and take actions to unblock them
---
# Source: objectscale-manager/charts/pravega-operator/templates/version_map.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: supported-versions-map
  namespace: dellemc-sf426-domain-c45
  labels:
    app.kubernetes.io/name: pravega-operator
    app.kubernetes.io/version: "0.5.2"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: "pravega-operator-0.5.2"
data:
  keys: |
        0.1.0:0.1.0
        0.2.0:0.2.0
        0.3.0:0.3.0,0.3.1,0.3.2
        0.3.1:0.3.1,0.3.2
        0.3.2:0.3.2
        0.4.0:0.4.0
        0.5.0:0.5.0,0.5.1,0.6.0,0.6.1,0.6.2,0.7.0,0.7.1
        0.5.1:0.5.1,0.6.0,0.6.1,0.6.2,0.7.0,0.7.1
        0.6.0:0.6.0,0.6.1,0.6.2,0.7.0,0.7.1
        0.6.1:0.6.1,0.6.2,0.7.0,0.7.1
        0.6.2:0.6.2,0.7.0,0.7.1
        0.7.0:0.7.0,0.7.1
        0.7.1:0.7.1
        0.9.0:0.9.0,0.9.1
        0.10.0:0.10.0
---
# Source: objectscale-manager/templates/objectscale-manager-app-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
    name: objectscale-manager-app-config
    namespace: dellemc-sf426-domain-c45
    labels:
      app.kubernetes.io/name: objectscale-manager
      app.kubernetes.io/instance: RELEASE-NAME
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/version: 0.71.2
      app.kubernetes.io/part-of: RELEASE-NAME
      helm.sh/chart: objectscale-manager-0.71.2
      release: RELEASE-NAME
      operator: objectscale-operator
      product: objectscale
    annotations:
        com.dellemc.kahm.subscribed: "true"
data:
    eventRules: |-
    health: |-
      spec:
        - name: pre-update
          container: emccorp/objectscale-manager-pre-update:0.71.2
          serviceaccount: RELEASE-NAME-healthchecks
          timelimit: "5m"
          args:
            - -target-version
            - 0.71.2
        - name: license-usage
          container: emccorp/objectscale-license-usage:0.71.2
          serviceaccount: RELEASE-NAME-license-usage
          timelimit: "5m"
          schedule: "0 */6 * * *"
          disabled: false
        - name: inventory
          container: emccorp/objectscale-inventory:0.71.2
          serviceaccount: RELEASE-NAME-inventory
          timelimit: "5m"
          schedule: "0 * * * *"
          disabled: false
        - name: capacity
          container: emccorp/objectscale-capacity:0.71.2
          serviceaccount: RELEASE-NAME-capacity
          timelimit: "5m"
          schedule: "0 * * * *"
          disabled: true
        - name: performance
          container: emccorp/objectscale-performance:0.71.2
          serviceaccount: RELEASE-NAME-performance
          timelimit: "5m"
          schedule: "*/10 * * * *"
          disabled: true
        - name: health
          container: emccorp/objectscale-health:0.71.2
          serviceaccount: RELEASE-NAME-health
          timelimit: "5m"
          schedule: "*/10 * * * *"
          disabled: false
    eventRemedies: |-
      symptoms:
        - symptomid: DEOS-MGR-1001
          description: Provisioning of the new objectstore failed
          remedies:
            - Check the results of the provisioning job
          serviceaccount: RELEASE-NAME-performance
          timelimit: "5m"
          schedule: "*/10 * * * *"
          disabled: true
        - name: health
          container: emccorp/objectscale-health:0.71.2
          serviceaccount: RELEASE-NAME-health
          timelimit: "5m"
          schedule: "*/10 * * * *"
          disabled: false
    eventRemedies: |-
      symptoms:
        - symptomid: DEOS-MGR-1001
          description: Provisioning of the new objectstore failed
          remedies:
            - Check the results of the provisioning job
---
# Source: objectscale-manager/templates/operator-logger-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: dellemc-sf426-domain-c45
  name: logger-config
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.71.2
    app.kubernetes.io/component: objectscale-operator
    app.kubernetes.io/part-of: RELEASE-NAME
    helm.sh/chart: objectscale-manager-0.71.2
    operator: objectscale-operator
    product: objectscale
    release: RELEASE-NAME
data:
  logger-config.yaml: |-
    development: true
    disableCaller: false
    disableStacktrace: false
    level: info
    outputPaths:
    - stdout
    errorOutputPaths:
    - stderr
    encoding: console
    encoderConfig:
      messageKey: M
      levelKey: L
      timeKey: T
      nameKey: N
      callerKey: C
      stacktraceKey: S
      lineEnding: 

      levelEncoder: capital
      timeEncoder: iso8601
      durationEncoder: string
      callerEncoder: short
---
# Source: objectscale-manager/charts/atlas-operator/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: atlas-operator
  labels:
    app.kubernetes.io/name: atlas-operator
    helm.sh/chart: atlas-operator-0.31.0
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/version: "0.13.0"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  - endpoints
  - pods
  - pvc
  - services
  verbs:
  - '*'
- apiGroups:
  - ""
  resources:
  - configmaps/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
- apiGroups:
  - apps
  resources:
  - deployments
  - deployments/finalizers
  - statefulsets
  verbs:
  - '*'
- apiGroups:
  - atlas.dellemc.com
  resources:
  - atlasclusters
  - atlasclusters/finalizers
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - atlas.dellemc.com
  resources:
  - atlasclusters/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - '*'
---
# Source: objectscale-manager/charts/bookkeeper-operator/templates/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: RELEASE-NAME-bookkeeper-operator-dellemc-sf426-domain-c45-role
  namespace: dellemc-sf426-domain-c45
  labels:
    app.kubernetes.io/name: bookkeeper-operator
    app.kubernetes.io/version: "0.1.3"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: "bookkeeper-operator-0.1.3"
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  - pods
  - services
  - endpoints
  - persistentvolumeclaims
  - events
  - configmaps
  - secrets
  verbs:
  - get
  - watch
  - list
  - create
  - update
  - delete
- apiGroups:
  - admissionregistration.k8s.io
  resources:
  - "*"
  verbs:
  - '*'
- apiGroups:
  - bookkeeper.pravega.io
  resources:
  - "*"
  verbs:
  - "*"
- apiGroups:
  - policy
  resources:
  - poddisruptionbudgets
  verbs:
  - "*"
- apiGroups:
  - apps
  resources:
  - deployments
  - daemonsets
  - replicasets
  - statefulsets
  verbs:
  - "*"
---
# Source: objectscale-manager/charts/federation/templates/federation-admin-role.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: dellemc-sf426-domain-c45-federation-admin
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.71.2
    app.kubernetes.io/component: federation
    app.kubernetes.io/part-of: RELEASE-NAME
    helm.sh/chart: federation-0.71.2
    release: RELEASE-NAME
    operator: objectscale-operator
    product: objectscale
rules:
- apiGroups:
  - ecs.dellemc.com
  resources:
  - ecsclusters
  verbs:
  - "*"
- apiGroups:
  - app.k8s.io
  resources:
  - "*"
  verbs:
  - "*"
- apiGroups:
    - apiextensions.k8s.io
  resources:
    - "*"
  verbs:
    - "*"
- apiGroups:
    - ""
  resources:
    - pods
    - secrets
    - configmaps
    - services
  verbs:
    - "*"
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/influxdb-operator/templates/influxdb_editor_role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: RELEASE-NAME-influxdb-operator-dellemc-sf426-domain-c45-influxdb-editor-role
  labels:
    app.kubernetes.io/name: RELEASE-NAME-influxdb-operator
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.71.2"
    app.kubernetes.io/part-of: RELEASE-NAME
    helm.sh/chart: influxdb-operator-0.71.2
    release: RELEASE-NAME
rules:
- apiGroups:
  - db.ecs.dellemc.com
  resources:
  - influxdbs
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - db.ecs.dellemc.com
  resources:
  - influxdbs/status
  verbs:
  - get
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/influxdb-operator/templates/influxdb_viewer_role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: RELEASE-NAME-influxdb-operator-dellemc-sf426-domain-c45-influxdb-viewer-role
  labels:
    app.kubernetes.io/name: RELEASE-NAME-influxdb-operator
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.71.2"
    app.kubernetes.io/part-of: RELEASE-NAME
    helm.sh/chart: influxdb-operator-0.71.2
    release: RELEASE-NAME
rules:
- apiGroups:
  - db.ecs.dellemc.com
  resources:
  - influxdbs
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - db.ecs.dellemc.com
  resources:
  - influxdbs/status
  verbs:
  - get
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/influxdb-operator/templates/leader_election_role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: RELEASE-NAME-influxdb-operator-dellemc-sf426-domain-c45-leader-election-role
  labels:
    app.kubernetes.io/name: RELEASE-NAME-influxdb-operator
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.71.2"
    app.kubernetes.io/part-of: RELEASE-NAME
    helm.sh/chart: influxdb-operator-0.71.2
    release: RELEASE-NAME
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - configmaps/status
  verbs:
  - get
  - update
  - patch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/influxdb-operator/templates/node_role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: RELEASE-NAME-influxdb-operator-dellemc-sf426-domain-c45-node-role
  labels:
    app.kubernetes.io/name: RELEASE-NAME-influxdb-operator
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.71.2"
    app.kubernetes.io/part-of: RELEASE-NAME
    helm.sh/chart: influxdb-operator-0.71.2
    release: RELEASE-NAME
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - get
  - list
  - watch
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/influxdb-operator/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: RELEASE-NAME-influxdb-operator-dellemc-sf426-domain-c45-influxdb-operator-role
  labels:
    app.kubernetes.io/name: RELEASE-NAME-influxdb-operator
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.71.2"
    app.kubernetes.io/part-of: RELEASE-NAME
    helm.sh/chart: influxdb-operator-0.71.2
    release: RELEASE-NAME
rules:
- apiGroups:
  - apps
  resources:
  - statefulsets
  - statefulsets/finalizers
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - db.ecs.dellemc.com
  resources:
  - influxdbs
  - influxdbs/finalizers
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - db.ecs.dellemc.com
  resources:
  - influxdbs/status
  verbs:
  - get
  - patch
  - update
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/statefuldaemonset-operator/templates/leader_election_role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: RELEASE-NAME-statefuldaemonset-operator-dellemc-sf426-domain-c45-leader-election-role
  labels:
    app.kubernetes.io/name: RELEASE-NAME-statefuldaemonset-operator
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.71.2"
    app.kubernetes.io/part-of: RELEASE-NAME
    helm.sh/chart: statefuldaemonset-operator-0.71.2
    release: RELEASE-NAME
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - configmaps/status
  verbs:
  - get
  - update
  - patch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/statefuldaemonset-operator/templates/node_role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: RELEASE-NAME-statefuldaemonset-operator-dellemc-sf426-domain-c45-node-role
  labels:
    app.kubernetes.io/name: RELEASE-NAME-statefuldaemonset-operator
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.71.2"
    app.kubernetes.io/part-of: RELEASE-NAME
    helm.sh/chart: statefuldaemonset-operator-0.71.2
    release: RELEASE-NAME
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - get
  - list
  - watch
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/statefuldaemonset-operator/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: RELEASE-NAME-statefuldaemonset-operator-dellemc-sf426-domain-c45-statefuldaemonset-operator-role
  labels:
    app.kubernetes.io/name: RELEASE-NAME-statefuldaemonset-operator
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.71.2"
    app.kubernetes.io/part-of: RELEASE-NAME
    helm.sh/chart: statefuldaemonset-operator-0.71.2
    release: RELEASE-NAME
rules:
- apiGroups:
  - apps
  resources:
  - statefulsets
  - statefulsets/finalizers
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - stateful.ecs.dellemc.com
  resources:
  - statefuldaemonsets
  - statefuldaemonsets/finalizers
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - stateful.ecs.dellemc.com
  resources:
  - statefuldaemonsets/status
  verbs:
  - get
  - patch
  - update
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/statefuldaemonset-operator/templates/statefuldaemonset_editor_role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: RELEASE-NAME-statefuldaemonset-operator-dellemc-sf426-domain-c45-statefuldaemonset-editor-role
  labels:
    app.kubernetes.io/name: RELEASE-NAME-statefuldaemonset-operator
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.71.2"
    app.kubernetes.io/part-of: RELEASE-NAME
    helm.sh/chart: statefuldaemonset-operator-0.71.2
    release: RELEASE-NAME
rules:
- apiGroups:
  - stateful.ecs.dellemc.com
  resources:
  - statefuldaemonsets
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - stateful.ecs.dellemc.com
  resources:
  - statefuldaemonsets/status
  verbs:
  - get
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/statefuldaemonset-operator/templates/statefuldaemonset_viewer_role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: RELEASE-NAME-statefuldaemonset-operator-dellemc-sf426-domain-c45-statefuldaemonset-viewer-role
  labels:
    app.kubernetes.io/name: RELEASE-NAME-statefuldaemonset-operator
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.71.2"
    app.kubernetes.io/part-of: RELEASE-NAME
    helm.sh/chart: statefuldaemonset-operator-0.71.2
    release: RELEASE-NAME
rules:
- apiGroups:
  - stateful.ecs.dellemc.com
  resources:
  - statefuldaemonsets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - stateful.ecs.dellemc.com
  resources:
  - statefuldaemonsets/status
  verbs:
  - get
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/telegraf/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: RELEASE-NAME-telegraf
  namespace: dellemc-sf426-domain-c45
rules:
  - apiGroups:
    - ""
    resources:
    - pods
    - persistentvolumes
    - persistentvolumeclaims
    - nodes
    verbs:
    - get
    - list
    - watch
---
# Source: objectscale-manager/charts/pravega-operator/templates/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: RELEASE-NAME-pravega-operator-dellemc-sf426-domain-c45-role
  namespace: dellemc-sf426-domain-c45
  labels:
    app.kubernetes.io/name: pravega-operator
    app.kubernetes.io/version: "0.5.2"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: "pravega-operator-0.5.2"
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  - pods
  - services
  - endpoints
  - persistentvolumeclaims
  - events
  - configmaps
  - secrets
  verbs:
  - get
  - watch
  - list
  - create
  - update
  - delete
- apiGroups:
  - admissionregistration.k8s.io
  resources:
  - "*"
  verbs:
  - '*'
- apiGroups:
  - pravega.pravega.io
  resources:
  - "*"
  verbs:
  - "*"
- apiGroups:
  - bookkeeper.pravega.io
  resources:
  - "*"
  verbs:
  - "*"
- apiGroups:
  - policy
  resources:
  - poddisruptionbudgets
  verbs:
  - "*"
- apiGroups:
  - apps
  resources:
  - deployments
  - daemonsets
  - replicasets
  - statefulsets
  verbs:
  - "*"
---
# Source: objectscale-manager/charts/service-pod/templates/rbac.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: dellemc-sf426-domain-c45-RELEASE-NAME-objectscale-service-pod-cr
  labels:
    release: RELEASE-NAME
    product: objectscale 
rules:
- apiGroups:
  - ecs.dellemc.com
  resources:
  - "*"
  verbs:
  - "*"
- apiGroups:
  - decks.ecs.dellemc.com
  resources:
  - "*"
  verbs:
  - "*"
- apiGroups:
  - kahm.emcecs.github.com
  resources:
  - notifiers
  verbs:
  - "*"
- apiGroups:
  - app.k8s.io
  resources:
  - "*"
  verbs:
  - "*"
- apiGroups:
  - ""
  - extensions
  resources:
  - pods
  - pods/exec
  - pods/log
  - pods/portforward
  - services
  - endpoints
  - persistentvolumes
  - persistentvolumeclaims
  - events
  - configmaps
  - secrets
  - applications
  - nodes
  - namespaces
  - replicationcontrollers
  - daemonsets
  - deployments
  - replicasets
  verbs:
  - "*"
- apiGroups:
  - batch
  resources:
  - jobs
  - cronjobs
  verbs:
  - "*"
- apiGroups:
  - policy
  resources:
  - poddisruptionbudgets
  verbs:
  - "*"
- apiGroups:
  - apps
  resources:
  - deployments
  - daemonsets
  - replicasets
  - statefulsets
  verbs:
  - "*"
- apiGroups:
  - zookeeper.pravega.io
  resources:
  - "*"
  verbs:
  - "*"
- apiGroups:
  - storage.k8s.io
  resources:
  - storageclasses
  - storageclasslists
  verbs:
  - get
  - list
---
# Source: objectscale-manager/charts/zookeeper-operator/templates/rbac.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: zookeeper-operator

  labels:
    release: RELEASE-NAME
rules:
- apiGroups:
  - zookeeper.pravega.io
  resources:
  - "*"
  verbs:
  - "*"
- apiGroups:
  - ""
  resources:
  - pods
  - services
  - endpoints
  - persistentvolumeclaims
  - events
  - configmaps
  - secrets
  - serviceaccounts
  verbs:
  - "*"
- apiGroups:
  - policy
  resources:
  - poddisruptionbudgets
  verbs:
  - "*"
- apiGroups:
  - apps
  resources:
  - deployments
  - daemonsets
  - replicasets
  - statefulsets
  verbs:
  - "*"
---
# Source: objectscale-manager/templates/objectscale-cluster-resources.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: dellemc-sf426-domain-c45-operator-cluster-resources
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.71.2
    app.kubernetes.io/component: objectscale-operator
    app.kubernetes.io/part-of: RELEASE-NAME
    helm.sh/chart: objectscale-manager-0.71.2
    release: RELEASE-NAME
    operator: objectscale-operator
    product: objectscale
rules:
  - apiGroups:
      - storage.k8s.io
    resources:
      - storageclasses
      - storageclasslists
    verbs:
      - get
      - list
  - apiGroups:
      - certificates.k8s.io
    resources:
      - certificatesigningrequests
    verbs:
      - "*"
  - apiGroups:
      - certificates.k8s.io
    resources:
      - certificatesigningrequests/approval
    verbs:
      - update
  - apiGroups:
    - rbac.authorization.k8s.io
    resources:
    - clusterroles
    - clusterrolebindings
    verbs:
    - "*"
  - apiGroups:
      - ""
    resources:
      - nodes
      - clusterroles
    verbs:
      - "*"
---
# Source: objectscale-manager/templates/operator-rbac.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: dellemc-sf426-domain-c45-objectscale-operator
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.71.2
    app.kubernetes.io/component: objectscale-operator
    app.kubernetes.io/part-of: RELEASE-NAME
    helm.sh/chart: objectscale-manager-0.71.2
    release: RELEASE-NAME
    operator: objectscale-operator
    product: objectscale
rules:
- apiGroups:
  - rbac.authorization.k8s.io
  resources:
  - roles
  - rolebindings
  verbs:
  - '*'
- apiGroups:
  - ecs.dellemc.com
  resources:
  - "*"
  verbs:
  - "*"
- apiGroups:
  - decks.ecs.dellemc.com
  resources:
  - "*"
  verbs:
  - "*"
- apiGroups:
  - ""
  resources:
  - pods
  - services
  - endpoints
  - persistentvolumeclaims
  - persistentvolumes
  - events
  - configmaps
  - secrets
  - serviceaccounts
  verbs:
  - "*"
- apiGroups:
  - batch
  resources:
  - jobs
  - cronjobs
  verbs:
  - "*"
- apiGroups:
  - policy
  resources:
  - poddisruptionbudgets
  verbs:
  - "*"
- apiGroups:
  - apps
  resources:
  - deployments
  - daemonsets
  - replicasets
  - statefulsets
  verbs:
  - "*"
- apiGroups:
  - zookeeper.pravega.io
  resources:
  - "*"
  verbs:
  - "*"
- apiGroups:
  - app.k8s.io
  resources:
  - "*"
  verbs:
  - "*"
- apiGroups:
  - atlas.dellemc.com
  resources:
  - "*"
  verbs:
  - "*"
- apiGroups:
  - bookkeeper.pravega.io
  resources:
  - "*"
  verbs:
  - "*"
- apiGroups:
  - pravega.pravega.io
  resources:
  - "*"
  verbs:
  - "*"
- apiGroups:
  - influxdata.com
  resources:
  - influxdbs
  verbs:
  - "*"
- apiGroups:
  - cns.vmware.com
  resources:
    - "*"
  verbs:
    - "*"
---
# Source: objectscale-manager/templates/telemetry-rbac.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: dellemc-sf426-domain-c45-inventory
  labels:
    release: RELEASE-NAME
rules:
  - apiGroups:
    - decks.ecs.dellemc.com
    resources:
    - licenses
    - supportassists
    verbs:
    - get
    - list
  - apiGroups:
    - ecs.dellemc.com
    resources:
    - ecsclusters
    verbs:
    - get
    - list
  - apiGroups:
    - ""
    resources:
    - services
    - serviceaccounts
    - secrets
    - nodes
    - persistentvolumes
    - persistentvolumeclaims
    verbs:
    - get
    - list
---
# Source: objectscale-manager/templates/telemetry-rbac.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: dellemc-sf426-domain-c45-capacity
  labels:
    release: RELEASE-NAME
rules:
- apiGroups: ["*"]
  resources: ["*"]
  verbs: ["get", "watch", "list"]
---
# Source: objectscale-manager/templates/telemetry-rbac.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: dellemc-sf426-domain-c45-performance
  labels:
    release: RELEASE-NAME
rules:
- apiGroups: ["*"]
  resources: ["*"]
  verbs: ["get", "watch", "list"]
---
# Source: objectscale-manager/templates/telemetry-rbac.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: dellemc-sf426-domain-c45-health
  labels:
    release: RELEASE-NAME
rules:
  - apiGroups:
    - decks.ecs.dellemc.com
    resources:
    - licenses
    - supportassists
    verbs:
    - get
    - list
  - apiGroups:
    - ""
    resources:
    - services
    - serviceaccounts
    - secrets
    verbs:
    - get
    - list
---
# Source: objectscale-manager/templates/telemetry-rbac.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: dellemc-sf426-domain-c45-license-usage
  labels:
    release: RELEASE-NAME
rules:
  - apiGroups:
    - decks.ecs.dellemc.com
    resources:
    - licenses
    verbs:
    - get
    - update
    - list
  - apiGroups:
    - ""
    resources:
    - services
    - serviceaccounts
    - secrets
    verbs:
    - get
    - list
---
# Source: objectscale-manager/charts/atlas-operator/templates/role_binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: atlas-operator-binding
  labels:
    app.kubernetes.io/name: atlas-operator
    helm.sh/chart: atlas-operator-0.31.0
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/version: "0.13.0"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: atlas-operator
subjects:
- kind: ServiceAccount
  name: atlas-operator
  namespace: dellemc-sf426-domain-c45
---
# Source: objectscale-manager/charts/bookkeeper-operator/templates/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: RELEASE-NAME-bookkeeper-operator-dellemc-sf426-domain-c45-role-binding
  namespace: dellemc-sf426-domain-c45
  labels:
    app.kubernetes.io/name: bookkeeper-operator
    app.kubernetes.io/version: "0.1.3"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: "bookkeeper-operator-0.1.3"
subjects:
- kind: ServiceAccount
  name: bookkeeper-operator
  namespace: dellemc-sf426-domain-c45
roleRef:
  kind: ClusterRole
  name: RELEASE-NAME-bookkeeper-operator
  apiGroup: rbac.authorization.k8s.io
---
# Source: objectscale-manager/charts/federation/templates/federation-rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: dellemc-sf426-domain-c45-federation
  labels:
    app.kubernetes.io/name: "federation"
    app.kubernetes.io/version: 0.71.2
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: federation-0.71.2
    release: RELEASE-NAME
subjects:
- kind: ServiceAccount
  name: federation
  namespace: dellemc-sf426-domain-c45
roleRef:
  kind: ClusterRole
  name: dellemc-sf426-domain-c45-federation-admin
  apiGroup: rbac.authorization.k8s.io
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/fluxd/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: dellemc-sf426-domain-c45-RELEASE-NAME-fluxd
subjects:
  - kind: ServiceAccount
    name: RELEASE-NAME-fluxd
    namespace: dellemc-sf426-domain-c45
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: dellemc-sf426-domain-c45-object-store-monitor
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/influxdb-operator/templates/leader_election_role_binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: RELEASE-NAME-influxdb-operator-dellemc-sf426-domain-c45-leader-election-role-binding
  labels:
    app.kubernetes.io/name: RELEASE-NAME-influxdb-operator
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.71.2"
    app.kubernetes.io/part-of: RELEASE-NAME
    helm.sh/chart: influxdb-operator-0.71.2
    release: RELEASE-NAME
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: RELEASE-NAME-influxdb-operator-dellemc-sf426-domain-c45-leader-election-role
subjects:
- kind: ServiceAccount
  name: RELEASE-NAME-influxdb-operator
  namespace: dellemc-sf426-domain-c45
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/influxdb-operator/templates/node_role_binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: RELEASE-NAME-influxdb-operator-dellemc-sf426-domain-c45-node-role-binding
  labels:
    app.kubernetes.io/name: RELEASE-NAME-influxdb-operator
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.71.2"
    app.kubernetes.io/part-of: RELEASE-NAME
    helm.sh/chart: influxdb-operator-0.71.2
    release: RELEASE-NAME
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: RELEASE-NAME-influxdb-operator-dellemc-sf426-domain-c45-node-role
subjects:
- kind: ServiceAccount
  name: RELEASE-NAME-influxdb-operator
  namespace: dellemc-sf426-domain-c45
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/influxdb-operator/templates/role_binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: RELEASE-NAME-influxdb-operator-dellemc-sf426-domain-c45-influxdb-operator-binding
  labels:
    app.kubernetes.io/name: RELEASE-NAME-influxdb-operator
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.71.2"
    app.kubernetes.io/part-of: RELEASE-NAME
    helm.sh/chart: influxdb-operator-0.71.2
    release: RELEASE-NAME
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: RELEASE-NAME-influxdb-operator-dellemc-sf426-domain-c45-influxdb-operator-role
subjects:
- kind: ServiceAccount
  name: RELEASE-NAME-influxdb-operator
  namespace: dellemc-sf426-domain-c45
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/statefuldaemonset-operator/templates/leader_election_role_binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: RELEASE-NAME-statefuldaemonset-operator-dellemc-sf426-domain-c45-leader-election-role-binding
  labels:
    app.kubernetes.io/name: RELEASE-NAME-statefuldaemonset-operator
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.71.2"
    app.kubernetes.io/part-of: RELEASE-NAME
    helm.sh/chart: statefuldaemonset-operator-0.71.2
    release: RELEASE-NAME
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: RELEASE-NAME-statefuldaemonset-operator-dellemc-sf426-domain-c45-leader-election-role
subjects:
- kind: ServiceAccount
  name: RELEASE-NAME-statefuldaemonset-operator
  namespace: dellemc-sf426-domain-c45
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/statefuldaemonset-operator/templates/node_role_binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: RELEASE-NAME-statefuldaemonset-operator-dellemc-sf426-domain-c45-node-role-binding
  labels:
    app.kubernetes.io/name: RELEASE-NAME-statefuldaemonset-operator
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.71.2"
    app.kubernetes.io/part-of: RELEASE-NAME
    helm.sh/chart: statefuldaemonset-operator-0.71.2
    release: RELEASE-NAME
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: RELEASE-NAME-statefuldaemonset-operator-dellemc-sf426-domain-c45-node-role
subjects:
- kind: ServiceAccount
  name: RELEASE-NAME-statefuldaemonset-operator
  namespace: dellemc-sf426-domain-c45
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/statefuldaemonset-operator/templates/role_binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: RELEASE-NAME-statefuldaemonset-operator-dellemc-sf426-domain-c45-statefuldaemonset-operator-binding
  labels:
    app.kubernetes.io/name: RELEASE-NAME-statefuldaemonset-operator
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.71.2"
    app.kubernetes.io/part-of: RELEASE-NAME
    helm.sh/chart: statefuldaemonset-operator-0.71.2
    release: RELEASE-NAME
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: RELEASE-NAME-statefuldaemonset-operator-dellemc-sf426-domain-c45-statefuldaemonset-operator-role
subjects:
- kind: ServiceAccount
  name: RELEASE-NAME-statefuldaemonset-operator
  namespace: dellemc-sf426-domain-c45
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/telegraf/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: RELEASE-NAME-telegraf
subjects:
  - kind: ServiceAccount
    name: RELEASE-NAME-telegraf
    namespace: dellemc-sf426-domain-c45
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: RELEASE-NAME-telegraf
---
# Source: objectscale-manager/charts/pravega-operator/templates/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: RELEASE-NAME-pravega-operator-dellemc-sf426-domain-c45-role-binding
  namespace: dellemc-sf426-domain-c45
  labels:
    app.kubernetes.io/name: pravega-operator
    app.kubernetes.io/version: "0.5.2"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: "pravega-operator-0.5.2"
subjects:
- kind: ServiceAccount
  name: pravega-operator
  namespace: dellemc-sf426-domain-c45
roleRef:
  kind: ClusterRole
  name: RELEASE-NAME-pravega-operator
  apiGroup: rbac.authorization.k8s.io
---
# Source: objectscale-manager/charts/service-pod/templates/rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: dellemc-sf426-domain-c45-RELEASE-NAME-objectscale-service-pod-crb
  labels:
    release: RELEASE-NAME
    product: objectscale 
subjects:
- kind: ServiceAccount
  name: RELEASE-NAME-service-pod-sa
  namespace: dellemc-sf426-domain-c45
roleRef:
  kind: ClusterRole
  name: dellemc-sf426-domain-c45-RELEASE-NAME-objectscale-service-pod-cr
  apiGroup: rbac.authorization.k8s.io
---
# Source: objectscale-manager/charts/zookeeper-operator/templates/rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: default-account-zookeeper-operator
  labels:
    release: RELEASE-NAME
subjects:
- kind: ServiceAccount
  name: default
  namespace: dellemc-sf426-domain-c45
roleRef:
  kind: ClusterRole
  name: zookeeper-operator
  apiGroup: rbac.authorization.k8s.io
---
# Source: objectscale-manager/templates/objectscale-cluster-resources.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: dellemc-sf426-domain-c45-operator-cluster-resources
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.71.2
    app.kubernetes.io/component: objectscale-operator
    app.kubernetes.io/part-of: RELEASE-NAME
    helm.sh/chart: objectscale-manager-0.71.2
    release: RELEASE-NAME
    operator: objectscale-operator
    product: objectscale
subjects:
  - kind: ServiceAccount
    name: objectscale-operator
    namespace: dellemc-sf426-domain-c45
roleRef:
  kind: ClusterRole
  name: dellemc-sf426-domain-c45-operator-cluster-resources
  apiGroup: rbac.authorization.k8s.io
---
# Source: objectscale-manager/templates/operator-rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: dellemc-sf426-domain-c45-objectscale-operator
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.71.2
    app.kubernetes.io/component: objectscale-operator
    app.kubernetes.io/part-of: RELEASE-NAME
    helm.sh/chart: objectscale-manager-0.71.2
    release: RELEASE-NAME
    operator: objectscale-operator
    product: objectscale
subjects:
- kind: ServiceAccount
  name: objectscale-operator
  namespace: dellemc-sf426-domain-c45
roleRef:
  kind: ClusterRole
  name: dellemc-sf426-domain-c45-objectscale-operator
  apiGroup: rbac.authorization.k8s.io
---
# Source: objectscale-manager/templates/telemetry-rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: dellemc-sf426-domain-c45-inventory
  labels:
    release: RELEASE-NAME
subjects:
  - kind: ServiceAccount
    name: RELEASE-NAME-inventory
    namespace: dellemc-sf426-domain-c45
roleRef:
  kind: ClusterRole
  name: dellemc-sf426-domain-c45-inventory
  apiGroup: rbac.authorization.k8s.io
---
# Source: objectscale-manager/templates/telemetry-rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: dellemc-sf426-domain-c45-capacity
  labels:
    release: RELEASE-NAME
subjects:
  - kind: ServiceAccount
    name: RELEASE-NAME-capacity
    namespace: dellemc-sf426-domain-c45
roleRef:
  kind: ClusterRole
  name: dellemc-sf426-domain-c45-capacity
  apiGroup: rbac.authorization.k8s.io
---
# Source: objectscale-manager/templates/telemetry-rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: dellemc-sf426-domain-c45-performance
  labels:
    release: RELEASE-NAME
subjects:
  - kind: ServiceAccount
    name: RELEASE-NAME-performance
    namespace: dellemc-sf426-domain-c45
roleRef:
  kind: ClusterRole
  name: dellemc-sf426-domain-c45-performance
  apiGroup: rbac.authorization.k8s.io
---
# Source: objectscale-manager/templates/telemetry-rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: dellemc-sf426-domain-c45-health
  labels:
    release: RELEASE-NAME
subjects:
  - kind: ServiceAccount
    name: RELEASE-NAME-health
    namespace: dellemc-sf426-domain-c45
roleRef:
  kind: ClusterRole
  name: dellemc-sf426-domain-c45-health
  apiGroup: rbac.authorization.k8s.io
---
# Source: objectscale-manager/templates/telemetry-rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: dellemc-sf426-domain-c45-license-usage
  labels:
    release: RELEASE-NAME
subjects:
  - kind: ServiceAccount
    name: RELEASE-NAME-license-usage
    namespace: dellemc-sf426-domain-c45
roleRef:
  kind: ClusterRole
  name: dellemc-sf426-domain-c45-license-usage
  apiGroup: rbac.authorization.k8s.io
---
# Source: objectscale-manager/charts/bookkeeper-operator/templates/bookeeper-oper-rbac.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: RELEASE-NAME-bookkeeper-operator
  namespace: dellemc-sf426-domain-c45
  labels:
    app.kubernetes.io/name: bookkeeper-operator
    app.kubernetes.io/version: "0.1.3"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: "bookkeeper-operator-0.1.3"
rules:
- apiGroups:
  - bookkeeper.pravega.io
  resources:
  - "*"
  verbs:
  - "*"
- apiGroups:
  - ""
  resources:
  - pods
  - services
  - endpoints
  - persistentvolumeclaims
  - events
  - configmaps
  - secrets
  verbs:
  - '*'
- apiGroups:
  - apps
  resources:
  - deployments
  - daemonsets
  - replicasets
  - statefulsets
  verbs:
  - "*"
- apiGroups:
  - policy
  resources:
  - poddisruptionbudgets
  verbs:
  - "*"
- apiGroups:
  - batch
  resources:
  - jobs
  verbs:
  - '*'
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/fluxd/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: RELEASE-NAME-fluxd
  namespace: dellemc-sf426-domain-c45
rules:
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create"]
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["create", "get", "update", "patch", "delete"]
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/prometheus-alerts/templates/role.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: RELEASE-NAME-prometheus-alerts
  namespace: dellemc-sf426-domain-c45
rules:
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "update"]
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/rsyslog-client/templates/rbac_role.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
#  Role for rsyslog-client to find instance of rsyslog service
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app.kubernetes.io/name: RELEASE-NAME-rsyslog-client
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.54.0"
    app.kubernetes.io/part-of: RELEASE-NAME
    helm.sh/chart: rsyslog-client-0.54.0
    release: RELEASE-NAME
  name: "RELEASE-NAME-rsyslog-client"
  namespace: "dellemc-sf426-domain-c45"
rules:
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["list"]
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/throttler/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: RELEASE-NAME-throttler
  namespace: dellemc-sf426-domain-c45
rules:
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "update"]
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get", "list"]
---
# Source: objectscale-manager/charts/pravega-operator/templates/pravega-oper-rbac.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: RELEASE-NAME-pravega-operator
  namespace: dellemc-sf426-domain-c45
  labels:
    app.kubernetes.io/name: pravega-operator
    app.kubernetes.io/version: "0.5.2"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: "pravega-operator-0.5.2"
rules:
- apiGroups:
  - pravega.pravega.io
  resources:
  - "*"
  verbs:
  - "*"
- apiGroups:
  - ""
  resources:
  - pods
  - services
  - endpoints
  - persistentvolumeclaims
  - events
  - configmaps
  - secrets
  verbs:
  - '*'
- apiGroups:
  - apps
  resources:
  - deployments
  - daemonsets
  - replicasets
  - statefulsets
  verbs:
  - "*"
- apiGroups:
  - policy
  resources:
  - poddisruptionbudgets
  verbs:
  - "*"
- apiGroups:
  - batch
  resources:
  - jobs
  verbs:
  - '*'
- apiGroups:
  - bookkeeper.pravega.io
  resources:
  - "*"
  verbs:
  - "*"
---
# Source: objectscale-manager/templates/healthcheck-rbac.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: RELEASE-NAME-healthchecks
  namespace: dellemc-sf426-domain-c45
  labels:
    release: RELEASE-NAME
rules:
  - apiGroups:
      - ecs.dellemc.com
    resources:
      - '*'
    verbs:
      - get
      - list
  - apiGroups:
      - app.k8s.io
    resources:
      - "*"
    verbs:
      - get
      - list
  - apiGroups:
      - ""
    resources:
      - pods
      - secrets
      - services
      - endpoints
      - events
      - configmaps
      - applications
      - deployments
    verbs:
      - get
      - list
  - apiGroups:
      - apps
    resources:
      - deployments
      - daemonsets
      - replicasets
      - statefulsets
    verbs:
      - get
      - list
---
# Source: objectscale-manager/charts/bookkeeper-operator/templates/rolebinding.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: RELEASE-NAME-bookkeeper-operator
  namespace: dellemc-sf426-domain-c45
  labels:
    app.kubernetes.io/name: bookkeeper-operator
    app.kubernetes.io/version: "0.1.3"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: "bookkeeper-operator-0.1.3"
subjects:
- kind: ServiceAccount
  name: bookkeeper-operator
roleRef:
  kind: Role
  name: RELEASE-NAME-bookkeeper-operator
  apiGroup: rbac.authorization.k8s.io
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/fluxd/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: dellemc-sf426-domain-c45-RELEASE-NAME-fluxd
subjects:
  - kind: ServiceAccount
    name: RELEASE-NAME-fluxd
    namespace: dellemc-sf426-domain-c45
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: dellemc-sf426-domain-c45-object-store-monitor
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/fluxd/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: RELEASE-NAME-fluxd
subjects:
  - kind: ServiceAccount
    name: RELEASE-NAME-fluxd
    namespace: dellemc-sf426-domain-c45
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: RELEASE-NAME-fluxd
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/prometheus-alerts/templates/rolebinding.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: RELEASE-NAME-prometheus-alerts
subjects:
  - kind: ServiceAccount
    name: RELEASE-NAME-prometheus-alerts
    namespace: dellemc-sf426-domain-c45
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: RELEASE-NAME-prometheus-alerts
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/rsyslog-client/templates/rbac_rolebinding.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
#  RoleBinding for rsyslog-client to find instance of rsyslog service
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: "RELEASE-NAME-rsyslog-client"
  namespace: "dellemc-sf426-domain-c45"
  labels:
    app.kubernetes.io/name: RELEASE-NAME-rsyslog-client
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.54.0"
    app.kubernetes.io/part-of: RELEASE-NAME
    helm.sh/chart: rsyslog-client-0.54.0
    release: RELEASE-NAME
subjects:
  - apiGroup: rbac.authorization.k8s.io
    kind: Group
    name: system:serviceaccounts
roleRef:
  kind: Role
  apiGroup: rbac.authorization.k8s.io
  name: "RELEASE-NAME-rsyslog-client"
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/throttler/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: RELEASE-NAME-throttler
subjects:
  - kind: ServiceAccount
    name: RELEASE-NAME-throttler
    namespace: dellemc-sf426-domain-c45
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: RELEASE-NAME-throttler
---
# Source: objectscale-manager/charts/pravega-operator/templates/rolebinding.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: RELEASE-NAME-pravega-operator
  namespace: dellemc-sf426-domain-c45
  labels:
    app.kubernetes.io/name: pravega-operator
    app.kubernetes.io/version: "0.5.2"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: "pravega-operator-0.5.2"
subjects:
- kind: ServiceAccount
  name: pravega-operator
  namespace: dellemc-sf426-domain-c45
roleRef:
  kind: Role
  name: RELEASE-NAME-pravega-operator
  apiGroup: rbac.authorization.k8s.io
---
# Source: objectscale-manager/templates/healthcheck-rbac.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: RELEASE-NAME-healthchecks
  namespace: dellemc-sf426-domain-c45
  labels:
    release: RELEASE-NAME
subjects:
  - kind: ServiceAccount
    name: RELEASE-NAME-healthchecks
    namespace: dellemc-sf426-domain-c45
roleRef:
  kind: Role
  name: RELEASE-NAME-healthchecks
  apiGroup: rbac.authorization.k8s.io
---
# Source: objectscale-manager/charts/dcm/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: RELEASE-NAME-dcm
  namespace: dellemc-sf426-domain-c45
  labels:
    helm.sh/chart: dcm-0.71.2
    app.kubernetes.io/name: dcm
    app.kubernetes.io/instance: RELEASE-NAME
    product: objectscale
    release: RELEASE-NAME
    app.kubernetes.io/version: "0.71.2"
    app.kubernetes.io/managed-by: Helm
spec:
  type: LoadBalancer
  ports:
    - port: 9026
      targetPort: 9026
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: dcm
    app.kubernetes.io/instance: RELEASE-NAME
    product: objectscale
    release: RELEASE-NAME
---
# Source: objectscale-manager/charts/federation/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: fedsvc
  namespace: dellemc-sf426-domain-c45
  labels:
    helm.sh/chart: federation-0.71.2
    app.kubernetes.io/name: federation
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/version: "0.71.2"
    app.kubernetes.io/managed-by: Helm
  annotations:
    objectscale.dellemc.com/federationRegistration: "ObjectScale"
spec:
  type: LoadBalancer
  ports:
    - port: 9500
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: federation
    app.kubernetes.io/instance: RELEASE-NAME
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/fluxd/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "RELEASE-NAME-fluxd"
  labels:
    app.kubernetes.io/name: "RELEASE-NAME-fluxd"
    chart: "fluxd-0.54.0"
    release: "RELEASE-NAME"
    heritage: "Helm"
spec:
  type: ClusterIP
  ports:
  - name: api
    port: 8093
    targetPort: 8093
  selector:
    app.kubernetes.io/name: RELEASE-NAME-fluxd
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/grafana/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "RELEASE-NAME-grafana"
  labels:
    app.kubernetes.io/name: "RELEASE-NAME-grafana"
    chart: "grafana-0.54.0"
    release: "RELEASE-NAME"
    heritage: "Helm"
spec:
  type: ClusterIP
  ports:
  - name: api
    port: 3000
    targetPort: 3000
  selector:
    app.kubernetes.io/name: RELEASE-NAME-grafana
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/influxdb/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "RELEASE-NAME-influxdb"
  labels:
    app.kubernetes.io/name: "RELEASE-NAME-influxdb"
    chart: "influxdb-0.54.0"
    release: "RELEASE-NAME"
    heritage: "Helm"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - name: api
    port: 8086
    targetPort: 8086
  - name: rpc
    port: 8088
    targetPort: 8088
  selector:
    app.kubernetes.io/name: RELEASE-NAME-influxdb
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/rsyslog/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "RELEASE-NAME-rsyslog"
  labels:
    app.kubernetes.io/name: RELEASE-NAME-rsyslog
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.54.0"
    app.kubernetes.io/part-of: RELEASE-NAME
    helm.sh/chart: rsyslog-0.54.0
    release: RELEASE-NAME
spec:
  clusterIP: None
  ports:
  - name: rsyslog
    port: 10514
  selector:
    app.kubernetes.io/name: RELEASE-NAME-rsyslog
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/telegraf/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "RELEASE-NAME-telegraf"
  labels:
    app.kubernetes.io/name: "RELEASE-NAME-telegraf"
    chart: "telegraf-0.54.0"
    release: "RELEASE-NAME"
    heritage: "Helm"
spec:
  type: ClusterIP
  ports:
  - name: api
    port: 11002
    targetPort: 11002
  selector:
    app.kubernetes.io/name: RELEASE-NAME-telegraf
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/throttler/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "RELEASE-NAME-throttler"
  labels:
    app.kubernetes.io/name: "RELEASE-NAME-throttler"
    chart: "throttler-0.54.0"
    release: "RELEASE-NAME"
    heritage: "Helm"
spec:
  type: ClusterIP
  ports:
  - name: api
    port: 8094
    targetPort: 8094
  selector:
    app.kubernetes.io/name: RELEASE-NAME-throttler
---
# Source: objectscale-manager/charts/service-pod/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: RELEASE-NAME-service-pod 
    release: RELEASE-NAME
    product: objectscale 
  name: RELEASE-NAME-service-pod 
  namespace: dellemc-sf426-domain-c45
spec:
  type: ClusterIP
  ports:
  - port: 22
    name: ssh
    targetPort: ssh
    protocol: TCP
  selector:
    remote_access: objectscale-service-pod
---
# Source: objectscale-manager/charts/atlas-operator/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: atlas-operator
  namespace: dellemc-sf426-domain-c45
  labels:
    app.kubernetes.io/name: atlas-operator
    helm.sh/chart: atlas-operator-0.31.0
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/version: "0.13.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: atlas-operator
      app.kubernetes.io/instance: RELEASE-NAME
  template:
    metadata:
      labels:
        app.kubernetes.io/name: atlas-operator
        app.kubernetes.io/instance: RELEASE-NAME
        
        objectscale.dellemc.com/logging-inject: "true"
        objectscale.dellemc.com/logging-release-name: "RELEASE-NAME"
        app.kubernetes.io/namespace: "dellemc-sf426-domain-c45"
    spec:
      serviceAccountName: atlas-operator
      securityContext:
        {}
      containers:
        - name: atlas-operator
          image: "emccorp/atlas-operator:0.13.0"
          imagePullPolicy: IfNotPresent
          securityContext:
            {}
          resources:
            limits:
              cpu: 1
              memory: 500Mi
            requests:
              cpu: 250m
              memory: 300Mi
          args: ["--enable-leader-election"]
          env:
            - name: WATCH_NAMESPACE
              value: ""
---
# Source: objectscale-manager/charts/bookkeeper-operator/templates/operator.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: RELEASE-NAME-bookkeeper-operator
  namespace: dellemc-sf426-domain-c45
  labels:
    app.kubernetes.io/name: bookkeeper-operator
    app.kubernetes.io/version: "0.1.3"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: "bookkeeper-operator-0.1.3"
spec:
  replicas: 1
  selector:
    matchLabels:
      name: RELEASE-NAME-bookkeeper-operator
  template:
    metadata:
      labels:
        name: RELEASE-NAME-bookkeeper-operator
        component: bookkeeper-operator
        
        objectscale.dellemc.com/logging-inject: "true"
        objectscale.dellemc.com/logging-release-name: "RELEASE-NAME"
        app.kubernetes.io/namespace: "dellemc-sf426-domain-c45"
    spec:
      serviceAccountName: bookkeeper-operator
      containers:
        - name: RELEASE-NAME-bookkeeper-operator
          image: "emccorp/bookkeeper-operator:0.1.3-50-f528f6f"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 6000
              name: metrics
          command:
            - bookkeeper-operator
          args: ["-test", "-webhook=false"]
          env:
            - name: WATCH_NAMESPACE
              value: "dellemc-sf426-domain-c45"
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: OPERATOR_NAME
              value: RELEASE-NAME-bookkeeper-operator
          volumeMounts:
            - name: versions-volume
              mountPath: "/tmp/config"
      volumes:
        - name: versions-volume
          configMap:
            name: bk-supported-versions-map
---
# Source: objectscale-manager/charts/dcm/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: RELEASE-NAME-dcm
  namespace: dellemc-sf426-domain-c45
  labels:
    helm.sh/chart: dcm-0.71.2
    app.kubernetes.io/name: dcm
    app.kubernetes.io/instance: RELEASE-NAME
    product: objectscale
    release: RELEASE-NAME
    app.kubernetes.io/version: "0.71.2"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: dcm
      app.kubernetes.io/instance: RELEASE-NAME
      product: objectscale
      release: RELEASE-NAME
  template:
    metadata:
      labels:
        app.kubernetes.io/name: dcm
        app.kubernetes.io/instance: RELEASE-NAME
        product: objectscale
        release: RELEASE-NAME
        
        objectscale.dellemc.com/logging-inject: "true"
        objectscale.dellemc.com/logging-release-name: "RELEASE-NAME"
        app.kubernetes.io/namespace: "dellemc-sf426-domain-c45"
    spec:
      containers:
        - name: dcm
          env:
          - name: SPRING_PROFILES_ACTIVE
            value: "atlas,flex,dns"
          - name: ATLAS_SERVICE_HOSTNAME
            value: "RELEASE-NAME-dcm-atlas-client"
          - name: MY_POD_NAME
            valueFrom:
             fieldRef:
              fieldPath: metadata.name
          - name: MY_POD_NAMESPACE
            valueFrom:
             fieldRef:
              fieldPath: metadata.namespace
          - name: MY_POD_IP
            valueFrom:
             fieldRef:
              fieldPath: status.podIP
          image: "emccorp/dcm:0.71.2"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 9026
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /dcmhealthcheck
              port: http
            failureThreshold: 3
            periodSeconds: 60
          readinessProbe:
            httpGet:
              path: /dcmhealthcheck
              port: http
            failureThreshold: 3
            periodSeconds: 60
          volumeMounts:
            - name: log
              mountPath: /var/log
            - name: config
              mountPath: /opt/storageos/conf/dcm-log4j2.xml
              subPath: dcm-log4j2.xml
      volumes:
        - name: log
          emptyDir: {}
        - name: config
          configMap:
            name: dcm-log-config
---
# Source: objectscale-manager/charts/federation/templates/federation_deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fedsvc
  labels:
    helm.sh/chart: federation-0.71.2
    app.kubernetes.io/name: federation
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/version: "0.71.2"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: federation
      app.kubernetes.io/instance: RELEASE-NAME
  template:
    metadata:
      labels:
        app.kubernetes.io/name: federation
        app.kubernetes.io/instance: RELEASE-NAME
    spec:
      serviceAccountName: "federation"
      containers:
      - name: fedsvc
        resources:
          limits:
            memory: 500M
          requests:
            memory: 500M
        env:
        - name: ATLAS_SERVICE_HOSTNAME
          value: federation-atlas-client
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: MY_POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: MY_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        image: emccorp/fedsvc:0.71.2
        imagePullPolicy: IfNotPresent
        ports:
          - name: http
            containerPort: 9501 
            protocol: TCP
        livenessProbe:
            httpGet:
                path: /fedsvchealthcheck
                port: http
            failureThreshold: 3
            periodSeconds: 60
            initialDelaySeconds: 60
        readinessProbe:
            httpGet:
                path: /fedsvchealthcheck
                port: http
            failureThreshold: 3
            periodSeconds: 60
            initialDelaySeconds: 60
---
# Source: objectscale-manager/charts/objectscale-iam/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: objectscale-iam
  labels:
    helm.sh/chart: objectscale-iam-0.71.2
    app.kubernetes.io/name: objectscale-iam
    app.kubernetes.io/component: objectscale-iam
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/namespace: "dellemc-sf426-domain-c45"
    objectscale.dellemc.com/logging-inject: "true"
    objectscale.dellemc.com/logging-release-name: RELEASE-NAME
    product: objectscale
    release: RELEASE-NAME
    app.kubernetes.io/version: "0.71.2"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: objectscale-iam
      app.kubernetes.io/component: objectscale-iam
      app.kubernetes.io/instance: RELEASE-NAME
      app.kubernetes.io/namespace: "dellemc-sf426-domain-c45"
      objectscale.dellemc.com/logging-inject: "true"
      objectscale.dellemc.com/logging-release-name: RELEASE-NAME
      product: objectscale
      release: RELEASE-NAME
  template:
    metadata:
      labels:
        app.kubernetes.io/name: objectscale-iam
        app.kubernetes.io/component: objectscale-iam
        app.kubernetes.io/instance: RELEASE-NAME
        app.kubernetes.io/namespace: "dellemc-sf426-domain-c45"
        objectscale.dellemc.com/logging-inject: "true"
        objectscale.dellemc.com/logging-release-name: RELEASE-NAME
        product: objectscale
        release: RELEASE-NAME
    spec:
      containers:
      - name: iam
        resources:
          limits:
            memory: 2Gi
          requests:
            memory: 2Gi
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: "atlas,flex,dns"
        - name: ATLAS_SERVICE_HOSTNAME
          value: objectscale-iam-atlas-client
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: MY_POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: MY_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        image: emccorp/iamsvc:0.71.2
        imagePullPolicy: IfNotPresent
        ports:
          - name: https
            containerPort: 9401
            protocol: TCP
          - name: http
            containerPort: 9402
            protocol: TCP
        livenessProbe:
            httpGet:
                path: /iamhealthcheck
                port: http
            failureThreshold: 3
            periodSeconds: 60
            initialDelaySeconds: 60
        readinessProbe:
            httpGet:
                path: /iamhealthcheck/atlas
                port: http
            failureThreshold: 3
            periodSeconds: 60
            initialDelaySeconds: 60
        volumeMounts:
        - name: log
          mountPath: /opt/storageos/logs
        - name: tls-secrets
          mountPath: "/etc/nginx/ssl"
      volumes:
      - name: log
        emptyDir: {}
      - name: tls-secrets
        secret:
          secretName: objectscale-iam-tls
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/fluxd/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: RELEASE-NAME-fluxd
  labels:
    app.kubernetes.io/name: RELEASE-NAME-fluxd
    app.kubernetes.io/instance: RELEASE-NAME
    helm.sh/chart: fluxd-0.54.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: RELEASE-NAME-fluxd
      app.kubernetes.io/instance: RELEASE-NAME
  template:
    metadata:
      labels:
        app.kubernetes.io/name: RELEASE-NAME-fluxd
        app.kubernetes.io/instance: RELEASE-NAME
        release: RELEASE-NAME
        
        objectscale.dellemc.com/logging-inject: "true"
        objectscale.dellemc.com/logging-release-name: "RELEASE-NAME"
        app.kubernetes.io/namespace: "dellemc-sf426-domain-c45"
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/scheme: HTTP
        prometheus.io/port: "8093"
    spec:
      shareProcessNamespace: true
      serviceAccountName: RELEASE-NAME-fluxd
      initContainers:
      - name: confd-init
        image: "emccorp/confd-sidecar:3.7.0.0-1186.91aed4d8"
        imagePullPolicy: "IfNotPresent"
        command: ["bash"]
        args: ["-c", "echo /crash-dump/core-%e > /proc/sys/kernel/core_pattern; ulimit -c unlimited; GOTRACEBACK=crash /confd -onetime -sync-only -backend file -file /etc/fluxd-ext/influxdb-replicas/replicas.json -confdir /etc/confd_flex"]
        volumeMounts:
        - mountPath: /etc/fluxd-ext/influxdb-replicas
          name: influxdb-replicas-config
        - mountPath: /etc/confd_flex/templates
          name: configs-template
        - mountPath: /etc/confd_flex/conf.d
          name: configs-confd-template
        - mountPath: /etc/fluxd
          name: config
        - mountPath: /crash-dump
          name: crash-dump
        env:
        - name: NODE_ID
          valueFrom:
            fieldRef:
              # use pod name as node id
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: INFLUXDB_REPLICAS_PER_PARTITION
          value: "3"
        - name: RELEASE_NAME
          value: "RELEASE-NAME"
        - name: RELEASE_NAMESPACE
          value: "dellemc-sf426-domain-c45"
        - name: TLS_ENABLED
          value: "false"
        - name: GRAPHQL_ENDPOINT
          value: "http://objectscale-graphql.dellemc-sf426-domain-c45.svc.cluster.local:8080/graphql"
      containers:
      - name: fluxd
        image: "emccorp/fluxd:3.7.0.0-1186.91aed4d8"
        imagePullPolicy: "IfNotPresent"
        command: ["bash"]
        args: ["-c", "echo /crash-dump/core-%e > /proc/sys/kernel/core_pattern; ulimit -c unlimited; GOTRACEBACK=crash source /etc/fluxd/fluxd.env && fluxd --disable-lb --disable-cache --cf-disabled --disable-zk --node-id $NODE_ID --storage-hosts $STORAGE_HOSTS --store-namespace dellemc-sf426-domain-c45 --port 8093 --logger-config /non_existing"]
        resources:
          requests:
            memory: 350Mi
            ephemeral-storage: 950Mi
          limits:
            memory: 350Mi
            ephemeral-storage: 950Mi
        ports:
        - name: api
          containerPort: 8093
        env:
        - name: NODE_ID
          valueFrom:
            fieldRef:
              # use pod name as node id
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: INFLUXDB_REPLICAS_PER_PARTITION
          value: "3"
        - name: RELEASE_NAME
          value: "RELEASE-NAME"
        - name: RELEASE_NAMESPACE
          value: "dellemc-sf426-domain-c45"
        - name: TLS_ENABLED
          value: "false"
        - name: GRAPHQL_ENDPOINT
          value: "http://objectscale-graphql.dellemc-sf426-domain-c45.svc.cluster.local:8080/graphql"
        volumeMounts:
        - mountPath: /etc/fluxd/logger.json
          name: fluxd-logger-config
          subPath: logger.json
        - mountPath: /etc/fluxd
          name: config
        - mountPath: /crash-dump
          name: crash-dump
        - name: log
          mountPath: /var/log
        livenessProbe:
          httpGet:
            path: /metrics
            port: api
            scheme: HTTP
          initialDelaySeconds: 30
          timeoutSeconds: 30
          periodSeconds: 60
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /metrics
            port: api
            scheme: HTTP
          initialDelaySeconds: 5
          timeoutSeconds: 30
          periodSeconds: 60
          failureThreshold: 3
      - name: confd
        image: "emccorp/confd-sidecar:3.7.0.0-1186.91aed4d8"
        imagePullPolicy: "IfNotPresent"
        command: [ "bash" ]
        args: [ "-c", "echo /crash-dump/core-%e > /proc/sys/kernel/core_pattern; ulimit -c unlimited; GOTRACEBACK=crash /confd -backend file -file /etc/fluxd-ext/influxdb-replicas/replicas.json -confdir /etc/confd_flex -interval 300"]
        volumeMounts:
        - mountPath: /etc/fluxd-ext/influxdb-replicas
          name: influxdb-replicas-config
        - mountPath: /etc/confd_flex/templates
          name: configs-template
        - mountPath: /etc/confd_flex/conf.d
          name: configs-confd-template
        - mountPath: /etc/fluxd
          name: config
        - mountPath: /crash-dump
          name: crash-dump
        env:
        - name: NODE_ID
          valueFrom:
            fieldRef:
              # use pod name as node id
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: INFLUXDB_REPLICAS_PER_PARTITION
          value: "3"
        - name: RELEASE_NAME
          value: "RELEASE-NAME"
        - name: RELEASE_NAMESPACE
          value: "dellemc-sf426-domain-c45"
        - name: TLS_ENABLED
          value: "false"
        - name: GRAPHQL_ENDPOINT
          value: "http://objectscale-graphql.dellemc-sf426-domain-c45.svc.cluster.local:8080/graphql"
      volumes:
      - name: configs-template
        configMap:
          name: RELEASE-NAME-fluxd-configs-templates
      - name: configs-confd-template
        configMap:
          name: RELEASE-NAME-fluxd-confd-template
      - name: fluxd-logger-config
        configMap:
          name: RELEASE-NAME-fluxd-logger-config
      - name: config
        emptyDir: {}
      - name: crash-dump
        emptyDir: {}
      - name: log
        emptyDir: {}
      - name: influxdb-replicas-config
        configMap:
          name: RELEASE-NAME-influxdb-replicas
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/grafana/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: RELEASE-NAME-grafana
  labels:
    app.kubernetes.io/name: RELEASE-NAME-grafana
    helm.sh/chart: grafana-0.54.0
    app.kubernetes.io/instance: RELEASE-NAME
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: RELEASE-NAME-grafana
      app.kubernetes.io/instance: RELEASE-NAME
  template:
    metadata:
      labels:
        app.kubernetes.io/name: RELEASE-NAME-grafana
        app.kubernetes.io/instance: RELEASE-NAME
        release: RELEASE-NAME
        
        objectscale.dellemc.com/logging-inject: "true"
        objectscale.dellemc.com/logging-release-name: "RELEASE-NAME"
        app.kubernetes.io/namespace: "dellemc-sf426-domain-c45"
        
        objectscale.dellemc.com/logging-inject-logrotate: "true"
      annotations:
        
        objectscale.dellemc.com/logging-release-name: "RELEASE-NAME"
    spec:
      shareProcessNamespace: true
      serviceAccountName: RELEASE-NAME-fluxd
      initContainers:
      - name: confd-init
        image: "emccorp/confd-sidecar:3.7.0.0-1186.91aed4d8"
        imagePullPolicy: "IfNotPresent"
        command: ["bash"]
        args: ["-c", "echo /crash-dump/core-%e > /proc/sys/kernel/core_pattern; ulimit -c unlimited; GOTRACEBACK=crash /confd -onetime -sync-only -backend file -file /etc/fluxd-ext/influxdb-replicas/replicas.json -confdir /etc/confd_flex"]
        volumeMounts:
        - mountPath: /etc/fluxd-ext/influxdb-replicas
          name: influxdb-replicas-config
        - mountPath: /etc/confd_flex/templates
          name: configs-template
        - mountPath: /etc/confd_flex/conf.d
          name: configs-confd-template
        - mountPath: /etc/fluxd
          name: config
        - mountPath: /crash-dump
          name: crash-dump
        env:
        - name: NODE_ID
          valueFrom:
            fieldRef:
              # use pod name as node id
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: INFLUXDB_REPLICAS_PER_PARTITION
          value: "3"
        - name: RELEASE_NAME
          value: "RELEASE-NAME"
        - name: RELEASE_NAMESPACE
          value: "dellemc-sf426-domain-c45"
        - name: TLS_ENABLED
          value: "false"
        - name: GRAPHQL_ENDPOINT
          value: "http://objectscale-graphql.dellemc-sf426-domain-c45.svc.cluster.local:8080/graphql"
      containers:
      - name: grafana
        image: "emccorp/grafana:3.7.0.0-1186.91aed4d8"
        imagePullPolicy: "IfNotPresent"
        command: ["bash"]
        args: ["-c", "echo /crash-dump/core-%e > /proc/sys/kernel/core_pattern; ulimit -c unlimited; GOTRACEBACK=crash /entrypoint.sh"]
        resources:
          requests:
            memory: 300Mi
            ephemeral-storage: 850Mi
          limits:
            memory: 300Mi
            ephemeral-storage: 850Mi
        ports:
        - name: api
          containerPort: 3000
        env:
        - name: K8S_FLUXD
          value: "127.0.0.1"
        volumeMounts:
        - mountPath: /dashboards_flex/internal
          name: dashboards-internal
        - mountPath: /dashboards_flex/internal_oe
          name: dashboards-internal-oe
        - mountPath: /etc/grafana/profile.conf
          name: provision-profile
          subPath: profile.conf
        - mountPath: /etc/grafana/grafana_flex.ini
          name: config-grafana-ini
          subPath: grafana.ini
        - name: log
          mountPath: /var/log
        - mountPath: /crash-dump
          name: crash-dump
        # nginx logs to stdout, no need to mount log
        livenessProbe:
          httpGet:
            path: /api/health
            port: api
            scheme: HTTP
          initialDelaySeconds: 30
          timeoutSeconds: 30
          periodSeconds: 60
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/health
            port: api
            scheme: HTTP
          initialDelaySeconds: 5
          timeoutSeconds: 30
          periodSeconds: 60
          failureThreshold: 3
      - name: fluxd
        image: "emccorp/fluxd:3.7.0.0-1186.91aed4d8"
        imagePullPolicy: "IfNotPresent"
        command: ["bash"]
        args: ["-c", "echo /crash-dump/core-%e > /proc/sys/kernel/core_pattern; ulimit -c unlimited; GOTRACEBACK=crash source /etc/fluxd/fluxd.env && fluxd --disable-lb --cf-disabled --disable-zk --disable-cache --node-id $NODE_ID --storage-hosts $STORAGE_HOSTS --store-namespace dellemc-sf426-domain-c45 --port 8093 --logger-config /non_existing"]
        resources:
        ports:
        - name: api
          containerPort: 8093
        env:
        - name: NODE_ID
          valueFrom:
            fieldRef:
              # use pod name as node id
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: INFLUXDB_REPLICAS_PER_PARTITION
          value: "3"
        - name: RELEASE_NAME
          value: "RELEASE-NAME"
        - name: RELEASE_NAMESPACE
          value: "dellemc-sf426-domain-c45"
        - name: TLS_ENABLED
          value: "false"
        - name: GRAPHQL_ENDPOINT
          value: "http://objectscale-graphql.dellemc-sf426-domain-c45.svc.cluster.local:8080/graphql"
        volumeMounts:
        - mountPath: /etc/fluxd/logger.json
          name: fluxd-logger-config
          subPath: logger.json
        - mountPath: /etc/fluxd
          name: config
        - mountPath: /crash-dump
          name: crash-dump
        - name: log
          mountPath: /var/log
      
      - name: confd
        image: "emccorp/confd-sidecar:3.7.0.0-1186.91aed4d8"
        imagePullPolicy: "IfNotPresent"
        command: [ "bash" ]
        args: [ "-c", "echo /crash-dump/core-%e > /proc/sys/kernel/core_pattern; ulimit -c unlimited; GOTRACEBACK=crash /confd -backend file -file /etc/fluxd-ext/influxdb-replicas/replicas.json -confdir /etc/confd_flex -interval 300"]
        volumeMounts:
        - mountPath: /etc/fluxd-ext/influxdb-replicas
          name: influxdb-replicas-config
        - mountPath: /etc/confd_flex/templates
          name: configs-template
        - mountPath: /etc/confd_flex/conf.d
          name: configs-confd-template
        - mountPath: /etc/fluxd
          name: config
        - mountPath: /crash-dump
          name: crash-dump
        env:
        - name: NODE_ID
          valueFrom:
            fieldRef:
              # use pod name as node id
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: INFLUXDB_REPLICAS_PER_PARTITION
          value: "3"
        - name: RELEASE_NAME
          value: "RELEASE-NAME"
        - name: RELEASE_NAMESPACE
          value: "dellemc-sf426-domain-c45"
        - name: TLS_ENABLED
          value: "false"
        - name: GRAPHQL_ENDPOINT
          value: "http://objectscale-graphql.dellemc-sf426-domain-c45.svc.cluster.local:8080/graphql"
      volumes:
      - name: dashboards-internal
        configMap:
          name: RELEASE-NAME-grafana-dashboards-internal
      - name: dashboards-internal-oe
        configMap:
          name: RELEASE-NAME-grafana-dashboards-internal-oe
      - name: provision-profile
        configMap:
          name: RELEASE-NAME-grafana-profile
      - name: config-grafana-ini
        configMap:
          name: RELEASE-NAME-grafana-grafana-ini
      
      - name: configs-template
        configMap:
          name: RELEASE-NAME-fluxd-configs-templates
      - name: configs-confd-template
        configMap:
          name: RELEASE-NAME-fluxd-confd-template
      - name: fluxd-logger-config
        configMap:
          name: RELEASE-NAME-fluxd-logger-config
      - name: config
        emptyDir: {}
      - name: crash-dump
        emptyDir: {}
      - name: log
        emptyDir: {}
      - name: influxdb-replicas-config
        configMap:
          name: RELEASE-NAME-influxdb-replicas
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/influxdb-operator/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: RELEASE-NAME-influxdb-operator
  namespace: dellemc-sf426-domain-c45
  labels:
    app.kubernetes.io/name: RELEASE-NAME-influxdb-operator
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.71.2"
    app.kubernetes.io/part-of: RELEASE-NAME
    helm.sh/chart: influxdb-operator-0.71.2
    release: RELEASE-NAME
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: RELEASE-NAME-influxdb-operator
      app.kubernetes.io/instance: RELEASE-NAME
  template:
    metadata:
      labels:
        app.kubernetes.io/name: RELEASE-NAME-influxdb-operator
        app.kubernetes.io/instance: RELEASE-NAME
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: "0.71.2"
        app.kubernetes.io/part-of: RELEASE-NAME
        helm.sh/chart: influxdb-operator-0.71.2
        release: RELEASE-NAME
        objectscale.dellemc.com/sp-integrated: "true"
    spec:
      serviceAccountName: RELEASE-NAME-influxdb-operator
      securityContext:
        {}
      containers:
        - name: influxdb-operator
          image: "emccorp/influxdb-operator:3.7.0.0-1186.91aed4d8"
          imagePullPolicy: IfNotPresent
          securityContext:
            {}
          resources:
            requests:
              memory: 200Mi
              ephemeral-storage: 650Mi
            limits:
              memory: 200Mi
              ephemeral-storage: 650Mi
          command: ["bash"]
          args: ["-c", "echo /crash-dump/core-%e > /proc/sys/kernel/core_pattern; ulimit -c unlimited; GOTRACEBACK=crash ./manager --enable-leader-election"]
          env:
            - name: WATCH_NAMESPACE
              value: ""
          volumeMounts:
          - mountPath: /crash-dump
            name: crash-dump
      volumes:
      - name: crash-dump
        emptyDir: {}
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/prometheus-alerts/templates/deployment.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
apiVersion: apps/v1
kind: Deployment
metadata:
  name: RELEASE-NAME-prometheus-alerts
  labels:
    app.kubernetes.io/name: RELEASE-NAME-prometheus-alerts
    app.kubernetes.io/instance: RELEASE-NAME
    helm.sh/chart: prometheus-alerts-0.54.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: RELEASE-NAME-prometheus-alerts
      app.kubernetes.io/instance: RELEASE-NAME
  template:
    metadata:
      labels:
        app.kubernetes.io/name: RELEASE-NAME-prometheus-alerts
        app.kubernetes.io/instance: RELEASE-NAME
        release: RELEASE-NAME
        
        objectscale.dellemc.com/logging-inject: "true"
        objectscale.dellemc.com/logging-release-name: "RELEASE-NAME"
        app.kubernetes.io/namespace: "dellemc-sf426-domain-c45"
      annotations:
    spec:
      serviceAccountName: RELEASE-NAME-prometheus-alerts
      containers:
      - name: prometheus
        image: "emccorp/prometheus:3.7.0.0-1186.91aed4d8"
        imagePullPolicy: "IfNotPresent"
        args:
          - --storage.tsdb.path=/data
          - --storage.tsdb.retention.time=6h
          - --config.file=/etc/prometheus/prometheus.yaml
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
          failureThreshold: 3
          successThreshold: 1
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
          failureThreshold: 3
          successThreshold: 1
        resources:
          limits:
            memory: 182Mi
          requests:
            memory: 182Mi
        volumeMounts:
        - mountPath: /etc/prometheus
          name: prometheus-config
        - mountPath: /etc/alerts
          name: prometheus-alerts-config
        - mountPath: /data
          name: prometheus-storage-volume
        - mountPath: /crash-dump
          name: crash-dump
      - name: alertmanager
        image: "emccorp/alertmanager:3.7.0.0-1186.91aed4d8"
        imagePullPolicy: "IfNotPresent"
        args:
          - --storage.path=/data
          - --config.file=/etc/alertmanager/alertmanager.yaml
          - --data.retention=120h
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9093
          initialDelaySeconds: 30
          timeoutSeconds: 30
        volumeMounts:
        - mountPath: /etc/alertmanager
          name: prometheus-alertmanager-config
        - mountPath: /data
          name: alertmanager-storage-volume
        - mountPath: /crash-dump
          name: crash-dump
      volumes:
      - name: prometheus-config
        configMap:
          name: RELEASE-NAME-prometheus-alerts-config
      - name: prometheus-alerts-config
        configMap:
          name: RELEASE-NAME-prometheus-alerts-alerts-config
      - name: prometheus-alertmanager-config
        configMap:
          name: RELEASE-NAME-prometheus-alerts-alertmanager-config
      - name: prometheus-storage-volume
        emptyDir: {}
      - name: alertmanager-storage-volume
        emptyDir: {}
      - name: crash-dump
        emptyDir: {}
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/statefuldaemonset-operator/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: RELEASE-NAME-statefuldaemonset-operator
  namespace: dellemc-sf426-domain-c45
  labels:
    app.kubernetes.io/name: RELEASE-NAME-statefuldaemonset-operator
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.71.2"
    app.kubernetes.io/part-of: RELEASE-NAME
    helm.sh/chart: statefuldaemonset-operator-0.71.2
    release: RELEASE-NAME
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: RELEASE-NAME-statefuldaemonset-operator
      app.kubernetes.io/instance: RELEASE-NAME
  template:
    metadata:
      labels:
        app.kubernetes.io/name: RELEASE-NAME-statefuldaemonset-operator
        app.kubernetes.io/instance: RELEASE-NAME
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: "0.71.2"
        app.kubernetes.io/part-of: RELEASE-NAME
        helm.sh/chart: statefuldaemonset-operator-0.71.2
        release: RELEASE-NAME
        objectscale.dellemc.com/sp-integrated: "true"
    spec:
      serviceAccountName: RELEASE-NAME-statefuldaemonset-operator
      securityContext:
        {}
      containers:
        - name: statefuldaemonset-operator
          image: "emccorp/statefuldaemonset-operator:3.7.0.0-1186.91aed4d8"
          imagePullPolicy: IfNotPresent
          securityContext:
            {}
          resources:
            requests:
              memory: 200Mi
              ephemeral-storage: 650Mi
            limits:
              memory: 200Mi
              ephemeral-storage: 650Mi
          command: ["bash"]
          args: ["-c", "echo /crash-dump/core-%e > /proc/sys/kernel/core_pattern; ulimit -c unlimited; GOTRACEBACK=crash ./manager --enable-leader-election"]
          env:
            - name: WATCH_NAMESPACE
              value: ""
          volumeMounts:
          - mountPath: /crash-dump
            name: crash-dump
      volumes:
      - name: crash-dump
        emptyDir: {}
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/telegraf/templates/deployment.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
apiVersion: apps/v1
kind: Deployment
metadata:
  name: RELEASE-NAME-telegraf
  labels:
    app.kubernetes.io/name: RELEASE-NAME-telegraf
    helm.sh/chart: telegraf-0.54.0
    app.kubernetes.io/instance: RELEASE-NAME
spec:
  replicas:  1
  selector:
    matchLabels:
      app.kubernetes.io/name: RELEASE-NAME-telegraf
  template:
    metadata:
      labels:
        app.kubernetes.io/name: RELEASE-NAME-telegraf
        release: RELEASE-NAME
        
        objectscale.dellemc.com/logging-inject: "true"
        objectscale.dellemc.com/logging-release-name: "RELEASE-NAME"
        app.kubernetes.io/namespace: "dellemc-sf426-domain-c45"
      annotations:
        # Include a hash of the configmap in the pod template
        # This means that if the configmap changes, the deployment will be rolled
        checksum/config: c1d1e9f6352d485f036171ebc206769e08a6e6f7b254d386d3337b955be42a1f
    spec:
      shareProcessNamespace: true
      serviceAccountName: RELEASE-NAME-telegraf
      initContainers:
      - name: confd-init
        image: "emccorp/confd-sidecar:3.7.0.0-1186.91aed4d8"
        imagePullPolicy: "IfNotPresent"
        command: ["bash"]
        args: ["-c", "echo /crash-dump/core-%e > /proc/sys/kernel/core_pattern; ulimit -c unlimited; GOTRACEBACK=crash /confd -onetime -sync-only -backend file -file /etc/telegraf-ext/influxdb-replicas/replicas.json -confdir /etc/confd_flex"]
        volumeMounts:
        - mountPath: /etc/telegraf-ext/influxdb-replicas
          name: influxdb-replicas-config
        - mountPath: /etc/confd_flex/templates
          name: configs-template
        - mountPath: /etc/confd_flex/conf.d
          name: configs-confd-template
        - mountPath: /etc/telegraf
          name: config
        - mountPath: /crash-dump
          name: crash-dump
        env:
        - name: INFLUXDB_REPLICAS_PER_PARTITION
          value: "3"
        - name: RELEASE_NAME
          value: "RELEASE-NAME"
        - name: RELEASE_NAMESPACE
          value: "dellemc-sf426-domain-c45"
        - name: SCHEME
          value: "http"
      containers:
      - name: telegraf
        image: "emccorp/telegraf:3.7.0.0-1186.91aed4d8"
        imagePullPolicy: "IfNotPresent"
        command: ["bash"]
        args: ["-c", "echo /crash-dump/core-%e > /proc/sys/kernel/core_pattern; ulimit -c unlimited; GOTRACEBACK=crash telegraf --config /etc/telegraf/telegraf.conf --config-directory /etc/telegraf/telegraf.d/"]
        resources:
          requests:
            memory: 200Mi
            ephemeral-storage: 650Mi
          limits:
            memory: 200Mi
            ephemeral-storage: 650Mi
        env:
        - name: COLLECTION_INTERVAL
          value: 300s
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        volumeMounts:
        - mountPath: /etc/telegraf
          name: config
        - name: additional-configs
          mountPath: /etc/telegraf/telegraf.d
        - mountPath: /crash-dump
          name: crash-dump
      - name: confd
        image: "emccorp/confd-sidecar:3.7.0.0-1186.91aed4d8"
        imagePullPolicy: "IfNotPresent"
        command: [ "bash" ]
        args: [ "-c", "echo /crash-dump/core-%e > /proc/sys/kernel/core_pattern; ulimit -c unlimited; GOTRACEBACK=crash /confd -backend file -file /etc/telegraf-ext/influxdb-replicas/replicas.json -confdir /etc/confd_flex -interval 300"]
        volumeMounts:
        - mountPath: /etc/telegraf-ext/influxdb-replicas
          name: influxdb-replicas-config
        - mountPath: /etc/confd_flex/templates
          name: configs-template
        - mountPath: /etc/confd_flex/conf.d
          name: configs-confd-template
        - mountPath: /etc/telegraf
          name: config
        - mountPath: /crash-dump
          name: crash-dump
        env:
        - name: INFLUXDB_REPLICAS_PER_PARTITION
          value: "3"
        - name: RELEASE_NAME
          value: "RELEASE-NAME"
        - name: RELEASE_NAMESPACE
          value: "dellemc-sf426-domain-c45"
        - name: SCHEME
          value: "http"
      
      volumes:
      - name: config
        emptyDir: {}
      - name: configs-template
        configMap:
          name: RELEASE-NAME-telegraf-config-template
      - name: configs-confd-template
        configMap:
          name: RELEASE-NAME-telegraf-confd-template
      - name: additional-configs
        configMap:
          name: telegraf-external-monitoring-endpoint
          optional: true
      - name: crash-dump
        emptyDir: {}
      - name: log
        emptyDir: {}
      - name: influxdb-replicas-config
        configMap:
          name: RELEASE-NAME-influxdb-replicas
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/throttler/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: RELEASE-NAME-throttler
  labels:
    app.kubernetes.io/name: RELEASE-NAME-throttler
    app.kubernetes.io/instance: RELEASE-NAME
    helm.sh/chart: throttler-0.54.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: RELEASE-NAME-throttler
      app.kubernetes.io/instance: RELEASE-NAME
  template:
    metadata:
      labels:
        app.kubernetes.io/name: RELEASE-NAME-throttler
        app.kubernetes.io/instance: RELEASE-NAME
        release: RELEASE-NAME
        
        objectscale.dellemc.com/logging-inject: "true"
        objectscale.dellemc.com/logging-release-name: "RELEASE-NAME"
        app.kubernetes.io/namespace: "dellemc-sf426-domain-c45"
      annotations:
    spec:
      serviceAccountName: RELEASE-NAME-throttler
      containers:
      - name: throttler
        image: "emccorp/throttler:3.7.0.0-1186.91aed4d8"
        imagePullPolicy: "IfNotPresent"
        command: ["bash"]
        args: ["-c", "echo /crash-dump/core-%e > /proc/sys/kernel/core_pattern; ulimit -c unlimited; GOTRACEBACK=crash throttler --logger-config /etc/throttler/logger.json --port 8094"]
        resources:
          requests:
            memory: 200Mi
            ephemeral-storage: 650Mi
          limits:
            memory: 200Mi
            ephemeral-storage: 650Mi
        ports:
          - name: api
            containerPort: 8094
        env:
        - name: K8S_NAMESPACE
          value: "dellemc-sf426-domain-c45"
        - name: THROTTLER_APP_NAME
          value: "RELEASE-NAME"
        volumeMounts:
        - mountPath: /etc/throttler/throttler.conf
          name: throttler-config
          subPath: throttler.conf
        - mountPath: /etc/cq_flex
          name: cq
        - mountPath: /etc/throttler/logger.json
          name: logger-config
          subPath: logger.json
        - mountPath: /etc/fluxd-alerter/
          name: fluxd-alerter
        - mountPath: /crash-dump
          name: crash-dump
        - name: log
          mountPath: /var/log
        livenessProbe:
          httpGet:
            path: /metrics
            port: api
            scheme: HTTP
          initialDelaySeconds: 30
          timeoutSeconds: 30
          periodSeconds: 60
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /metrics
            port: api
            scheme: HTTP
          initialDelaySeconds: 5
          timeoutSeconds: 30
          periodSeconds: 60
          failureThreshold: 3
      
      volumes:
      - name: throttler-config
        configMap:
          name: RELEASE-NAME-throttler-config
      - name: cq
        configMap:
          name: RELEASE-NAME-throttler-cq
      - name: logger-config
        configMap:
          name: RELEASE-NAME-throttler-logger-config
      - name: fluxd-alerter
        configMap:
          name: RELEASE-NAME-throttler-fluxd-alerter
      - name: crash-dump
        emptyDir: {}
      - name: log
        emptyDir: {}
---
# Source: objectscale-manager/charts/pravega-operator/templates/operator.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: RELEASE-NAME-pravega-operator
  namespace: dellemc-sf426-domain-c45
  labels:
    app.kubernetes.io/name: pravega-operator
    app.kubernetes.io/version: "0.5.2"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: "pravega-operator-0.5.2"
spec:
  replicas: 1
  selector:
    matchLabels:
      name: RELEASE-NAME-pravega-operator
  template:
    metadata:
      labels:
        name: RELEASE-NAME-pravega-operator
        component: pravega-operator
        
        objectscale.dellemc.com/logging-inject: "true"
        objectscale.dellemc.com/logging-release-name: "RELEASE-NAME"
        app.kubernetes.io/namespace: "dellemc-sf426-domain-c45"
    spec:
      automountServiceAccountToken: true
      serviceAccountName: pravega-operator
      containers:
      - name: RELEASE-NAME-pravega-operator
        image: "emccorp/pravega-operator:0.5.2-211-24bb31d0"
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 6000
          name: metrics
        command:
        - pravega-operator
        args: ["-test", "-webhook=false"]
        env:
        - name: WATCH_NAMESPACE
          value: "dellemc-sf426-domain-c45"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: OPERATOR_NAME
          value: RELEASE-NAME-pravega-operator
        volumeMounts:
        - name: versions-volume
          mountPath: "/tmp/config"
      volumes:
      - name: versions-volume
        configMap:
          name: supported-versions-map
---
# Source: objectscale-manager/charts/service-pod/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: RELEASE-NAME-service-pod
  namespace: dellemc-sf426-domain-c45
  labels:
    release: RELEASE-NAME
    product: objectscale
    app: RELEASE-NAME-service-pod
spec:
  replicas: 1
  selector:
    matchLabels:
      app: RELEASE-NAME-service-pod
  template:
    metadata:
      labels:
        app: RELEASE-NAME-service-pod
        name: RELEASE-NAME-service-pod
        release: RELEASE-NAME
        remote_access: objectscale-service-pod
        product: objectscale
    spec:
      serviceAccountName: RELEASE-NAME-service-pod-sa
      containers:
      - name: service-pod
        image: emccorp/objectscale-service-tools:2.71.2
        imagePullPolicy: IfNotPresent
        command: ["/root/entrypoint.sh"]
        ports:
        - containerPort: 22
          name: ssh
          protocol: TCP
        resources:
          requests:
            memory: 2Gi
        securityContext:
          allowPrivilegeEscalation: true
        env:
        - name: MY_POD_IP
          valueFrom:
              fieldRef:
                fieldPath: status.podIP
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: DELL_EMC_PRODUCT
          value: objectscale
        - name: RELEASE_NAME
          value: RELEASE-NAME
        resources:
          limits:
            ephemeral-storage: 20Gi
          requests:
            ephemeral-storage: 10Gi
            memory: 2Gi
        volumeMounts:
        - mountPath: /dev/shm
          name: dshm
        - mountPath: /tmp
          name: host-data
        - mountPath: /etc/svcpod/creds
          name: creds-secret-vol
      dnsPolicy: ClusterFirst
      volumes:
      - name: dshm
        emptyDir:
          medium: Memory
      - name: host-data
        emptyDir: {}
      - name: creds-secret-vol
        secret:
          secretName: RELEASE-NAME-service-pod-secrets
---
# Source: objectscale-manager/charts/zookeeper-operator/templates/operator.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zookeeper-operator
  namespace: dellemc-sf426-domain-c45
  labels:
    app.kubernetes.io/name: zookeeper-operator
    helm.sh/chart: zookeeper-operator-0.2.10
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/version: 0.2.10
    app.kubernetes.io/component: zookeeper-operator
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: zookeeper-operator
      app.kubernetes.io/component: zookeeper-operator
  template:
    metadata:
      labels:
        app.kubernetes.io/name: zookeeper-operator
        helm.sh/chart: zookeeper-operator-0.2.10
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/instance: RELEASE-NAME
        app.kubernetes.io/version: 0.2.10
        app.kubernetes.io/component: zookeeper-operator
        
        objectscale.dellemc.com/logging-inject: "true"
        objectscale.dellemc.com/logging-release-name: "RELEASE-NAME"
        app.kubernetes.io/namespace: "dellemc-sf426-domain-c45"
    spec:
      containers:
        - name: zookeeper-operator
          image: emccorp/zookeeper-operator:2.10.0-b1519ae
          imagePullPolicy: IfNotPresent
          ports:
          - containerPort: 60000
            name: metrics
          command:
          - zookeeper-operator
          env:
            - name: WATCH_NAMESPACE
              value: ""
            - name: OPERATOR_NAME
              value: "zookeeper-operator"
---
# Source: objectscale-manager/templates/operator.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: objectscale-operator
  namespace: dellemc-sf426-domain-c45
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.71.2
    app.kubernetes.io/component: objectscale-operator
    app.kubernetes.io/part-of: RELEASE-NAME
    helm.sh/chart: objectscale-manager-0.71.2
    operator: objectscale-operator
    product: objectscale
    release: RELEASE-NAME
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: objectscale-manager
      app.kubernetes.io/component: objectscale-operator
  template:
    metadata:
      labels:
        app.kubernetes.io/name: objectscale-manager
        app.kubernetes.io/instance: RELEASE-NAME
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: 0.71.2
        app.kubernetes.io/component: objectscale-operator
        app.kubernetes.io/part-of: RELEASE-NAME
        helm.sh/chart: objectscale-manager-0.71.2
        operator: objectscale-operator
        product: objectscale
        release: RELEASE-NAME
        
        objectscale.dellemc.com/logging-inject: "true"
        objectscale.dellemc.com/logging-release-name: "RELEASE-NAME"
        app.kubernetes.io/namespace: "dellemc-sf426-domain-c45"
    spec:
      serviceAccountName: objectscale-operator
      tolerations:
      containers:
      - name: operator
        image: emccorp/objectscale-operator:0.71.2
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 60000
          name: metrics
        command: ["bash"]
        args: ["-c", "echo /crash-dump/core-%e > /proc/sys/kernel/core_pattern; ulimit -c unlimited; GOTRACEBACK=crash /usr/local/bin/objectscale-operator"]
        resources:
          limits:
            memory: 500Mi
            ephemeral-storage: 1256Mi
          requests:
            memory: 300Mi
            ephemeral-storage: 1256Mi
        volumeMounts:
        - name: logger-config
          mountPath: /etc/config
        - name: crash-dump
          mountPath: /crash-dump
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: OPERATOR_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: MY_POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: PLATFORM
          value: Default
        - name: IAM_SERVICE_NAME
          value: "objectscale-iam"
        - name: FEDERATION_SERVICE_NAME
          value: "fedsvc"
        - name: DCM_SERVICE_HOSTNAME
          value: "RELEASE-NAME-dcm"
        - name: LOG_DIRECTION
          value: stdout
        - name: WATCH_NAMESPACE
          value: ""
        - name: OPERATOR_NAME
          value: objectscale-operator
        - name: LOG_DIRECTION
          value: stdout

# Because volumes config was created if platform is not VMware and logReceiver is active it's needed to add this
# checking here to save previous logic
      volumes:
        - name: logger-config
          configMap:
            name: logger-config
        - name: crash-dump
          emptyDir: {}
---
# Source: objectscale-manager/charts/bookkeeper-operator/templates/certificate.yaml
---
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/fluxd/templates/deployment.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/grafana/templates/dashboards.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/grafana/templates/deployment.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/grafana/templates/nginx-config.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/influxdb-operator/templates/influxdb_editor_role.yaml
# permissions for end users to edit influxdbs.
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/influxdb-operator/templates/influxdb_viewer_role.yaml
# permissions for end users to view influxdbs.
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/influxdb-operator/templates/leader_election_role.yaml
# permissions to do leader election.
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/influxdb/templates/influxdb-lib.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/influxdb/templates/influxdb.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/influxdb/templates/nginx-config-context.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/influxdb/templates/nginx-config.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/prometheus-alerts/templates/nginx_config.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/statefuldaemonset-operator/templates/leader_election_role.yaml
# permissions to do leader election.
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/statefuldaemonset-operator/templates/statefuldaemonset_editor_role.yaml
# permissions for end users to edit statefuldaemonsets.
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/statefuldaemonset-operator/templates/statefuldaemonset_viewer_role.yaml
# permissions for end users to view statefuldaemonsets.
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/telegraf/templates/service.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/throttler/templates/alerter.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/throttler/templates/alerter_app_config.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/throttler/templates/application.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/throttler/templates/config_throttler.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/throttler/templates/cq.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/throttler/templates/deployment.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/throttler/templates/logger.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/throttler/templates/nginx-config.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#
---
# Source: objectscale-manager/charts/pravega-operator/templates/certificate.yaml
---
---
# Source: objectscale-manager/charts/objectscale-monitoring/templates/application.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
# Application is required by KAHM to match <APP_NAME>-app-config config map
# and events created by Alert Manager
apiVersion: app.k8s.io/v1beta1
kind: Application
metadata:
  name: objectscale-monitoring
  labels:
    app.kubernetes.io/name: RELEASE-NAME-objectscale-monitoring
  annotations:
    com.dellemc.kahm.subscribed: "true"
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: RELEASE-NAME-objectscale-monitoring
---
# Source: objectscale-manager/templates/objectscale-manager-app.yaml
apiVersion: app.k8s.io/v1beta1
kind: Application
metadata:
  name: objectscale-manager
  namespace: dellemc-sf426-domain-c45
  labels:
    app.kubernetes.io/name: objectscale-manager
    app.kubernetes.io/version: 0.71.2
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: objectscale-manager-0.71.2
    release: RELEASE-NAME
    product: objectscale
  annotations:
    com.dellemc.kahm.subscribed: "true"
    nautilus.dellemc.com/run-level: "10"
    nautilus.dellemc.com/chart-name: objectscale-manager
    nautilus.dellemc.com/chart-version: 0.71.2
    nautilus.dellemc.com/chart-values: "{\"affinity\":{},\"atlas\":{\"enabled\":true},\"atlas-operator\":{\"affinity\":{},\"common-monitoring-lib\":{\"exports\":{\"default\":{\"rsyslog_client_image_pull_policy\":\"IfNotPresent\",\"rsyslog_client_tag\":\"3.7.0.0-1174.d65bd7ec\"}},\"global\":{\"enableHealthcheck\":false,\"labels\":{},\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"platform\":\"Default\",\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"watchAllNamespaces\":true}},\"global\":{\"enableHealthcheck\":false,\"labels\":{},\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"platform\":\"Default\",\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"watchAllNamespaces\":true},\"image\":{\"pullPolicy\":\"IfNotPresent\",\"repository\":\"atlas-operator\"},\"nameOverride\":\"\",\"nodeSelector\":{},\"podSecurityContext\":{},\"resources\":{\"limits\":{\"cpu\":1,\"memory\":\"500Mi\"},\"requests\":{\"cpu\":\"250m\",\"memory\":\"300Mi\"}},\"securityContext\":{},\"tolerations\":[]},\"bookkeeper\":{\"enabled\":true},\"bookkeeper-operator\":{\"common-monitoring-lib\":{\"exports\":{\"default\":{\"rsyslog_client_image_pull_policy\":\"IfNotPresent\",\"rsyslog_client_tag\":\"3.7.0.0-1174.d65bd7ec\"}},\"global\":{\"enableHealthcheck\":false,\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"platform\":\"Default\",\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"watchAllNamespaces\":true}},\"crd\":{\"create\":true},\"global\":{\"enableHealthcheck\":false,\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"platform\":\"Default\",\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"watchAllNamespaces\":true},\"hooks\":{\"backoffLimit\":10,\"image\":{\"repository\":\"k8s-kubectl\",\"tag\":\"v1.16.10\"}},\"image\":{\"pullPolicy\":\"IfNotPresent\",\"repository\":\"bookkeeper-operator\",\"tag\":\"0.1.3-50-f528f6f\"},\"rbac\":{\"create\":true},\"serviceAccount\":{\"create\":true,\"name\":\"bookkeeper-operator\"},\"testmode\":{\"enabled\":true,\"version\":\"0.9.0\"},\"watchNamespace\":\"\",\"webhookCert\":{\"certName\":\"selfsigned-cert-bk\",\"generate\":false,\"secretName\":\"selfsigned-cert-tls-bk\"}},\"createApplicationResource\":true,\"dcm\":{\"atlas\":{\"affinity\":false,\"image\":{\"pullPolicy\":\"IfNotPresent\",\"repository\":\"atlas\",\"tag\":\"1.1.3\"},\"persistence\":{\"size\":\"1Gi\"}},\"common-monitoring-lib\":{\"exports\":{\"default\":{\"rsyslog_client_image_pull_policy\":\"IfNotPresent\",\"rsyslog_client_tag\":\"3.7.0.0-1146.a692701d\"}},\"global\":{\"enableHealthcheck\":false,\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"performanceProfile\":\"Small\",\"platform\":\"Default\",\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"watchAllNamespaces\":true}},\"enabled\":true,\"global\":{\"enableHealthcheck\":false,\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"performanceProfile\":\"Small\",\"platform\":\"Default\",\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"watchAllNamespaces\":true},\"image\":{\"pullPolicy\":\"IfNotPresent\",\"repository\":\"dcm\"},\"livenessProbe\":{\"probePath\":\"/dcmhealthcheck\"},\"readinessProbe\":{\"probePath\":\"/dcmhealthcheck\"},\"replicaCount\":1,\"service\":{\"port\":9026,\"targetPort\":9026,\"type\":\"LoadBalancer\"},\"tag\":\"0.71.2\"},\"debugMode\":false,\"features\":{\"spOperatorEnabled\":false},\"federation\":{\"atlas\":{\"disableAntiAffinity\":false,\"image\":{\"pullPolicy\":\"IfNotPresent\",\"repository\":\"atlas\",\"tag\":\"1.1.3\"},\"persistence\":{\"size\":\"1Gi\"},\"replicaCount\":3},\"enabled\":true,\"fedsvc\":{\"image\":{\"pullPolicy\":\"IfNotPresent\",\"repository\":\"fedsvc\"},\"livenessProbe\":{\"probePath\":\"/fedsvchealthcheck\"},\"readinessProbe\":{\"probePath\":\"/fedsvchealthcheck\"},\"replicaCount\":3,\"service\":{\"port\":9500,\"type\":\"LoadBalancer\"}},\"global\":{\"enableHealthcheck\":false,\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"platform\":\"Default\",\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"watchAllNamespaces\":true},\"tag\":\"0.71.2\"},\"fluentbitAgent\":{\"image\":{\"repository\":\"fluent-bit\",\"tag\":\"0.28.0\"}},\"global\":{\"enableHealthcheck\":false,\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"platform\":\"Default\",\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"watchAllNamespaces\":true},\"healthChecks\":{\"capacity\":{\"disabled\":true,\"image\":{\"repository\":\"objectscale-capacity\",\"tag\":null},\"schedule\":\"0 * * * *\"},\"health\":{\"disabled\":false,\"image\":{\"repository\":\"objectscale-health\",\"tag\":null},\"schedule\":\"*/10 * * * *\"},\"inventory\":{\"disabled\":false,\"image\":{\"repository\":\"objectscale-inventory\",\"tag\":null},\"schedule\":\"0 * * * *\"},\"licenseUsage\":{\"disabled\":false,\"image\":{\"repository\":\"objectscale-license-usage\",\"tag\":null},\"schedule\":\"0 */6 * * *\"},\"performance\":{\"disabled\":true,\"image\":{\"repository\":\"objectscale-performance\",\"tag\":null},\"schedule\":\"*/10 * * * *\"},\"preUpdate\":{\"image\":{\"repository\":\"objectscale-manager-pre-update\",\"tag\":null}}},\"hooks\":{\"registry\":\"emccorp\",\"repository\":\"k8s-kubectl\",\"tag\":\"v1.16.10\"},\"iam\":{\"enabled\":true},\"image\":{\"repository\":\"objectscale-operator\",\"tag\":null},\"installApplicationCRD\":true,\"installObjectStoreCRD\":true,\"logReceiver\":{\"image\":{\"repository\":\"rsyslog\",\"tag\":null},\"persistence\":{\"accessMode\":\"ReadWriteOnce\",\"enabled\":true,\"size\":\"50Gi\"}},\"loggerConfig\":{\"development\":true,\"disableCaller\":false,\"disableStacktrace\":false,\"enabled\":true,\"encoderConfig\":{\"callerEncoder\":\"short\",\"callerKey\":\"C\",\"durationEncoder\":\"string\",\"levelEncoder\":\"capital\",\"levelKey\":\"L\",\"lineEnding\":\"\\n\",\"messageKey\":\"M\",\"nameKey\":\"N\",\"stacktraceKey\":\"S\",\"timeEncoder\":\"iso8601\",\"timeKey\":\"T\"},\"encoding\":\"console\",\"errorOutputPaths\":[\"stderr\"],\"level\":\"info\",\"outputPaths\":[\"stdout\"]},\"nodeSelector\":{},\"objectscale-gateway\":{\"enabled\":false,\"global\":{\"enableHealthcheck\":false,\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"platform\":\"Default\",\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"watchAllNamespaces\":true},\"objectscaleGateway\":{\"external\":{\"service\":{\"ports\":[{\"name\":\"https-external\",\"port\":443,\"protocol\":\"TCP\",\"targetPort\":443}],\"type\":\"LoadBalancer\"},\"tls\":{\"certificate\":{},\"certificateType\":\"KubernetesSigned\",\"signingRequest\":{\"commonName\":\"objectscale-gateway\",\"keyAlgorithm\":\"RSA\",\"keySize\":2048,\"names\":{\"country\":\"USA\",\"locality\":\"Hopkinton\",\"organization\":\"Dell EMC\",\"organizationalUnit\":\"ObjectScale\",\"state\":\"MA\"}}}},\"image\":{\"pullPolicy\":\"IfNotPresent\",\"repository\":\"objectscale-gateway\",\"tag\":null},\"internal\":{\"service\":{\"ports\":[{\"name\":\"https-internal\",\"port\":4443,\"protocol\":\"TCP\",\"targetPort\":4443}],\"type\":\"LoadBalancer\"},\"tls\":{\"certificate\":{},\"certificateType\":\"InternallySigned\",\"signingRequest\":{\"commonName\":\"objectscale-gateway-internal\",\"keyAlgorithm\":\"RSA\",\"keySize\":2048,\"names\":{\"country\":\"USA\",\"locality\":\"Hopkinton\",\"organization\":\"Dell EMC\",\"organizationalUnit\":\"ObjectScale\",\"state\":\"MA\"}}}},\"replicaCount\":1},\"tag\":\"0.71.2\"},\"objectscale-iam\":{\"atlas\":{\"disableAntiAffinity\":false,\"image\":{\"pullPolicy\":\"IfNotPresent\",\"repository\":\"atlas\",\"tag\":\"1.1.3\"},\"persistence\":{\"size\":\"10Gi\"},\"replicaCount\":3},\"global\":{\"enableHealthcheck\":false,\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"platform\":\"Default\",\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"watchAllNamespaces\":true},\"image\":{\"pullPolicy\":\"IfNotPresent\",\"repository\":\"iamsvc\"},\"livenessProbe\":{\"probePath\":\"/iamhealthcheck\"},\"readinessProbe\":{\"probePath\":\"/iamhealthcheck/atlas\"},\"replicaCount\":3,\"service\":{\"ports\":[{\"name\":\"https\",\"port\":443,\"protocol\":\"TCP\",\"targetPort\":9401},{\"name\":\"http\",\"port\":9400,\"protocol\":\"TCP\",\"targetPort\":9402}],\"type\":\"LoadBalancer\"},\"tag\":\"0.71.2\",\"tls\":{\"certificate\":{},\"certificateType\":\"InternallySigned\",\"signingRequest\":{\"commonName\":\"objectscale-iam\",\"keyAlgorithm\":\"RSA\",\"keySize\":2048,\"names\":{\"country\":\"USA\",\"locality\":\"Hopkinton\",\"organization\":\"Dell EMC\",\"organizationalUnit\":\"ObjectScale\",\"state\":\"MA\"}}}},\"objectscale-monitoring\":{\"application_enabled\":true,\"cert\":{\"enabled\":false,\"global\":{\"communication_scheme\":\"http\",\"enableHealthcheck\":false,\"fluent_bit_enabled\":false,\"graphql_plugin_enabled\":true,\"graphql_release_name\":\"objectscale-graphql\",\"internal_dns\":\"kube-dns.kube-system.svc.cluster.local\",\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"monitoring_alert_app\":\"objectscale-monitoring\",\"monitoring_tag\":\"3.7.0.0-1186.91aed4d8\",\"performanceProfile\":\"Small\",\"platform\":\"Default\",\"platform_monitoring_disabled\":true,\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"rsyslog_uds_dir\":\"/var/run/rsyslog\",\"rsyslog_uds_filename\":\"rsyslog.socket\",\"started\":true,\"telegraf_tls_enabled\":false,\"tls_enabled\":false,\"use_vault_for_ssl\":false,\"watchAllNamespaces\":true}},\"fluent-bit\":{\"common-monitoring-lib\":{\"exports\":{\"default\":{\"rsyslog_client_image_pull_policy\":\"IfNotPresent\"}},\"global\":{\"communication_scheme\":\"http\",\"enableHealthcheck\":false,\"fluent_bit_enabled\":false,\"graphql_plugin_enabled\":true,\"graphql_release_name\":\"objectscale-graphql\",\"internal_dns\":\"kube-dns.kube-system.svc.cluster.local\",\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"monitoring_alert_app\":\"objectscale-monitoring\",\"monitoring_tag\":\"3.7.0.0-1186.91aed4d8\",\"performanceProfile\":\"Small\",\"platform\":\"Default\",\"platform_monitoring_disabled\":true,\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"rsyslog_uds_dir\":\"/var/run/rsyslog\",\"rsyslog_uds_filename\":\"rsyslog.socket\",\"started\":true,\"telegraf_tls_enabled\":false,\"tls_enabled\":false,\"use_vault_for_ssl\":false,\"watchAllNamespaces\":true}},\"config\":{\"criParser\":true,\"syslogPort\":10514},\"global\":{\"communication_scheme\":\"http\",\"enableHealthcheck\":false,\"fluent_bit_enabled\":false,\"graphql_plugin_enabled\":true,\"graphql_release_name\":\"objectscale-graphql\",\"internal_dns\":\"kube-dns.kube-system.svc.cluster.local\",\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"monitoring_alert_app\":\"objectscale-monitoring\",\"monitoring_tag\":\"3.7.0.0-1186.91aed4d8\",\"performanceProfile\":\"Small\",\"platform\":\"Default\",\"platform_monitoring_disabled\":true,\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"rsyslog_uds_dir\":\"/var/run/rsyslog\",\"rsyslog_uds_filename\":\"rsyslog.socket\",\"started\":true,\"telegraf_tls_enabled\":false,\"tls_enabled\":false,\"use_vault_for_ssl\":false,\"watchAllNamespaces\":true},\"image\":{\"pullPolicy\":\"IfNotPresent\",\"repository\":\"fluent-bit\"},\"resources\":{\"limits\":{\"memory\":\"1024Mi\"},\"requests\":{\"memory\":\"1024Mi\"}},\"tolerations\":[]},\"fluxd\":{\"common-monitoring-lib\":{\"exports\":{\"default\":{\"rsyslog_client_image_pull_policy\":\"IfNotPresent\"}},\"global\":{\"communication_scheme\":\"http\",\"enableHealthcheck\":false,\"fluent_bit_enabled\":false,\"graphql_plugin_enabled\":true,\"graphql_release_name\":\"objectscale-graphql\",\"internal_dns\":\"kube-dns.kube-system.svc.cluster.local\",\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"monitoring_alert_app\":\"objectscale-monitoring\",\"monitoring_tag\":\"3.7.0.0-1186.91aed4d8\",\"performanceProfile\":\"Small\",\"platform\":\"Default\",\"platform_monitoring_disabled\":true,\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"rsyslog_uds_dir\":\"/var/run/rsyslog\",\"rsyslog_uds_filename\":\"rsyslog.socket\",\"started\":true,\"telegraf_tls_enabled\":false,\"tls_enabled\":false,\"use_vault_for_ssl\":false,\"watchAllNamespaces\":true}},\"config\":{\"http\":{\"bind_address\":8093}},\"global\":{\"communication_scheme\":\"http\",\"enableHealthcheck\":false,\"fluent_bit_enabled\":false,\"graphql_plugin_enabled\":true,\"graphql_release_name\":\"objectscale-graphql\",\"internal_dns\":\"kube-dns.kube-system.svc.cluster.local\",\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"monitoring_alert_app\":\"objectscale-monitoring\",\"monitoring_tag\":\"3.7.0.0-1186.91aed4d8\",\"performanceProfile\":\"Small\",\"platform\":\"Default\",\"platform_monitoring_disabled\":true,\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"rsyslog_uds_dir\":\"/var/run/rsyslog\",\"rsyslog_uds_filename\":\"rsyslog.socket\",\"started\":true,\"telegraf_tls_enabled\":false,\"tls_enabled\":false,\"use_vault_for_ssl\":false,\"watchAllNamespaces\":true},\"image\":{\"pullPolicy\":\"IfNotPresent\",\"repository\":\"fluxd\"},\"livenessProbe\":{\"probePath\":\"/metrics\"},\"rbac\":{\"create\":true},\"readinessProbe\":{\"probePath\":\"/metrics\"},\"resources\":{\"limits\":{},\"requests\":{}},\"service\":{\"bind_address\":8093},\"serviceAccount\":{\"create\":true},\"startupProbe\":{\"enabled\":false,\"probePath\":\"/ping\"},\"tolerations\":[]},\"global\":{\"communication_scheme\":\"http\",\"enableHealthcheck\":false,\"fluent_bit_enabled\":false,\"graphql_plugin_enabled\":true,\"graphql_release_name\":\"objectscale-graphql\",\"internal_dns\":\"kube-dns.kube-system.svc.cluster.local\",\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"monitoring_alert_app\":\"objectscale-monitoring\",\"monitoring_tag\":\"3.7.0.0-1186.91aed4d8\",\"performanceProfile\":\"Small\",\"platform\":\"Default\",\"platform_monitoring_disabled\":true,\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"rsyslog_uds_dir\":\"/var/run/rsyslog\",\"rsyslog_uds_filename\":\"rsyslog.socket\",\"started\":true,\"telegraf_tls_enabled\":false,\"tls_enabled\":false,\"use_vault_for_ssl\":false,\"watchAllNamespaces\":true},\"grafana\":{\"common-monitoring-lib\":{\"exports\":{\"default\":{\"rsyslog_client_image_pull_policy\":\"IfNotPresent\"}},\"global\":{\"communication_scheme\":\"http\",\"enableHealthcheck\":false,\"fluent_bit_enabled\":false,\"graphql_plugin_enabled\":true,\"graphql_release_name\":\"objectscale-graphql\",\"internal_dns\":\"kube-dns.kube-system.svc.cluster.local\",\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"monitoring_alert_app\":\"objectscale-monitoring\",\"monitoring_tag\":\"3.7.0.0-1186.91aed4d8\",\"performanceProfile\":\"Small\",\"platform\":\"Default\",\"platform_monitoring_disabled\":true,\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"rsyslog_uds_dir\":\"/var/run/rsyslog\",\"rsyslog_uds_filename\":\"rsyslog.socket\",\"started\":true,\"telegraf_tls_enabled\":false,\"tls_enabled\":false,\"use_vault_for_ssl\":false,\"watchAllNamespaces\":true}},\"config\":{\"dashboards_dir\":\"dashboards/objectscale\",\"home_dashboard\":\"Data Access Performance - Overview\",\"http\":{\"bind_address\":3000},\"limitedUsers\":[],\"oauth\":{\"api_url\":\"\",\"auth_url\":\"\",\"auto_login\":true,\"client_id\":\"\",\"client_secret\":\"\",\"enabled\":false,\"signout_url\":\"\",\"token_url\":\"\"},\"reverse_proxy\":{\"domain\":\"\",\"enabled\":false,\"protocol\":\"https\",\"subpath\":\"grafana\"},\"users\":[]},\"global\":{\"communication_scheme\":\"http\",\"enableHealthcheck\":false,\"fluent_bit_enabled\":false,\"graphql_plugin_enabled\":true,\"graphql_release_name\":\"objectscale-graphql\",\"internal_dns\":\"kube-dns.kube-system.svc.cluster.local\",\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"monitoring_alert_app\":\"objectscale-monitoring\",\"monitoring_tag\":\"3.7.0.0-1186.91aed4d8\",\"performanceProfile\":\"Small\",\"platform\":\"Default\",\"platform_monitoring_disabled\":true,\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"rsyslog_uds_dir\":\"/var/run/rsyslog\",\"rsyslog_uds_filename\":\"rsyslog.socket\",\"started\":true,\"telegraf_tls_enabled\":false,\"tls_enabled\":false,\"use_vault_for_ssl\":false,\"watchAllNamespaces\":true},\"image\":{\"pullPolicy\":\"IfNotPresent\",\"repository\":\"grafana\"},\"livenessProbe\":{\"probePath\":\"/api/health\"},\"platform_monitoring\":{\"connected\":true,\"namespace\":\"default\",\"release_name\":\"monitoring\"},\"readinessProbe\":{\"probePath\":\"/api/health\"},\"replicas\":1,\"resources\":{\"limits\":{\"memory\":\"300Mi\"},\"requests\":{\"memory\":\"300Mi\"}},\"service\":{\"bind_address\":3000,\"type\":\"ClusterIP\"},\"tolerations\":[]},\"influxdb\":{\"common-monitoring-lib\":{\"exports\":{\"default\":{\"rsyslog_client_image_pull_policy\":\"IfNotPresent\"}},\"global\":{\"communication_scheme\":\"http\",\"enableHealthcheck\":false,\"fluent_bit_enabled\":false,\"graphql_plugin_enabled\":true,\"graphql_release_name\":\"objectscale-graphql\",\"internal_dns\":\"kube-dns.kube-system.svc.cluster.local\",\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"monitoring_alert_app\":\"objectscale-monitoring\",\"monitoring_tag\":\"3.7.0.0-1186.91aed4d8\",\"performanceProfile\":\"Small\",\"platform\":\"Default\",\"platform_monitoring_disabled\":true,\"product\":\"objectscale\",\"registry\":\"emccorp\",\"registrySecret\":\"dockerhub-registry-secret\",\"rsyslog_enabled\":true,\"rsyslog_uds_dir\":\"/var/run/rsyslog\",\"rsyslog_uds_filename\":\"rsyslog.socket\",\"started\":true,\"telegraf_tls_enabled\":false,\"tls_enabled\":false,\"use_vault_for_ssl\":false,\"watchAllNamespaces\":true,\"watchNamespace\":\"\"}},\"config\":{\"admin\":{\"bind_address\":8083,\"enabled\":false,\"https_certificate\":\"/etc/ssl/influxdb.pem\",\"https_enabled\":false},\"coordinator\":{\"log_queries_after\":\"0s\",\"max_concurrent_queries\":0,\"max_select_buckets\":0,\"max_select_point\":0,\"max_select_series\":0,\"query_timeout\":\"0s\",\"write_timeout\":\"10s\"},\"data\":{\"cache_max_memory_size\":1073741824,\"cache_snapshot_memory_size\":26214400,\"cache_snapshot_write_cold_duration\":\"10m0s\",\"compact_full_write_cold_duration\":\"4h0m0s\",\"index_version\":\"tsi1\",\"max_series_per_database\":1000000,\"max_values_per_tag\":100000,\"query_log_enabled\":true,\"trace_logging_enabled\":false},\"http\":{\"auth_enabled\":false,\"bind_address\":8086,\"bind_socket\":\"/var/run/influxdb.sock\",\"enabled\":true,\"flux_enabled\":true,\"https_certificate\":\"/etc/ssl/influxdb.pem\",\"https_enabled\":false,\"https_private_key\":\"\",\"log_enabled\":true,\"max_connection_limit\":0,\"max_row_limit\":10000,\"pprof_enabled\":true,\"realm\":\"InfluxDB\",\"shared_secret\":\"beetlejuicebeetlejuicebeetlejuice\",\"unix_socket_enabled\":false,\"write_tracing\":false},\"logging\":{\"format\":\"auto\",\"level\":\"info\",\"supress_logo\":false},\"meta\":{\"logging_enabled\":true,\"retention_autocreate\":true},\"monitor\":{\"store_database\":\"_internal\",\"store_enabled\":false,\"store_interval\":\"10s\"},\"reporting_disabled\":true,\"retention\":{\"check_interval\":\"30m0s\",\"enabled\":true},\"rpc\":{\"bind_address\":8088,\"enabled\":true},\"shard_precreation\":{\"advance_period\":\"30m0s\",\"check_interval\":\"10m0s\",\"enabled\":true},\"storage_directory\":\"/data/influxdb\",\"subscriber\":{\"ca_certs\":\"\",\"enabled\":true,\"http_timeout\":\"30s\",\"insecure_skip_verify\":false,\"write_buffer_size\":1000,\"write_concurrency\":40}},\"disable_recovery\":false,\"global\":{\"communication_scheme\":\"http\",\"enableHealthcheck\":false,\"fluent_bit_enabled\":false,\"graphql_plugin_enabled\":true,\"graphql_release_name\":\"objectscale-graphql\",\"internal_dns\":\"kube-dns.kube-system.svc.cluster.local\",\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"monitoring_alert_app\":\"objectscale-monitoring\",\"monitoring_tag\":\"3.7.0.0-1186.91aed4d8\",\"performanceProfile\":\"Small\",\"platform\":\"Default\",\"platform_monitoring_disabled\":true,\"product\":\"objectscale\",\"registry\":\"emccorp\",\"registrySecret\":\"dockerhub-registry-secret\",\"rsyslog_enabled\":true,\"rsyslog_uds_dir\":\"/var/run/rsyslog\",\"rsyslog_uds_filename\":\"rsyslog.socket\",\"started\":true,\"telegraf_tls_enabled\":false,\"tls_enabled\":false,\"use_vault_for_ssl\":false,\"watchAllNamespaces\":true,\"watchNamespace\":\"\"},\"image\":{\"pullPolicy\":\"IfNotPresent\",\"repository\":\"influxdb\"},\"initScripts\":{\"enabled\":true,\"scripts\":{\"init.iql\":\"CREATE DATABASE \\\"monitoring_main\\\" WITH DURATION 60d SHARD DURATION 10d NAME \\\"default\\\"\\nCREATE DATABASE \\\"monitoring_op\\\" WITH DURATION 5d SHARD DURATION 5d NAME \\\"default\\\"\\nCREATE DATABASE \\\"monitoring_last\\\" WITH DURATION 1d SHARD DURATION 1d NAME \\\"default\\\"\\nCREATE DATABASE \\\"monitoring_vdc\\\" WITH DURATION 60d SHARD DURATION 10d NAME \\\"default\\\"\\nCREATE DATABASE \\\"monitoring_meta\\\" WITH DURATION 60d SHARD DURATION 10d NAME \\\"default\\\"\\nCREATE DATABASE \\\"monitoring_rt\\\" WITH DURATION 1h SHARD DURATION 1h NAME \\\"default\\\"\\n\"}},\"livenessProbe\":{\"probePath\":\"/ping\"},\"persistence\":{\"accessMode\":\"ReadWriteOnce\",\"enabled\":true,\"size\":\"20Gi\"},\"readinessProbe\":{\"probePath\":\"/ping\"},\"resources\":{\"limits\":{},\"requests\":{}},\"service\":{\"bind_address\":8086,\"clusterIP\":\"None\",\"rpc\":{\"bind_address\":8088},\"type\":\"ClusterIP\"},\"startupProbe\":{\"enabled\":false,\"probePath\":\"/ping\"}},\"influxdb-operator\":{\"affinity\":{},\"common-lib\":{\"global\":{\"communication_scheme\":\"http\",\"enableHealthcheck\":false,\"fluent_bit_enabled\":false,\"graphql_plugin_enabled\":true,\"graphql_release_name\":\"objectscale-graphql\",\"internal_dns\":\"kube-dns.kube-system.svc.cluster.local\",\"labels\":{},\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"monitoring_alert_app\":\"objectscale-monitoring\",\"monitoring_tag\":\"3.7.0.0-1186.91aed4d8\",\"performanceProfile\":\"Small\",\"platform\":\"Default\",\"platform_monitoring_disabled\":true,\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"rsyslog_uds_dir\":\"/var/run/rsyslog\",\"rsyslog_uds_filename\":\"rsyslog.socket\",\"started\":true,\"telegraf_tls_enabled\":false,\"tls_enabled\":false,\"use_vault_for_ssl\":false,\"watchAllNamespaces\":true}},\"common-monitoring-lib\":{\"exports\":{\"default\":{\"rsyslog_client_image_pull_policy\":\"IfNotPresent\",\"rsyslog_client_tag\":\"3.7.0.0-1183.133b23a9\"}},\"global\":{\"communication_scheme\":\"http\",\"enableHealthcheck\":false,\"fluent_bit_enabled\":false,\"graphql_plugin_enabled\":true,\"graphql_release_name\":\"objectscale-graphql\",\"internal_dns\":\"kube-dns.kube-system.svc.cluster.local\",\"labels\":{},\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"monitoring_alert_app\":\"objectscale-monitoring\",\"monitoring_tag\":\"3.7.0.0-1186.91aed4d8\",\"performanceProfile\":\"Small\",\"platform\":\"Default\",\"platform_monitoring_disabled\":true,\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"rsyslog_uds_dir\":\"/var/run/rsyslog\",\"rsyslog_uds_filename\":\"rsyslog.socket\",\"started\":true,\"telegraf_tls_enabled\":false,\"tls_enabled\":false,\"use_vault_for_ssl\":false,\"watchAllNamespaces\":true}},\"global\":{\"communication_scheme\":\"http\",\"enableHealthcheck\":false,\"fluent_bit_enabled\":false,\"graphql_plugin_enabled\":true,\"graphql_release_name\":\"objectscale-graphql\",\"internal_dns\":\"kube-dns.kube-system.svc.cluster.local\",\"labels\":{},\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"monitoring_alert_app\":\"objectscale-monitoring\",\"monitoring_tag\":\"3.7.0.0-1186.91aed4d8\",\"performanceProfile\":\"Small\",\"platform\":\"Default\",\"platform_monitoring_disabled\":true,\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"rsyslog_uds_dir\":\"/var/run/rsyslog\",\"rsyslog_uds_filename\":\"rsyslog.socket\",\"started\":true,\"telegraf_tls_enabled\":false,\"tls_enabled\":false,\"use_vault_for_ssl\":false,\"watchAllNamespaces\":true},\"image\":{\"pullPolicy\":\"IfNotPresent\",\"repository\":\"influxdb-operator\",\"tag\":null},\"nameOverride\":\"\",\"nodeSelector\":{},\"podSecurityContext\":{},\"resources\":{\"limits\":{},\"requests\":{}},\"securityContext\":{},\"serviceAccount\":{\"create\":true},\"tolerations\":[]},\"prometheus-alerts\":{\"alertmanager\":{\"image\":{\"pullPolicy\":\"IfNotPresent\",\"repository\":\"alertmanager\"},\"readinessProbeInitialDelay\":30,\"readinessProbeTimeout\":30},\"application_enabled\":true,\"common-monitoring-lib\":{\"exports\":{\"default\":{\"rsyslog_client_image_pull_policy\":\"IfNotPresent\"}},\"global\":{\"communication_scheme\":\"http\",\"enableHealthcheck\":false,\"fluent_bit_enabled\":false,\"graphql_plugin_enabled\":true,\"graphql_release_name\":\"objectscale-graphql\",\"internal_dns\":\"kube-dns.kube-system.svc.cluster.local\",\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"monitoring_alert_app\":\"objectscale-monitoring\",\"monitoring_tag\":\"3.7.0.0-1186.91aed4d8\",\"performanceProfile\":\"Small\",\"platform\":\"Default\",\"platform_monitoring_disabled\":true,\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"rsyslog_uds_dir\":\"/var/run/rsyslog\",\"rsyslog_uds_filename\":\"rsyslog.socket\",\"started\":true,\"telegraf_tls_enabled\":false,\"tls_enabled\":false,\"use_vault_for_ssl\":false,\"watchAllNamespaces\":true}},\"config\":{\"alertmanager_repeat_interval\":\"2h\",\"alertmanager_retention\":\"120h\",\"alerts\":[{\"enabled\":true,\"id\":\"CAP_1111\",\"message\":\"Objectscale capacity usage is {{ $value }}%, crosses threshold value {{ $labels.threshold }}%\",\"range\":\"30m\",\"reason\":\"High usage objectscale space\",\"symptoms\":[{\"id\":\"OBJSC-MON-1111\",\"types\":[\"Warning\"]},{\"id\":\"OBJSC-MON-1112\",\"types\":[\"Error\"]},{\"id\":\"OBJSC-MON-1113\",\"types\":[\"Critical\"]}]},{\"enabled\":true,\"id\":\"MH_4019\",\"message\":\"No data has been pushed to the objectscale monitoring framework for the last 30 minutes\",\"range\":\"30m\",\"reason\":\"No data has been pushed to the objectscale monitoring framework for the last 30 minutes\",\"symptoms\":[{\"id\":\"OBJSC-MON-4019\",\"types\":[\"Critical\"]}]},{\"enabled\":true,\"id\":\"OBJSC_MON_4021\",\"message\":\"{{ $labels._message }}\",\"range\":\"35m\",\"reason\":\"{{ $labels._reason }}\",\"symptoms\":[{\"id\":\"OBJSC-MON-4021\",\"types\":[\"Critical\"]}]},{\"enabled\":true,\"id\":\"OBJSC_MON_4022\",\"message\":\"{{ $labels._message }}\",\"range\":\"35m\",\"reason\":\"{{ $labels._reason }}\",\"symptoms\":[{\"id\":\"OBJSC-MON-4022\",\"types\":[\"Critical\"]}]},{\"enabled\":true,\"id\":\"OBJSC_MON_4023\",\"message\":\"InfluxDB PVC usage is {{ $value }}%, crosses threshold value {{ $labels.threshold }}%\",\"range\":\"30m\",\"reason\":\"Low free space of InfluxDB PVC\",\"symptoms\":[{\"id\":\"OBJSC-MON-4023\",\"types\":[\"Warning\"]},{\"id\":\"OBJSC-MON-4024\",\"types\":[\"Error\"]},{\"id\":\"OBJSC-MON-4025\",\"types\":[\"Critical\"]}]},{\"enabled\":true,\"id\":\"OBJSC_MON_4026\",\"message\":\"Rsyslog PVC usage is {{ $value }}%, crosses threshold value {{ $labels.threshold }}%\",\"range\":\"30m\",\"reason\":\"Low free space of Rsyslog PVC\",\"symptoms\":[{\"id\":\"OBJSC-MON-4026\",\"types\":[\"Warning\"]},{\"id\":\"OBJSC-MON-4027\",\"types\":[\"Error\"]},{\"id\":\"OBJSC-MON-4028\",\"types\":[\"Critical\"]}]}],\"component\":\"objectscale-monitoring\",\"dir\":\"alerts/objectscale\",\"interval\":\"5m\",\"tsdb_retention\":\"6h\"},\"global\":{\"communication_scheme\":\"http\",\"enableHealthcheck\":false,\"fluent_bit_enabled\":false,\"graphql_plugin_enabled\":true,\"graphql_release_name\":\"objectscale-graphql\",\"internal_dns\":\"kube-dns.kube-system.svc.cluster.local\",\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"monitoring_alert_app\":\"objectscale-monitoring\",\"monitoring_tag\":\"3.7.0.0-1186.91aed4d8\",\"performanceProfile\":\"Small\",\"platform\":\"Default\",\"platform_monitoring_disabled\":true,\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"rsyslog_uds_dir\":\"/var/run/rsyslog\",\"rsyslog_uds_filename\":\"rsyslog.socket\",\"started\":true,\"telegraf_tls_enabled\":false,\"tls_enabled\":false,\"use_vault_for_ssl\":false,\"watchAllNamespaces\":true},\"prometheus\":{\"image\":{\"pullPolicy\":\"IfNotPresent\",\"repository\":\"prometheus\"},\"livenessProbeFailureThreshold\":3,\"livenessProbeInitialDelay\":30,\"livenessProbeSuccessThreshold\":1,\"livenessProbeTimeout\":30,\"readinessProbeFailureThreshold\":3,\"readinessProbeInitialDelay\":30,\"readinessProbeSuccessThreshold\":1,\"readinessProbeTimeout\":30,\"resources\":{\"limits\":{\"memory\":\"182Mi\"},\"requests\":{\"memory\":\"182Mi\"}}},\"rbac\":{\"clusterWide\":false,\"create\":true},\"replicas\":1,\"serviceAccount\":{\"create\":true},\"tolerations\":[]},\"rsyslog\":{\"common-monitoring-lib\":{\"exports\":{\"default\":{\"rsyslog_client_image_pull_policy\":\"IfNotPresent\"}},\"global\":{\"cluster_name\":\"unknown\",\"communication_scheme\":\"http\",\"enableHealthcheck\":false,\"fluent_bit_enabled\":false,\"graphql_plugin_enabled\":true,\"graphql_release_name\":\"objectscale-graphql\",\"internal_dns\":\"kube-dns.kube-system.svc.cluster.local\",\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"monitoring_alert_app\":\"objectscale-monitoring\",\"monitoring_tag\":\"3.7.0.0-1186.91aed4d8\",\"performanceProfile\":\"Small\",\"platform\":\"Default\",\"platform_monitoring_disabled\":true,\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"rsyslog_uds_dir\":\"/var/run/rsyslog\",\"rsyslog_uds_filename\":\"rsyslog.socket\",\"started\":true,\"telegraf_tls_enabled\":false,\"tls_enabled\":false,\"use_vault_for_ssl\":false,\"watchAllNamespaces\":true}},\"config\":{\"logs_size_high_watermark\":\"_199680000\",\"logs_size_low_watermark\":\"_189440000\",\"storage_directory\":\"/var/log\"},\"createLogrotateConfigs\":true,\"global\":{\"cluster_name\":\"unknown\",\"communication_scheme\":\"http\",\"enableHealthcheck\":false,\"fluent_bit_enabled\":false,\"graphql_plugin_enabled\":true,\"graphql_release_name\":\"objectscale-graphql\",\"internal_dns\":\"kube-dns.kube-system.svc.cluster.local\",\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"monitoring_alert_app\":\"objectscale-monitoring\",\"monitoring_tag\":\"3.7.0.0-1186.91aed4d8\",\"performanceProfile\":\"Small\",\"platform\":\"Default\",\"platform_monitoring_disabled\":true,\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"rsyslog_uds_dir\":\"/var/run/rsyslog\",\"rsyslog_uds_filename\":\"rsyslog.socket\",\"started\":true,\"telegraf_tls_enabled\":false,\"tls_enabled\":false,\"use_vault_for_ssl\":false,\"watchAllNamespaces\":true},\"image\":{\"pullPolicy\":\"IfNotPresent\",\"repository\":\"rsyslog\"},\"logReceiver\":{\"enable\":false,\"host\":\"my-logstash-server\",\"port\":9600,\"type\":\"Logstash\"},\"persistence\":{\"accessMode\":\"ReadWriteOnce\",\"enabled\":true,\"size\":\"200Gi\"},\"replicas\":1,\"resources\":{\"limits\":{\"memory\":\"1024Mi\"},\"requests\":{\"memory\":\"1024Mi\"}},\"service\":{\"bind_address\":10514},\"tolerations\":[]},\"rsyslog-client\":{\"common-monitoring-lib\":{\"exports\":{\"default\":{\"rsyslog_client_image_pull_policy\":\"IfNotPresent\"}},\"global\":{\"communication_scheme\":\"http\",\"enableHealthcheck\":false,\"fluent_bit_enabled\":false,\"graphql_plugin_enabled\":true,\"graphql_release_name\":\"objectscale-graphql\",\"internal_dns\":\"kube-dns.kube-system.svc.cluster.local\",\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"monitoring_alert_app\":\"objectscale-monitoring\",\"monitoring_tag\":\"3.7.0.0-1186.91aed4d8\",\"performanceProfile\":\"Small\",\"platform\":\"Default\",\"platform_monitoring_disabled\":true,\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"rsyslog_uds_dir\":\"/var/run/rsyslog\",\"rsyslog_uds_filename\":\"rsyslog.socket\",\"started\":true,\"telegraf_tls_enabled\":false,\"tls_enabled\":false,\"use_vault_for_ssl\":false,\"watchAllNamespaces\":true}},\"config\":{\"logs_size_high_watermark\":\"_204800\",\"logs_size_low_watermark\":\"_153600\",\"maxage\":30,\"output\":{\"port\":10514,\"queue\":{\"size\":10000,\"type\":\"linkedList\"},\"resumeRetryCount\":100}},\"createLogrotateConfigs\":true,\"createRBAC\":true,\"global\":{\"communication_scheme\":\"http\",\"enableHealthcheck\":false,\"fluent_bit_enabled\":false,\"graphql_plugin_enabled\":true,\"graphql_release_name\":\"objectscale-graphql\",\"internal_dns\":\"kube-dns.kube-system.svc.cluster.local\",\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"monitoring_alert_app\":\"objectscale-monitoring\",\"monitoring_tag\":\"3.7.0.0-1186.91aed4d8\",\"performanceProfile\":\"Small\",\"platform\":\"Default\",\"platform_monitoring_disabled\":true,\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"rsyslog_uds_dir\":\"/var/run/rsyslog\",\"rsyslog_uds_filename\":\"rsyslog.socket\",\"started\":true,\"telegraf_tls_enabled\":false,\"tls_enabled\":false,\"use_vault_for_ssl\":false,\"watchAllNamespaces\":true}},\"statefuldaemonset-operator\":{\"affinity\":{},\"common-lib\":{\"global\":{\"communication_scheme\":\"http\",\"enableHealthcheck\":false,\"fluent_bit_enabled\":false,\"graphql_plugin_enabled\":true,\"graphql_release_name\":\"objectscale-graphql\",\"internal_dns\":\"kube-dns.kube-system.svc.cluster.local\",\"labels\":{},\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"monitoring_alert_app\":\"objectscale-monitoring\",\"monitoring_tag\":\"3.7.0.0-1186.91aed4d8\",\"performanceProfile\":\"Small\",\"platform\":\"Default\",\"platform_monitoring_disabled\":true,\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"rsyslog_uds_dir\":\"/var/run/rsyslog\",\"rsyslog_uds_filename\":\"rsyslog.socket\",\"started\":true,\"telegraf_tls_enabled\":false,\"tls_enabled\":false,\"use_vault_for_ssl\":false,\"watchAllNamespaces\":true}},\"common-monitoring-lib\":{\"exports\":{\"default\":{\"rsyslog_client_image_pull_policy\":\"IfNotPresent\",\"rsyslog_client_tag\":\"3.7.0.0-1183.133b23a9\"}},\"global\":{\"communication_scheme\":\"http\",\"enableHealthcheck\":false,\"fluent_bit_enabled\":false,\"graphql_plugin_enabled\":true,\"graphql_release_name\":\"objectscale-graphql\",\"internal_dns\":\"kube-dns.kube-system.svc.cluster.local\",\"labels\":{},\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"monitoring_alert_app\":\"objectscale-monitoring\",\"monitoring_tag\":\"3.7.0.0-1186.91aed4d8\",\"performanceProfile\":\"Small\",\"platform\":\"Default\",\"platform_monitoring_disabled\":true,\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"rsyslog_uds_dir\":\"/var/run/rsyslog\",\"rsyslog_uds_filename\":\"rsyslog.socket\",\"started\":true,\"telegraf_tls_enabled\":false,\"tls_enabled\":false,\"use_vault_for_ssl\":false,\"watchAllNamespaces\":true}},\"global\":{\"communication_scheme\":\"http\",\"enableHealthcheck\":false,\"fluent_bit_enabled\":false,\"graphql_plugin_enabled\":true,\"graphql_release_name\":\"objectscale-graphql\",\"internal_dns\":\"kube-dns.kube-system.svc.cluster.local\",\"labels\":{},\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"monitoring_alert_app\":\"objectscale-monitoring\",\"monitoring_tag\":\"3.7.0.0-1186.91aed4d8\",\"performanceProfile\":\"Small\",\"platform\":\"Default\",\"platform_monitoring_disabled\":true,\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"rsyslog_uds_dir\":\"/var/run/rsyslog\",\"rsyslog_uds_filename\":\"rsyslog.socket\",\"started\":true,\"telegraf_tls_enabled\":false,\"tls_enabled\":false,\"use_vault_for_ssl\":false,\"watchAllNamespaces\":true},\"image\":{\"pullPolicy\":\"IfNotPresent\",\"repository\":\"statefuldaemonset-operator\",\"tag\":null},\"nameOverride\":\"\",\"nodeSelector\":{},\"podSecurityContext\":{},\"resources\":{\"limits\":{},\"requests\":{}},\"securityContext\":{},\"serviceAccount\":{\"create\":true},\"tolerations\":[]},\"telegraf\":{\"common-monitoring-lib\":{\"exports\":{\"default\":{\"rsyslog_client_image_pull_policy\":\"IfNotPresent\"}},\"global\":{\"communication_scheme\":\"http\",\"enableHealthcheck\":false,\"fluent_bit_enabled\":false,\"graphql_plugin_enabled\":true,\"graphql_release_name\":\"objectscale-graphql\",\"internal_dns\":\"kube-dns.kube-system.svc.cluster.local\",\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"monitoring_alert_app\":\"objectscale-monitoring\",\"monitoring_tag\":\"3.7.0.0-1186.91aed4d8\",\"performanceProfile\":\"Small\",\"platform\":\"Default\",\"platform_monitoring_disabled\":true,\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"rsyslog_uds_dir\":\"/var/run/rsyslog\",\"rsyslog_uds_filename\":\"rsyslog.socket\",\"started\":true,\"telegraf_tls_enabled\":false,\"tls_enabled\":false,\"use_vault_for_ssl\":false,\"watchAllNamespaces\":true}},\"config\":{\"agent\":{\"collection_jitter\":\"0s\",\"debug\":false,\"flush_interval\":\"10s\",\"flush_jitter\":\"0s\",\"interval\":\"10s\",\"logfile\":\"\",\"metric_batch_size\":1000,\"metric_buffer_limit\":10000,\"omit_hostname\":true,\"precision\":\"\",\"quiet\":false,\"round_interval\":true},\"collection_interval\":\"300s\",\"global_tags\":{\"release_name\":\"{{ .Release.Name }}\"},\"http\":{\"bind_address\":11002},\"influxdb_inputs_enabled\":false,\"inputs\":[{\"influxdb_listener\":{\"read_timeout\":\"30s\",\"service_address\":\":11002\",\"write_timeout\":\"30s\"}},{\"internal\":{\"collect_memstats\":true,\"interval\":\"300s\",\"name_prefix\":\"tsdb_telegraf_\",\"tags\":{\"host\":\"$HOSTNAME\",\"tag\":\"system\"}}},{\"prometheus\":{\"bearer_token\":\"/var/run/secrets/kubernetes.io/serviceaccount/token\",\"insecure_skip_verify\":true,\"interval\":\"$COLLECTION_INTERVAL\",\"kubernetes_label_selector\":\"app.kubernetes.io/name={{ .Release.Name }}-fluxd\",\"monitor_kubernetes_pods\":true,\"monitor_kubernetes_pods_namespace\":\"{{ .Release.Namespace }}\",\"name_prefix\":\"tsdb_fluxd_\",\"tags\":{\"tag\":\"system\"}}},{\"prometheus\":{\"bearer_token\":\"/var/run/secrets/kubernetes.io/serviceaccount/token\",\"insecure_skip_verify\":true,\"interval\":\"$COLLECTION_INTERVAL\",\"kubernetes_label_selector\":\"app.kubernetes.io/name=csi-baremetal\",\"monitor_kubernetes_pods\":true,\"monitor_kubernetes_pods_namespace\":\"{{ .Release.Namespace }}\",\"name_prefix\":\"csi_\",\"tagexclude\":[\"cni.projectcalico.org/podIP\",\"cni.projectcalico.org/podIPs\",\"controller-revision-hash\",\"pod-template-generation\",\"pod-template-hash\",\"prometheus.io/path\",\"prometheus.io/port\",\"prometheus.io/scrape\",\"app.kubernetes.io/name\",\"role\"],\"tags\":{\"host\":\"$HOSTNAME\"}}},{\"prometheus\":{\"insecure_skip_verify\":true,\"interval\":\"$COLLECTION_INTERVAL\",\"kubernetes_services\":[\"{{ .Values.global.communication_scheme }}://{{ .Release.Name }}-throttler.{{ .Release.Namespace }}.svc.cluster.local:8094/metrics\"],\"monitor_kubernetes_pods\":false,\"tags\":{\"host\":\"throttler\",\"tag\":\"system\"}}},{\"kube_inventory\":{\"bearer_token\":\"/var/run/secrets/kubernetes.io/serviceaccount/token\",\"insecure_skip_verify\":true,\"interval\":\"$COLLECTION_INTERVAL\",\"namespace\":\"{{ if eq .Values.global.watchAllNamespaces false }}{{ .Release.Namespace }}{{ end }}\",\"resource_include\":[\"persistentvolumeclaims\"],\"tagexclude\":[\"phase\"],\"url\":\"https://kubernetes.default.svc\"}}],\"outputs\":[{\"influxdb\":{\"database\":\"monitoring_op\",\"fielddrop\":[\"*Timestamp\"],\"insecure_skip_verify\":true,\"namepass\":[\"tsdb_fluxd_http_api_request_duration_seconds\",\"tsdb_fluxd_http_api_requests_total\",\"tsdb_fluxd_host_state_change_total\",\"tsdb_fluxd_host_state\",\"tsdb_fluxd_host_selected\",\"tsdb_fluxd_host_selection_failed\",\"tsdb_fluxd_hl_*\",\"tsdb_fluxd_query_control_executing_duration_seconds\",\"tsdb_fluxd_http_lb_request_forwarded\",\"tsdb_fluxd_query_control_panics_total\",\"tsdb_influxdb\",\"tsdb_influxdb_database\",\"tsdb_influxdb_queryExecutor\",\"tsdb_telegraf_internal_gather\",\"tsdb_telegraf_internal_write\",\"cquerier_*\",\"disk\",\"procstat\",\"csi_*\",\"kubernetes_persistentvolumeclaim\",\"rsyslog_metrics\"],\"retention_policy\":\"default\",\"skip_database_creation\":true,\"tagexclude\":[\"vdc\",\"storage_pool\",\"cluster\",\"release_name\"],\"timeout\":\"30s\"}},{\"influxdb\":{\"database\":\"monitoring_vdc\",\"insecure_skip_verify\":true,\"namepass\":[\"cq_*\"],\"retention_policy\":\"default\",\"skip_database_creation\":true,\"tagexclude\":[\"host\",\"node_id\",\"vdc\",\"storage_pool\",\"cluster\"],\"timeout\":\"30s\"}}],\"processors\":[{\"override\":{\"namepass\":[\"tsdb_influxdb_httpd\"],\"tagexclude\":[\"node_id\",\"ip\"]}}]},\"extra_files\":{},\"global\":{\"communication_scheme\":\"http\",\"enableHealthcheck\":false,\"fluent_bit_enabled\":false,\"graphql_plugin_enabled\":true,\"graphql_release_name\":\"objectscale-graphql\",\"internal_dns\":\"kube-dns.kube-system.svc.cluster.local\",\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"monitoring_alert_app\":\"objectscale-monitoring\",\"monitoring_tag\":\"3.7.0.0-1186.91aed4d8\",\"performanceProfile\":\"Small\",\"platform\":\"Default\",\"platform_monitoring_disabled\":true,\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"rsyslog_uds_dir\":\"/var/run/rsyslog\",\"rsyslog_uds_filename\":\"rsyslog.socket\",\"started\":true,\"telegraf_tls_enabled\":false,\"tls_enabled\":false,\"use_vault_for_ssl\":false,\"watchAllNamespaces\":true},\"image\":{\"pullPolicy\":\"IfNotPresent\",\"repository\":\"telegraf\"},\"rbac\":{\"clusterWide\":false,\"create\":true,\"rules\":[{\"apiGroups\":[\"\"],\"resources\":[\"pods\",\"persistentvolumes\",\"persistentvolumeclaims\",\"nodes\"],\"verbs\":[\"get\",\"list\",\"watch\"]}]},\"resources\":{\"limits\":{},\"requests\":{}},\"service\":{\"bind_address\":11002,\"extra_bindings\":[],\"type\":\"ClusterIP\"},\"serviceAccount\":{\"create\":true},\"tolerations\":[]},\"telegraf-sidecar\":{\"common-monitoring-lib\":{\"exports\":{\"default\":{\"rsyslog_client_image_pull_policy\":\"IfNotPresent\"}},\"global\":{\"communication_scheme\":\"http\",\"enableHealthcheck\":false,\"fluent_bit_enabled\":false,\"graphql_plugin_enabled\":true,\"graphql_release_name\":\"objectscale-graphql\",\"internal_dns\":\"kube-dns.kube-system.svc.cluster.local\",\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"monitoring_alert_app\":\"objectscale-monitoring\",\"monitoring_tag\":\"3.7.0.0-1186.91aed4d8\",\"performanceProfile\":\"Small\",\"platform\":\"Default\",\"platform_monitoring_disabled\":true,\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"rsyslog_uds_dir\":\"/var/run/rsyslog\",\"rsyslog_uds_filename\":\"rsyslog.socket\",\"started\":true,\"telegraf_tls_enabled\":false,\"tls_enabled\":false,\"use_vault_for_ssl\":false,\"watchAllNamespaces\":true}},\"global\":{\"communication_scheme\":\"http\",\"enableHealthcheck\":false,\"fluent_bit_enabled\":false,\"graphql_plugin_enabled\":true,\"graphql_release_name\":\"objectscale-graphql\",\"internal_dns\":\"kube-dns.kube-system.svc.cluster.local\",\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"monitoring_alert_app\":\"objectscale-monitoring\",\"monitoring_tag\":\"3.7.0.0-1186.91aed4d8\",\"performanceProfile\":\"Small\",\"platform\":\"Default\",\"platform_monitoring_disabled\":true,\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"rsyslog_uds_dir\":\"/var/run/rsyslog\",\"rsyslog_uds_filename\":\"rsyslog.socket\",\"started\":true,\"telegraf_tls_enabled\":false,\"tls_enabled\":false,\"use_vault_for_ssl\":false,\"watchAllNamespaces\":true}},\"throttler\":{\"application_enabled\":false,\"common-monitoring-lib\":{\"exports\":{\"default\":{\"rsyslog_client_image_pull_policy\":\"IfNotPresent\"}},\"global\":{\"communication_scheme\":\"http\",\"enableHealthcheck\":false,\"fluent_bit_enabled\":false,\"graphql_plugin_enabled\":true,\"graphql_release_name\":\"objectscale-graphql\",\"internal_dns\":\"kube-dns.kube-system.svc.cluster.local\",\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"monitoring_alert_app\":\"objectscale-monitoring\",\"monitoring_tag\":\"3.7.0.0-1186.91aed4d8\",\"performanceProfile\":\"Small\",\"platform\":\"Default\",\"platform_monitoring_disabled\":true,\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"rsyslog_uds_dir\":\"/var/run/rsyslog\",\"rsyslog_uds_filename\":\"rsyslog.socket\",\"started\":true,\"telegraf_tls_enabled\":false,\"tls_enabled\":false,\"use_vault_for_ssl\":false,\"watchAllNamespaces\":true}},\"config\":{\"alerter\":{\"component\":\"\",\"dir\":\"\",\"enabled\":false,\"interval\":\"5m\"},\"cq_dir\":\"cq/objectscale\",\"fluxd_alerter\":{\"enabled\":true,\"prefix\":\"OBJSC-MON\",\"symptoms\":{\"Critical\":4020},\"threshold\":6},\"http\":{\"bind_address\":8094}},\"global\":{\"communication_scheme\":\"http\",\"enableHealthcheck\":false,\"fluent_bit_enabled\":false,\"graphql_plugin_enabled\":true,\"graphql_release_name\":\"objectscale-graphql\",\"internal_dns\":\"kube-dns.kube-system.svc.cluster.local\",\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"monitoring_alert_app\":\"objectscale-monitoring\",\"monitoring_tag\":\"3.7.0.0-1186.91aed4d8\",\"performanceProfile\":\"Small\",\"platform\":\"Default\",\"platform_monitoring_disabled\":true,\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"rsyslog_uds_dir\":\"/var/run/rsyslog\",\"rsyslog_uds_filename\":\"rsyslog.socket\",\"started\":true,\"telegraf_tls_enabled\":false,\"tls_enabled\":false,\"use_vault_for_ssl\":false,\"watchAllNamespaces\":true},\"image\":{\"pullPolicy\":\"IfNotPresent\",\"repository\":\"throttler\"},\"livenessProbe\":{\"probePath\":\"/metrics\"},\"rbac\":{\"create\":true},\"readinessProbe\":{\"probePath\":\"/metrics\"},\"replicas\":1,\"resources\":{\"limits\":{},\"requests\":{}},\"service\":{\"bind_address\":8094},\"serviceAccount\":{\"create\":true},\"startupProbe\":{\"enabled\":false,\"probePath\":\"/ping\"},\"tolerations\":[]}},\"pravega\":{\"enabled\":true},\"pravega-operator\":{\"common-monitoring-lib\":{\"exports\":{\"default\":{\"rsyslog_client_image_pull_policy\":\"IfNotPresent\",\"rsyslog_client_tag\":\"3.7.0.0-1174.d65bd7ec\"}},\"global\":{\"enableHealthcheck\":false,\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"platform\":\"Default\",\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"watchAllNamespaces\":true}},\"crd\":{\"create\":false},\"global\":{\"enableHealthcheck\":false,\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"platform\":\"Default\",\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"watchAllNamespaces\":true},\"hooks\":{\"backoffLimit\":10,\"image\":{\"repository\":\"k8s-kubectl\",\"tag\":\"v1.16.10\"}},\"image\":{\"pullPolicy\":\"IfNotPresent\",\"repository\":\"pravega-operator\",\"tag\":\"0.5.2-211-24bb31d0\"},\"rbac\":{\"create\":true},\"serviceAccount\":{\"create\":true,\"name\":\"pravega-operator\"},\"testmode\":{\"enabled\":true,\"version\":\"0.10.0\"},\"watchNamespace\":\"\",\"webhookCert\":{\"certName\":\"selfsigned-cert\",\"generate\":false,\"secretName\":\"selfsigned-cert-tls\"}},\"pullPolicy\":\"IfNotPresent\",\"replicaCount\":1,\"resources\":{\"fluentbitAgent\":{\"limits\":{\"memory\":\"40Mi\"},\"requests\":{\"memory\":\"20Mi\"}},\"operator\":{\"limits\":{\"ephemeralStorage\":\"1256Mi\",\"memory\":\"500Mi\"},\"requests\":{\"ephemeralStorage\":\"1256Mi\",\"memory\":\"300Mi\"}},\"rsyslog\":{\"limits\":{\"memory\":\"60Mi\"},\"requests\":{\"memory\":\"30Mi\"}}},\"service-pod\":{\"global\":{\"enableHealthcheck\":false,\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"platform\":\"Default\",\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"watchAllNamespaces\":true},\"image\":{\"repository\":\"base-service-tools\"},\"pullPolicy\":\"IfNotPresent\",\"resources\":{\"limits\":{\"ephemeral-storage\":\"20Gi\"},\"requests\":{\"ephemeral-storage\":\"10Gi\",\"memory\":\"2Gi\"}},\"sshCred\":{\"group\":\"users\",\"password\":\"ChangeMe\",\"user\":\"svcuser\"},\"tag\":\"2.71.2\"},\"servicePod\":{\"enabled\":true},\"tag\":\"0.71.2\",\"tolerations\":[],\"zookeeper\":{\"enabled\":true},\"zookeeper-operator\":{\"common-monitoring-lib\":{\"exports\":{\"default\":{\"rsyslog_client_image_pull_policy\":\"IfNotPresent\",\"rsyslog_client_tag\":\"3.7.0.0-1174.d65bd7ec\"}},\"global\":{\"enableHealthcheck\":false,\"installCRD\":true,\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"platform\":\"Default\",\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"watchAllNamespaces\":true}},\"global\":{\"enableHealthcheck\":false,\"installCRD\":true,\"logging_injection_enabled\":true,\"monitoring\":{\"enabled\":true},\"platform\":\"Default\",\"product\":\"objectscale\",\"registry\":\"emccorp\",\"rsyslog_enabled\":true,\"watchAllNamespaces\":true},\"image\":{\"pullPolicy\":\"IfNotPresent\",\"repository\":\"zookeeper-operator\",\"tag\":\"2.10.0-b1519ae\"},\"replicaCount\":1}}"
spec:
  assemblyPhase: Pending
  selector:
    matchLabels:
      app.kubernetes.io/name: objectscale-manager
  componentKinds:
    - group: core
      kind: Service
    - group: apps
      kind: Deployment
    - group: core
      kind: Pod
    - group: core
      kind: ReplicaSet
    - group: core
      kind: ConfigMap
    - group: core
      kind: ServiceAccount
    - group: rbac.authorization.k8s.io
      kind: Role
    - group: rbac.authorization.k8s.io
      kind: RoleBinding
    - group: batch
      kind: CronJob
    - group: batch
      kind: Job
    - group: core
      kind: Secret
  descriptor:
    type: objectscale-manager
    description: Cluster-level management of Dell EMC ObjecScale Object Stores
    version: 0.71.2
    keywords:
      - deos
      - objectscale
      - object store
      - flex
      - ecs
      - s3
    info:
      - "Copyright Â© 2019 Dell Inc. or its subsidiaries. All Rights Reserved."
---
# Source: objectscale-manager/charts/dcm/templates/atlas_v1beta1_dcmcluster.yaml
apiVersion: atlas.dellemc.com/v1beta1
kind: AtlasCluster
metadata:
  name: "RELEASE-NAME-dcm-atlas"
  namespace: dellemc-sf426-domain-c45
spec:
  replicas: 1
  image:
    repository:  emccorp/atlas
    tag: 1.1.3
    pullPolicy: IfNotPresent
  persistence:
    spec:
      resources:
        requests:
          storage: 1Gi
---
# Source: objectscale-manager/charts/federation/templates/atlas_v1beta1_fedcluster.yaml
apiVersion: atlas.dellemc.com/v1beta1
kind: AtlasCluster
metadata:
  name: federation-atlas
spec:
  replicas: 3
  image:
    repository:  emccorp/atlas
    tag: 1.1.3
    pullPolicy: IfNotPresent
  persistence:
    spec:
      resources:
        requests:
          storage: 1Gi
---
# Source: objectscale-manager/charts/objectscale-iam/templates/atlas_v1beta1_iamcluster.yaml
apiVersion: atlas.dellemc.com/v1beta1
kind: AtlasCluster
metadata:
  name: objectscale-iam-atlas
spec:
  replicas: 3
  image:
    repository:  emccorp/atlas
    tag: 1.1.3
    pullPolicy: IfNotPresent
  persistence:
    spec:
      resources:
        requests:
          storage: 10Gi
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/influxdb/templates/influxdb.yaml
apiVersion: db.ecs.dellemc.com/v1
kind: Influxdb
metadata:
  name: "RELEASE-NAME-influxdb"
  labels:
    app.kubernetes.io/name: "RELEASE-NAME-influxdb"
    chart: "influxdb-0.54.0"
    release: "RELEASE-NAME"
    heritage: "Helm"
spec:
  podManagementPolicy: Parallel
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: RELEASE-NAME-influxdb
  serviceName: "RELEASE-NAME-influxdb"
  serviceAddressTemplate: "RELEASE-NAME-influxdb-%d.RELEASE-NAME-influxdb.dellemc-sf426-domain-c45.svc.cluster.local"
  replicasConfigMapName: RELEASE-NAME-influxdb-replicas
  replicasConfigName: replicas.json
  replicasPerPartition: 3
  template:
    metadata:
      labels:
        app.kubernetes.io/name: RELEASE-NAME-influxdb
        release: "RELEASE-NAME"
        
        objectscale.dellemc.com/logging-inject: "true"
        objectscale.dellemc.com/logging-release-name: "RELEASE-NAME"
        app.kubernetes.io/namespace: "dellemc-sf426-domain-c45"
        
        objectscale.dellemc.com/logging-inject-logrotate: "true"
      annotations:
        
        objectscale.dellemc.com/logging-release-name: "RELEASE-NAME"
    spec:
      shareProcessNamespace: true
      affinity:
        # Use pod anti-affinity rules to deploy statefulset pods one-per-node.
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: "app.kubernetes.io/name"
                operator: In
                values:
                - RELEASE-NAME-influxdb
            topologyKey: "kubernetes.io/hostname"
      imagePullSecrets:
        - name: dockerhub-registry-secret
      initContainers:
      - name: influxdb-init
        image: "emccorp/influxdb:3.7.0.0-1186.91aed4d8"
        imagePullPolicy: "IfNotPresent"
        resources:
          requests:
            memory: 300Mi
            ephemeral-storage: 850Mi
          limits:
            memory: 300Mi
            ephemeral-storage: 850Mi
        ports:
        - name: api
          containerPort: 8086
        env:
        - name: INIT_CTNR
          value: "1"
        - name: INFLUXDB_HTTP_PORT_DEFAULT
          value: "8086"
        - name: INFLUXDB_RPC_PORT
          value: "8088"
        volumeMounts:
        - name: RELEASE-NAME-influxdb-data
          mountPath: /data/influxdb
        - name: config
          mountPath: /data/influxdb/conf/
        - name: init
          mountPath: /docker-entrypoint-initdb.d
        - name: log
          mountPath: /var/log
        - mountPath: /crash-dump
          name: crash-dump
      containers:
      - name: influxdb
        image: "emccorp/influxdb:3.7.0.0-1186.91aed4d8"
        imagePullPolicy: "IfNotPresent"
        command: ["bash"]
        args: ["-c", "echo /crash-dump/core-%e > /proc/sys/kernel/core_pattern; ulimit -c unlimited; GOTRACEBACK=crash /entrypoint.sh influxd"]
        resources:
          requests:
            memory: 460Mi
            ephemeral-storage: 1170Mi
          limits:
            memory: 460Mi
            ephemeral-storage: 1170Mi
        ports:
        - name: api
          containerPort: 8086
        env:
        - name: INFLUXDB_HTTP_PORT_DEFAULT
          value: "8086"
        - name: INFLUXDB_RPC_PORT
          value: "8088"
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        
        volumeMounts:
        - name: RELEASE-NAME-influxdb-data
          mountPath: /data/influxdb
        - name: config
          mountPath: /data/influxdb/conf/
        - name: log
          mountPath: /var/log
        - mountPath: /crash-dump
          name: crash-dump
        livenessProbe:
          httpGet:
            path: /ping
            port: api
            scheme: HTTP
          timeoutSeconds: 30
          periodSeconds: 60
          initialDelaySeconds: 180
          failureThreshold: 360
        readinessProbe:
          httpGet:
            path: /ping
            port: api
            scheme: HTTP
          periodSeconds: 60
          timeoutSeconds: 30
          initialDelaySeconds: 120
          failureThreshold: 360
      
      - name: telegraf
        image: "emccorp/telegraf:3.7.0.0-1186.91aed4d8"
        imagePullPolicy: "IfNotPresent"
        command: ["bash"]
        args: ["-c", "echo /crash-dump/core-%e > /proc/sys/kernel/core_pattern; ulimit -c unlimited; GOTRACEBACK=crash HOST_PROC=/proc telegraf --config  /etc/telegraf/telegraf.conf --config-directory /etc/telegraf/telegraf.d/"]
        volumeMounts:
        - name: RELEASE-NAME-influxdb-data
          mountPath: /pv
        - name: telegraf-sidecar-config
          mountPath: /etc/telegraf
        - name: additional-configs
          mountPath: /etc/telegraf/telegraf.d
        env:
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
      
      - name: cron
        image: "emccorp/influxdb:3.7.0.0-1186.91aed4d8"
        imagePullPolicy: "IfNotPresent"
        command: ["bash"]
        args: ["-c", "echo /crash-dump/core-%e > /proc/sys/kernel/core_pattern; ulimit -c unlimited; GOTRACEBACK=crash export >> /etc/pod.env; cron -n"]
        env:
        - name: INFLUXDB_HTTP_PORT_DEFAULT
          value: "8086"
        - name: INFLUXDB_RPC_PORT
          value: "8088"
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        volumeMounts:
        - name: RELEASE-NAME-influxdb-data
          mountPath: /data/influxdb
        - name: config
          mountPath: /data/influxdb/conf/
        - name: log
          mountPath: /var/log
        - name: restore-ranges-cron-config
          mountPath: /etc/cron.d
        - mountPath: /crash-dump
          name: crash-dump
      volumes:
      - name: config
        configMap:
          name: RELEASE-NAME-influxdb
      - name: init
        configMap:
          name: RELEASE-NAME-influxdb-init
      
      - name: telegraf-sidecar-config
        configMap:
          name: RELEASE-NAME-telegraf-sidecar
      - name: additional-configs
        configMap:
          name: RELEASE-NAME-influxdb-telegraf-sidecar-custom-config
      - name: log
        emptyDir: {}
      - name: restore-ranges-cron-config
        configMap:
          name: RELEASE-NAME-influxdb-cron-config
      - name: crash-dump
        emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: RELEASE-NAME-influxdb-data
        annotations:
        labels:
          release: RELEASE-NAME
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "20Gi"
---
# Source: objectscale-manager/charts/objectscale-iam/templates/networkconnection.yaml
apiVersion: "ecs.dellemc.com/v1beta1"
kind: "NetworkConnection"
metadata:
  name: objectscale-iam
  namespace: dellemc-sf426-domain-c45
  labels:
    helm.sh/chart: objectscale-iam-0.71.2
    app.kubernetes.io/name: objectscale-iam
    app.kubernetes.io/component: objectscale-iam
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/namespace: "dellemc-sf426-domain-c45"
    objectscale.dellemc.com/logging-inject: "true"
    objectscale.dellemc.com/logging-release-name: RELEASE-NAME
    product: objectscale
    release: RELEASE-NAME
    app.kubernetes.io/version: "0.71.2"
    app.kubernetes.io/managed-by: Helm
  annotations:
    objectscale.dellemc.com/federationRegistration: "ObjectScale"
spec:
  service:
      ports:
      - name: https
        port: 443
        protocol: TCP
        targetPort: 9401
      - name: http
        port: 9400
        protocol: TCP
        targetPort: 9402
      type: LoadBalancer
  tls:
      certificate: {}
      certificateType: InternallySigned
      signingRequest:
        commonName: objectscale-iam
        keyAlgorithm: RSA
        keySize: 2048
        names:
          country: USA
          locality: Hopkinton
          organization: Dell EMC
          organizationalUnit: ObjectScale
          state: MA
---
# Source: objectscale-manager/charts/objectscale-monitoring/charts/rsyslog/templates/statefuldaemonset.yaml
#
# Copyright Â© [2020] Dell Inc. or its subsidiaries.
# All Rights Reserved.
#
# This software contains the intellectual property of Dell Inc.
# or is licensed to Dell Inc. from third parties. Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of Dell Inc. or its subsidiaries.
#
#

apiVersion: stateful.ecs.dellemc.com/v1alpha1
kind: StatefulDaemonSet
metadata:
  name: RELEASE-NAME-rsyslog
  labels:
    app.kubernetes.io/name: RELEASE-NAME-rsyslog
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.54.0"
    app.kubernetes.io/part-of: RELEASE-NAME
    helm.sh/chart: rsyslog-0.54.0
    release: RELEASE-NAME
spec:
  serviceName: RELEASE-NAME-rsyslog
  servicePort: 10514
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: RELEASE-NAME-rsyslog
  template:
    metadata:
      labels:
        app.kubernetes.io/name: RELEASE-NAME-rsyslog
        release: RELEASE-NAME
      annotations:
        # Include a hash of the configmap in the pod template
        # This means that if the configmap changes, the deployment will be rolled
        checksum/config: 4e26692516d5391da3356ccd059cd4773855d151b7c39e2af330b304bbef995a
    spec:
      shareProcessNamespace: true
      containers:
      - name: rsyslog
        image: "emccorp/rsyslog:3.7.0.0-1186.91aed4d8"
        imagePullPolicy: "IfNotPresent"
        ports:
        - containerPort: 10514
          name: rsyslog
        resources:
          limits:
            memory: 1024Mi
          requests:
            memory: 1024Mi
        volumeMounts:
        - mountPath: /var/log
          name: RELEASE-NAME-rsyslog-data
        - mountPath: /etc/rsyslog.conf
          name: config
          subPath: rsyslog.conf
        - mountPath: /etc/process_rsyslog_stat.py
          name: config
          subPath: process_rsyslog_stat.py
        - mountPath: /crash-dump
          name: crash-dump
        env:
          # This pulls HOSTNAME from the node, not the pod.
          - name: HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          # with rsyslog env vars below debug output can be enabled on a fly: kill -USR1 $(cat /var/run/rsyslogd.pid)
          - name: RSYSLOG_DEBUGLOG
            value: "/var/log/rsyslog_debug.log"
          - name: RSYSLOG_DEBUG
            value: "DebugOnDemand NoStdOut"
      - name: logrotate
        image: "emccorp/rsyslog:3.7.0.0-1186.91aed4d8"
        imagePullPolicy: "IfNotPresent"
        command: ["bash"]
        args: ["-c", "echo /crash-dump/core-%e > /proc/sys/kernel/core_pattern; ulimit -c unlimited; GOTRACEBACK=crash export >> /etc/pod.env && cron -n"]
        env:
          - name: LOGS_SIZE_HIGH_WATERMARK
            value: "199680000"
          - name: LOGS_SIZE_LOW_WATERMARK
            value: "189440000"
        volumeMounts:
        - mountPath: /var/log
          name: RELEASE-NAME-rsyslog-data
        - mountPath: /etc/cron.d
          name: cron-config
        - mountPath: /etc/svc_logs_priority_conf.json
          name: logrotate-config
          subPath: svc_logs_priority_conf.json
        - mountPath: /etc/logrotate.conf
          name: logrotate-config
          subPath: logrotate.conf
        - mountPath: /etc/cleanup_logs.sh
          name: cleanup-script
          subPath: cleanup_logs.sh
        - mountPath: /crash-dump
          name: crash-dump
      - name: telegraf
        image: "emccorp/telegraf:3.7.0.0-1186.91aed4d8"
        imagePullPolicy: "IfNotPresent"
        command: ["bash"]
        args: ["-c", "echo /crash-dump/core-%e > /proc/sys/kernel/core_pattern; ulimit -c unlimited; GOTRACEBACK=crash HOST_PROC=/proc telegraf --config  /etc/telegraf/telegraf.conf --config-directory /etc/telegraf/telegraf.d/"]
        volumeMounts:
        - name: RELEASE-NAME-rsyslog-data
          mountPath: /pv
        - name: telegraf-sidecar-config
          mountPath: /etc/telegraf
        - name: additional-configs
          mountPath: /etc/telegraf/telegraf.d
        env:
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
      volumes:
      - name: config
        configMap:
          name: RELEASE-NAME-rsyslog
      - name: logrotate-config
        configMap:
          name: RELEASE-NAME-rsyslog-logrotate-config
      - name: cron-config
        configMap:
          name: RELEASE-NAME-rsyslog-cron-config
      - name: cleanup-script
        configMap:
          name: RELEASE-NAME-rsyslog-client-cleanup-logs-script
          defaultMode: 0755
      - name: crash-dump
        emptyDir: {}
      - name: telegraf-sidecar-config
        configMap:
          name: RELEASE-NAME-telegraf-sidecar
      - name: additional-configs
        configMap:
          name: RELEASE-NAME-rsyslog-telegraf-sidecar-custom-config
  volumeClaimTemplates:
  - metadata:
      name: RELEASE-NAME-rsyslog-data
      annotations:
      labels:
        release: RELEASE-NAME
    spec:
      accessModes:
        - "ReadWriteOnce"
      resources:
        requests:
          storage: "200Gi"
---
# Source: objectscale-manager/charts/bookkeeper-operator/templates/post-install-upgrade-hooks.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: RELEASE-NAME-bookkeeper-operator-post-install-upgrade
  namespace: dellemc-sf426-domain-c45
  annotations:
    "helm.sh/hook": post-install, post-upgrade
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": hook-succeeded, before-hook-creation, hook-failed
---
# Source: objectscale-manager/charts/pravega-operator/templates/post-install-upgrade-hooks.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: RELEASE-NAME-pravega-operator-post-install-upgrade
  namespace: dellemc-sf426-domain-c45
  annotations:
    "helm.sh/hook": post-install, post-upgrade
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": hook-succeeded, before-hook-creation, hook-failed
---
# Source: objectscale-manager/charts/bookkeeper-operator/templates/post-install-upgrade-hooks.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: RELEASE-NAME-bookkeeper-operator-post-install-upgrade
  namespace: dellemc-sf426-domain-c45
  annotations:
      "helm.sh/hook": post-install, post-upgrade
      "helm.sh/hook-weight": "1"
      "helm.sh/hook-delete-policy": hook-succeeded, before-hook-creation, hook-failed
data:
  validations.sh: |
    #!/bin/sh
    set -e
    sleep 30

    if [ -z "$(kubectl api-resources | grep BookkeeperCluster )" ]; then
        exit 1
    fi
---
# Source: objectscale-manager/charts/pravega-operator/templates/post-install-upgrade-hooks.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: RELEASE-NAME-pravega-operator-post-install-upgrade
  namespace: dellemc-sf426-domain-c45
  annotations:
      "helm.sh/hook": post-install, post-upgrade
      "helm.sh/hook-weight": "1"
      "helm.sh/hook-delete-policy": hook-succeeded, before-hook-creation, hook-failed
data:
  validations.sh: |
    #!/bin/sh
    set -e
    sleep 30

    if [ -z "$(kubectl api-resources | grep PravegaCluster)" ]; then
        exit 1
    fi
---
# Source: objectscale-manager/charts/bookkeeper-operator/templates/post-install-upgrade-hooks.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: RELEASE-NAME-bookkeeper-operator-post-install-upgrade
  namespace: dellemc-sf426-domain-c45
  annotations:
    "helm.sh/hook": post-install, post-upgrade
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": hook-succeeded, before-hook-creation, hook-failed
rules:
- apiGroups:
  - bookkeeper.pravega.io
  resources:
  - "*"
  verbs:
  - get
- apiGroups:
  - extensions
  resources:
  - "deployments"
  verbs:
  - get
---
# Source: objectscale-manager/charts/pravega-operator/templates/post-install-upgrade-hooks.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: RELEASE-NAME-pravega-operator-post-install-upgrade
  namespace: dellemc-sf426-domain-c45
  annotations:
    "helm.sh/hook": post-install, post-upgrade
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": hook-succeeded, before-hook-creation, hook-failed
rules:
- apiGroups:
  - pravega.pravega.io
  resources:
  - "*"
  verbs:
  - get
- apiGroups:
  - extensions
  resources:
  - "deployments"
  verbs:
  - get
---
# Source: objectscale-manager/charts/bookkeeper-operator/templates/post-install-upgrade-hooks.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: RELEASE-NAME-bookkeeper-operator-post-install-upgrade
  namespace: dellemc-sf426-domain-c45
  annotations:
    "helm.sh/hook": post-install, post-upgrade
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": hook-succeeded, before-hook-creation, hook-failed
subjects:
- kind: ServiceAccount
  name: RELEASE-NAME-bookkeeper-operator-post-install-upgrade
  namespace: dellemc-sf426-domain-c45
roleRef:
  kind: Role
  name: RELEASE-NAME-bookkeeper-operator-post-install-upgrade
  apiGroup: rbac.authorization.k8s.io
---
# Source: objectscale-manager/charts/pravega-operator/templates/post-install-upgrade-hooks.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: RELEASE-NAME-pravega-operator-post-install-upgrade
  namespace: dellemc-sf426-domain-c45
  annotations:
    "helm.sh/hook": post-install, post-upgrade
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": hook-succeeded, before-hook-creation, hook-failed
subjects:
- kind: ServiceAccount
  name: RELEASE-NAME-pravega-operator-post-install-upgrade
  namespace: dellemc-sf426-domain-c45
roleRef:
  kind: Role
  name: RELEASE-NAME-pravega-operator-post-install-upgrade
  apiGroup: rbac.authorization.k8s.io
---
# Source: objectscale-manager/charts/bookkeeper-operator/templates/post-install-upgrade-hooks.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: RELEASE-NAME-bookkeeper-operator-post-install-upgrade
  namespace: dellemc-sf426-domain-c45
  annotations:
    "helm.sh/hook": post-install, post-upgrade
    "helm.sh/hook-weight": "2"
    "helm.sh/hook-delete-policy": hook-succeeded, before-hook-creation, hook-failed
spec:
  backoffLimit: 10
  template:
    metadata:
      name: RELEASE-NAME-bookkeeper-operator-post-install-upgrade
    spec:
      serviceAccountName: RELEASE-NAME-bookkeeper-operator-post-install-upgrade
      restartPolicy: Never
      containers:
      - name: post-install-upgrade-job
        image: "emccorp/k8s-kubectl:v1.16.10"
        command:
          - /scripts/validations.sh
        volumeMounts:
          - name: sh
            mountPath: /scripts
            readOnly: true
      volumes:
        - name: sh
          configMap:
            name: RELEASE-NAME-bookkeeper-operator-post-install-upgrade
            defaultMode: 0555
---
# Source: objectscale-manager/charts/pravega-operator/templates/post-install-upgrade-hooks.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: RELEASE-NAME-pravega-operator-post-install-upgrade
  namespace: dellemc-sf426-domain-c45
  annotations:
    "helm.sh/hook": post-install, post-upgrade
    "helm.sh/hook-weight": "2"
    "helm.sh/hook-delete-policy": hook-succeeded, before-hook-creation, hook-failed
spec:
  backoffLimit: 10
  template:
    metadata:
      name: RELEASE-NAME-pravega-operator-post-install-upgrade
    spec:
      serviceAccountName: RELEASE-NAME-pravega-operator-post-install-upgrade
      restartPolicy: Never
      containers:
      - name: post-install-upgrade-job
        image: "emccorp/k8s-kubectl:v1.16.10"
        command:
          - /scripts/validations.sh
        volumeMounts:
          - name: sh
            mountPath: /scripts
            readOnly: true
      volumes:
        - name: sh
          configMap:
            name: RELEASE-NAME-pravega-operator-post-install-upgrade
            defaultMode: 0555
